
RobotFirmwarev15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003260  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  00403260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20400064  004032c4  00020064  2**2
                  ALLOC
  3 .heap         00000200  20400128  00403388  00020064  2**0
                  ALLOC
  4 .stack        00000400  20400328  00403588  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ef0b  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004235  00000000  00000000  0003eff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b99a  00000000  00000000  0004322b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000de8  00000000  00000000  0004ebc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cb8  00000000  00000000  0004f9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004583f  00000000  00000000  00050665  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001aaf0  00000000  00000000  00095ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001590d1  00000000  00000000  000b0994  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ad4  00000000  00000000  00209a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 07 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     (.@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 45 10 40 00     ..@...@.....E.@.
  40006c:	39 10 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     9.@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	dd 11 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400064 	.word	0x20400064
  400184:	00000000 	.word	0x00000000
  400188:	00403260 	.word	0x00403260

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00403260 	.word	0x00403260
  4001c8:	20400068 	.word	0x20400068
  4001cc:	00403260 	.word	0x00403260
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400545 	.word	0x00400545
  4001e4:	00401db5 	.word	0x00401db5

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00403260 	.word	0x00403260
  400238:	20400064 	.word	0x20400064
  40023c:	20400064 	.word	0x20400064
  400240:	20400128 	.word	0x20400128
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401dd5 	.word	0x00401dd5
  400250:	004019b9 	.word	0x004019b9

00400254 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400258:	4b01      	ldr	r3, [pc, #4]	; (400260 <ADC_0_PORT_init+0xc>)
  40025a:	601a      	str	r2, [r3, #0]
  40025c:	4770      	bx	lr
  40025e:	bf00      	nop
  400260:	400e1400 	.word	0x400e1400

00400264 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <ADC_0_CLOCK_init+0x14>)
  400266:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400268:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40026c:	d103      	bne.n	400276 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40026e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400272:	4b01      	ldr	r3, [pc, #4]	; (400278 <ADC_0_CLOCK_init+0x14>)
  400274:	611a      	str	r2, [r3, #16]
  400276:	4770      	bx	lr
  400278:	400e0600 	.word	0x400e0600

0040027c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40027c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40027e:	4b05      	ldr	r3, [pc, #20]	; (400294 <ADC_0_init+0x18>)
  400280:	4798      	blx	r3
	ADC_0_PORT_init();
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <ADC_0_init+0x1c>)
  400284:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400286:	2200      	movs	r2, #0
  400288:	4904      	ldr	r1, [pc, #16]	; (40029c <ADC_0_init+0x20>)
  40028a:	4805      	ldr	r0, [pc, #20]	; (4002a0 <ADC_0_init+0x24>)
  40028c:	4b05      	ldr	r3, [pc, #20]	; (4002a4 <ADC_0_init+0x28>)
  40028e:	4798      	blx	r3
  400290:	bd08      	pop	{r3, pc}
  400292:	bf00      	nop
  400294:	00400265 	.word	0x00400265
  400298:	00400255 	.word	0x00400255
  40029c:	4003c000 	.word	0x4003c000
  4002a0:	204000e0 	.word	0x204000e0
  4002a4:	0040061d 	.word	0x0040061d

004002a8 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4002a8:	4b03      	ldr	r3, [pc, #12]	; (4002b8 <EXTERNAL_IRQ_1_init+0x10>)
  4002aa:	2202      	movs	r2, #2
  4002ac:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4002ae:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4002b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002b4:	601a      	str	r2, [r3, #0]
  4002b6:	4770      	bx	lr
  4002b8:	400e1000 	.word	0x400e1000

004002bc <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4002bc:	4b03      	ldr	r3, [pc, #12]	; (4002cc <EXTERNAL_IRQ_0_init+0x10>)
  4002be:	2220      	movs	r2, #32
  4002c0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002c2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002c8:	601a      	str	r2, [r3, #0]
  4002ca:	4770      	bx	lr
  4002cc:	400e0e00 	.word	0x400e0e00

004002d0 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002d0:	4b18      	ldr	r3, [pc, #96]	; (400334 <PWM_0_PORT_init+0x64>)
  4002d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002d8:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4002e0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002e6:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002e8:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4002ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002ee:	f022 0204 	bic.w	r2, r2, #4
  4002f2:	671a      	str	r2, [r3, #112]	; 0x70
  4002f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002f6:	f022 0204 	bic.w	r2, r2, #4
  4002fa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002fc:	2204      	movs	r2, #4
  4002fe:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400306:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40030a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40030c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40030e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  400312:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400314:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400318:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40031a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40031c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400320:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400322:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400328:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40032a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40032e:	605a      	str	r2, [r3, #4]
  400330:	4770      	bx	lr
  400332:	bf00      	nop
  400334:	400e1400 	.word	0x400e1400

00400338 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400338:	4b04      	ldr	r3, [pc, #16]	; (40034c <PWM_0_CLOCK_init+0x14>)
  40033a:	699b      	ldr	r3, [r3, #24]
  40033c:	2b00      	cmp	r3, #0
  40033e:	db03      	blt.n	400348 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400340:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400344:	4b01      	ldr	r3, [pc, #4]	; (40034c <PWM_0_CLOCK_init+0x14>)
  400346:	611a      	str	r2, [r3, #16]
  400348:	4770      	bx	lr
  40034a:	bf00      	nop
  40034c:	400e0600 	.word	0x400e0600

00400350 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400350:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400352:	4b06      	ldr	r3, [pc, #24]	; (40036c <PWM_0_init+0x1c>)
  400354:	4798      	blx	r3
	PWM_0_PORT_init();
  400356:	4b06      	ldr	r3, [pc, #24]	; (400370 <PWM_0_init+0x20>)
  400358:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40035a:	4b06      	ldr	r3, [pc, #24]	; (400374 <PWM_0_init+0x24>)
  40035c:	4798      	blx	r3
  40035e:	4602      	mov	r2, r0
  400360:	4905      	ldr	r1, [pc, #20]	; (400378 <PWM_0_init+0x28>)
  400362:	4806      	ldr	r0, [pc, #24]	; (40037c <PWM_0_init+0x2c>)
  400364:	4b06      	ldr	r3, [pc, #24]	; (400380 <PWM_0_init+0x30>)
  400366:	4798      	blx	r3
  400368:	bd08      	pop	{r3, pc}
  40036a:	bf00      	nop
  40036c:	00400339 	.word	0x00400339
  400370:	004002d1 	.word	0x004002d1
  400374:	00401329 	.word	0x00401329
  400378:	40020000 	.word	0x40020000
  40037c:	204000b8 	.word	0x204000b8
  400380:	00400945 	.word	0x00400945

00400384 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400384:	4b11      	ldr	r3, [pc, #68]	; (4003cc <SPI_0_PORT_init+0x48>)
  400386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400388:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40038c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40038e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400390:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400394:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40039a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40039c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40039e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4003a2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4003aa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003b0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4003b8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003bc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4003c0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003c6:	605a      	str	r2, [r3, #4]
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	400e1400 	.word	0x400e1400

004003d0 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003d0:	4b04      	ldr	r3, [pc, #16]	; (4003e4 <SPI_0_CLOCK_init+0x14>)
  4003d2:	699b      	ldr	r3, [r3, #24]
  4003d4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4003d8:	d103      	bne.n	4003e2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003de:	4b01      	ldr	r3, [pc, #4]	; (4003e4 <SPI_0_CLOCK_init+0x14>)
  4003e0:	611a      	str	r2, [r3, #16]
  4003e2:	4770      	bx	lr
  4003e4:	400e0600 	.word	0x400e0600

004003e8 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void SPI_0_init(void)
{
  4003e8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <SPI_0_init+0x24>)
  4003ec:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4003ee:	4b08      	ldr	r3, [pc, #32]	; (400410 <SPI_0_init+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4c08      	ldr	r4, [pc, #32]	; (400414 <SPI_0_init+0x2c>)
  4003f4:	4601      	mov	r1, r0
  4003f6:	4620      	mov	r0, r4
  4003f8:	4b07      	ldr	r3, [pc, #28]	; (400418 <SPI_0_init+0x30>)
  4003fa:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4003fc:	4907      	ldr	r1, [pc, #28]	; (40041c <SPI_0_init+0x34>)
  4003fe:	4620      	mov	r0, r4
  400400:	4b07      	ldr	r3, [pc, #28]	; (400420 <SPI_0_init+0x38>)
  400402:	4798      	blx	r3
	SPI_0_PORT_init();
  400404:	4b07      	ldr	r3, [pc, #28]	; (400424 <SPI_0_init+0x3c>)
  400406:	4798      	blx	r3
  400408:	bd10      	pop	{r4, pc}
  40040a:	bf00      	nop
  40040c:	004003d1 	.word	0x004003d1
  400410:	00401529 	.word	0x00401529
  400414:	204000e4 	.word	0x204000e4
  400418:	00400989 	.word	0x00400989
  40041c:	40008000 	.word	0x40008000
  400420:	004009a9 	.word	0x004009a9
  400424:	00400385 	.word	0x00400385

00400428 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400428:	4b0a      	ldr	r3, [pc, #40]	; (400454 <I2C_0_PORT_init+0x2c>)
  40042a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40042c:	f022 0210 	bic.w	r2, r2, #16
  400430:	671a      	str	r2, [r3, #112]	; 0x70
  400432:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400434:	f022 0210 	bic.w	r2, r2, #16
  400438:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40043a:	2210      	movs	r2, #16
  40043c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40043e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400440:	f022 0208 	bic.w	r2, r2, #8
  400444:	671a      	str	r2, [r3, #112]	; 0x70
  400446:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400448:	f022 0208 	bic.w	r2, r2, #8
  40044c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40044e:	2208      	movs	r2, #8
  400450:	605a      	str	r2, [r3, #4]
  400452:	4770      	bx	lr
  400454:	400e0e00 	.word	0x400e0e00

00400458 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400458:	4b04      	ldr	r3, [pc, #16]	; (40046c <I2C_0_CLOCK_init+0x14>)
  40045a:	699b      	ldr	r3, [r3, #24]
  40045c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400460:	d103      	bne.n	40046a <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400462:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400466:	4b01      	ldr	r3, [pc, #4]	; (40046c <I2C_0_CLOCK_init+0x14>)
  400468:	611a      	str	r2, [r3, #16]
  40046a:	4770      	bx	lr
  40046c:	400e0600 	.word	0x400e0600

00400470 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400470:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  400472:	4b04      	ldr	r3, [pc, #16]	; (400484 <I2C_0_init+0x14>)
  400474:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400476:	4904      	ldr	r1, [pc, #16]	; (400488 <I2C_0_init+0x18>)
  400478:	4804      	ldr	r0, [pc, #16]	; (40048c <I2C_0_init+0x1c>)
  40047a:	4b05      	ldr	r3, [pc, #20]	; (400490 <I2C_0_init+0x20>)
  40047c:	4798      	blx	r3

	I2C_0_PORT_init();
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <I2C_0_init+0x24>)
  400480:	4798      	blx	r3
  400482:	bd08      	pop	{r3, pc}
  400484:	00400459 	.word	0x00400459
  400488:	40018000 	.word	0x40018000
  40048c:	204000fc 	.word	0x204000fc
  400490:	00400891 	.word	0x00400891
  400494:	00400429 	.word	0x00400429

00400498 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400498:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40049a:	4802      	ldr	r0, [pc, #8]	; (4004a4 <delay_driver_init+0xc>)
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <delay_driver_init+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	bd08      	pop	{r3, pc}
  4004a2:	bf00      	nop
  4004a4:	e000e010 	.word	0xe000e010
  4004a8:	00400695 	.word	0x00400695

004004ac <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004ac:	4b0f      	ldr	r3, [pc, #60]	; (4004ec <TARGET_IO_PORT_init+0x40>)
  4004ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004b4:	671a      	str	r2, [r3, #112]	; 0x70
  4004b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004c2:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4004c4:	4a0a      	ldr	r2, [pc, #40]	; (4004f0 <TARGET_IO_PORT_init+0x44>)
  4004c6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ca:	f043 0310 	orr.w	r3, r3, #16
  4004ce:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004d2:	4b08      	ldr	r3, [pc, #32]	; (4004f4 <TARGET_IO_PORT_init+0x48>)
  4004d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004d6:	f042 0210 	orr.w	r2, r2, #16
  4004da:	671a      	str	r2, [r3, #112]	; 0x70
  4004dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004de:	f042 0210 	orr.w	r2, r2, #16
  4004e2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004e4:	2210      	movs	r2, #16
  4004e6:	605a      	str	r2, [r3, #4]
  4004e8:	4770      	bx	lr
  4004ea:	bf00      	nop
  4004ec:	400e0e00 	.word	0x400e0e00
  4004f0:	40088000 	.word	0x40088000
  4004f4:	400e1000 	.word	0x400e1000

004004f8 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004f8:	4b04      	ldr	r3, [pc, #16]	; (40050c <TARGET_IO_CLOCK_init+0x14>)
  4004fa:	699b      	ldr	r3, [r3, #24]
  4004fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400500:	d103      	bne.n	40050a <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400506:	4b01      	ldr	r3, [pc, #4]	; (40050c <TARGET_IO_CLOCK_init+0x14>)
  400508:	611a      	str	r2, [r3, #16]
  40050a:	4770      	bx	lr
  40050c:	400e0600 	.word	0x400e0600

00400510 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  400510:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  400512:	4b06      	ldr	r3, [pc, #24]	; (40052c <TARGET_IO_init+0x1c>)
  400514:	4798      	blx	r3
	TARGET_IO_PORT_init();
  400516:	4b06      	ldr	r3, [pc, #24]	; (400530 <TARGET_IO_init+0x20>)
  400518:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  40051a:	4b06      	ldr	r3, [pc, #24]	; (400534 <TARGET_IO_init+0x24>)
  40051c:	4798      	blx	r3
  40051e:	4602      	mov	r2, r0
  400520:	4905      	ldr	r1, [pc, #20]	; (400538 <TARGET_IO_init+0x28>)
  400522:	4806      	ldr	r0, [pc, #24]	; (40053c <TARGET_IO_init+0x2c>)
  400524:	4b06      	ldr	r3, [pc, #24]	; (400540 <TARGET_IO_init+0x30>)
  400526:	4798      	blx	r3
  400528:	bd08      	pop	{r3, pc}
  40052a:	bf00      	nop
  40052c:	004004f9 	.word	0x004004f9
  400530:	004004ad 	.word	0x004004ad
  400534:	00401989 	.word	0x00401989
  400538:	40028000 	.word	0x40028000
  40053c:	204000d4 	.word	0x204000d4
  400540:	00400bd5 	.word	0x00400bd5

00400544 <system_init>:
}

void system_init(void)
{
  400544:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400546:	4b28      	ldr	r3, [pc, #160]	; (4005e8 <system_init+0xa4>)
  400548:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40054a:	4b28      	ldr	r3, [pc, #160]	; (4005ec <system_init+0xa8>)
  40054c:	699b      	ldr	r3, [r3, #24]
  40054e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400552:	d103      	bne.n	40055c <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400554:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400558:	4b24      	ldr	r3, [pc, #144]	; (4005ec <system_init+0xa8>)
  40055a:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40055c:	4b23      	ldr	r3, [pc, #140]	; (4005ec <system_init+0xa8>)
  40055e:	699b      	ldr	r3, [r3, #24]
  400560:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400564:	d103      	bne.n	40056e <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400566:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40056a:	4b20      	ldr	r3, [pc, #128]	; (4005ec <system_init+0xa8>)
  40056c:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40056e:	4b1f      	ldr	r3, [pc, #124]	; (4005ec <system_init+0xa8>)
  400570:	699b      	ldr	r3, [r3, #24]
  400572:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400576:	d103      	bne.n	400580 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40057c:	4b1b      	ldr	r3, [pc, #108]	; (4005ec <system_init+0xa8>)
  40057e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400580:	4b1a      	ldr	r3, [pc, #104]	; (4005ec <system_init+0xa8>)
  400582:	699b      	ldr	r3, [r3, #24]
  400584:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400588:	d103      	bne.n	400592 <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40058a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40058e:	4b17      	ldr	r3, [pc, #92]	; (4005ec <system_init+0xa8>)
  400590:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400592:	4a17      	ldr	r2, [pc, #92]	; (4005f0 <system_init+0xac>)
  400594:	6853      	ldr	r3, [r2, #4]
  400596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40059a:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_SODR = mask;
  40059c:	4b15      	ldr	r3, [pc, #84]	; (4005f4 <system_init+0xb0>)
  40059e:	2201      	movs	r2, #1
  4005a0:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4005a2:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005a4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4005aa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4005ae:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005b0:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005b2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4005b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4005bc:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005be:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005c0:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(RF24_CE, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(RF24_CE, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4005c2:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <system_init+0xb4>)
  4005c4:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  4005c6:	4b0d      	ldr	r3, [pc, #52]	; (4005fc <system_init+0xb8>)
  4005c8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  4005ca:	4b0d      	ldr	r3, [pc, #52]	; (400600 <system_init+0xbc>)
  4005cc:	4798      	blx	r3

	PWM_0_init();
  4005ce:	4b0d      	ldr	r3, [pc, #52]	; (400604 <system_init+0xc0>)
  4005d0:	4798      	blx	r3

	SPI_0_init();
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <system_init+0xc4>)
  4005d4:	4798      	blx	r3

	I2C_0_init();
  4005d6:	4b0d      	ldr	r3, [pc, #52]	; (40060c <system_init+0xc8>)
  4005d8:	4798      	blx	r3

	delay_driver_init();
  4005da:	4b0d      	ldr	r3, [pc, #52]	; (400610 <system_init+0xcc>)
  4005dc:	4798      	blx	r3

	TARGET_IO_init();
  4005de:	4b0d      	ldr	r3, [pc, #52]	; (400614 <system_init+0xd0>)
  4005e0:	4798      	blx	r3

	ext_irq_init();
  4005e2:	4b0d      	ldr	r3, [pc, #52]	; (400618 <system_init+0xd4>)
  4005e4:	4798      	blx	r3
  4005e6:	bd08      	pop	{r3, pc}
  4005e8:	00400dc9 	.word	0x00400dc9
  4005ec:	400e0600 	.word	0x400e0600
  4005f0:	400e1850 	.word	0x400e1850
  4005f4:	400e0e00 	.word	0x400e0e00
  4005f8:	0040027d 	.word	0x0040027d
  4005fc:	004002a9 	.word	0x004002a9
  400600:	004002bd 	.word	0x004002bd
  400604:	00400351 	.word	0x00400351
  400608:	004003e9 	.word	0x004003e9
  40060c:	00400471 	.word	0x00400471
  400610:	00400499 	.word	0x00400499
  400614:	00400511 	.word	0x00400511
  400618:	0040072d 	.word	0x0040072d

0040061c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  40061c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40061e:	4604      	mov	r4, r0
  400620:	460d      	mov	r5, r1
  400622:	2800      	cmp	r0, #0
  400624:	bf18      	it	ne
  400626:	2900      	cmpne	r1, #0
  400628:	bf14      	ite	ne
  40062a:	2001      	movne	r0, #1
  40062c:	2000      	moveq	r0, #0
  40062e:	2239      	movs	r2, #57	; 0x39
  400630:	4903      	ldr	r1, [pc, #12]	; (400640 <adc_sync_init+0x24>)
  400632:	4b04      	ldr	r3, [pc, #16]	; (400644 <adc_sync_init+0x28>)
  400634:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400636:	4629      	mov	r1, r5
  400638:	4620      	mov	r0, r4
  40063a:	4b03      	ldr	r3, [pc, #12]	; (400648 <adc_sync_init+0x2c>)
  40063c:	4798      	blx	r3
}
  40063e:	bd38      	pop	{r3, r4, r5, pc}
  400640:	00402f04 	.word	0x00402f04
  400644:	00400c49 	.word	0x00400c49
  400648:	00400d69 	.word	0x00400d69

0040064c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  40064c:	b538      	push	{r3, r4, r5, lr}
  40064e:	460d      	mov	r5, r1
	ASSERT(descr);
  400650:	4604      	mov	r4, r0
  400652:	224e      	movs	r2, #78	; 0x4e
  400654:	4905      	ldr	r1, [pc, #20]	; (40066c <adc_sync_enable_channel+0x20>)
  400656:	3000      	adds	r0, #0
  400658:	bf18      	it	ne
  40065a:	2001      	movne	r0, #1
  40065c:	4b04      	ldr	r3, [pc, #16]	; (400670 <adc_sync_enable_channel+0x24>)
  40065e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400660:	4629      	mov	r1, r5
  400662:	4620      	mov	r0, r4
  400664:	4b03      	ldr	r3, [pc, #12]	; (400674 <adc_sync_enable_channel+0x28>)
  400666:	4798      	blx	r3

	return ERR_NONE;
}
  400668:	2000      	movs	r0, #0
  40066a:	bd38      	pop	{r3, r4, r5, pc}
  40066c:	00402f04 	.word	0x00402f04
  400670:	00400c49 	.word	0x00400c49
  400674:	00400da1 	.word	0x00400da1

00400678 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400678:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40067c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40067e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400680:	f3bf 8f5f 	dmb	sy
  400684:	4770      	bx	lr

00400686 <atomic_leave_critical>:
  400686:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40068a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40068c:	f383 8810 	msr	PRIMASK, r3
  400690:	4770      	bx	lr
	...

00400694 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400694:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400696:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <delay_init+0xc>)
  400698:	6018      	str	r0, [r3, #0]
  40069a:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <delay_init+0x10>)
  40069c:	4798      	blx	r3
  40069e:	bd08      	pop	{r3, pc}
  4006a0:	20400080 	.word	0x20400080
  4006a4:	00401541 	.word	0x00401541

004006a8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4006a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4006aa:	4b04      	ldr	r3, [pc, #16]	; (4006bc <delay_us+0x14>)
  4006ac:	681c      	ldr	r4, [r3, #0]
  4006ae:	4b04      	ldr	r3, [pc, #16]	; (4006c0 <delay_us+0x18>)
  4006b0:	4798      	blx	r3
  4006b2:	4601      	mov	r1, r0
  4006b4:	4620      	mov	r0, r4
  4006b6:	4b03      	ldr	r3, [pc, #12]	; (4006c4 <delay_us+0x1c>)
  4006b8:	4798      	blx	r3
  4006ba:	bd10      	pop	{r4, pc}
  4006bc:	20400080 	.word	0x20400080
  4006c0:	00400dad 	.word	0x00400dad
  4006c4:	0040154d 	.word	0x0040154d

004006c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4006c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4006ca:	4b04      	ldr	r3, [pc, #16]	; (4006dc <delay_ms+0x14>)
  4006cc:	681c      	ldr	r4, [r3, #0]
  4006ce:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <delay_ms+0x18>)
  4006d0:	4798      	blx	r3
  4006d2:	4601      	mov	r1, r0
  4006d4:	4620      	mov	r0, r4
  4006d6:	4b03      	ldr	r3, [pc, #12]	; (4006e4 <delay_ms+0x1c>)
  4006d8:	4798      	blx	r3
  4006da:	bd10      	pop	{r4, pc}
  4006dc:	20400080 	.word	0x20400080
  4006e0:	00400db7 	.word	0x00400db7
  4006e4:	0040154d 	.word	0x0040154d

004006e8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4006e8:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4006ea:	2502      	movs	r5, #2
  4006ec:	2400      	movs	r4, #0

	while (upper >= lower) {
  4006ee:	e007      	b.n	400700 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4006f0:	4a0d      	ldr	r2, [pc, #52]	; (400728 <process_ext_irq+0x40>)
  4006f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4006f6:	b1b3      	cbz	r3, 400726 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4006f8:	4798      	blx	r3
  4006fa:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4006fc:	3a01      	subs	r2, #1
  4006fe:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400700:	42ac      	cmp	r4, r5
  400702:	d810      	bhi.n	400726 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400704:	192b      	adds	r3, r5, r4
  400706:	105b      	asrs	r3, r3, #1
  400708:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40070a:	2a01      	cmp	r2, #1
  40070c:	d80b      	bhi.n	400726 <process_ext_irq+0x3e>
  40070e:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400710:	4905      	ldr	r1, [pc, #20]	; (400728 <process_ext_irq+0x40>)
  400712:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400716:	6849      	ldr	r1, [r1, #4]
  400718:	4281      	cmp	r1, r0
  40071a:	d0e9      	beq.n	4006f0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  40071c:	4281      	cmp	r1, r0
  40071e:	d2ed      	bcs.n	4006fc <process_ext_irq+0x14>
			lower = middle + 1;
  400720:	3201      	adds	r2, #1
  400722:	b2d4      	uxtb	r4, r2
  400724:	e7ec      	b.n	400700 <process_ext_irq+0x18>
  400726:	bd38      	pop	{r3, r4, r5, pc}
  400728:	20400084 	.word	0x20400084

0040072c <ext_irq_init>:
{
  40072c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40072e:	2300      	movs	r3, #0
  400730:	e00a      	b.n	400748 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400732:	4a08      	ldr	r2, [pc, #32]	; (400754 <ext_irq_init+0x28>)
  400734:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400738:	f04f 30ff 	mov.w	r0, #4294967295
  40073c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40073e:	2100      	movs	r1, #0
  400740:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400744:	3301      	adds	r3, #1
  400746:	b29b      	uxth	r3, r3
  400748:	2b01      	cmp	r3, #1
  40074a:	d9f2      	bls.n	400732 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  40074c:	4802      	ldr	r0, [pc, #8]	; (400758 <ext_irq_init+0x2c>)
  40074e:	4b03      	ldr	r3, [pc, #12]	; (40075c <ext_irq_init+0x30>)
  400750:	4798      	blx	r3
}
  400752:	bd08      	pop	{r3, pc}
  400754:	20400084 	.word	0x20400084
  400758:	004006e9 	.word	0x004006e9
  40075c:	00401051 	.word	0x00401051

00400760 <ext_irq_register>:
{
  400760:	b5f0      	push	{r4, r5, r6, r7, lr}
  400762:	b083      	sub	sp, #12
  400764:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400766:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400768:	2b01      	cmp	r3, #1
  40076a:	d80e      	bhi.n	40078a <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  40076c:	4618      	mov	r0, r3
  40076e:	4a2e      	ldr	r2, [pc, #184]	; (400828 <ext_irq_register+0xc8>)
  400770:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400774:	6852      	ldr	r2, [r2, #4]
  400776:	42aa      	cmp	r2, r5
  400778:	d002      	beq.n	400780 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40077a:	3301      	adds	r3, #1
  40077c:	b2db      	uxtb	r3, r3
  40077e:	e7f3      	b.n	400768 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400780:	4b29      	ldr	r3, [pc, #164]	; (400828 <ext_irq_register+0xc8>)
  400782:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400786:	2701      	movs	r7, #1
			break;
  400788:	e000      	b.n	40078c <ext_irq_register+0x2c>
	bool    found = false;
  40078a:	2700      	movs	r7, #0
	if (NULL == cb) {
  40078c:	b159      	cbz	r1, 4007a6 <ext_irq_register+0x46>
	if (!found) {
  40078e:	2f00      	cmp	r7, #0
  400790:	d13d      	bne.n	40080e <ext_irq_register+0xae>
  400792:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400794:	2e01      	cmp	r6, #1
  400796:	d813      	bhi.n	4007c0 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400798:	4b23      	ldr	r3, [pc, #140]	; (400828 <ext_irq_register+0xc8>)
  40079a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  40079e:	b143      	cbz	r3, 4007b2 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4007a0:	3601      	adds	r6, #1
  4007a2:	b2f6      	uxtb	r6, r6
  4007a4:	e7f6      	b.n	400794 <ext_irq_register+0x34>
		if (!found) {
  4007a6:	2f00      	cmp	r7, #0
  4007a8:	d038      	beq.n	40081c <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4007aa:	4628      	mov	r0, r5
  4007ac:	4b1f      	ldr	r3, [pc, #124]	; (40082c <ext_irq_register+0xcc>)
  4007ae:	4798      	blx	r3
  4007b0:	e032      	b.n	400818 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4007b2:	4b1d      	ldr	r3, [pc, #116]	; (400828 <ext_irq_register+0xc8>)
  4007b4:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4007b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4007bc:	605d      	str	r5, [r3, #4]
				found           = true;
  4007be:	2701      	movs	r7, #1
  4007c0:	2300      	movs	r3, #0
  4007c2:	e001      	b.n	4007c8 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4007c4:	3301      	adds	r3, #1
  4007c6:	b2db      	uxtb	r3, r3
  4007c8:	2b01      	cmp	r3, #1
  4007ca:	bf98      	it	ls
  4007cc:	2e01      	cmpls	r6, #1
  4007ce:	d81e      	bhi.n	40080e <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4007d0:	46b6      	mov	lr, r6
  4007d2:	4a15      	ldr	r2, [pc, #84]	; (400828 <ext_irq_register+0xc8>)
  4007d4:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  4007d8:	6848      	ldr	r0, [r1, #4]
  4007da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4007de:	6852      	ldr	r2, [r2, #4]
  4007e0:	4290      	cmp	r0, r2
  4007e2:	d2ef      	bcs.n	4007c4 <ext_irq_register+0x64>
  4007e4:	f1b2 3fff 	cmp.w	r2, #4294967295
  4007e8:	d0ec      	beq.n	4007c4 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  4007ea:	4c0f      	ldr	r4, [pc, #60]	; (400828 <ext_irq_register+0xc8>)
  4007ec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  4007f0:	e892 0003 	ldmia.w	r2, {r0, r1}
  4007f4:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  4007f8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  4007fc:	e894 0003 	ldmia.w	r4, {r0, r1}
  400800:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400804:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400808:	e884 0003 	stmia.w	r4, {r0, r1}
  40080c:	e7da      	b.n	4007c4 <ext_irq_register+0x64>
	if (!found) {
  40080e:	b147      	cbz	r7, 400822 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400810:	2101      	movs	r1, #1
  400812:	4628      	mov	r0, r5
  400814:	4b05      	ldr	r3, [pc, #20]	; (40082c <ext_irq_register+0xcc>)
  400816:	4798      	blx	r3
}
  400818:	b003      	add	sp, #12
  40081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  40081c:	f06f 000c 	mvn.w	r0, #12
  400820:	e7fa      	b.n	400818 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400822:	f06f 000c 	mvn.w	r0, #12
  400826:	e7f7      	b.n	400818 <ext_irq_register+0xb8>
  400828:	20400084 	.word	0x20400084
  40082c:	00401079 	.word	0x00401079

00400830 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400830:	b510      	push	{r4, lr}
  400832:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400834:	8903      	ldrh	r3, [r0, #8]
  400836:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  40083a:	4614      	mov	r4, r2
  40083c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  40083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400842:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400846:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400848:	a901      	add	r1, sp, #4
  40084a:	3814      	subs	r0, #20
  40084c:	4b03      	ldr	r3, [pc, #12]	; (40085c <i2c_m_sync_write+0x2c>)
  40084e:	4798      	blx	r3

	if (ret) {
  400850:	b910      	cbnz	r0, 400858 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  400852:	4620      	mov	r0, r4
  400854:	b004      	add	sp, #16
  400856:	bd10      	pop	{r4, pc}
		return ret;
  400858:	4604      	mov	r4, r0
  40085a:	e7fa      	b.n	400852 <i2c_m_sync_write+0x22>
  40085c:	0040160d 	.word	0x0040160d

00400860 <i2c_m_sync_read>:
{
  400860:	b510      	push	{r4, lr}
  400862:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400864:	8903      	ldrh	r3, [r0, #8]
  400866:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  40086a:	4614      	mov	r4, r2
  40086c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  40086e:	f248 0301 	movw	r3, #32769	; 0x8001
  400872:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  400876:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400878:	a901      	add	r1, sp, #4
  40087a:	3814      	subs	r0, #20
  40087c:	4b03      	ldr	r3, [pc, #12]	; (40088c <i2c_m_sync_read+0x2c>)
  40087e:	4798      	blx	r3
	if (ret) {
  400880:	b910      	cbnz	r0, 400888 <i2c_m_sync_read+0x28>
}
  400882:	4620      	mov	r0, r4
  400884:	b004      	add	sp, #16
  400886:	bd10      	pop	{r4, pc}
		return ret;
  400888:	4604      	mov	r4, r0
  40088a:	e7fa      	b.n	400882 <i2c_m_sync_read+0x22>
  40088c:	0040160d 	.word	0x0040160d

00400890 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400890:	b538      	push	{r3, r4, r5, lr}
  400892:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400894:	4604      	mov	r4, r0
  400896:	225e      	movs	r2, #94	; 0x5e
  400898:	4908      	ldr	r1, [pc, #32]	; (4008bc <i2c_m_sync_init+0x2c>)
  40089a:	3000      	adds	r0, #0
  40089c:	bf18      	it	ne
  40089e:	2001      	movne	r0, #1
  4008a0:	4b07      	ldr	r3, [pc, #28]	; (4008c0 <i2c_m_sync_init+0x30>)
  4008a2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  4008a4:	4629      	mov	r1, r5
  4008a6:	4620      	mov	r0, r4
  4008a8:	4b06      	ldr	r3, [pc, #24]	; (4008c4 <i2c_m_sync_init+0x34>)
  4008aa:	4798      	blx	r3
	if (init_status) {
  4008ac:	4603      	mov	r3, r0
  4008ae:	b918      	cbnz	r0, 4008b8 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  4008b0:	4a05      	ldr	r2, [pc, #20]	; (4008c8 <i2c_m_sync_init+0x38>)
  4008b2:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  4008b4:	4a05      	ldr	r2, [pc, #20]	; (4008cc <i2c_m_sync_init+0x3c>)
  4008b6:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  4008b8:	4618      	mov	r0, r3
  4008ba:	bd38      	pop	{r3, r4, r5, pc}
  4008bc:	00402f20 	.word	0x00402f20
  4008c0:	00400c49 	.word	0x00400c49
  4008c4:	004015c5 	.word	0x004015c5
  4008c8:	00400861 	.word	0x00400861
  4008cc:	00400831 	.word	0x00400831

004008d0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4008d0:	b570      	push	{r4, r5, r6, lr}
  4008d2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4008d4:	4604      	mov	r4, r0
  4008d6:	460d      	mov	r5, r1
  4008d8:	2800      	cmp	r0, #0
  4008da:	bf18      	it	ne
  4008dc:	2900      	cmpne	r1, #0
  4008de:	bf14      	ite	ne
  4008e0:	2001      	movne	r0, #1
  4008e2:	2000      	moveq	r0, #0
  4008e4:	2234      	movs	r2, #52	; 0x34
  4008e6:	4904      	ldr	r1, [pc, #16]	; (4008f8 <io_write+0x28>)
  4008e8:	4b04      	ldr	r3, [pc, #16]	; (4008fc <io_write+0x2c>)
  4008ea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4008ec:	6823      	ldr	r3, [r4, #0]
  4008ee:	4632      	mov	r2, r6
  4008f0:	4629      	mov	r1, r5
  4008f2:	4620      	mov	r0, r4
  4008f4:	4798      	blx	r3
}
  4008f6:	bd70      	pop	{r4, r5, r6, pc}
  4008f8:	00402f3c 	.word	0x00402f3c
  4008fc:	00400c49 	.word	0x00400c49

00400900 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400900:	b570      	push	{r4, r5, r6, lr}
  400902:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400904:	4604      	mov	r4, r0
  400906:	460d      	mov	r5, r1
  400908:	2800      	cmp	r0, #0
  40090a:	bf18      	it	ne
  40090c:	2900      	cmpne	r1, #0
  40090e:	bf14      	ite	ne
  400910:	2001      	movne	r0, #1
  400912:	2000      	moveq	r0, #0
  400914:	223d      	movs	r2, #61	; 0x3d
  400916:	4904      	ldr	r1, [pc, #16]	; (400928 <io_read+0x28>)
  400918:	4b04      	ldr	r3, [pc, #16]	; (40092c <io_read+0x2c>)
  40091a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40091c:	6863      	ldr	r3, [r4, #4]
  40091e:	4632      	mov	r2, r6
  400920:	4629      	mov	r1, r5
  400922:	4620      	mov	r0, r4
  400924:	4798      	blx	r3
}
  400926:	bd70      	pop	{r4, r5, r6, pc}
  400928:	00402f3c 	.word	0x00402f3c
  40092c:	00400c49 	.word	0x00400c49

00400930 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400930:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400932:	6943      	ldr	r3, [r0, #20]
  400934:	b103      	cbz	r3, 400938 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400936:	4798      	blx	r3
  400938:	bd08      	pop	{r3, pc}

0040093a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40093a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  40093c:	6983      	ldr	r3, [r0, #24]
  40093e:	b103      	cbz	r3, 400942 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400940:	4798      	blx	r3
  400942:	bd08      	pop	{r3, pc}

00400944 <pwm_init>:
{
  400944:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400946:	4604      	mov	r4, r0
  400948:	460d      	mov	r5, r1
  40094a:	2800      	cmp	r0, #0
  40094c:	bf18      	it	ne
  40094e:	2900      	cmpne	r1, #0
  400950:	bf14      	ite	ne
  400952:	2001      	movne	r0, #1
  400954:	2000      	moveq	r0, #0
  400956:	2233      	movs	r2, #51	; 0x33
  400958:	4906      	ldr	r1, [pc, #24]	; (400974 <pwm_init+0x30>)
  40095a:	4b07      	ldr	r3, [pc, #28]	; (400978 <pwm_init+0x34>)
  40095c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40095e:	4629      	mov	r1, r5
  400960:	4620      	mov	r0, r4
  400962:	4b06      	ldr	r3, [pc, #24]	; (40097c <pwm_init+0x38>)
  400964:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400966:	4b06      	ldr	r3, [pc, #24]	; (400980 <pwm_init+0x3c>)
  400968:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  40096a:	4b06      	ldr	r3, [pc, #24]	; (400984 <pwm_init+0x40>)
  40096c:	6063      	str	r3, [r4, #4]
}
  40096e:	2000      	movs	r0, #0
  400970:	bd38      	pop	{r3, r4, r5, pc}
  400972:	bf00      	nop
  400974:	00402f50 	.word	0x00402f50
  400978:	00400c49 	.word	0x00400c49
  40097c:	004011f1 	.word	0x004011f1
  400980:	00400931 	.word	0x00400931
  400984:	0040093b 	.word	0x0040093b

00400988 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400988:	b538      	push	{r3, r4, r5, lr}
  40098a:	460d      	mov	r5, r1
	ASSERT(spi);
  40098c:	4604      	mov	r4, r0
  40098e:	2239      	movs	r2, #57	; 0x39
  400990:	4903      	ldr	r1, [pc, #12]	; (4009a0 <spi_m_sync_set_func_ptr+0x18>)
  400992:	3000      	adds	r0, #0
  400994:	bf18      	it	ne
  400996:	2001      	movne	r0, #1
  400998:	4b02      	ldr	r3, [pc, #8]	; (4009a4 <spi_m_sync_set_func_ptr+0x1c>)
  40099a:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  40099c:	6025      	str	r5, [r4, #0]
  40099e:	bd38      	pop	{r3, r4, r5, pc}
  4009a0:	00402f68 	.word	0x00402f68
  4009a4:	00400c49 	.word	0x00400c49

004009a8 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4009a8:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  4009aa:	4604      	mov	r4, r0
  4009ac:	460d      	mov	r5, r1
  4009ae:	2800      	cmp	r0, #0
  4009b0:	bf18      	it	ne
  4009b2:	2900      	cmpne	r1, #0
  4009b4:	bf14      	ite	ne
  4009b6:	2001      	movne	r0, #1
  4009b8:	2000      	moveq	r0, #0
  4009ba:	2240      	movs	r2, #64	; 0x40
  4009bc:	4909      	ldr	r1, [pc, #36]	; (4009e4 <spi_m_sync_init+0x3c>)
  4009be:	4b0a      	ldr	r3, [pc, #40]	; (4009e8 <spi_m_sync_init+0x40>)
  4009c0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4009c2:	4620      	mov	r0, r4
  4009c4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4009c8:	4629      	mov	r1, r5
  4009ca:	4b08      	ldr	r3, [pc, #32]	; (4009ec <spi_m_sync_init+0x44>)
  4009cc:	4798      	blx	r3

	if (rc < 0) {
  4009ce:	2800      	cmp	r0, #0
  4009d0:	db07      	blt.n	4009e2 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  4009d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009d6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4009d8:	4b05      	ldr	r3, [pc, #20]	; (4009f0 <spi_m_sync_init+0x48>)
  4009da:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4009dc:	4b05      	ldr	r3, [pc, #20]	; (4009f4 <spi_m_sync_init+0x4c>)
  4009de:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4009e0:	2000      	movs	r0, #0
}
  4009e2:	bd38      	pop	{r3, r4, r5, pc}
  4009e4:	00402f68 	.word	0x00402f68
  4009e8:	00400c49 	.word	0x00400c49
  4009ec:	0040134d 	.word	0x0040134d
  4009f0:	00400a9d 	.word	0x00400a9d
  4009f4:	00400a61 	.word	0x00400a61

004009f8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  4009f8:	b510      	push	{r4, lr}
	ASSERT(spi);
  4009fa:	4604      	mov	r4, r0
  4009fc:	2257      	movs	r2, #87	; 0x57
  4009fe:	4905      	ldr	r1, [pc, #20]	; (400a14 <spi_m_sync_enable+0x1c>)
  400a00:	3000      	adds	r0, #0
  400a02:	bf18      	it	ne
  400a04:	2001      	movne	r0, #1
  400a06:	4b04      	ldr	r3, [pc, #16]	; (400a18 <spi_m_sync_enable+0x20>)
  400a08:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400a0a:	1d20      	adds	r0, r4, #4
  400a0c:	4b03      	ldr	r3, [pc, #12]	; (400a1c <spi_m_sync_enable+0x24>)
  400a0e:	4798      	blx	r3
  400a10:	bd10      	pop	{r4, pc}
  400a12:	bf00      	nop
  400a14:	00402f68 	.word	0x00402f68
  400a18:	00400c49 	.word	0x00400c49
  400a1c:	004013f5 	.word	0x004013f5

00400a20 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400a20:	b530      	push	{r4, r5, lr}
  400a22:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400a24:	4605      	mov	r5, r0
  400a26:	460c      	mov	r4, r1
  400a28:	2800      	cmp	r0, #0
  400a2a:	bf18      	it	ne
  400a2c:	2900      	cmpne	r1, #0
  400a2e:	bf14      	ite	ne
  400a30:	2001      	movne	r0, #1
  400a32:	2000      	moveq	r0, #0
  400a34:	22b3      	movs	r2, #179	; 0xb3
  400a36:	4907      	ldr	r1, [pc, #28]	; (400a54 <spi_m_sync_transfer+0x34>)
  400a38:	4b07      	ldr	r3, [pc, #28]	; (400a58 <spi_m_sync_transfer+0x38>)
  400a3a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400a3c:	6823      	ldr	r3, [r4, #0]
  400a3e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400a40:	6863      	ldr	r3, [r4, #4]
  400a42:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400a44:	68a3      	ldr	r3, [r4, #8]
  400a46:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400a48:	a901      	add	r1, sp, #4
  400a4a:	1d28      	adds	r0, r5, #4
  400a4c:	4b03      	ldr	r3, [pc, #12]	; (400a5c <spi_m_sync_transfer+0x3c>)
  400a4e:	4798      	blx	r3
}
  400a50:	b005      	add	sp, #20
  400a52:	bd30      	pop	{r4, r5, pc}
  400a54:	00402f68 	.word	0x00402f68
  400a58:	00400c49 	.word	0x00400c49
  400a5c:	00401429 	.word	0x00401429

00400a60 <_spi_m_sync_io_write>:
{
  400a60:	b570      	push	{r4, r5, r6, lr}
  400a62:	b084      	sub	sp, #16
  400a64:	460e      	mov	r6, r1
  400a66:	4615      	mov	r5, r2
	ASSERT(io);
  400a68:	4604      	mov	r4, r0
  400a6a:	22a3      	movs	r2, #163	; 0xa3
  400a6c:	4908      	ldr	r1, [pc, #32]	; (400a90 <_spi_m_sync_io_write+0x30>)
  400a6e:	3000      	adds	r0, #0
  400a70:	bf18      	it	ne
  400a72:	2001      	movne	r0, #1
  400a74:	4b07      	ldr	r3, [pc, #28]	; (400a94 <_spi_m_sync_io_write+0x34>)
  400a76:	4798      	blx	r3
	xfer.rxbuf = 0;
  400a78:	2300      	movs	r3, #0
  400a7a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400a7c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400a7e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400a80:	a901      	add	r1, sp, #4
  400a82:	f1a4 000c 	sub.w	r0, r4, #12
  400a86:	4b04      	ldr	r3, [pc, #16]	; (400a98 <_spi_m_sync_io_write+0x38>)
  400a88:	4798      	blx	r3
}
  400a8a:	b004      	add	sp, #16
  400a8c:	bd70      	pop	{r4, r5, r6, pc}
  400a8e:	bf00      	nop
  400a90:	00402f68 	.word	0x00402f68
  400a94:	00400c49 	.word	0x00400c49
  400a98:	00400a21 	.word	0x00400a21

00400a9c <_spi_m_sync_io_read>:
{
  400a9c:	b570      	push	{r4, r5, r6, lr}
  400a9e:	b084      	sub	sp, #16
  400aa0:	460e      	mov	r6, r1
  400aa2:	4615      	mov	r5, r2
	ASSERT(io);
  400aa4:	4604      	mov	r4, r0
  400aa6:	2287      	movs	r2, #135	; 0x87
  400aa8:	4908      	ldr	r1, [pc, #32]	; (400acc <_spi_m_sync_io_read+0x30>)
  400aaa:	3000      	adds	r0, #0
  400aac:	bf18      	it	ne
  400aae:	2001      	movne	r0, #1
  400ab0:	4b07      	ldr	r3, [pc, #28]	; (400ad0 <_spi_m_sync_io_read+0x34>)
  400ab2:	4798      	blx	r3
	xfer.rxbuf = buf;
  400ab4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400ab6:	2300      	movs	r3, #0
  400ab8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400aba:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400abc:	a901      	add	r1, sp, #4
  400abe:	f1a4 000c 	sub.w	r0, r4, #12
  400ac2:	4b04      	ldr	r3, [pc, #16]	; (400ad4 <_spi_m_sync_io_read+0x38>)
  400ac4:	4798      	blx	r3
}
  400ac6:	b004      	add	sp, #16
  400ac8:	bd70      	pop	{r4, r5, r6, pc}
  400aca:	bf00      	nop
  400acc:	00402f68 	.word	0x00402f68
  400ad0:	00400c49 	.word	0x00400c49
  400ad4:	00400a21 	.word	0x00400a21

00400ad8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400ad8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400ada:	4604      	mov	r4, r0
  400adc:	460d      	mov	r5, r1
  400ade:	2800      	cmp	r0, #0
  400ae0:	bf18      	it	ne
  400ae2:	2900      	cmpne	r1, #0
  400ae4:	bf14      	ite	ne
  400ae6:	2001      	movne	r0, #1
  400ae8:	2000      	moveq	r0, #0
  400aea:	22bd      	movs	r2, #189	; 0xbd
  400aec:	4903      	ldr	r1, [pc, #12]	; (400afc <spi_m_sync_get_io_descriptor+0x24>)
  400aee:	4b04      	ldr	r3, [pc, #16]	; (400b00 <spi_m_sync_get_io_descriptor+0x28>)
  400af0:	4798      	blx	r3
	*io = &spi->io;
  400af2:	340c      	adds	r4, #12
  400af4:	602c      	str	r4, [r5, #0]
	return 0;
}
  400af6:	2000      	movs	r0, #0
  400af8:	bd38      	pop	{r3, r4, r5, pc}
  400afa:	bf00      	nop
  400afc:	00402f68 	.word	0x00402f68
  400b00:	00400c49 	.word	0x00400c49

00400b04 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b06:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400b08:	4605      	mov	r5, r0
  400b0a:	460f      	mov	r7, r1
  400b0c:	2800      	cmp	r0, #0
  400b0e:	bf18      	it	ne
  400b10:	2900      	cmpne	r1, #0
  400b12:	d002      	beq.n	400b1a <usart_sync_write+0x16>
  400b14:	bb0a      	cbnz	r2, 400b5a <usart_sync_write+0x56>
  400b16:	2000      	movs	r0, #0
  400b18:	e000      	b.n	400b1c <usart_sync_write+0x18>
  400b1a:	2000      	movs	r0, #0
  400b1c:	22f1      	movs	r2, #241	; 0xf1
  400b1e:	4910      	ldr	r1, [pc, #64]	; (400b60 <usart_sync_write+0x5c>)
  400b20:	4b10      	ldr	r3, [pc, #64]	; (400b64 <usart_sync_write+0x60>)
  400b22:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400b24:	f105 0408 	add.w	r4, r5, #8
  400b28:	4620      	mov	r0, r4
  400b2a:	4b0f      	ldr	r3, [pc, #60]	; (400b68 <usart_sync_write+0x64>)
  400b2c:	4798      	blx	r3
  400b2e:	2800      	cmp	r0, #0
  400b30:	d0f8      	beq.n	400b24 <usart_sync_write+0x20>
  400b32:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400b34:	5d79      	ldrb	r1, [r7, r5]
  400b36:	4620      	mov	r0, r4
  400b38:	4b0c      	ldr	r3, [pc, #48]	; (400b6c <usart_sync_write+0x68>)
  400b3a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400b3c:	4620      	mov	r0, r4
  400b3e:	4b0a      	ldr	r3, [pc, #40]	; (400b68 <usart_sync_write+0x64>)
  400b40:	4798      	blx	r3
  400b42:	2800      	cmp	r0, #0
  400b44:	d0fa      	beq.n	400b3c <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400b46:	3501      	adds	r5, #1
  400b48:	42b5      	cmp	r5, r6
  400b4a:	d3f3      	bcc.n	400b34 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400b4c:	4620      	mov	r0, r4
  400b4e:	4b08      	ldr	r3, [pc, #32]	; (400b70 <usart_sync_write+0x6c>)
  400b50:	4798      	blx	r3
  400b52:	2800      	cmp	r0, #0
  400b54:	d0fa      	beq.n	400b4c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400b56:	4628      	mov	r0, r5
  400b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400b5a:	2001      	movs	r0, #1
  400b5c:	e7de      	b.n	400b1c <usart_sync_write+0x18>
  400b5e:	bf00      	nop
  400b60:	00402f84 	.word	0x00402f84
  400b64:	00400c49 	.word	0x00400c49
  400b68:	00401911 	.word	0x00401911
  400b6c:	004018c9 	.word	0x004018c9
  400b70:	00401939 	.word	0x00401939

00400b74 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b78:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400b7a:	4605      	mov	r5, r0
  400b7c:	4688      	mov	r8, r1
  400b7e:	2800      	cmp	r0, #0
  400b80:	bf18      	it	ne
  400b82:	2900      	cmpne	r1, #0
  400b84:	d002      	beq.n	400b8c <usart_sync_read+0x18>
  400b86:	b9d2      	cbnz	r2, 400bbe <usart_sync_read+0x4a>
  400b88:	2000      	movs	r0, #0
  400b8a:	e000      	b.n	400b8e <usart_sync_read+0x1a>
  400b8c:	2000      	movs	r0, #0
  400b8e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400b92:	490c      	ldr	r1, [pc, #48]	; (400bc4 <usart_sync_read+0x50>)
  400b94:	4b0c      	ldr	r3, [pc, #48]	; (400bc8 <usart_sync_read+0x54>)
  400b96:	4798      	blx	r3
	uint32_t                      offset = 0;
  400b98:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400b9a:	f105 0408 	add.w	r4, r5, #8
  400b9e:	4620      	mov	r0, r4
  400ba0:	4b0a      	ldr	r3, [pc, #40]	; (400bcc <usart_sync_read+0x58>)
  400ba2:	4798      	blx	r3
  400ba4:	2800      	cmp	r0, #0
  400ba6:	d0f8      	beq.n	400b9a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400ba8:	4620      	mov	r0, r4
  400baa:	4b09      	ldr	r3, [pc, #36]	; (400bd0 <usart_sync_read+0x5c>)
  400bac:	4798      	blx	r3
  400bae:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400bb2:	3601      	adds	r6, #1
  400bb4:	42be      	cmp	r6, r7
  400bb6:	d3f0      	bcc.n	400b9a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400bb8:	4630      	mov	r0, r6
  400bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400bbe:	2001      	movs	r0, #1
  400bc0:	e7e5      	b.n	400b8e <usart_sync_read+0x1a>
  400bc2:	bf00      	nop
  400bc4:	00402f84 	.word	0x00402f84
  400bc8:	00400c49 	.word	0x00400c49
  400bcc:	00401961 	.word	0x00401961
  400bd0:	004018ed 	.word	0x004018ed

00400bd4 <usart_sync_init>:
{
  400bd4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400bd6:	4604      	mov	r4, r0
  400bd8:	460d      	mov	r5, r1
  400bda:	2800      	cmp	r0, #0
  400bdc:	bf18      	it	ne
  400bde:	2900      	cmpne	r1, #0
  400be0:	bf14      	ite	ne
  400be2:	2001      	movne	r0, #1
  400be4:	2000      	moveq	r0, #0
  400be6:	2234      	movs	r2, #52	; 0x34
  400be8:	4907      	ldr	r1, [pc, #28]	; (400c08 <usart_sync_init+0x34>)
  400bea:	4b08      	ldr	r3, [pc, #32]	; (400c0c <usart_sync_init+0x38>)
  400bec:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400bee:	4629      	mov	r1, r5
  400bf0:	f104 0008 	add.w	r0, r4, #8
  400bf4:	4b06      	ldr	r3, [pc, #24]	; (400c10 <usart_sync_init+0x3c>)
  400bf6:	4798      	blx	r3
	if (init_status) {
  400bf8:	4603      	mov	r3, r0
  400bfa:	b918      	cbnz	r0, 400c04 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400bfc:	4a05      	ldr	r2, [pc, #20]	; (400c14 <usart_sync_init+0x40>)
  400bfe:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400c00:	4a05      	ldr	r2, [pc, #20]	; (400c18 <usart_sync_init+0x44>)
  400c02:	6022      	str	r2, [r4, #0]
}
  400c04:	4618      	mov	r0, r3
  400c06:	bd38      	pop	{r3, r4, r5, pc}
  400c08:	00402f84 	.word	0x00402f84
  400c0c:	00400c49 	.word	0x00400c49
  400c10:	0040185d 	.word	0x0040185d
  400c14:	00400b75 	.word	0x00400b75
  400c18:	00400b05 	.word	0x00400b05

00400c1c <usart_sync_enable>:
{
  400c1c:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c1e:	4604      	mov	r4, r0
  400c20:	2253      	movs	r2, #83	; 0x53
  400c22:	4906      	ldr	r1, [pc, #24]	; (400c3c <usart_sync_enable+0x20>)
  400c24:	3000      	adds	r0, #0
  400c26:	bf18      	it	ne
  400c28:	2001      	movne	r0, #1
  400c2a:	4b05      	ldr	r3, [pc, #20]	; (400c40 <usart_sync_enable+0x24>)
  400c2c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400c2e:	f104 0008 	add.w	r0, r4, #8
  400c32:	4b04      	ldr	r3, [pc, #16]	; (400c44 <usart_sync_enable+0x28>)
  400c34:	4798      	blx	r3
}
  400c36:	2000      	movs	r0, #0
  400c38:	bd10      	pop	{r4, pc}
  400c3a:	bf00      	nop
  400c3c:	00402f84 	.word	0x00402f84
  400c40:	00400c49 	.word	0x00400c49
  400c44:	00401895 	.word	0x00401895

00400c48 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400c48:	b900      	cbnz	r0, 400c4c <assert+0x4>
		__asm("BKPT #0");
  400c4a:	be00      	bkpt	0x0000
  400c4c:	4770      	bx	lr
	...

00400c50 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400c50:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400c52:	4a06      	ldr	r2, [pc, #24]	; (400c6c <_sbrk+0x1c>)
  400c54:	6812      	ldr	r2, [r2, #0]
  400c56:	b122      	cbz	r2, 400c62 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400c58:	4a04      	ldr	r2, [pc, #16]	; (400c6c <_sbrk+0x1c>)
  400c5a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400c5c:	4403      	add	r3, r0
  400c5e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400c60:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c62:	4903      	ldr	r1, [pc, #12]	; (400c70 <_sbrk+0x20>)
  400c64:	4a01      	ldr	r2, [pc, #4]	; (400c6c <_sbrk+0x1c>)
  400c66:	6011      	str	r1, [r2, #0]
  400c68:	e7f6      	b.n	400c58 <_sbrk+0x8>
  400c6a:	bf00      	nop
  400c6c:	20400094 	.word	0x20400094
  400c70:	20400728 	.word	0x20400728

00400c74 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400c74:	f04f 30ff 	mov.w	r0, #4294967295
  400c78:	4770      	bx	lr

00400c7a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c7e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c80:	2000      	movs	r0, #0
  400c82:	4770      	bx	lr

00400c84 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400c84:	2001      	movs	r0, #1
  400c86:	4770      	bx	lr

00400c88 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400c88:	2000      	movs	r0, #0
  400c8a:	4770      	bx	lr

00400c8c <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400c8c:	2364      	movs	r3, #100	; 0x64
  400c8e:	4a1d      	ldr	r2, [pc, #116]	; (400d04 <_afec_init+0x78>)
  400c90:	fb03 2301 	mla	r3, r3, r1, r2
  400c94:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400c96:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400c98:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400c9a:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400c9c:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400c9e:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400ca0:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400ca2:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400ca4:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400ca6:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400ca8:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400caa:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400cac:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400cae:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400cb0:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400cb2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400cb8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400cbe:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400cc4:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400cca:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400cce:	2200      	movs	r2, #0
  400cd0:	2a0b      	cmp	r2, #11
  400cd2:	d814      	bhi.n	400cfe <_afec_init+0x72>
{
  400cd4:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400cd6:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400cd8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400cdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400ce0:	4413      	add	r3, r2
  400ce2:	330c      	adds	r3, #12
  400ce4:	4c07      	ldr	r4, [pc, #28]	; (400d04 <_afec_init+0x78>)
  400ce6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400cea:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400cec:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400cee:	3201      	adds	r2, #1
  400cf0:	b2d2      	uxtb	r2, r2
  400cf2:	2a0b      	cmp	r2, #11
  400cf4:	d9ef      	bls.n	400cd6 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400cf6:	2000      	movs	r0, #0
  400cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cfc:	4770      	bx	lr
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop
  400d04:	00402fa0 	.word	0x00402fa0

00400d08 <_afec_get_hardware_index>:
{
  400d08:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400d0a:	4b09      	ldr	r3, [pc, #36]	; (400d30 <_afec_get_hardware_index+0x28>)
  400d0c:	4298      	cmp	r0, r3
  400d0e:	d00a      	beq.n	400d26 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400d10:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400d14:	4298      	cmp	r0, r3
  400d16:	d008      	beq.n	400d2a <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400d18:	22a3      	movs	r2, #163	; 0xa3
  400d1a:	4906      	ldr	r1, [pc, #24]	; (400d34 <_afec_get_hardware_index+0x2c>)
  400d1c:	2000      	movs	r0, #0
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <_afec_get_hardware_index+0x30>)
  400d20:	4798      	blx	r3
	return 0;
  400d22:	2000      	movs	r0, #0
  400d24:	bd08      	pop	{r3, pc}
		return 0;
  400d26:	2000      	movs	r0, #0
  400d28:	bd08      	pop	{r3, pc}
		return 1;
  400d2a:	2001      	movs	r0, #1
}
  400d2c:	bd08      	pop	{r3, pc}
  400d2e:	bf00      	nop
  400d30:	4003c000 	.word	0x4003c000
  400d34:	00403004 	.word	0x00403004
  400d38:	00400c49 	.word	0x00400c49

00400d3c <_afec_get_regs>:
{
  400d3c:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400d3e:	4b08      	ldr	r3, [pc, #32]	; (400d60 <_afec_get_regs+0x24>)
  400d40:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d42:	2300      	movs	r3, #0
  400d44:	b113      	cbz	r3, 400d4c <_afec_get_regs+0x10>
	return 0;
  400d46:	2300      	movs	r3, #0
}
  400d48:	4618      	mov	r0, r3
  400d4a:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  400d4c:	2264      	movs	r2, #100	; 0x64
  400d4e:	fb02 f203 	mul.w	r2, r2, r3
  400d52:	4904      	ldr	r1, [pc, #16]	; (400d64 <_afec_get_regs+0x28>)
  400d54:	5c8a      	ldrb	r2, [r1, r2]
  400d56:	4290      	cmp	r0, r2
  400d58:	d0f6      	beq.n	400d48 <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d5a:	3301      	adds	r3, #1
  400d5c:	b2db      	uxtb	r3, r3
  400d5e:	e7f1      	b.n	400d44 <_afec_get_regs+0x8>
  400d60:	00400d09 	.word	0x00400d09
  400d64:	00402fa0 	.word	0x00402fa0

00400d68 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400d68:	b538      	push	{r3, r4, r5, lr}
  400d6a:	460c      	mov	r4, r1
	ASSERT(device);
  400d6c:	4605      	mov	r5, r0
  400d6e:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400d72:	4907      	ldr	r1, [pc, #28]	; (400d90 <_adc_sync_init+0x28>)
  400d74:	3000      	adds	r0, #0
  400d76:	bf18      	it	ne
  400d78:	2001      	movne	r0, #1
  400d7a:	4b06      	ldr	r3, [pc, #24]	; (400d94 <_adc_sync_init+0x2c>)
  400d7c:	4798      	blx	r3

	device->hw = hw;
  400d7e:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400d80:	4620      	mov	r0, r4
  400d82:	4b05      	ldr	r3, [pc, #20]	; (400d98 <_adc_sync_init+0x30>)
  400d84:	4798      	blx	r3
  400d86:	4601      	mov	r1, r0
  400d88:	4620      	mov	r0, r4
  400d8a:	4b04      	ldr	r3, [pc, #16]	; (400d9c <_adc_sync_init+0x34>)
  400d8c:	4798      	blx	r3
}
  400d8e:	bd38      	pop	{r3, r4, r5, pc}
  400d90:	00403004 	.word	0x00403004
  400d94:	00400c49 	.word	0x00400c49
  400d98:	00400d3d 	.word	0x00400d3d
  400d9c:	00400c8d 	.word	0x00400c8d

00400da0 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  400da0:	6802      	ldr	r2, [r0, #0]
  400da2:	2301      	movs	r3, #1
  400da4:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  400da8:	6151      	str	r1, [r2, #20]
  400daa:	4770      	bx	lr

00400dac <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400dac:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400db0:	fb03 f000 	mul.w	r0, r3, r0
  400db4:	4770      	bx	lr

00400db6 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400db6:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400dba:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400dc2:	fb03 f000 	mul.w	r0, r3, r0
  400dc6:	4770      	bx	lr

00400dc8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400dc8:	b500      	push	{lr}
  400dca:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400dcc:	a801      	add	r0, sp, #4
  400dce:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <_init_chip+0x40>)
  400dd0:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400dd2:	4a0e      	ldr	r2, [pc, #56]	; (400e0c <_init_chip+0x44>)
  400dd4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400de4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400de8:	a801      	add	r0, sp, #4
  400dea:	4b09      	ldr	r3, [pc, #36]	; (400e10 <_init_chip+0x48>)
  400dec:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400dee:	4a09      	ldr	r2, [pc, #36]	; (400e14 <_init_chip+0x4c>)
  400df0:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400df2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400df6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400dfa:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400dfc:	4b06      	ldr	r3, [pc, #24]	; (400e18 <_init_chip+0x50>)
  400dfe:	4798      	blx	r3
}
  400e00:	b003      	add	sp, #12
  400e02:	f85d fb04 	ldr.w	pc, [sp], #4
  400e06:	bf00      	nop
  400e08:	00400679 	.word	0x00400679
  400e0c:	e000ed00 	.word	0xe000ed00
  400e10:	00400687 	.word	0x00400687
  400e14:	400e0c00 	.word	0x400e0c00
  400e18:	00401175 	.word	0x00401175

00400e1c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400e1c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400e1e:	2500      	movs	r5, #0
  400e20:	428d      	cmp	r5, r1
  400e22:	d210      	bcs.n	400e46 <_ffs+0x2a>
  400e24:	2201      	movs	r2, #1
  400e26:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e28:	2b1f      	cmp	r3, #31
  400e2a:	d80a      	bhi.n	400e42 <_ffs+0x26>
			if (v[i] & bit) {
  400e2c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400e30:	4222      	tst	r2, r4
  400e32:	d102      	bne.n	400e3a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400e34:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e36:	3301      	adds	r3, #1
  400e38:	e7f6      	b.n	400e28 <_ffs+0xc>
				return i * 32 + j;
  400e3a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400e3e:	bc30      	pop	{r4, r5}
  400e40:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400e42:	3501      	adds	r5, #1
  400e44:	e7ec      	b.n	400e20 <_ffs+0x4>
	return -1;
  400e46:	f04f 30ff 	mov.w	r0, #4294967295
  400e4a:	e7f8      	b.n	400e3e <_ffs+0x22>

00400e4c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400e4c:	b510      	push	{r4, lr}
  400e4e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400e50:	2300      	movs	r3, #0
  400e52:	9301      	str	r3, [sp, #4]
  400e54:	9302      	str	r3, [sp, #8]
  400e56:	9303      	str	r3, [sp, #12]
  400e58:	9304      	str	r3, [sp, #16]
  400e5a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400e5c:	4b21      	ldr	r3, [pc, #132]	; (400ee4 <_ext_irq_handler+0x98>)
  400e5e:	6818      	ldr	r0, [r3, #0]
  400e60:	22f8      	movs	r2, #248	; 0xf8
  400e62:	4921      	ldr	r1, [pc, #132]	; (400ee8 <_ext_irq_handler+0x9c>)
  400e64:	3000      	adds	r0, #0
  400e66:	bf18      	it	ne
  400e68:	2001      	movne	r0, #1
  400e6a:	4b20      	ldr	r3, [pc, #128]	; (400eec <_ext_irq_handler+0xa0>)
  400e6c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400e6e:	4b20      	ldr	r3, [pc, #128]	; (400ef0 <_ext_irq_handler+0xa4>)
  400e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400e74:	4013      	ands	r3, r2
  400e76:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400e78:	491e      	ldr	r1, [pc, #120]	; (400ef4 <_ext_irq_handler+0xa8>)
  400e7a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e7c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400e7e:	400a      	ands	r2, r1
  400e80:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  400e82:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400e84:	e025      	b.n	400ed2 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400e86:	4b17      	ldr	r3, [pc, #92]	; (400ee4 <_ext_irq_handler+0x98>)
  400e88:	681b      	ldr	r3, [r3, #0]
  400e8a:	4620      	mov	r0, r4
  400e8c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400e8e:	1163      	asrs	r3, r4, #5
  400e90:	f004 041f 	and.w	r4, r4, #31
  400e94:	2201      	movs	r2, #1
  400e96:	fa02 f404 	lsl.w	r4, r2, r4
  400e9a:	aa06      	add	r2, sp, #24
  400e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400ea0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400ea4:	ea22 0204 	bic.w	r2, r2, r4
  400ea8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400eac:	2105      	movs	r1, #5
  400eae:	a801      	add	r0, sp, #4
  400eb0:	4b11      	ldr	r3, [pc, #68]	; (400ef8 <_ext_irq_handler+0xac>)
  400eb2:	4798      	blx	r3
  400eb4:	4604      	mov	r4, r0
		while (-1 != pos) {
  400eb6:	f1b4 3fff 	cmp.w	r4, #4294967295
  400eba:	d1e4      	bne.n	400e86 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400ebc:	4a0c      	ldr	r2, [pc, #48]	; (400ef0 <_ext_irq_handler+0xa4>)
  400ebe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ec0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400ec2:	400b      	ands	r3, r1
  400ec4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400ec6:	490b      	ldr	r1, [pc, #44]	; (400ef4 <_ext_irq_handler+0xa8>)
  400ec8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400eca:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400ecc:	4002      	ands	r2, r0
  400ece:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  400ed0:	4313      	orrs	r3, r2
	while (flag_total) {
  400ed2:	b12b      	cbz	r3, 400ee0 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400ed4:	2105      	movs	r1, #5
  400ed6:	a801      	add	r0, sp, #4
  400ed8:	4b07      	ldr	r3, [pc, #28]	; (400ef8 <_ext_irq_handler+0xac>)
  400eda:	4798      	blx	r3
  400edc:	4604      	mov	r4, r0
		while (-1 != pos) {
  400ede:	e7ea      	b.n	400eb6 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400ee0:	b006      	add	sp, #24
  400ee2:	bd10      	pop	{r4, pc}
  400ee4:	20400098 	.word	0x20400098
  400ee8:	0040305c 	.word	0x0040305c
  400eec:	00400c49 	.word	0x00400c49
  400ef0:	400e0e00 	.word	0x400e0e00
  400ef4:	400e1000 	.word	0x400e1000
  400ef8:	00400e1d 	.word	0x00400e1d

00400efc <_pio_get_hardware_index>:
{
  400efc:	b510      	push	{r4, lr}
	ASSERT(hw);
  400efe:	4604      	mov	r4, r0
  400f00:	22d2      	movs	r2, #210	; 0xd2
  400f02:	4905      	ldr	r1, [pc, #20]	; (400f18 <_pio_get_hardware_index+0x1c>)
  400f04:	3000      	adds	r0, #0
  400f06:	bf18      	it	ne
  400f08:	2001      	movne	r0, #1
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <_pio_get_hardware_index+0x20>)
  400f0c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400f0e:	4804      	ldr	r0, [pc, #16]	; (400f20 <_pio_get_hardware_index+0x24>)
  400f10:	4420      	add	r0, r4
}
  400f12:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400f16:	bd10      	pop	{r4, pc}
  400f18:	0040305c 	.word	0x0040305c
  400f1c:	00400c49 	.word	0x00400c49
  400f20:	bff1f200 	.word	0xbff1f200

00400f24 <_pio_get_index>:
{
  400f24:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f26:	4604      	mov	r4, r0
  400f28:	22e0      	movs	r2, #224	; 0xe0
  400f2a:	490d      	ldr	r1, [pc, #52]	; (400f60 <_pio_get_index+0x3c>)
  400f2c:	3000      	adds	r0, #0
  400f2e:	bf18      	it	ne
  400f30:	2001      	movne	r0, #1
  400f32:	4b0c      	ldr	r3, [pc, #48]	; (400f64 <_pio_get_index+0x40>)
  400f34:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400f36:	4620      	mov	r0, r4
  400f38:	4b0b      	ldr	r3, [pc, #44]	; (400f68 <_pio_get_index+0x44>)
  400f3a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f3c:	2300      	movs	r3, #0
  400f3e:	2b01      	cmp	r3, #1
  400f40:	d80b      	bhi.n	400f5a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400f42:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400f46:	008a      	lsls	r2, r1, #2
  400f48:	4908      	ldr	r1, [pc, #32]	; (400f6c <_pio_get_index+0x48>)
  400f4a:	5c8a      	ldrb	r2, [r1, r2]
  400f4c:	4290      	cmp	r0, r2
  400f4e:	d002      	beq.n	400f56 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f50:	3301      	adds	r3, #1
  400f52:	b2db      	uxtb	r3, r3
  400f54:	e7f3      	b.n	400f3e <_pio_get_index+0x1a>
			return i;
  400f56:	b258      	sxtb	r0, r3
  400f58:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f5e:	bd10      	pop	{r4, pc}
  400f60:	0040305c 	.word	0x0040305c
  400f64:	00400c49 	.word	0x00400c49
  400f68:	00400efd 	.word	0x00400efd
  400f6c:	0040301c 	.word	0x0040301c

00400f70 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400f70:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400f72:	4604      	mov	r4, r0
  400f74:	f240 1259 	movw	r2, #345	; 0x159
  400f78:	4929      	ldr	r1, [pc, #164]	; (401020 <_pio_init+0xb0>)
  400f7a:	3000      	adds	r0, #0
  400f7c:	bf18      	it	ne
  400f7e:	2001      	movne	r0, #1
  400f80:	4b28      	ldr	r3, [pc, #160]	; (401024 <_pio_init+0xb4>)
  400f82:	4798      	blx	r3

	i = _pio_get_index(hw);
  400f84:	4620      	mov	r0, r4
  400f86:	4b28      	ldr	r3, [pc, #160]	; (401028 <_pio_init+0xb8>)
  400f88:	4798      	blx	r3
	if (i < 0) {
  400f8a:	2800      	cmp	r0, #0
  400f8c:	db43      	blt.n	401016 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400f8e:	4d27      	ldr	r5, [pc, #156]	; (40102c <_pio_init+0xbc>)
  400f90:	00c2      	lsls	r2, r0, #3
  400f92:	1a11      	subs	r1, r2, r0
  400f94:	008b      	lsls	r3, r1, #2
  400f96:	442b      	add	r3, r5
  400f98:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400f9a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400f9e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400fa0:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400fa4:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400fa6:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400faa:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400fac:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400fb0:	1a10      	subs	r0, r2, r0
  400fb2:	0083      	lsls	r3, r0, #2
  400fb4:	442b      	add	r3, r5
  400fb6:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400fb8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400fbc:	4620      	mov	r0, r4
  400fbe:	4b1c      	ldr	r3, [pc, #112]	; (401030 <_pio_init+0xc0>)
  400fc0:	4798      	blx	r3
  400fc2:	4428      	add	r0, r5
  400fc4:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400fc8:	2b00      	cmp	r3, #0
  400fca:	db0c      	blt.n	400fe6 <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fcc:	095a      	lsrs	r2, r3, #5
  400fce:	f003 001f 	and.w	r0, r3, #31
  400fd2:	2101      	movs	r1, #1
  400fd4:	4081      	lsls	r1, r0
  400fd6:	3220      	adds	r2, #32
  400fd8:	4816      	ldr	r0, [pc, #88]	; (401034 <_pio_init+0xc4>)
  400fda:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400fde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400fe2:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	db08      	blt.n	400ffc <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fea:	095a      	lsrs	r2, r3, #5
  400fec:	f003 001f 	and.w	r0, r3, #31
  400ff0:	2101      	movs	r1, #1
  400ff2:	4081      	lsls	r1, r0
  400ff4:	3260      	adds	r2, #96	; 0x60
  400ff6:	480f      	ldr	r0, [pc, #60]	; (401034 <_pio_init+0xc4>)
  400ff8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	db0d      	blt.n	40101c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401000:	0959      	lsrs	r1, r3, #5
  401002:	f003 031f 	and.w	r3, r3, #31
  401006:	2201      	movs	r2, #1
  401008:	fa02 f303 	lsl.w	r3, r2, r3
  40100c:	4a09      	ldr	r2, [pc, #36]	; (401034 <_pio_init+0xc4>)
  40100e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401012:	2000      	movs	r0, #0
  401014:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401016:	f06f 0010 	mvn.w	r0, #16
  40101a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  40101c:	2000      	movs	r0, #0
}
  40101e:	bd38      	pop	{r3, r4, r5, pc}
  401020:	0040305c 	.word	0x0040305c
  401024:	00400c49 	.word	0x00400c49
  401028:	00400f25 	.word	0x00400f25
  40102c:	0040301c 	.word	0x0040301c
  401030:	00400efd 	.word	0x00400efd
  401034:	e000e100 	.word	0xe000e100

00401038 <PIOB_Handler>:
{
  401038:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40103a:	4b01      	ldr	r3, [pc, #4]	; (401040 <PIOB_Handler+0x8>)
  40103c:	4798      	blx	r3
  40103e:	bd08      	pop	{r3, pc}
  401040:	00400e4d 	.word	0x00400e4d

00401044 <PIOA_Handler>:
{
  401044:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401046:	4b01      	ldr	r3, [pc, #4]	; (40104c <PIOA_Handler+0x8>)
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}
  40104c:	00400e4d 	.word	0x00400e4d

00401050 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401050:	b538      	push	{r3, r4, r5, lr}
  401052:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401054:	4804      	ldr	r0, [pc, #16]	; (401068 <_ext_irq_init+0x18>)
  401056:	4c05      	ldr	r4, [pc, #20]	; (40106c <_ext_irq_init+0x1c>)
  401058:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40105a:	4805      	ldr	r0, [pc, #20]	; (401070 <_ext_irq_init+0x20>)
  40105c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  40105e:	4b05      	ldr	r3, [pc, #20]	; (401074 <_ext_irq_init+0x24>)
  401060:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401062:	2000      	movs	r0, #0
  401064:	bd38      	pop	{r3, r4, r5, pc}
  401066:	bf00      	nop
  401068:	400e0e00 	.word	0x400e0e00
  40106c:	00400f71 	.word	0x00400f71
  401070:	400e1000 	.word	0x400e1000
  401074:	20400098 	.word	0x20400098

00401078 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40107c:	4604      	mov	r4, r0
  40107e:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401080:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4010d4 <_ext_irq_enable+0x5c>
  401084:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  401088:	4641      	mov	r1, r8
  40108a:	289f      	cmp	r0, #159	; 0x9f
  40108c:	bf8c      	ite	hi
  40108e:	2000      	movhi	r0, #0
  401090:	2001      	movls	r0, #1
  401092:	4e0e      	ldr	r6, [pc, #56]	; (4010cc <_ext_irq_enable+0x54>)
  401094:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401096:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401098:	22c3      	movs	r2, #195	; 0xc3
  40109a:	4641      	mov	r1, r8
  40109c:	2d9f      	cmp	r5, #159	; 0x9f
  40109e:	bf8c      	ite	hi
  4010a0:	2000      	movhi	r0, #0
  4010a2:	2001      	movls	r0, #1
  4010a4:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4010a6:	096d      	lsrs	r5, r5, #5
  4010a8:	4b09      	ldr	r3, [pc, #36]	; (4010d0 <_ext_irq_enable+0x58>)
  4010aa:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4010ae:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4010b2:	b937      	cbnz	r7, 4010c2 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4010b4:	2301      	movs	r3, #1
  4010b6:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4010ba:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4010bc:	2000      	movs	r0, #0
  4010be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4010c2:	2301      	movs	r3, #1
  4010c4:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  4010c8:	642c      	str	r4, [r5, #64]	; 0x40
  4010ca:	e7f7      	b.n	4010bc <_ext_irq_enable+0x44>
  4010cc:	00400c49 	.word	0x00400c49
  4010d0:	400e0e00 	.word	0x400e0e00
  4010d4:	0040305c 	.word	0x0040305c

004010d8 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4010d8:	490e      	ldr	r1, [pc, #56]	; (401114 <_pmc_init_sources+0x3c>)
  4010da:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4010dc:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4010e0:	4b0d      	ldr	r3, [pc, #52]	; (401118 <_pmc_init_sources+0x40>)
  4010e2:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4010e4:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4010e6:	4b0b      	ldr	r3, [pc, #44]	; (401114 <_pmc_init_sources+0x3c>)
  4010e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4010ea:	f013 0f01 	tst.w	r3, #1
  4010ee:	d0fa      	beq.n	4010e6 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4010f0:	4b08      	ldr	r3, [pc, #32]	; (401114 <_pmc_init_sources+0x3c>)
  4010f2:	6a19      	ldr	r1, [r3, #32]
  4010f4:	4a09      	ldr	r2, [pc, #36]	; (40111c <_pmc_init_sources+0x44>)
  4010f6:	430a      	orrs	r2, r1
  4010f8:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4010fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4010fc:	4a08      	ldr	r2, [pc, #32]	; (401120 <_pmc_init_sources+0x48>)
  4010fe:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401100:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401102:	4a08      	ldr	r2, [pc, #32]	; (401124 <_pmc_init_sources+0x4c>)
  401104:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401106:	4b03      	ldr	r3, [pc, #12]	; (401114 <_pmc_init_sources+0x3c>)
  401108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40110a:	f013 0f02 	tst.w	r3, #2
  40110e:	d0fa      	beq.n	401106 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401110:	4770      	bx	lr
  401112:	bf00      	nop
  401114:	400e0600 	.word	0x400e0600
  401118:	00373e01 	.word	0x00373e01
  40111c:	01370000 	.word	0x01370000
  401120:	f800ffff 	.word	0xf800ffff
  401124:	20183f01 	.word	0x20183f01

00401128 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401128:	4a11      	ldr	r2, [pc, #68]	; (401170 <_pmc_init_master_clock+0x48>)
  40112a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40112c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401130:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401132:	4b0f      	ldr	r3, [pc, #60]	; (401170 <_pmc_init_master_clock+0x48>)
  401134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401136:	f013 0f08 	tst.w	r3, #8
  40113a:	d0fa      	beq.n	401132 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40113c:	4a0c      	ldr	r2, [pc, #48]	; (401170 <_pmc_init_master_clock+0x48>)
  40113e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401148:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40114a:	4b09      	ldr	r3, [pc, #36]	; (401170 <_pmc_init_master_clock+0x48>)
  40114c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40114e:	f013 0f08 	tst.w	r3, #8
  401152:	d0fa      	beq.n	40114a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401154:	4a06      	ldr	r2, [pc, #24]	; (401170 <_pmc_init_master_clock+0x48>)
  401156:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401158:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40115c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401160:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401162:	4b03      	ldr	r3, [pc, #12]	; (401170 <_pmc_init_master_clock+0x48>)
  401164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401166:	f013 0f08 	tst.w	r3, #8
  40116a:	d0fa      	beq.n	401162 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	400e0600 	.word	0x400e0600

00401174 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401174:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401176:	4b02      	ldr	r3, [pc, #8]	; (401180 <_pmc_init+0xc>)
  401178:	4798      	blx	r3
	_pmc_init_master_clock();
  40117a:	4b02      	ldr	r3, [pc, #8]	; (401184 <_pmc_init+0x10>)
  40117c:	4798      	blx	r3
  40117e:	bd08      	pop	{r3, pc}
  401180:	004010d9 	.word	0x004010d9
  401184:	00401129 	.word	0x00401129

00401188 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401188:	2300      	movs	r3, #0
  40118a:	b10b      	cbz	r3, 401190 <_pwm_get_cfg+0x8>
		if (_pwms[i].hw == hw) {
			return (_pwms + i);
		}
	}

	return NULL;
  40118c:	2000      	movs	r0, #0
}
  40118e:	4770      	bx	lr
		if (_pwms[i].hw == hw) {
  401190:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401194:	008a      	lsls	r2, r1, #2
  401196:	4906      	ldr	r1, [pc, #24]	; (4011b0 <_pwm_get_cfg+0x28>)
  401198:	588a      	ldr	r2, [r1, r2]
  40119a:	4282      	cmp	r2, r0
  40119c:	d002      	beq.n	4011a4 <_pwm_get_cfg+0x1c>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40119e:	3301      	adds	r3, #1
  4011a0:	b2db      	uxtb	r3, r3
  4011a2:	e7f2      	b.n	40118a <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4011a4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4011a8:	009a      	lsls	r2, r3, #2
  4011aa:	4608      	mov	r0, r1
  4011ac:	4410      	add	r0, r2
  4011ae:	4770      	bx	lr
  4011b0:	00403078 	.word	0x00403078

004011b4 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4011b4:	4b03      	ldr	r3, [pc, #12]	; (4011c4 <_pwm_init_irq_param+0x10>)
  4011b6:	4298      	cmp	r0, r3
  4011b8:	d000      	beq.n	4011bc <_pwm_init_irq_param+0x8>
  4011ba:	4770      	bx	lr
		_pwm0_dev = dev;
  4011bc:	4b02      	ldr	r3, [pc, #8]	; (4011c8 <_pwm_init_irq_param+0x14>)
  4011be:	6019      	str	r1, [r3, #0]
	}
}
  4011c0:	e7fb      	b.n	4011ba <_pwm_init_irq_param+0x6>
  4011c2:	bf00      	nop
  4011c4:	40020000 	.word	0x40020000
  4011c8:	2040009c 	.word	0x2040009c

004011cc <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  4011cc:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  4011ce:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  4011d0:	69db      	ldr	r3, [r3, #28]
  4011d2:	b113      	cbz	r3, 4011da <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  4011d4:	6803      	ldr	r3, [r0, #0]
  4011d6:	b103      	cbz	r3, 4011da <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  4011d8:	4798      	blx	r3
  4011da:	bd08      	pop	{r3, pc}

004011dc <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  4011dc:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  4011de:	4b02      	ldr	r3, [pc, #8]	; (4011e8 <PWM0_Handler+0xc>)
  4011e0:	6818      	ldr	r0, [r3, #0]
  4011e2:	4b02      	ldr	r3, [pc, #8]	; (4011ec <PWM0_Handler+0x10>)
  4011e4:	4798      	blx	r3
  4011e6:	bd08      	pop	{r3, pc}
  4011e8:	2040009c 	.word	0x2040009c
  4011ec:	004011cd 	.word	0x004011cd

004011f0 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011f2:	4606      	mov	r6, r0
	ASSERT(hw);
  4011f4:	460c      	mov	r4, r1
  4011f6:	1c08      	adds	r0, r1, #0
  4011f8:	bf18      	it	ne
  4011fa:	2001      	movne	r0, #1
  4011fc:	f240 1271 	movw	r2, #369	; 0x171
  401200:	4944      	ldr	r1, [pc, #272]	; (401314 <_pwm_init+0x124>)
  401202:	4b45      	ldr	r3, [pc, #276]	; (401318 <_pwm_init+0x128>)
  401204:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401206:	4620      	mov	r0, r4
  401208:	4b44      	ldr	r3, [pc, #272]	; (40131c <_pwm_init+0x12c>)
  40120a:	4798      	blx	r3
  40120c:	4605      	mov	r5, r0

	device->hw = hw;
  40120e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401210:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401212:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401214:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401216:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401218:	6903      	ldr	r3, [r0, #16]
  40121a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40121e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401220:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401222:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401224:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401226:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401228:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40122c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40122e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401230:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401232:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401236:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401238:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40123c:	2300      	movs	r3, #0
  40123e:	e019      	b.n	401274 <_pwm_init+0x84>
		ch = cfg->ch + i;
  401240:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401242:	0118      	lsls	r0, r3, #4
  401244:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401248:	5c3a      	ldrb	r2, [r7, r0]
  40124a:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40124e:	3210      	adds	r2, #16
  401250:	0152      	lsls	r2, r2, #5
  401252:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401254:	5c3a      	ldrb	r2, [r7, r0]
  401256:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40125a:	3210      	adds	r2, #16
  40125c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401260:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401262:	5c3a      	ldrb	r2, [r7, r0]
  401264:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401268:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40126c:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401270:	3301      	adds	r3, #1
  401272:	b25b      	sxtb	r3, r3
  401274:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401276:	4293      	cmp	r3, r2
  401278:	d3e2      	bcc.n	401240 <_pwm_init+0x50>
  40127a:	2300      	movs	r3, #0
  40127c:	e014      	b.n	4012a8 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40127e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401280:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401284:	0082      	lsls	r2, r0, #2
  401286:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  40128a:	5c88      	ldrb	r0, [r1, r2]
  40128c:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401290:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401294:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401298:	5c8a      	ldrb	r2, [r1, r2]
  40129a:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  40129e:	3213      	adds	r2, #19
  4012a0:	0112      	lsls	r2, r2, #4
  4012a2:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4012a4:	3301      	adds	r3, #1
  4012a6:	b25b      	sxtb	r3, r3
  4012a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4012aa:	4293      	cmp	r3, r2
  4012ac:	d3e7      	bcc.n	40127e <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4012ae:	4631      	mov	r1, r6
  4012b0:	4620      	mov	r0, r4
  4012b2:	4b1b      	ldr	r3, [pc, #108]	; (401320 <_pwm_init+0x130>)
  4012b4:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4012b6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	db0d      	blt.n	4012da <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012be:	095a      	lsrs	r2, r3, #5
  4012c0:	f003 031f 	and.w	r3, r3, #31
  4012c4:	2101      	movs	r1, #1
  4012c6:	fa01 f303 	lsl.w	r3, r1, r3
  4012ca:	3220      	adds	r2, #32
  4012cc:	4915      	ldr	r1, [pc, #84]	; (401324 <_pwm_init+0x134>)
  4012ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012d6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4012da:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012de:	2b00      	cmp	r3, #0
  4012e0:	db09      	blt.n	4012f6 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012e2:	095a      	lsrs	r2, r3, #5
  4012e4:	f003 031f 	and.w	r3, r3, #31
  4012e8:	2101      	movs	r1, #1
  4012ea:	fa01 f303 	lsl.w	r3, r1, r3
  4012ee:	3260      	adds	r2, #96	; 0x60
  4012f0:	490c      	ldr	r1, [pc, #48]	; (401324 <_pwm_init+0x134>)
  4012f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4012f6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012fa:	2b00      	cmp	r3, #0
  4012fc:	db08      	blt.n	401310 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012fe:	0959      	lsrs	r1, r3, #5
  401300:	f003 031f 	and.w	r3, r3, #31
  401304:	2201      	movs	r2, #1
  401306:	fa02 f303 	lsl.w	r3, r2, r3
  40130a:	4a06      	ldr	r2, [pc, #24]	; (401324 <_pwm_init+0x134>)
  40130c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401310:	2000      	movs	r0, #0
  401312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401314:	004030f4 	.word	0x004030f4
  401318:	00400c49 	.word	0x00400c49
  40131c:	00401189 	.word	0x00401189
  401320:	004011b5 	.word	0x004011b5
  401324:	e000e100 	.word	0xe000e100

00401328 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401328:	2000      	movs	r0, #0
  40132a:	4770      	bx	lr

0040132c <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  40132c:	2301      	movs	r3, #1
  40132e:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  401330:	2000      	movs	r0, #0
  401332:	4770      	bx	lr

00401334 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  401334:	4b04      	ldr	r3, [pc, #16]	; (401348 <_spi_get_hardware_index+0x14>)
  401336:	4403      	add	r3, r0
  401338:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  40133c:	2b05      	cmp	r3, #5
  40133e:	d001      	beq.n	401344 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401340:	2000      	movs	r0, #0
	}
}
  401342:	4770      	bx	lr
		return 1;
  401344:	2001      	movs	r0, #1
  401346:	4770      	bx	lr
  401348:	bfff8000 	.word	0xbfff8000

0040134c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  40134c:	b570      	push	{r4, r5, r6, lr}
  40134e:	4606      	mov	r6, r0
  401350:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  401352:	4608      	mov	r0, r1
  401354:	4b20      	ldr	r3, [pc, #128]	; (4013d8 <_spi_m_sync_init+0x8c>)
  401356:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401358:	2300      	movs	r3, #0
  40135a:	b33b      	cbz	r3, 4013ac <_spi_m_sync_init+0x60>
	return NULL;
  40135c:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40135e:	f44f 729a 	mov.w	r2, #308	; 0x134
  401362:	491e      	ldr	r1, [pc, #120]	; (4013dc <_spi_m_sync_init+0x90>)
  401364:	2e00      	cmp	r6, #0
  401366:	bf18      	it	ne
  401368:	2c00      	cmpne	r4, #0
  40136a:	bf14      	ite	ne
  40136c:	2001      	movne	r0, #1
  40136e:	2000      	moveq	r0, #0
  401370:	4b1b      	ldr	r3, [pc, #108]	; (4013e0 <_spi_m_sync_init+0x94>)
  401372:	4798      	blx	r3

	if (regs == NULL) {
  401374:	b355      	cbz	r5, 4013cc <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401376:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40137c:	d129      	bne.n	4013d2 <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  40137e:	2380      	movs	r3, #128	; 0x80
  401380:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  401382:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  401384:	686a      	ldr	r2, [r5, #4]
  401386:	4b17      	ldr	r3, [pc, #92]	; (4013e4 <_spi_m_sync_init+0x98>)
  401388:	4013      	ands	r3, r2
  40138a:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  40138c:	68ab      	ldr	r3, [r5, #8]
  40138e:	4a16      	ldr	r2, [pc, #88]	; (4013e8 <_spi_m_sync_init+0x9c>)
  401390:	401a      	ands	r2, r3
  401392:	4b16      	ldr	r3, [pc, #88]	; (4013ec <_spi_m_sync_init+0xa0>)
  401394:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  401396:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401398:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  40139a:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  40139c:	8a2b      	ldrh	r3, [r5, #16]
  40139e:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4013a0:	68eb      	ldr	r3, [r5, #12]
  4013a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4013a6:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4013a8:	2000      	movs	r0, #0
  4013aa:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  4013ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4013b0:	008a      	lsls	r2, r1, #2
  4013b2:	490f      	ldr	r1, [pc, #60]	; (4013f0 <_spi_m_sync_init+0xa4>)
  4013b4:	5c8a      	ldrb	r2, [r1, r2]
  4013b6:	4290      	cmp	r0, r2
  4013b8:	d002      	beq.n	4013c0 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4013ba:	3301      	adds	r3, #1
  4013bc:	b2db      	uxtb	r3, r3
  4013be:	e7cc      	b.n	40135a <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  4013c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  4013c4:	00ab      	lsls	r3, r5, #2
  4013c6:	460d      	mov	r5, r1
  4013c8:	441d      	add	r5, r3
  4013ca:	e7c8      	b.n	40135e <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  4013cc:	f06f 000c 	mvn.w	r0, #12
  4013d0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  4013d2:	f06f 0010 	mvn.w	r0, #16
}
  4013d6:	bd70      	pop	{r4, r5, r6, pc}
  4013d8:	00401335 	.word	0x00401335
  4013dc:	00403120 	.word	0x00403120
  4013e0:	00400c49 	.word	0x00400c49
  4013e4:	feffff7c 	.word	0xfeffff7c
  4013e8:	fff1ff6f 	.word	0xfff1ff6f
  4013ec:	000e0010 	.word	0x000e0010
  4013f0:	0040310c 	.word	0x0040310c

004013f4 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  4013f4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  4013f6:	4604      	mov	r4, r0
  4013f8:	b168      	cbz	r0, 401416 <_spi_m_sync_enable+0x22>
  4013fa:	6803      	ldr	r3, [r0, #0]
  4013fc:	b14b      	cbz	r3, 401412 <_spi_m_sync_enable+0x1e>
  4013fe:	2001      	movs	r0, #1
  401400:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401404:	4905      	ldr	r1, [pc, #20]	; (40141c <_spi_m_sync_enable+0x28>)
  401406:	4b06      	ldr	r3, [pc, #24]	; (401420 <_spi_m_sync_enable+0x2c>)
  401408:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  40140a:	6820      	ldr	r0, [r4, #0]
  40140c:	4b05      	ldr	r3, [pc, #20]	; (401424 <_spi_m_sync_enable+0x30>)
  40140e:	4798      	blx	r3
}
  401410:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  401412:	2000      	movs	r0, #0
  401414:	e7f4      	b.n	401400 <_spi_m_sync_enable+0xc>
  401416:	2000      	movs	r0, #0
  401418:	e7f2      	b.n	401400 <_spi_m_sync_enable+0xc>
  40141a:	bf00      	nop
  40141c:	00403120 	.word	0x00403120
  401420:	00400c49 	.word	0x00400c49
  401424:	0040132d 	.word	0x0040132d

00401428 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40142c:	b086      	sub	sp, #24
  40142e:	4607      	mov	r7, r0
  401430:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401432:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401434:	680b      	ldr	r3, [r1, #0]
  401436:	9301      	str	r3, [sp, #4]
  401438:	684b      	ldr	r3, [r1, #4]
  40143a:	9302      	str	r3, [sp, #8]
  40143c:	2300      	movs	r3, #0
  40143e:	9303      	str	r3, [sp, #12]
  401440:	9304      	str	r3, [sp, #16]
  401442:	7903      	ldrb	r3, [r0, #4]
  401444:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401448:	1c26      	adds	r6, r4, #0
  40144a:	bf18      	it	ne
  40144c:	2601      	movne	r6, #1
  40144e:	f240 2231 	movw	r2, #561	; 0x231
  401452:	4933      	ldr	r1, [pc, #204]	; (401520 <_spi_m_sync_trans+0xf8>)
  401454:	2800      	cmp	r0, #0
  401456:	bf0c      	ite	eq
  401458:	2000      	moveq	r0, #0
  40145a:	f006 0001 	andne.w	r0, r6, #1
  40145e:	4b31      	ldr	r3, [pc, #196]	; (401524 <_spi_m_sync_trans+0xfc>)
  401460:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401462:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401464:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401468:	d122      	bne.n	4014b0 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  40146a:	f06f 0013 	mvn.w	r0, #19
  40146e:	e053      	b.n	401518 <_spi_m_sync_trans+0xf0>
		return false;
  401470:	2300      	movs	r3, #0
  401472:	e035      	b.n	4014e0 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401474:	7850      	ldrb	r0, [r2, #1]
  401476:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  40147a:	3202      	adds	r2, #2
  40147c:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  40147e:	3301      	adds	r3, #1
  401480:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  401482:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  401484:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  401488:	f240 2222 	movw	r2, #546	; 0x222
  40148c:	4924      	ldr	r1, [pc, #144]	; (401520 <_spi_m_sync_trans+0xf8>)
  40148e:	4630      	mov	r0, r6
  401490:	4b24      	ldr	r3, [pc, #144]	; (401524 <_spi_m_sync_trans+0xfc>)
  401492:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  401494:	f018 0f08 	tst.w	r8, #8
  401498:	d038      	beq.n	40150c <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  40149a:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  40149e:	2800      	cmp	r0, #0
  4014a0:	db36      	blt.n	401510 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4014a2:	9803      	ldr	r0, [sp, #12]
  4014a4:	68ab      	ldr	r3, [r5, #8]
  4014a6:	4298      	cmp	r0, r3
  4014a8:	d302      	bcc.n	4014b0 <_spi_m_sync_trans+0x88>
  4014aa:	9a04      	ldr	r2, [sp, #16]
  4014ac:	4293      	cmp	r3, r2
  4014ae:	d92f      	bls.n	401510 <_spi_m_sync_trans+0xe8>
  4014b0:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  4014b2:	f013 0f01 	tst.w	r3, #1
  4014b6:	d0db      	beq.n	401470 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4014b8:	68a3      	ldr	r3, [r4, #8]
  4014ba:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  4014bc:	9a02      	ldr	r2, [sp, #8]
  4014be:	b15a      	cbz	r2, 4014d8 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  4014c0:	1c51      	adds	r1, r2, #1
  4014c2:	9102      	str	r1, [sp, #8]
  4014c4:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  4014c6:	f89d 2014 	ldrb.w	r2, [sp, #20]
  4014ca:	2a01      	cmp	r2, #1
  4014cc:	d904      	bls.n	4014d8 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  4014ce:	460a      	mov	r2, r1
  4014d0:	3101      	adds	r1, #1
  4014d2:	9102      	str	r1, [sp, #8]
  4014d4:	0a1b      	lsrs	r3, r3, #8
  4014d6:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  4014d8:	9b04      	ldr	r3, [sp, #16]
  4014da:	3301      	adds	r3, #1
  4014dc:	9304      	str	r3, [sp, #16]
	return true;
  4014de:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  4014e0:	2b00      	cmp	r3, #0
  4014e2:	d1cf      	bne.n	401484 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  4014e4:	9b03      	ldr	r3, [sp, #12]
  4014e6:	9a04      	ldr	r2, [sp, #16]
  4014e8:	429a      	cmp	r2, r3
  4014ea:	d3cb      	bcc.n	401484 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  4014ec:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  4014ee:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  4014f0:	f012 0f02 	tst.w	r2, #2
  4014f4:	d0c6      	beq.n	401484 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  4014f6:	9a01      	ldr	r2, [sp, #4]
  4014f8:	2a00      	cmp	r2, #0
  4014fa:	d0c0      	beq.n	40147e <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  4014fc:	1c51      	adds	r1, r2, #1
  4014fe:	9101      	str	r1, [sp, #4]
  401500:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401502:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401506:	2801      	cmp	r0, #1
  401508:	d8b4      	bhi.n	401474 <_spi_m_sync_trans+0x4c>
  40150a:	e7b8      	b.n	40147e <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  40150c:	2000      	movs	r0, #0
  40150e:	e7c6      	b.n	40149e <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401510:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401512:	f413 7f00 	tst.w	r3, #512	; 0x200
  401516:	d0fb      	beq.n	401510 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401518:	b006      	add	sp, #24
  40151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40151e:	bf00      	nop
  401520:	00403120 	.word	0x00403120
  401524:	00400c49 	.word	0x00400c49

00401528 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401528:	2000      	movs	r0, #0
  40152a:	4770      	bx	lr

0040152c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40152c:	4b03      	ldr	r3, [pc, #12]	; (40153c <_system_time_init+0x10>)
  40152e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401532:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401534:	2205      	movs	r2, #5
  401536:	601a      	str	r2, [r3, #0]
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	e000e010 	.word	0xe000e010

00401540 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401540:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401542:	4b01      	ldr	r3, [pc, #4]	; (401548 <_delay_init+0x8>)
  401544:	4798      	blx	r3
  401546:	bd08      	pop	{r3, pc}
  401548:	0040152d 	.word	0x0040152d

0040154c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  40154c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40154e:	e00d      	b.n	40156c <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401550:	4b0d      	ldr	r3, [pc, #52]	; (401588 <_delay_cycles+0x3c>)
  401552:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401556:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401558:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40155a:	4b0b      	ldr	r3, [pc, #44]	; (401588 <_delay_cycles+0x3c>)
  40155c:	681b      	ldr	r3, [r3, #0]
  40155e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401562:	d0fa      	beq.n	40155a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401564:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401568:	3101      	adds	r1, #1
	while (n--) {
  40156a:	4610      	mov	r0, r2
  40156c:	1e43      	subs	r3, r0, #1
  40156e:	b2da      	uxtb	r2, r3
  401570:	2800      	cmp	r0, #0
  401572:	d1ed      	bne.n	401550 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401574:	4b04      	ldr	r3, [pc, #16]	; (401588 <_delay_cycles+0x3c>)
  401576:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401578:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40157a:	4b03      	ldr	r3, [pc, #12]	; (401588 <_delay_cycles+0x3c>)
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401582:	d0fa      	beq.n	40157a <_delay_cycles+0x2e>
		;
}
  401584:	4770      	bx	lr
  401586:	bf00      	nop
  401588:	e000e010 	.word	0xe000e010

0040158c <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  40158c:	2300      	movs	r3, #0
  40158e:	b13b      	cbz	r3, 4015a0 <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  401590:	2000      	movs	r0, #0
  401592:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  401594:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401598:	00e3      	lsls	r3, r4, #3
  40159a:	4608      	mov	r0, r1
  40159c:	4418      	add	r0, r3
  40159e:	e00c      	b.n	4015ba <_get_i2cm_sync_cfg+0x2e>
{
  4015a0:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  4015a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4015a6:	00ca      	lsls	r2, r1, #3
  4015a8:	4905      	ldr	r1, [pc, #20]	; (4015c0 <_get_i2cm_sync_cfg+0x34>)
  4015aa:	588a      	ldr	r2, [r1, r2]
  4015ac:	4282      	cmp	r2, r0
  4015ae:	d0f1      	beq.n	401594 <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4015b0:	3301      	adds	r3, #1
  4015b2:	b2db      	uxtb	r3, r3
  4015b4:	2b00      	cmp	r3, #0
  4015b6:	d0f4      	beq.n	4015a2 <_get_i2cm_sync_cfg+0x16>
	return NULL;
  4015b8:	2000      	movs	r0, #0
}
  4015ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015be:	4770      	bx	lr
  4015c0:	00403138 	.word	0x00403138

004015c4 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  4015c4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  4015c6:	4604      	mov	r4, r0
  4015c8:	460d      	mov	r5, r1
  4015ca:	2800      	cmp	r0, #0
  4015cc:	bf18      	it	ne
  4015ce:	2900      	cmpne	r1, #0
  4015d0:	bf14      	ite	ne
  4015d2:	2001      	movne	r0, #1
  4015d4:	2000      	moveq	r0, #0
  4015d6:	2278      	movs	r2, #120	; 0x78
  4015d8:	4909      	ldr	r1, [pc, #36]	; (401600 <_i2c_m_sync_init+0x3c>)
  4015da:	4b0a      	ldr	r3, [pc, #40]	; (401604 <_i2c_m_sync_init+0x40>)
  4015dc:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  4015de:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  4015e0:	4628      	mov	r0, r5
  4015e2:	4b09      	ldr	r3, [pc, #36]	; (401608 <_i2c_m_sync_init+0x44>)
  4015e4:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  4015e6:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  4015e8:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  4015ea:	6923      	ldr	r3, [r4, #16]
  4015ec:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  4015ee:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  4015f0:	6923      	ldr	r3, [r4, #16]
  4015f2:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  4015f4:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  4015f6:	6923      	ldr	r3, [r4, #16]
  4015f8:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  4015fa:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  4015fc:	2000      	movs	r0, #0
  4015fe:	bd38      	pop	{r3, r4, r5, pc}
  401600:	00403150 	.word	0x00403150
  401604:	00400c49 	.word	0x00400c49
  401608:	0040158d 	.word	0x0040158d

0040160c <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  40160c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  40160e:	4604      	mov	r4, r0
  401610:	460d      	mov	r5, r1
  401612:	2800      	cmp	r0, #0
  401614:	bf18      	it	ne
  401616:	2900      	cmpne	r1, #0
  401618:	bf14      	ite	ne
  40161a:	2001      	movne	r0, #1
  40161c:	2000      	moveq	r0, #0
  40161e:	22ba      	movs	r2, #186	; 0xba
  401620:	4952      	ldr	r1, [pc, #328]	; (40176c <_i2c_m_sync_transfer+0x160>)
  401622:	4b53      	ldr	r3, [pc, #332]	; (401770 <_i2c_m_sync_transfer+0x164>)
  401624:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  401626:	8863      	ldrh	r3, [r4, #2]
  401628:	f413 7f80 	tst.w	r3, #256	; 0x100
  40162c:	f040 809a 	bne.w	401764 <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401630:	886b      	ldrh	r3, [r5, #2]
  401632:	f013 0f01 	tst.w	r3, #1
  401636:	d118      	bne.n	40166a <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401638:	886b      	ldrh	r3, [r5, #2]
  40163a:	b29b      	uxth	r3, r3
  40163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401640:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401642:	882b      	ldrh	r3, [r5, #0]
  401644:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401648:	d05f      	beq.n	40170a <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  40164a:	6922      	ldr	r2, [r4, #16]
  40164c:	0a1b      	lsrs	r3, r3, #8
  40164e:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401652:	041b      	lsls	r3, r3, #16
  401654:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  40165c:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  40165e:	6923      	ldr	r3, [r4, #16]
  401660:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401662:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  401664:	2000      	movs	r0, #0
  401666:	4601      	mov	r1, r0
  401668:	e05c      	b.n	401724 <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  40166a:	886b      	ldrh	r3, [r5, #2]
  40166c:	b29b      	uxth	r3, r3
  40166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401672:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401674:	882b      	ldrh	r3, [r5, #0]
  401676:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40167a:	d022      	beq.n	4016c2 <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  40167c:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  40167e:	0a1b      	lsrs	r3, r3, #8
  401680:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401684:	041b      	lsls	r3, r3, #16
  401686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40168a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  40168e:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401690:	6923      	ldr	r3, [r4, #16]
  401692:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401694:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  401696:	6923      	ldr	r3, [r4, #16]
  401698:	686a      	ldr	r2, [r5, #4]
  40169a:	2a01      	cmp	r2, #1
  40169c:	d019      	beq.n	4016d2 <_i2c_m_sync_transfer+0xc6>
  40169e:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  4016a0:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  4016a2:	2100      	movs	r1, #0
  4016a4:	686b      	ldr	r3, [r5, #4]
  4016a6:	4299      	cmp	r1, r3
  4016a8:	d222      	bcs.n	4016f0 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  4016aa:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  4016ac:	6a1a      	ldr	r2, [r3, #32]
  4016ae:	f012 0f02 	tst.w	r2, #2
  4016b2:	d110      	bne.n	4016d6 <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  4016b4:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  4016b6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4016ba:	d0f6      	beq.n	4016aa <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  4016bc:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  4016c0:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  4016c2:	6922      	ldr	r2, [r4, #16]
  4016c4:	041b      	lsls	r3, r3, #16
  4016c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4016ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  4016ce:	6053      	str	r3, [r2, #4]
  4016d0:	e7e1      	b.n	401696 <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4016d2:	2203      	movs	r2, #3
  4016d4:	e7e4      	b.n	4016a0 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  4016d6:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  4016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016da:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  4016dc:	686b      	ldr	r3, [r5, #4]
  4016de:	3b02      	subs	r3, #2
  4016e0:	4299      	cmp	r1, r3
  4016e2:	d001      	beq.n	4016e8 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  4016e4:	3101      	adds	r1, #1
  4016e6:	e7dd      	b.n	4016a4 <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  4016e8:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  4016ea:	2202      	movs	r2, #2
  4016ec:	601a      	str	r2, [r3, #0]
  4016ee:	e7f9      	b.n	4016e4 <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  4016f0:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  4016f2:	6a1b      	ldr	r3, [r3, #32]
  4016f4:	f013 0f01 	tst.w	r3, #1
  4016f8:	d0fa      	beq.n	4016f0 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  4016fa:	8863      	ldrh	r3, [r4, #2]
  4016fc:	b29b      	uxth	r3, r3
  4016fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401702:	b29b      	uxth	r3, r3
  401704:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  401706:	2000      	movs	r0, #0
  401708:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  40170a:	6922      	ldr	r2, [r4, #16]
  40170c:	041b      	lsls	r3, r3, #16
  40170e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  401712:	6053      	str	r3, [r2, #4]
  401714:	e7a6      	b.n	401664 <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  401716:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  40171a:	b978      	cbnz	r0, 40173c <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  40171c:	68ab      	ldr	r3, [r5, #8]
  40171e:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  401720:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  401722:	3101      	adds	r1, #1
  401724:	686b      	ldr	r3, [r5, #4]
  401726:	4299      	cmp	r1, r3
  401728:	d208      	bcs.n	40173c <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  40172a:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  40172c:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  40172e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401732:	d1f0      	bne.n	401716 <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  401734:	f013 0f04 	tst.w	r3, #4
  401738:	d0f7      	beq.n	40172a <_i2c_m_sync_transfer+0x11e>
  40173a:	e7ee      	b.n	40171a <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  40173c:	886b      	ldrh	r3, [r5, #2]
  40173e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401742:	d106      	bne.n	401752 <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401744:	8863      	ldrh	r3, [r4, #2]
  401746:	b29b      	uxth	r3, r3
  401748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40174c:	b29b      	uxth	r3, r3
  40174e:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  401750:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401752:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401754:	2202      	movs	r2, #2
  401756:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401758:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  40175a:	6a1b      	ldr	r3, [r3, #32]
  40175c:	f013 0f01 	tst.w	r3, #1
  401760:	d0fa      	beq.n	401758 <_i2c_m_sync_transfer+0x14c>
  401762:	e7ef      	b.n	401744 <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  401764:	f06f 0005 	mvn.w	r0, #5
}
  401768:	bd38      	pop	{r3, r4, r5, pc}
  40176a:	bf00      	nop
  40176c:	00403150 	.word	0x00403150
  401770:	00400c49 	.word	0x00400c49

00401774 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401774:	b510      	push	{r4, lr}
	ASSERT(hw);
  401776:	4604      	mov	r4, r0
  401778:	f240 222b 	movw	r2, #555	; 0x22b
  40177c:	4905      	ldr	r1, [pc, #20]	; (401794 <_usart_get_hardware_index+0x20>)
  40177e:	3000      	adds	r0, #0
  401780:	bf18      	it	ne
  401782:	2001      	movne	r0, #1
  401784:	4b04      	ldr	r3, [pc, #16]	; (401798 <_usart_get_hardware_index+0x24>)
  401786:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401788:	4804      	ldr	r0, [pc, #16]	; (40179c <_usart_get_hardware_index+0x28>)
  40178a:	4420      	add	r0, r4
}
  40178c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401790:	bd10      	pop	{r4, pc}
  401792:	bf00      	nop
  401794:	00403178 	.word	0x00403178
  401798:	00400c49 	.word	0x00400c49
  40179c:	bffdc000 	.word	0xbffdc000

004017a0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4017a0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017a2:	4604      	mov	r4, r0
  4017a4:	f240 2287 	movw	r2, #647	; 0x287
  4017a8:	490e      	ldr	r1, [pc, #56]	; (4017e4 <_get_usart_index+0x44>)
  4017aa:	3000      	adds	r0, #0
  4017ac:	bf18      	it	ne
  4017ae:	2001      	movne	r0, #1
  4017b0:	4b0d      	ldr	r3, [pc, #52]	; (4017e8 <_get_usart_index+0x48>)
  4017b2:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4017b4:	4620      	mov	r0, r4
  4017b6:	4b0d      	ldr	r3, [pc, #52]	; (4017ec <_get_usart_index+0x4c>)
  4017b8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4017ba:	2300      	movs	r3, #0
  4017bc:	b143      	cbz	r3, 4017d0 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4017be:	f240 2291 	movw	r2, #657	; 0x291
  4017c2:	4908      	ldr	r1, [pc, #32]	; (4017e4 <_get_usart_index+0x44>)
  4017c4:	2000      	movs	r0, #0
  4017c6:	4b08      	ldr	r3, [pc, #32]	; (4017e8 <_get_usart_index+0x48>)
  4017c8:	4798      	blx	r3
	return 0;
  4017ca:	2300      	movs	r3, #0
}
  4017cc:	4618      	mov	r0, r3
  4017ce:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4017d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4017d4:	008a      	lsls	r2, r1, #2
  4017d6:	4906      	ldr	r1, [pc, #24]	; (4017f0 <_get_usart_index+0x50>)
  4017d8:	5c8a      	ldrb	r2, [r1, r2]
  4017da:	4290      	cmp	r0, r2
  4017dc:	d0f6      	beq.n	4017cc <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4017de:	3301      	adds	r3, #1
  4017e0:	b2db      	uxtb	r3, r3
  4017e2:	e7eb      	b.n	4017bc <_get_usart_index+0x1c>
  4017e4:	00403178 	.word	0x00403178
  4017e8:	00400c49 	.word	0x00400c49
  4017ec:	00401775 	.word	0x00401775
  4017f0:	0040316c 	.word	0x0040316c

004017f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4017f4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017f6:	4604      	mov	r4, r0
  4017f8:	f240 229e 	movw	r2, #670	; 0x29e
  4017fc:	4911      	ldr	r1, [pc, #68]	; (401844 <_usart_init+0x50>)
  4017fe:	3000      	adds	r0, #0
  401800:	bf18      	it	ne
  401802:	2001      	movne	r0, #1
  401804:	4b10      	ldr	r3, [pc, #64]	; (401848 <_usart_init+0x54>)
  401806:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401808:	4620      	mov	r0, r4
  40180a:	4b10      	ldr	r3, [pc, #64]	; (40184c <_usart_init+0x58>)
  40180c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40180e:	4b10      	ldr	r3, [pc, #64]	; (401850 <_usart_init+0x5c>)
  401810:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401814:	2300      	movs	r3, #0
  401816:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401818:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40181a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40181c:	22ac      	movs	r2, #172	; 0xac
  40181e:	6022      	str	r2, [r4, #0]
  401820:	f44f 7280 	mov.w	r2, #256	; 0x100
  401824:	6022      	str	r2, [r4, #0]
  401826:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40182a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40182c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401830:	0081      	lsls	r1, r0, #2
  401832:	4a08      	ldr	r2, [pc, #32]	; (401854 <_usart_init+0x60>)
  401834:	440a      	add	r2, r1
  401836:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401838:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40183a:	4a07      	ldr	r2, [pc, #28]	; (401858 <_usart_init+0x64>)
  40183c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40183e:	4618      	mov	r0, r3
  401840:	bd10      	pop	{r4, pc}
  401842:	bf00      	nop
  401844:	00403178 	.word	0x00403178
  401848:	00400c49 	.word	0x00400c49
  40184c:	004017a1 	.word	0x004017a1
  401850:	55534100 	.word	0x55534100
  401854:	0040316c 	.word	0x0040316c
  401858:	000100f4 	.word	0x000100f4

0040185c <_usart_sync_init>:
{
  40185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40185e:	460c      	mov	r4, r1
	ASSERT(device);
  401860:	4e09      	ldr	r6, [pc, #36]	; (401888 <_usart_sync_init+0x2c>)
  401862:	4607      	mov	r7, r0
  401864:	22bd      	movs	r2, #189	; 0xbd
  401866:	4631      	mov	r1, r6
  401868:	3000      	adds	r0, #0
  40186a:	bf18      	it	ne
  40186c:	2001      	movne	r0, #1
  40186e:	4d07      	ldr	r5, [pc, #28]	; (40188c <_usart_sync_init+0x30>)
  401870:	47a8      	blx	r5
	ASSERT(hw);
  401872:	22be      	movs	r2, #190	; 0xbe
  401874:	4631      	mov	r1, r6
  401876:	1c20      	adds	r0, r4, #0
  401878:	bf18      	it	ne
  40187a:	2001      	movne	r0, #1
  40187c:	47a8      	blx	r5
	device->hw = hw;
  40187e:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401880:	4620      	mov	r0, r4
  401882:	4b03      	ldr	r3, [pc, #12]	; (401890 <_usart_sync_init+0x34>)
  401884:	4798      	blx	r3
}
  401886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401888:	00403178 	.word	0x00403178
  40188c:	00400c49 	.word	0x00400c49
  401890:	004017f5 	.word	0x004017f5

00401894 <_usart_sync_enable>:
{
  401894:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401896:	4e0a      	ldr	r6, [pc, #40]	; (4018c0 <_usart_sync_enable+0x2c>)
  401898:	4604      	mov	r4, r0
  40189a:	f240 1205 	movw	r2, #261	; 0x105
  40189e:	4631      	mov	r1, r6
  4018a0:	3000      	adds	r0, #0
  4018a2:	bf18      	it	ne
  4018a4:	2001      	movne	r0, #1
  4018a6:	4d07      	ldr	r5, [pc, #28]	; (4018c4 <_usart_sync_enable+0x30>)
  4018a8:	47a8      	blx	r5
	_usart_enable(device->hw);
  4018aa:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4018ac:	f240 22c7 	movw	r2, #711	; 0x2c7
  4018b0:	4631      	mov	r1, r6
  4018b2:	1c20      	adds	r0, r4, #0
  4018b4:	bf18      	it	ne
  4018b6:	2001      	movne	r0, #1
  4018b8:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4018ba:	2350      	movs	r3, #80	; 0x50
  4018bc:	6023      	str	r3, [r4, #0]
  4018be:	bd70      	pop	{r4, r5, r6, pc}
  4018c0:	00403178 	.word	0x00403178
  4018c4:	00400c49 	.word	0x00400c49

004018c8 <_usart_sync_write_byte>:
{
  4018c8:	b538      	push	{r3, r4, r5, lr}
  4018ca:	460c      	mov	r4, r1
	ASSERT(device);
  4018cc:	4605      	mov	r5, r0
  4018ce:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4018d2:	4904      	ldr	r1, [pc, #16]	; (4018e4 <_usart_sync_write_byte+0x1c>)
  4018d4:	3000      	adds	r0, #0
  4018d6:	bf18      	it	ne
  4018d8:	2001      	movne	r0, #1
  4018da:	4b03      	ldr	r3, [pc, #12]	; (4018e8 <_usart_sync_write_byte+0x20>)
  4018dc:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4018de:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4018e0:	61dc      	str	r4, [r3, #28]
  4018e2:	bd38      	pop	{r3, r4, r5, pc}
  4018e4:	00403178 	.word	0x00403178
  4018e8:	00400c49 	.word	0x00400c49

004018ec <_usart_sync_read_byte>:
{
  4018ec:	b510      	push	{r4, lr}
	ASSERT(device);
  4018ee:	4604      	mov	r4, r0
  4018f0:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4018f4:	4904      	ldr	r1, [pc, #16]	; (401908 <_usart_sync_read_byte+0x1c>)
  4018f6:	3000      	adds	r0, #0
  4018f8:	bf18      	it	ne
  4018fa:	2001      	movne	r0, #1
  4018fc:	4b03      	ldr	r3, [pc, #12]	; (40190c <_usart_sync_read_byte+0x20>)
  4018fe:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401900:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401902:	6998      	ldr	r0, [r3, #24]
}
  401904:	b2c0      	uxtb	r0, r0
  401906:	bd10      	pop	{r4, pc}
  401908:	00403178 	.word	0x00403178
  40190c:	00400c49 	.word	0x00400c49

00401910 <_usart_sync_is_ready_to_send>:
{
  401910:	b510      	push	{r4, lr}
	ASSERT(device);
  401912:	4604      	mov	r4, r0
  401914:	f240 12c3 	movw	r2, #451	; 0x1c3
  401918:	4905      	ldr	r1, [pc, #20]	; (401930 <_usart_sync_is_ready_to_send+0x20>)
  40191a:	3000      	adds	r0, #0
  40191c:	bf18      	it	ne
  40191e:	2001      	movne	r0, #1
  401920:	4b04      	ldr	r3, [pc, #16]	; (401934 <_usart_sync_is_ready_to_send+0x24>)
  401922:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401924:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401926:	6958      	ldr	r0, [r3, #20]
}
  401928:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40192c:	bd10      	pop	{r4, pc}
  40192e:	bf00      	nop
  401930:	00403178 	.word	0x00403178
  401934:	00400c49 	.word	0x00400c49

00401938 <_usart_sync_is_transmit_done>:
{
  401938:	b510      	push	{r4, lr}
	ASSERT(device);
  40193a:	4604      	mov	r4, r0
  40193c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401940:	4905      	ldr	r1, [pc, #20]	; (401958 <_usart_sync_is_transmit_done+0x20>)
  401942:	3000      	adds	r0, #0
  401944:	bf18      	it	ne
  401946:	2001      	movne	r0, #1
  401948:	4b04      	ldr	r3, [pc, #16]	; (40195c <_usart_sync_is_transmit_done+0x24>)
  40194a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  40194c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40194e:	6958      	ldr	r0, [r3, #20]
}
  401950:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401954:	bd10      	pop	{r4, pc}
  401956:	bf00      	nop
  401958:	00403178 	.word	0x00403178
  40195c:	00400c49 	.word	0x00400c49

00401960 <_usart_sync_is_byte_received>:
{
  401960:	b510      	push	{r4, lr}
	ASSERT(device);
  401962:	4604      	mov	r4, r0
  401964:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401968:	4905      	ldr	r1, [pc, #20]	; (401980 <_usart_sync_is_byte_received+0x20>)
  40196a:	3000      	adds	r0, #0
  40196c:	bf18      	it	ne
  40196e:	2001      	movne	r0, #1
  401970:	4b04      	ldr	r3, [pc, #16]	; (401984 <_usart_sync_is_byte_received+0x24>)
  401972:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401974:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401976:	6958      	ldr	r0, [r3, #20]
  401978:	f000 0001 	and.w	r0, r0, #1
}
  40197c:	bd10      	pop	{r4, pc}
  40197e:	bf00      	nop
  401980:	00403178 	.word	0x00403178
  401984:	00400c49 	.word	0x00400c49

00401988 <_usart_get_usart_sync>:
}
  401988:	2000      	movs	r0, #0
  40198a:	4770      	bx	lr

0040198c <float_to_two_byte>:
		//adc_sync_read_channel(&ADC_0, 0, &buff[0], 2);
		//value = buff[0] + (buff[1] << 8);
	}
}

void float_to_two_byte(float velocity, uint8_t data[], uint8_t byte_location){
  40198c:	b082      	sub	sp, #8
	int16_t velocity_mod = velocity * VELOCITY_MODIFIER;
  40198e:	eddf 7a09 	vldr	s15, [pc, #36]	; 4019b4 <float_to_two_byte+0x28>
  401992:	ee07 0a10 	vmov	s14, r0
  401996:	ee67 7a27 	vmul.f32	s15, s14, s15
  40199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  40199e:	edcd 7a01 	vstr	s15, [sp, #4]
  4019a2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
	data[byte_location] = velocity_mod & 0x00FF;
  4019a6:	548b      	strb	r3, [r1, r2]
	data[byte_location + 1] = velocity_mod >> 8;
  4019a8:	3201      	adds	r2, #1
  4019aa:	121b      	asrs	r3, r3, #8
  4019ac:	548b      	strb	r3, [r1, r2]
}
  4019ae:	b002      	add	sp, #8
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop
  4019b4:	447a0000 	.word	0x447a0000

004019b8 <main>:
{
  4019b8:	b530      	push	{r4, r5, lr}
  4019ba:	b089      	sub	sp, #36	; 0x24
	atmel_start_init();
  4019bc:	4b1c      	ldr	r3, [pc, #112]	; (401a30 <main+0x78>)
  4019be:	4798      	blx	r3
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  4019c0:	2220      	movs	r2, #32
  4019c2:	2100      	movs	r1, #0
  4019c4:	4668      	mov	r0, sp
  4019c6:	4b1b      	ldr	r3, [pc, #108]	; (401a34 <main+0x7c>)
  4019c8:	4798      	blx	r3
	data_store[0] = 0b1111;
  4019ca:	230f      	movs	r3, #15
  4019cc:	f88d 3000 	strb.w	r3, [sp]
	nRF24_init(data_store);
  4019d0:	4668      	mov	r0, sp
  4019d2:	4b19      	ldr	r3, [pc, #100]	; (401a38 <main+0x80>)
  4019d4:	4798      	blx	r3
	delay_us(500); //Should be 200 us, setting higher for testing
  4019d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4019da:	4b18      	ldr	r3, [pc, #96]	; (401a3c <main+0x84>)
  4019dc:	4798      	blx	r3
	adc_sync_enable_channel(&ADC_0, 0);
  4019de:	2100      	movs	r1, #0
  4019e0:	4817      	ldr	r0, [pc, #92]	; (401a40 <main+0x88>)
  4019e2:	4b18      	ldr	r3, [pc, #96]	; (401a44 <main+0x8c>)
  4019e4:	4798      	blx	r3
		data_store[0] = 2;
  4019e6:	ac08      	add	r4, sp, #32
  4019e8:	2302      	movs	r3, #2
  4019ea:	f804 3d20 	strb.w	r3, [r4, #-32]!
		float_to_two_byte(target_speed_0, &data_store[0], 1);
  4019ee:	2201      	movs	r2, #1
  4019f0:	4621      	mov	r1, r4
  4019f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4019f6:	4d14      	ldr	r5, [pc, #80]	; (401a48 <main+0x90>)
  4019f8:	47a8      	blx	r5
		float_to_two_byte(target_speed_1, &data_store[0], 3);
  4019fa:	2203      	movs	r2, #3
  4019fc:	4621      	mov	r1, r4
  4019fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  401a02:	47a8      	blx	r5
		float_to_two_byte(target_speed_2, &data_store[0], 5);
  401a04:	2205      	movs	r2, #5
  401a06:	4621      	mov	r1, r4
  401a08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  401a0c:	47a8      	blx	r5
		float_to_two_byte(target_speed_3, &data_store[0], 7);
  401a0e:	2207      	movs	r2, #7
  401a10:	4621      	mov	r1, r4
  401a12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  401a16:	47a8      	blx	r5
		nRF24_transmit(&data_store[0]);
  401a18:	4620      	mov	r0, r4
  401a1a:	4b0c      	ldr	r3, [pc, #48]	; (401a4c <main+0x94>)
  401a1c:	4798      	blx	r3
		memset(&data_store[0], 0, sizeof(uint8_t)*32);
  401a1e:	2220      	movs	r2, #32
  401a20:	2100      	movs	r1, #0
  401a22:	4620      	mov	r0, r4
  401a24:	4b03      	ldr	r3, [pc, #12]	; (401a34 <main+0x7c>)
  401a26:	4798      	blx	r3
		delay_ms(5);
  401a28:	2005      	movs	r0, #5
  401a2a:	4b09      	ldr	r3, [pc, #36]	; (401a50 <main+0x98>)
  401a2c:	4798      	blx	r3
  401a2e:	e7da      	b.n	4019e6 <main+0x2e>
  401a30:	004001d5 	.word	0x004001d5
  401a34:	00401e2d 	.word	0x00401e2d
  401a38:	00401be9 	.word	0x00401be9
  401a3c:	004006a9 	.word	0x004006a9
  401a40:	204000e0 	.word	0x204000e0
  401a44:	0040064d 	.word	0x0040064d
  401a48:	0040198d 	.word	0x0040198d
  401a4c:	00401ca1 	.word	0x00401ca1
  401a50:	004006c9 	.word	0x004006c9

00401a54 <nRF24_write_to_register>:
/* The io_descriptor and pointer for the received byte array are declared. */
struct io_descriptor *spi_0_io;
uint8_t* global_data_pointer;

/* This function takes in a byte indicating which of the nRF24's registers should be written to, and then a single byte of data to write to that register */
void nRF24_write_to_register(uint8_t registerd, uint8_t data){
  401a54:	b530      	push	{r4, r5, lr}
  401a56:	b083      	sub	sp, #12
	memset(&buffer[0], 0, sizeof(uint8_t)*2);
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer[0] = buffer[0] | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer[0] = (buffer[0]) | registerd;
  401a58:	f040 0020 	orr.w	r0, r0, #32
  401a5c:	f88d 0004 	strb.w	r0, [sp, #4]
	/* Set the second byte of the buffer equal to the passed in data to be written to the register */
	buffer[1] = data;
  401a60:	f88d 1005 	strb.w	r1, [sp, #5]
	((Pio *)hw)->PIO_CODR = mask;
  401a64:	4c06      	ldr	r4, [pc, #24]	; (401a80 <nRF24_write_to_register+0x2c>)
  401a66:	f44f 7500 	mov.w	r5, #512	; 0x200
  401a6a:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, buffer, 2); //Write the constructed 2 byte packet to the nRF24 over SPI
  401a6c:	2202      	movs	r2, #2
  401a6e:	a901      	add	r1, sp, #4
  401a70:	4b04      	ldr	r3, [pc, #16]	; (401a84 <nRF24_write_to_register+0x30>)
  401a72:	6818      	ldr	r0, [r3, #0]
  401a74:	4b04      	ldr	r3, [pc, #16]	; (401a88 <nRF24_write_to_register+0x34>)
  401a76:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401a78:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  401a7a:	b003      	add	sp, #12
  401a7c:	bd30      	pop	{r4, r5, pc}
  401a7e:	bf00      	nop
  401a80:	400e1200 	.word	0x400e1200
  401a84:	20400120 	.word	0x20400120
  401a88:	004008d1 	.word	0x004008d1

00401a8c <nRF24_write_to_register_multi_byte>:

/* This function takes in a byte indicating which of the nRF24's registers should be written to, a pointer to multiple bytes of data to be written to that register, and the length
(in number of bytes) of the data to be sent to the register */
void nRF24_write_to_register_multi_byte(uint8_t registerd, uint8_t *data, int length){
  401a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401a90:	b083      	sub	sp, #12
  401a92:	4688      	mov	r8, r1
  401a94:	4691      	mov	r9, r2
	buffer = 0;
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer = buffer | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  401a96:	f040 0020 	orr.w	r0, r0, #32
  401a9a:	a902      	add	r1, sp, #8
  401a9c:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  401aa0:	4c08      	ldr	r4, [pc, #32]	; (401ac4 <nRF24_write_to_register_multi_byte+0x38>)
  401aa2:	f44f 7500 	mov.w	r5, #512	; 0x200
  401aa6:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); //Write the constructed 1 byte (does not contain any of the data to be written to the register) packet to the nRF24 over SPI
  401aa8:	4f07      	ldr	r7, [pc, #28]	; (401ac8 <nRF24_write_to_register_multi_byte+0x3c>)
  401aaa:	2201      	movs	r2, #1
  401aac:	6838      	ldr	r0, [r7, #0]
  401aae:	4e07      	ldr	r6, [pc, #28]	; (401acc <nRF24_write_to_register_multi_byte+0x40>)
  401ab0:	47b0      	blx	r6
	io_write(spi_0_io, data, length); //Write all of the data to be written to the register to the nRF24 over SPI
  401ab2:	fa1f f289 	uxth.w	r2, r9
  401ab6:	4641      	mov	r1, r8
  401ab8:	6838      	ldr	r0, [r7, #0]
  401aba:	47b0      	blx	r6
	((Pio *)hw)->PIO_SODR = mask;
  401abc:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  401abe:	b003      	add	sp, #12
  401ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ac4:	400e1200 	.word	0x400e1200
  401ac8:	20400120 	.word	0x20400120
  401acc:	004008d1 	.word	0x004008d1

00401ad0 <nRF24_read_from_register>:

/* This function takes in a byte indicating which of the nRF24's registers should be read from, and then reads in a single byte from that register and returns it to the function caller */
uint8_t nRF24_read_from_register(uint8_t registerd){
  401ad0:	b570      	push	{r4, r5, r6, lr}
  401ad2:	b082      	sub	sp, #8
	/* Initialize a 1 byte buffer to all zeros. Bits 7:5 will be the Read to Register SPI command word (000), and then bits 4:0 will be the 5 bit long register number to read from */
	uint8_t buffer;
	buffer = 0;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  401ad4:	a902      	add	r1, sp, #8
  401ad6:	f801 0d02 	strb.w	r0, [r1, #-2]!
	((Pio *)hw)->PIO_CODR = mask;
  401ada:	4c0a      	ldr	r4, [pc, #40]	; (401b04 <nRF24_read_from_register+0x34>)
  401adc:	f44f 7500 	mov.w	r5, #512	; 0x200
  401ae0:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); /* Write the constructed 1 byte packet to the nRF24 over SPI. This will tell the nRF24 that the next time we read, we would like it to return the 1 byte
  401ae2:	4e09      	ldr	r6, [pc, #36]	; (401b08 <nRF24_read_from_register+0x38>)
  401ae4:	2201      	movs	r2, #1
  401ae6:	6830      	ldr	r0, [r6, #0]
  401ae8:	4b08      	ldr	r3, [pc, #32]	; (401b0c <nRF24_read_from_register+0x3c>)
  401aea:	4798      	blx	r3
	of data from the target register */
	io_read(spi_0_io, &in_byte, 1); /* Read the 1 byte of data into the in_byte buffer */
  401aec:	2201      	movs	r2, #1
  401aee:	f10d 0107 	add.w	r1, sp, #7
  401af2:	6830      	ldr	r0, [r6, #0]
  401af4:	4b06      	ldr	r3, [pc, #24]	; (401b10 <nRF24_read_from_register+0x40>)
  401af6:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401af8:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
	/* Return the 1 read byte back to the function caller */
	return in_byte;
}
  401afa:	f89d 0007 	ldrb.w	r0, [sp, #7]
  401afe:	b002      	add	sp, #8
  401b00:	bd70      	pop	{r4, r5, r6, pc}
  401b02:	bf00      	nop
  401b04:	400e1200 	.word	0x400e1200
  401b08:	20400120 	.word	0x20400120
  401b0c:	004008d1 	.word	0x004008d1
  401b10:	00400901 	.word	0x00400901

00401b14 <nRF24_send_SPI_command>:
	io_read(spi_0_io, data_pointer, length); /* Read the multiple bytes of data into the pointer that was passed in as a parameter */
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}

/* This function will send a raw SPI command to the nRF24, without reading or writing to or from a particular register. */
void nRF24_send_SPI_command(uint8_t command){
  401b14:	b530      	push	{r4, r5, lr}
  401b16:	b083      	sub	sp, #12
  401b18:	a902      	add	r1, sp, #8
  401b1a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  401b1e:	4c06      	ldr	r4, [pc, #24]	; (401b38 <nRF24_send_SPI_command+0x24>)
  401b20:	f44f 7500 	mov.w	r5, #512	; 0x200
  401b24:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &command, 1); //Send the 1 byte command that was received as a parameter to the nRF24 over SPI
  401b26:	2201      	movs	r2, #1
  401b28:	4b04      	ldr	r3, [pc, #16]	; (401b3c <nRF24_send_SPI_command+0x28>)
  401b2a:	6818      	ldr	r0, [r3, #0]
  401b2c:	4b04      	ldr	r3, [pc, #16]	; (401b40 <nRF24_send_SPI_command+0x2c>)
  401b2e:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401b30:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  401b32:	b003      	add	sp, #12
  401b34:	bd30      	pop	{r4, r5, pc}
  401b36:	bf00      	nop
  401b38:	400e1200 	.word	0x400e1200
  401b3c:	20400120 	.word	0x20400120
  401b40:	004008d1 	.word	0x004008d1

00401b44 <nRF24_receive_data>:
	nRF24_write_to_register_multi_byte(RX_ADDR_P1, &rx_address[0], 5);
	nRF24_write_to_register(RX_PW_P1,32); //32 bytes packet size
	gpio_set_pin_level(RF24_CE, true);
}

void nRF24_receive_data(){
  401b44:	b570      	push	{r4, r5, r6, lr}
  401b46:	b082      	sub	sp, #8
	uint8_t cmd = R_RX_PAYLOAD;
  401b48:	a902      	add	r1, sp, #8
  401b4a:	2361      	movs	r3, #97	; 0x61
  401b4c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  401b50:	4c18      	ldr	r4, [pc, #96]	; (401bb4 <nRF24_receive_data+0x70>)
  401b52:	f44f 7500 	mov.w	r5, #512	; 0x200
  401b56:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //drive this low before doing SPI transmissions
	io_write(spi_0_io, &cmd, 1);
  401b58:	4e17      	ldr	r6, [pc, #92]	; (401bb8 <nRF24_receive_data+0x74>)
  401b5a:	2201      	movs	r2, #1
  401b5c:	6830      	ldr	r0, [r6, #0]
  401b5e:	4b17      	ldr	r3, [pc, #92]	; (401bbc <nRF24_receive_data+0x78>)
  401b60:	4798      	blx	r3
	io_read(spi_0_io, global_data_pointer, 32);
  401b62:	2220      	movs	r2, #32
  401b64:	4b16      	ldr	r3, [pc, #88]	; (401bc0 <nRF24_receive_data+0x7c>)
  401b66:	6819      	ldr	r1, [r3, #0]
  401b68:	6830      	ldr	r0, [r6, #0]
  401b6a:	4b16      	ldr	r3, [pc, #88]	; (401bc4 <nRF24_receive_data+0x80>)
  401b6c:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401b6e:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //return to high after SPI transmissions
	delay_us(11); //Make sure we had enough time to grab the data before flushing
  401b70:	200b      	movs	r0, #11
  401b72:	4b15      	ldr	r3, [pc, #84]	; (401bc8 <nRF24_receive_data+0x84>)
  401b74:	4798      	blx	r3
	cmd = FLUSH_RX;
  401b76:	20e2      	movs	r0, #226	; 0xe2
  401b78:	f88d 0007 	strb.w	r0, [sp, #7]
	nRF24_send_SPI_command(cmd);
  401b7c:	4b13      	ldr	r3, [pc, #76]	; (401bcc <nRF24_receive_data+0x88>)
  401b7e:	4798      	blx	r3
	uint8_t status_read = nRF24_read_from_register(STATUS);
  401b80:	2007      	movs	r0, #7
  401b82:	4b13      	ldr	r3, [pc, #76]	; (401bd0 <nRF24_receive_data+0x8c>)
  401b84:	4798      	blx	r3
	status_read = status_read | 64;
  401b86:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  401b8a:	b2c9      	uxtb	r1, r1
  401b8c:	2007      	movs	r0, #7
  401b8e:	4b11      	ldr	r3, [pc, #68]	; (401bd4 <nRF24_receive_data+0x90>)
  401b90:	4798      	blx	r3
	//uint8_t charray[64];
	for(int x = 0; x < 32; x++){
  401b92:	2400      	movs	r4, #0
  401b94:	e006      	b.n	401ba4 <nRF24_receive_data+0x60>
		printf("%02x ", global_data_pointer[x]);
  401b96:	4b0a      	ldr	r3, [pc, #40]	; (401bc0 <nRF24_receive_data+0x7c>)
  401b98:	681b      	ldr	r3, [r3, #0]
  401b9a:	5d19      	ldrb	r1, [r3, r4]
  401b9c:	480e      	ldr	r0, [pc, #56]	; (401bd8 <nRF24_receive_data+0x94>)
  401b9e:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <nRF24_receive_data+0x98>)
  401ba0:	4798      	blx	r3
	for(int x = 0; x < 32; x++){
  401ba2:	3401      	adds	r4, #1
  401ba4:	2c1f      	cmp	r4, #31
  401ba6:	ddf6      	ble.n	401b96 <nRF24_receive_data+0x52>
	}
	printf("\r\n");
  401ba8:	480d      	ldr	r0, [pc, #52]	; (401be0 <nRF24_receive_data+0x9c>)
  401baa:	4b0e      	ldr	r3, [pc, #56]	; (401be4 <nRF24_receive_data+0xa0>)
  401bac:	4798      	blx	r3
}
  401bae:	b002      	add	sp, #8
  401bb0:	bd70      	pop	{r4, r5, r6, pc}
  401bb2:	bf00      	nop
  401bb4:	400e1200 	.word	0x400e1200
  401bb8:	20400120 	.word	0x20400120
  401bbc:	004008d1 	.word	0x004008d1
  401bc0:	2040011c 	.word	0x2040011c
  401bc4:	00400901 	.word	0x00400901
  401bc8:	004006a9 	.word	0x004006a9
  401bcc:	00401b15 	.word	0x00401b15
  401bd0:	00401ad1 	.word	0x00401ad1
  401bd4:	00401a55 	.word	0x00401a55
  401bd8:	0040319c 	.word	0x0040319c
  401bdc:	00401f95 	.word	0x00401f95
  401be0:	004031a4 	.word	0x004031a4
  401be4:	0040207d 	.word	0x0040207d

00401be8 <nRF24_init>:
void nRF24_init(uint8_t* data_pointer){
  401be8:	b530      	push	{r4, r5, lr}
  401bea:	b083      	sub	sp, #12
  401bec:	4605      	mov	r5, r0
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_0_io);
  401bee:	4c20      	ldr	r4, [pc, #128]	; (401c70 <nRF24_init+0x88>)
  401bf0:	4920      	ldr	r1, [pc, #128]	; (401c74 <nRF24_init+0x8c>)
  401bf2:	4620      	mov	r0, r4
  401bf4:	4b20      	ldr	r3, [pc, #128]	; (401c78 <nRF24_init+0x90>)
  401bf6:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  401bf8:	4620      	mov	r0, r4
  401bfa:	4b20      	ldr	r3, [pc, #128]	; (401c7c <nRF24_init+0x94>)
  401bfc:	4798      	blx	r3
	global_data_pointer = data_pointer;
  401bfe:	4b20      	ldr	r3, [pc, #128]	; (401c80 <nRF24_init+0x98>)
  401c00:	601d      	str	r5, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401c06:	4b1f      	ldr	r3, [pc, #124]	; (401c84 <nRF24_init+0x9c>)
  401c08:	635a      	str	r2, [r3, #52]	; 0x34
	nRF24_write_to_register(CONFIG,0); //0000 0000 Keep us in power down mode, IRQ pin assertion set to default, CRC disabled, RX / TX control in RX mode
  401c0a:	2100      	movs	r1, #0
  401c0c:	4608      	mov	r0, r1
  401c0e:	4c1e      	ldr	r4, [pc, #120]	; (401c88 <nRF24_init+0xa0>)
  401c10:	47a0      	blx	r4
	uint8_t status_read = nRF24_read_from_register(STATUS);
  401c12:	2007      	movs	r0, #7
  401c14:	4b1d      	ldr	r3, [pc, #116]	; (401c8c <nRF24_init+0xa4>)
  401c16:	4798      	blx	r3
	status_read = status_read | 64;
  401c18:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  401c1c:	b2c9      	uxtb	r1, r1
  401c1e:	2007      	movs	r0, #7
  401c20:	47a0      	blx	r4
	nRF24_write_to_register(EN_AA,0); //0000 0000 no auto ACK
  401c22:	2100      	movs	r1, #0
  401c24:	2001      	movs	r0, #1
  401c26:	47a0      	blx	r4
	nRF24_write_to_register(EN_RXADDR,0); //0000 0000 disable all RX pipes
  401c28:	2100      	movs	r1, #0
  401c2a:	2002      	movs	r0, #2
  401c2c:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_AW,3); //0000 0011 5 byte tx rx address fields
  401c2e:	2103      	movs	r1, #3
  401c30:	4608      	mov	r0, r1
  401c32:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_RETR,0); //0000 0000 no auto retransmission
  401c34:	2100      	movs	r1, #0
  401c36:	2004      	movs	r0, #4
  401c38:	47a0      	blx	r4
	nRF24_write_to_register(RF_CH,120); //0111 1000 first bit must be 0, 0111 1000 = 120, freq = 2400 + 120 = 2520 = 2.52 GHz, tested to have low interference in UH
  401c3a:	2178      	movs	r1, #120	; 0x78
  401c3c:	2005      	movs	r0, #5
  401c3e:	47a0      	blx	r4
	nRF24_write_to_register(RF_SETUP,6); //0000 0110 1 Mbps and maximum power output
  401c40:	2106      	movs	r1, #6
  401c42:	4608      	mov	r0, r1
  401c44:	47a0      	blx	r4
	uint8_t tx_address[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA}; //Needs to be the same on the other nRF24L01+ device
  401c46:	4b12      	ldr	r3, [pc, #72]	; (401c90 <nRF24_init+0xa8>)
  401c48:	e893 0003 	ldmia.w	r3, {r0, r1}
  401c4c:	9000      	str	r0, [sp, #0]
  401c4e:	f88d 1004 	strb.w	r1, [sp, #4]
	nRF24_write_to_register_multi_byte(TX_ADDR, &tx_address[0], 5);
  401c52:	2205      	movs	r2, #5
  401c54:	4669      	mov	r1, sp
  401c56:	2010      	movs	r0, #16
  401c58:	4b0e      	ldr	r3, [pc, #56]	; (401c94 <nRF24_init+0xac>)
  401c5a:	4798      	blx	r3
	nRF24_write_to_register(CONFIG,2); //0000 0020 enter standby-1, disable checksums
  401c5c:	2102      	movs	r1, #2
  401c5e:	2000      	movs	r0, #0
  401c60:	47a0      	blx	r4
	ext_irq_register(PB1, nRF24_receive_data); //enable interrupt
  401c62:	490d      	ldr	r1, [pc, #52]	; (401c98 <nRF24_init+0xb0>)
  401c64:	2021      	movs	r0, #33	; 0x21
  401c66:	4b0d      	ldr	r3, [pc, #52]	; (401c9c <nRF24_init+0xb4>)
  401c68:	4798      	blx	r3
}
  401c6a:	b003      	add	sp, #12
  401c6c:	bd30      	pop	{r4, r5, pc}
  401c6e:	bf00      	nop
  401c70:	204000e4 	.word	0x204000e4
  401c74:	20400120 	.word	0x20400120
  401c78:	00400ad9 	.word	0x00400ad9
  401c7c:	004009f9 	.word	0x004009f9
  401c80:	2040011c 	.word	0x2040011c
  401c84:	400e1400 	.word	0x400e1400
  401c88:	00401a55 	.word	0x00401a55
  401c8c:	00401ad1 	.word	0x00401ad1
  401c90:	00403194 	.word	0x00403194
  401c94:	00401a8d 	.word	0x00401a8d
  401c98:	00401b45 	.word	0x00401b45
  401c9c:	00400761 	.word	0x00400761

00401ca0 <nRF24_transmit>:
void nRF24_transmit(uint8_t *data){ //You should be in standby-1 at the beginning of this call
  401ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ca4:	b082      	sub	sp, #8
  401ca6:	4680      	mov	r8, r0
  401ca8:	4c0e      	ldr	r4, [pc, #56]	; (401ce4 <nRF24_transmit+0x44>)
  401caa:	f44f 7500 	mov.w	r5, #512	; 0x200
  401cae:	6365      	str	r5, [r4, #52]	; 0x34
	uint8_t x = W_TX_PAYLOAD;
  401cb0:	a902      	add	r1, sp, #8
  401cb2:	23a0      	movs	r3, #160	; 0xa0
  401cb4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	io_write(spi_0_io, &x, 1);
  401cb8:	4f0b      	ldr	r7, [pc, #44]	; (401ce8 <nRF24_transmit+0x48>)
  401cba:	2201      	movs	r2, #1
  401cbc:	6838      	ldr	r0, [r7, #0]
  401cbe:	4e0b      	ldr	r6, [pc, #44]	; (401cec <nRF24_transmit+0x4c>)
  401cc0:	47b0      	blx	r6
	io_write(spi_0_io, data, 32);
  401cc2:	2220      	movs	r2, #32
  401cc4:	4641      	mov	r1, r8
  401cc6:	6838      	ldr	r0, [r7, #0]
  401cc8:	47b0      	blx	r6
	((Pio *)hw)->PIO_SODR = mask;
  401cca:	6325      	str	r5, [r4, #48]	; 0x30
  401ccc:	f504 7400 	add.w	r4, r4, #512	; 0x200
  401cd0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  401cd4:	6325      	str	r5, [r4, #48]	; 0x30
	delay_us(11); //This will put us into TX mode and empty the FIFO queue into the air
  401cd6:	200b      	movs	r0, #11
  401cd8:	4b05      	ldr	r3, [pc, #20]	; (401cf0 <nRF24_transmit+0x50>)
  401cda:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  401cdc:	6365      	str	r5, [r4, #52]	; 0x34
}
  401cde:	b002      	add	sp, #8
  401ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ce4:	400e1200 	.word	0x400e1200
  401ce8:	20400120 	.word	0x20400120
  401cec:	004008d1 	.word	0x004008d1
  401cf0:	004006a9 	.word	0x004006a9

00401cf4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401cf4:	b958      	cbnz	r0, 401d0e <_read+0x1a>
{
  401cf6:	b508      	push	{r3, lr}
  401cf8:	460b      	mov	r3, r1
  401cfa:	4611      	mov	r1, r2
  401cfc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401cfe:	4b05      	ldr	r3, [pc, #20]	; (401d14 <_read+0x20>)
  401d00:	4798      	blx	r3
	if (n < 0) {
  401d02:	2800      	cmp	r0, #0
  401d04:	db00      	blt.n	401d08 <_read+0x14>
		return -1;
	}

	return n;
}
  401d06:	bd08      	pop	{r3, pc}
		return -1;
  401d08:	f04f 30ff 	mov.w	r0, #4294967295
  401d0c:	bd08      	pop	{r3, pc}
		return -1;
  401d0e:	f04f 30ff 	mov.w	r0, #4294967295
  401d12:	4770      	bx	lr
  401d14:	00401d6d 	.word	0x00401d6d

00401d18 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401d18:	3801      	subs	r0, #1
  401d1a:	2802      	cmp	r0, #2
  401d1c:	d80b      	bhi.n	401d36 <_write+0x1e>
{
  401d1e:	b508      	push	{r3, lr}
  401d20:	460b      	mov	r3, r1
  401d22:	4611      	mov	r1, r2
  401d24:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401d26:	4b05      	ldr	r3, [pc, #20]	; (401d3c <_write+0x24>)
  401d28:	4798      	blx	r3
	if (n < 0) {
  401d2a:	2800      	cmp	r0, #0
  401d2c:	db00      	blt.n	401d30 <_write+0x18>
		return -1;
	}

	return n;
}
  401d2e:	bd08      	pop	{r3, pc}
		return -1;
  401d30:	f04f 30ff 	mov.w	r0, #4294967295
  401d34:	bd08      	pop	{r3, pc}
		return -1;
  401d36:	f04f 30ff 	mov.w	r0, #4294967295
  401d3a:	4770      	bx	lr
  401d3c:	00401d91 	.word	0x00401d91

00401d40 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401d40:	b570      	push	{r4, r5, r6, lr}
  401d42:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401d44:	4d06      	ldr	r5, [pc, #24]	; (401d60 <stdio_io_init+0x20>)
  401d46:	682b      	ldr	r3, [r5, #0]
  401d48:	2100      	movs	r1, #0
  401d4a:	6898      	ldr	r0, [r3, #8]
  401d4c:	4c05      	ldr	r4, [pc, #20]	; (401d64 <stdio_io_init+0x24>)
  401d4e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401d50:	682b      	ldr	r3, [r5, #0]
  401d52:	2100      	movs	r1, #0
  401d54:	6858      	ldr	r0, [r3, #4]
  401d56:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401d58:	4b03      	ldr	r3, [pc, #12]	; (401d68 <stdio_io_init+0x28>)
  401d5a:	601e      	str	r6, [r3, #0]
  401d5c:	bd70      	pop	{r4, r5, r6, pc}
  401d5e:	bf00      	nop
  401d60:	20400000 	.word	0x20400000
  401d64:	004020ad 	.word	0x004020ad
  401d68:	204000ac 	.word	0x204000ac

00401d6c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401d6c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401d6e:	4b06      	ldr	r3, [pc, #24]	; (401d88 <stdio_io_read+0x1c>)
  401d70:	681b      	ldr	r3, [r3, #0]
  401d72:	b133      	cbz	r3, 401d82 <stdio_io_read+0x16>
  401d74:	460a      	mov	r2, r1
  401d76:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401d78:	b292      	uxth	r2, r2
  401d7a:	4618      	mov	r0, r3
  401d7c:	4b03      	ldr	r3, [pc, #12]	; (401d8c <stdio_io_read+0x20>)
  401d7e:	4798      	blx	r3
  401d80:	bd08      	pop	{r3, pc}
		return 0;
  401d82:	2000      	movs	r0, #0
}
  401d84:	bd08      	pop	{r3, pc}
  401d86:	bf00      	nop
  401d88:	204000ac 	.word	0x204000ac
  401d8c:	00400901 	.word	0x00400901

00401d90 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401d90:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401d92:	4b06      	ldr	r3, [pc, #24]	; (401dac <stdio_io_write+0x1c>)
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	b133      	cbz	r3, 401da6 <stdio_io_write+0x16>
  401d98:	460a      	mov	r2, r1
  401d9a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401d9c:	b292      	uxth	r2, r2
  401d9e:	4618      	mov	r0, r3
  401da0:	4b03      	ldr	r3, [pc, #12]	; (401db0 <stdio_io_write+0x20>)
  401da2:	4798      	blx	r3
  401da4:	bd08      	pop	{r3, pc}
		return 0;
  401da6:	2000      	movs	r0, #0
}
  401da8:	bd08      	pop	{r3, pc}
  401daa:	bf00      	nop
  401dac:	204000ac 	.word	0x204000ac
  401db0:	004008d1 	.word	0x004008d1

00401db4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401db4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  401db6:	4c04      	ldr	r4, [pc, #16]	; (401dc8 <stdio_redirect_init+0x14>)
  401db8:	4620      	mov	r0, r4
  401dba:	4b04      	ldr	r3, [pc, #16]	; (401dcc <stdio_redirect_init+0x18>)
  401dbc:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401dbe:	4620      	mov	r0, r4
  401dc0:	4b03      	ldr	r3, [pc, #12]	; (401dd0 <stdio_redirect_init+0x1c>)
  401dc2:	4798      	blx	r3
  401dc4:	bd10      	pop	{r4, pc}
  401dc6:	bf00      	nop
  401dc8:	204000d4 	.word	0x204000d4
  401dcc:	00400c1d 	.word	0x00400c1d
  401dd0:	00401d41 	.word	0x00401d41

00401dd4 <__libc_init_array>:
  401dd4:	b570      	push	{r4, r5, r6, lr}
  401dd6:	4e0d      	ldr	r6, [pc, #52]	; (401e0c <__libc_init_array+0x38>)
  401dd8:	4c0d      	ldr	r4, [pc, #52]	; (401e10 <__libc_init_array+0x3c>)
  401dda:	1ba4      	subs	r4, r4, r6
  401ddc:	10a4      	asrs	r4, r4, #2
  401dde:	2500      	movs	r5, #0
  401de0:	42a5      	cmp	r5, r4
  401de2:	d109      	bne.n	401df8 <__libc_init_array+0x24>
  401de4:	4e0b      	ldr	r6, [pc, #44]	; (401e14 <__libc_init_array+0x40>)
  401de6:	4c0c      	ldr	r4, [pc, #48]	; (401e18 <__libc_init_array+0x44>)
  401de8:	f001 fa2a 	bl	403240 <_init>
  401dec:	1ba4      	subs	r4, r4, r6
  401dee:	10a4      	asrs	r4, r4, #2
  401df0:	2500      	movs	r5, #0
  401df2:	42a5      	cmp	r5, r4
  401df4:	d105      	bne.n	401e02 <__libc_init_array+0x2e>
  401df6:	bd70      	pop	{r4, r5, r6, pc}
  401df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401dfc:	4798      	blx	r3
  401dfe:	3501      	adds	r5, #1
  401e00:	e7ee      	b.n	401de0 <__libc_init_array+0xc>
  401e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401e06:	4798      	blx	r3
  401e08:	3501      	adds	r5, #1
  401e0a:	e7f2      	b.n	401df2 <__libc_init_array+0x1e>
  401e0c:	0040324c 	.word	0x0040324c
  401e10:	0040324c 	.word	0x0040324c
  401e14:	0040324c 	.word	0x0040324c
  401e18:	00403250 	.word	0x00403250

00401e1c <malloc>:
  401e1c:	4b02      	ldr	r3, [pc, #8]	; (401e28 <malloc+0xc>)
  401e1e:	4601      	mov	r1, r0
  401e20:	6818      	ldr	r0, [r3, #0]
  401e22:	f000 b859 	b.w	401ed8 <_malloc_r>
  401e26:	bf00      	nop
  401e28:	20400000 	.word	0x20400000

00401e2c <memset>:
  401e2c:	4402      	add	r2, r0
  401e2e:	4603      	mov	r3, r0
  401e30:	4293      	cmp	r3, r2
  401e32:	d100      	bne.n	401e36 <memset+0xa>
  401e34:	4770      	bx	lr
  401e36:	f803 1b01 	strb.w	r1, [r3], #1
  401e3a:	e7f9      	b.n	401e30 <memset+0x4>

00401e3c <_free_r>:
  401e3c:	b538      	push	{r3, r4, r5, lr}
  401e3e:	4605      	mov	r5, r0
  401e40:	2900      	cmp	r1, #0
  401e42:	d045      	beq.n	401ed0 <_free_r+0x94>
  401e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401e48:	1f0c      	subs	r4, r1, #4
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	bfb8      	it	lt
  401e4e:	18e4      	addlt	r4, r4, r3
  401e50:	f000 fc82 	bl	402758 <__malloc_lock>
  401e54:	4a1f      	ldr	r2, [pc, #124]	; (401ed4 <_free_r+0x98>)
  401e56:	6813      	ldr	r3, [r2, #0]
  401e58:	4610      	mov	r0, r2
  401e5a:	b933      	cbnz	r3, 401e6a <_free_r+0x2e>
  401e5c:	6063      	str	r3, [r4, #4]
  401e5e:	6014      	str	r4, [r2, #0]
  401e60:	4628      	mov	r0, r5
  401e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401e66:	f000 bc78 	b.w	40275a <__malloc_unlock>
  401e6a:	42a3      	cmp	r3, r4
  401e6c:	d90c      	bls.n	401e88 <_free_r+0x4c>
  401e6e:	6821      	ldr	r1, [r4, #0]
  401e70:	1862      	adds	r2, r4, r1
  401e72:	4293      	cmp	r3, r2
  401e74:	bf04      	itt	eq
  401e76:	681a      	ldreq	r2, [r3, #0]
  401e78:	685b      	ldreq	r3, [r3, #4]
  401e7a:	6063      	str	r3, [r4, #4]
  401e7c:	bf04      	itt	eq
  401e7e:	1852      	addeq	r2, r2, r1
  401e80:	6022      	streq	r2, [r4, #0]
  401e82:	6004      	str	r4, [r0, #0]
  401e84:	e7ec      	b.n	401e60 <_free_r+0x24>
  401e86:	4613      	mov	r3, r2
  401e88:	685a      	ldr	r2, [r3, #4]
  401e8a:	b10a      	cbz	r2, 401e90 <_free_r+0x54>
  401e8c:	42a2      	cmp	r2, r4
  401e8e:	d9fa      	bls.n	401e86 <_free_r+0x4a>
  401e90:	6819      	ldr	r1, [r3, #0]
  401e92:	1858      	adds	r0, r3, r1
  401e94:	42a0      	cmp	r0, r4
  401e96:	d10b      	bne.n	401eb0 <_free_r+0x74>
  401e98:	6820      	ldr	r0, [r4, #0]
  401e9a:	4401      	add	r1, r0
  401e9c:	1858      	adds	r0, r3, r1
  401e9e:	4282      	cmp	r2, r0
  401ea0:	6019      	str	r1, [r3, #0]
  401ea2:	d1dd      	bne.n	401e60 <_free_r+0x24>
  401ea4:	6810      	ldr	r0, [r2, #0]
  401ea6:	6852      	ldr	r2, [r2, #4]
  401ea8:	605a      	str	r2, [r3, #4]
  401eaa:	4401      	add	r1, r0
  401eac:	6019      	str	r1, [r3, #0]
  401eae:	e7d7      	b.n	401e60 <_free_r+0x24>
  401eb0:	d902      	bls.n	401eb8 <_free_r+0x7c>
  401eb2:	230c      	movs	r3, #12
  401eb4:	602b      	str	r3, [r5, #0]
  401eb6:	e7d3      	b.n	401e60 <_free_r+0x24>
  401eb8:	6820      	ldr	r0, [r4, #0]
  401eba:	1821      	adds	r1, r4, r0
  401ebc:	428a      	cmp	r2, r1
  401ebe:	bf04      	itt	eq
  401ec0:	6811      	ldreq	r1, [r2, #0]
  401ec2:	6852      	ldreq	r2, [r2, #4]
  401ec4:	6062      	str	r2, [r4, #4]
  401ec6:	bf04      	itt	eq
  401ec8:	1809      	addeq	r1, r1, r0
  401eca:	6021      	streq	r1, [r4, #0]
  401ecc:	605c      	str	r4, [r3, #4]
  401ece:	e7c7      	b.n	401e60 <_free_r+0x24>
  401ed0:	bd38      	pop	{r3, r4, r5, pc}
  401ed2:	bf00      	nop
  401ed4:	204000b0 	.word	0x204000b0

00401ed8 <_malloc_r>:
  401ed8:	b570      	push	{r4, r5, r6, lr}
  401eda:	1ccd      	adds	r5, r1, #3
  401edc:	f025 0503 	bic.w	r5, r5, #3
  401ee0:	3508      	adds	r5, #8
  401ee2:	2d0c      	cmp	r5, #12
  401ee4:	bf38      	it	cc
  401ee6:	250c      	movcc	r5, #12
  401ee8:	2d00      	cmp	r5, #0
  401eea:	4606      	mov	r6, r0
  401eec:	db01      	blt.n	401ef2 <_malloc_r+0x1a>
  401eee:	42a9      	cmp	r1, r5
  401ef0:	d903      	bls.n	401efa <_malloc_r+0x22>
  401ef2:	230c      	movs	r3, #12
  401ef4:	6033      	str	r3, [r6, #0]
  401ef6:	2000      	movs	r0, #0
  401ef8:	bd70      	pop	{r4, r5, r6, pc}
  401efa:	f000 fc2d 	bl	402758 <__malloc_lock>
  401efe:	4a23      	ldr	r2, [pc, #140]	; (401f8c <_malloc_r+0xb4>)
  401f00:	6814      	ldr	r4, [r2, #0]
  401f02:	4621      	mov	r1, r4
  401f04:	b991      	cbnz	r1, 401f2c <_malloc_r+0x54>
  401f06:	4c22      	ldr	r4, [pc, #136]	; (401f90 <_malloc_r+0xb8>)
  401f08:	6823      	ldr	r3, [r4, #0]
  401f0a:	b91b      	cbnz	r3, 401f14 <_malloc_r+0x3c>
  401f0c:	4630      	mov	r0, r6
  401f0e:	f000 f8bd 	bl	40208c <_sbrk_r>
  401f12:	6020      	str	r0, [r4, #0]
  401f14:	4629      	mov	r1, r5
  401f16:	4630      	mov	r0, r6
  401f18:	f000 f8b8 	bl	40208c <_sbrk_r>
  401f1c:	1c43      	adds	r3, r0, #1
  401f1e:	d126      	bne.n	401f6e <_malloc_r+0x96>
  401f20:	230c      	movs	r3, #12
  401f22:	6033      	str	r3, [r6, #0]
  401f24:	4630      	mov	r0, r6
  401f26:	f000 fc18 	bl	40275a <__malloc_unlock>
  401f2a:	e7e4      	b.n	401ef6 <_malloc_r+0x1e>
  401f2c:	680b      	ldr	r3, [r1, #0]
  401f2e:	1b5b      	subs	r3, r3, r5
  401f30:	d41a      	bmi.n	401f68 <_malloc_r+0x90>
  401f32:	2b0b      	cmp	r3, #11
  401f34:	d90f      	bls.n	401f56 <_malloc_r+0x7e>
  401f36:	600b      	str	r3, [r1, #0]
  401f38:	50cd      	str	r5, [r1, r3]
  401f3a:	18cc      	adds	r4, r1, r3
  401f3c:	4630      	mov	r0, r6
  401f3e:	f000 fc0c 	bl	40275a <__malloc_unlock>
  401f42:	f104 000b 	add.w	r0, r4, #11
  401f46:	1d23      	adds	r3, r4, #4
  401f48:	f020 0007 	bic.w	r0, r0, #7
  401f4c:	1ac3      	subs	r3, r0, r3
  401f4e:	d01b      	beq.n	401f88 <_malloc_r+0xb0>
  401f50:	425a      	negs	r2, r3
  401f52:	50e2      	str	r2, [r4, r3]
  401f54:	bd70      	pop	{r4, r5, r6, pc}
  401f56:	428c      	cmp	r4, r1
  401f58:	bf0d      	iteet	eq
  401f5a:	6863      	ldreq	r3, [r4, #4]
  401f5c:	684b      	ldrne	r3, [r1, #4]
  401f5e:	6063      	strne	r3, [r4, #4]
  401f60:	6013      	streq	r3, [r2, #0]
  401f62:	bf18      	it	ne
  401f64:	460c      	movne	r4, r1
  401f66:	e7e9      	b.n	401f3c <_malloc_r+0x64>
  401f68:	460c      	mov	r4, r1
  401f6a:	6849      	ldr	r1, [r1, #4]
  401f6c:	e7ca      	b.n	401f04 <_malloc_r+0x2c>
  401f6e:	1cc4      	adds	r4, r0, #3
  401f70:	f024 0403 	bic.w	r4, r4, #3
  401f74:	42a0      	cmp	r0, r4
  401f76:	d005      	beq.n	401f84 <_malloc_r+0xac>
  401f78:	1a21      	subs	r1, r4, r0
  401f7a:	4630      	mov	r0, r6
  401f7c:	f000 f886 	bl	40208c <_sbrk_r>
  401f80:	3001      	adds	r0, #1
  401f82:	d0cd      	beq.n	401f20 <_malloc_r+0x48>
  401f84:	6025      	str	r5, [r4, #0]
  401f86:	e7d9      	b.n	401f3c <_malloc_r+0x64>
  401f88:	bd70      	pop	{r4, r5, r6, pc}
  401f8a:	bf00      	nop
  401f8c:	204000b0 	.word	0x204000b0
  401f90:	204000b4 	.word	0x204000b4

00401f94 <iprintf>:
  401f94:	b40f      	push	{r0, r1, r2, r3}
  401f96:	4b0a      	ldr	r3, [pc, #40]	; (401fc0 <iprintf+0x2c>)
  401f98:	b513      	push	{r0, r1, r4, lr}
  401f9a:	681c      	ldr	r4, [r3, #0]
  401f9c:	b124      	cbz	r4, 401fa8 <iprintf+0x14>
  401f9e:	69a3      	ldr	r3, [r4, #24]
  401fa0:	b913      	cbnz	r3, 401fa8 <iprintf+0x14>
  401fa2:	4620      	mov	r0, r4
  401fa4:	f000 faea 	bl	40257c <__sinit>
  401fa8:	ab05      	add	r3, sp, #20
  401faa:	9a04      	ldr	r2, [sp, #16]
  401fac:	68a1      	ldr	r1, [r4, #8]
  401fae:	9301      	str	r3, [sp, #4]
  401fb0:	4620      	mov	r0, r4
  401fb2:	f000 fbfb 	bl	4027ac <_vfiprintf_r>
  401fb6:	b002      	add	sp, #8
  401fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401fbc:	b004      	add	sp, #16
  401fbe:	4770      	bx	lr
  401fc0:	20400000 	.word	0x20400000

00401fc4 <_puts_r>:
  401fc4:	b570      	push	{r4, r5, r6, lr}
  401fc6:	460e      	mov	r6, r1
  401fc8:	4605      	mov	r5, r0
  401fca:	b118      	cbz	r0, 401fd4 <_puts_r+0x10>
  401fcc:	6983      	ldr	r3, [r0, #24]
  401fce:	b90b      	cbnz	r3, 401fd4 <_puts_r+0x10>
  401fd0:	f000 fad4 	bl	40257c <__sinit>
  401fd4:	69ab      	ldr	r3, [r5, #24]
  401fd6:	68ac      	ldr	r4, [r5, #8]
  401fd8:	b913      	cbnz	r3, 401fe0 <_puts_r+0x1c>
  401fda:	4628      	mov	r0, r5
  401fdc:	f000 face 	bl	40257c <__sinit>
  401fe0:	4b23      	ldr	r3, [pc, #140]	; (402070 <_puts_r+0xac>)
  401fe2:	429c      	cmp	r4, r3
  401fe4:	d117      	bne.n	402016 <_puts_r+0x52>
  401fe6:	686c      	ldr	r4, [r5, #4]
  401fe8:	89a3      	ldrh	r3, [r4, #12]
  401fea:	071b      	lsls	r3, r3, #28
  401fec:	d51d      	bpl.n	40202a <_puts_r+0x66>
  401fee:	6923      	ldr	r3, [r4, #16]
  401ff0:	b1db      	cbz	r3, 40202a <_puts_r+0x66>
  401ff2:	3e01      	subs	r6, #1
  401ff4:	68a3      	ldr	r3, [r4, #8]
  401ff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  401ffa:	3b01      	subs	r3, #1
  401ffc:	60a3      	str	r3, [r4, #8]
  401ffe:	b9e9      	cbnz	r1, 40203c <_puts_r+0x78>
  402000:	2b00      	cmp	r3, #0
  402002:	da2e      	bge.n	402062 <_puts_r+0x9e>
  402004:	4622      	mov	r2, r4
  402006:	210a      	movs	r1, #10
  402008:	4628      	mov	r0, r5
  40200a:	f000 f905 	bl	402218 <__swbuf_r>
  40200e:	3001      	adds	r0, #1
  402010:	d011      	beq.n	402036 <_puts_r+0x72>
  402012:	200a      	movs	r0, #10
  402014:	bd70      	pop	{r4, r5, r6, pc}
  402016:	4b17      	ldr	r3, [pc, #92]	; (402074 <_puts_r+0xb0>)
  402018:	429c      	cmp	r4, r3
  40201a:	d101      	bne.n	402020 <_puts_r+0x5c>
  40201c:	68ac      	ldr	r4, [r5, #8]
  40201e:	e7e3      	b.n	401fe8 <_puts_r+0x24>
  402020:	4b15      	ldr	r3, [pc, #84]	; (402078 <_puts_r+0xb4>)
  402022:	429c      	cmp	r4, r3
  402024:	bf08      	it	eq
  402026:	68ec      	ldreq	r4, [r5, #12]
  402028:	e7de      	b.n	401fe8 <_puts_r+0x24>
  40202a:	4621      	mov	r1, r4
  40202c:	4628      	mov	r0, r5
  40202e:	f000 f945 	bl	4022bc <__swsetup_r>
  402032:	2800      	cmp	r0, #0
  402034:	d0dd      	beq.n	401ff2 <_puts_r+0x2e>
  402036:	f04f 30ff 	mov.w	r0, #4294967295
  40203a:	bd70      	pop	{r4, r5, r6, pc}
  40203c:	2b00      	cmp	r3, #0
  40203e:	da04      	bge.n	40204a <_puts_r+0x86>
  402040:	69a2      	ldr	r2, [r4, #24]
  402042:	4293      	cmp	r3, r2
  402044:	db06      	blt.n	402054 <_puts_r+0x90>
  402046:	290a      	cmp	r1, #10
  402048:	d004      	beq.n	402054 <_puts_r+0x90>
  40204a:	6823      	ldr	r3, [r4, #0]
  40204c:	1c5a      	adds	r2, r3, #1
  40204e:	6022      	str	r2, [r4, #0]
  402050:	7019      	strb	r1, [r3, #0]
  402052:	e7cf      	b.n	401ff4 <_puts_r+0x30>
  402054:	4622      	mov	r2, r4
  402056:	4628      	mov	r0, r5
  402058:	f000 f8de 	bl	402218 <__swbuf_r>
  40205c:	3001      	adds	r0, #1
  40205e:	d1c9      	bne.n	401ff4 <_puts_r+0x30>
  402060:	e7e9      	b.n	402036 <_puts_r+0x72>
  402062:	6823      	ldr	r3, [r4, #0]
  402064:	200a      	movs	r0, #10
  402066:	1c5a      	adds	r2, r3, #1
  402068:	6022      	str	r2, [r4, #0]
  40206a:	7018      	strb	r0, [r3, #0]
  40206c:	bd70      	pop	{r4, r5, r6, pc}
  40206e:	bf00      	nop
  402070:	004031cc 	.word	0x004031cc
  402074:	004031ec 	.word	0x004031ec
  402078:	004031ac 	.word	0x004031ac

0040207c <puts>:
  40207c:	4b02      	ldr	r3, [pc, #8]	; (402088 <puts+0xc>)
  40207e:	4601      	mov	r1, r0
  402080:	6818      	ldr	r0, [r3, #0]
  402082:	f7ff bf9f 	b.w	401fc4 <_puts_r>
  402086:	bf00      	nop
  402088:	20400000 	.word	0x20400000

0040208c <_sbrk_r>:
  40208c:	b538      	push	{r3, r4, r5, lr}
  40208e:	4c06      	ldr	r4, [pc, #24]	; (4020a8 <_sbrk_r+0x1c>)
  402090:	2300      	movs	r3, #0
  402092:	4605      	mov	r5, r0
  402094:	4608      	mov	r0, r1
  402096:	6023      	str	r3, [r4, #0]
  402098:	f7fe fdda 	bl	400c50 <_sbrk>
  40209c:	1c43      	adds	r3, r0, #1
  40209e:	d102      	bne.n	4020a6 <_sbrk_r+0x1a>
  4020a0:	6823      	ldr	r3, [r4, #0]
  4020a2:	b103      	cbz	r3, 4020a6 <_sbrk_r+0x1a>
  4020a4:	602b      	str	r3, [r5, #0]
  4020a6:	bd38      	pop	{r3, r4, r5, pc}
  4020a8:	20400124 	.word	0x20400124

004020ac <setbuf>:
  4020ac:	2900      	cmp	r1, #0
  4020ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4020b2:	bf0c      	ite	eq
  4020b4:	2202      	moveq	r2, #2
  4020b6:	2200      	movne	r2, #0
  4020b8:	f000 b800 	b.w	4020bc <setvbuf>

004020bc <setvbuf>:
  4020bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4020c0:	461d      	mov	r5, r3
  4020c2:	4b51      	ldr	r3, [pc, #324]	; (402208 <setvbuf+0x14c>)
  4020c4:	681e      	ldr	r6, [r3, #0]
  4020c6:	4604      	mov	r4, r0
  4020c8:	460f      	mov	r7, r1
  4020ca:	4690      	mov	r8, r2
  4020cc:	b126      	cbz	r6, 4020d8 <setvbuf+0x1c>
  4020ce:	69b3      	ldr	r3, [r6, #24]
  4020d0:	b913      	cbnz	r3, 4020d8 <setvbuf+0x1c>
  4020d2:	4630      	mov	r0, r6
  4020d4:	f000 fa52 	bl	40257c <__sinit>
  4020d8:	4b4c      	ldr	r3, [pc, #304]	; (40220c <setvbuf+0x150>)
  4020da:	429c      	cmp	r4, r3
  4020dc:	d152      	bne.n	402184 <setvbuf+0xc8>
  4020de:	6874      	ldr	r4, [r6, #4]
  4020e0:	f1b8 0f02 	cmp.w	r8, #2
  4020e4:	d006      	beq.n	4020f4 <setvbuf+0x38>
  4020e6:	f1b8 0f01 	cmp.w	r8, #1
  4020ea:	f200 8089 	bhi.w	402200 <setvbuf+0x144>
  4020ee:	2d00      	cmp	r5, #0
  4020f0:	f2c0 8086 	blt.w	402200 <setvbuf+0x144>
  4020f4:	4621      	mov	r1, r4
  4020f6:	4630      	mov	r0, r6
  4020f8:	f000 f9d6 	bl	4024a8 <_fflush_r>
  4020fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4020fe:	b141      	cbz	r1, 402112 <setvbuf+0x56>
  402100:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402104:	4299      	cmp	r1, r3
  402106:	d002      	beq.n	40210e <setvbuf+0x52>
  402108:	4630      	mov	r0, r6
  40210a:	f7ff fe97 	bl	401e3c <_free_r>
  40210e:	2300      	movs	r3, #0
  402110:	6363      	str	r3, [r4, #52]	; 0x34
  402112:	2300      	movs	r3, #0
  402114:	61a3      	str	r3, [r4, #24]
  402116:	6063      	str	r3, [r4, #4]
  402118:	89a3      	ldrh	r3, [r4, #12]
  40211a:	061b      	lsls	r3, r3, #24
  40211c:	d503      	bpl.n	402126 <setvbuf+0x6a>
  40211e:	6921      	ldr	r1, [r4, #16]
  402120:	4630      	mov	r0, r6
  402122:	f7ff fe8b 	bl	401e3c <_free_r>
  402126:	89a3      	ldrh	r3, [r4, #12]
  402128:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40212c:	f023 0303 	bic.w	r3, r3, #3
  402130:	f1b8 0f02 	cmp.w	r8, #2
  402134:	81a3      	strh	r3, [r4, #12]
  402136:	d05d      	beq.n	4021f4 <setvbuf+0x138>
  402138:	ab01      	add	r3, sp, #4
  40213a:	466a      	mov	r2, sp
  40213c:	4621      	mov	r1, r4
  40213e:	4630      	mov	r0, r6
  402140:	f000 faa6 	bl	402690 <__swhatbuf_r>
  402144:	89a3      	ldrh	r3, [r4, #12]
  402146:	4318      	orrs	r0, r3
  402148:	81a0      	strh	r0, [r4, #12]
  40214a:	bb2d      	cbnz	r5, 402198 <setvbuf+0xdc>
  40214c:	9d00      	ldr	r5, [sp, #0]
  40214e:	4628      	mov	r0, r5
  402150:	f7ff fe64 	bl	401e1c <malloc>
  402154:	4607      	mov	r7, r0
  402156:	2800      	cmp	r0, #0
  402158:	d14e      	bne.n	4021f8 <setvbuf+0x13c>
  40215a:	f8dd 9000 	ldr.w	r9, [sp]
  40215e:	45a9      	cmp	r9, r5
  402160:	d13c      	bne.n	4021dc <setvbuf+0x120>
  402162:	f04f 30ff 	mov.w	r0, #4294967295
  402166:	89a3      	ldrh	r3, [r4, #12]
  402168:	f043 0302 	orr.w	r3, r3, #2
  40216c:	81a3      	strh	r3, [r4, #12]
  40216e:	2300      	movs	r3, #0
  402170:	60a3      	str	r3, [r4, #8]
  402172:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402176:	6023      	str	r3, [r4, #0]
  402178:	6123      	str	r3, [r4, #16]
  40217a:	2301      	movs	r3, #1
  40217c:	6163      	str	r3, [r4, #20]
  40217e:	b003      	add	sp, #12
  402180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402184:	4b22      	ldr	r3, [pc, #136]	; (402210 <setvbuf+0x154>)
  402186:	429c      	cmp	r4, r3
  402188:	d101      	bne.n	40218e <setvbuf+0xd2>
  40218a:	68b4      	ldr	r4, [r6, #8]
  40218c:	e7a8      	b.n	4020e0 <setvbuf+0x24>
  40218e:	4b21      	ldr	r3, [pc, #132]	; (402214 <setvbuf+0x158>)
  402190:	429c      	cmp	r4, r3
  402192:	bf08      	it	eq
  402194:	68f4      	ldreq	r4, [r6, #12]
  402196:	e7a3      	b.n	4020e0 <setvbuf+0x24>
  402198:	2f00      	cmp	r7, #0
  40219a:	d0d8      	beq.n	40214e <setvbuf+0x92>
  40219c:	69b3      	ldr	r3, [r6, #24]
  40219e:	b913      	cbnz	r3, 4021a6 <setvbuf+0xea>
  4021a0:	4630      	mov	r0, r6
  4021a2:	f000 f9eb 	bl	40257c <__sinit>
  4021a6:	f1b8 0f01 	cmp.w	r8, #1
  4021aa:	bf08      	it	eq
  4021ac:	89a3      	ldrheq	r3, [r4, #12]
  4021ae:	6027      	str	r7, [r4, #0]
  4021b0:	bf04      	itt	eq
  4021b2:	f043 0301 	orreq.w	r3, r3, #1
  4021b6:	81a3      	strheq	r3, [r4, #12]
  4021b8:	89a3      	ldrh	r3, [r4, #12]
  4021ba:	6127      	str	r7, [r4, #16]
  4021bc:	f013 0008 	ands.w	r0, r3, #8
  4021c0:	6165      	str	r5, [r4, #20]
  4021c2:	d01b      	beq.n	4021fc <setvbuf+0x140>
  4021c4:	f013 0001 	ands.w	r0, r3, #1
  4021c8:	bf18      	it	ne
  4021ca:	426d      	negne	r5, r5
  4021cc:	f04f 0300 	mov.w	r3, #0
  4021d0:	bf1d      	ittte	ne
  4021d2:	60a3      	strne	r3, [r4, #8]
  4021d4:	61a5      	strne	r5, [r4, #24]
  4021d6:	4618      	movne	r0, r3
  4021d8:	60a5      	streq	r5, [r4, #8]
  4021da:	e7d0      	b.n	40217e <setvbuf+0xc2>
  4021dc:	4648      	mov	r0, r9
  4021de:	f7ff fe1d 	bl	401e1c <malloc>
  4021e2:	4607      	mov	r7, r0
  4021e4:	2800      	cmp	r0, #0
  4021e6:	d0bc      	beq.n	402162 <setvbuf+0xa6>
  4021e8:	89a3      	ldrh	r3, [r4, #12]
  4021ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021ee:	81a3      	strh	r3, [r4, #12]
  4021f0:	464d      	mov	r5, r9
  4021f2:	e7d3      	b.n	40219c <setvbuf+0xe0>
  4021f4:	2000      	movs	r0, #0
  4021f6:	e7b6      	b.n	402166 <setvbuf+0xaa>
  4021f8:	46a9      	mov	r9, r5
  4021fa:	e7f5      	b.n	4021e8 <setvbuf+0x12c>
  4021fc:	60a0      	str	r0, [r4, #8]
  4021fe:	e7be      	b.n	40217e <setvbuf+0xc2>
  402200:	f04f 30ff 	mov.w	r0, #4294967295
  402204:	e7bb      	b.n	40217e <setvbuf+0xc2>
  402206:	bf00      	nop
  402208:	20400000 	.word	0x20400000
  40220c:	004031cc 	.word	0x004031cc
  402210:	004031ec 	.word	0x004031ec
  402214:	004031ac 	.word	0x004031ac

00402218 <__swbuf_r>:
  402218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40221a:	460e      	mov	r6, r1
  40221c:	4614      	mov	r4, r2
  40221e:	4605      	mov	r5, r0
  402220:	b118      	cbz	r0, 40222a <__swbuf_r+0x12>
  402222:	6983      	ldr	r3, [r0, #24]
  402224:	b90b      	cbnz	r3, 40222a <__swbuf_r+0x12>
  402226:	f000 f9a9 	bl	40257c <__sinit>
  40222a:	4b21      	ldr	r3, [pc, #132]	; (4022b0 <__swbuf_r+0x98>)
  40222c:	429c      	cmp	r4, r3
  40222e:	d12a      	bne.n	402286 <__swbuf_r+0x6e>
  402230:	686c      	ldr	r4, [r5, #4]
  402232:	69a3      	ldr	r3, [r4, #24]
  402234:	60a3      	str	r3, [r4, #8]
  402236:	89a3      	ldrh	r3, [r4, #12]
  402238:	071a      	lsls	r2, r3, #28
  40223a:	d52e      	bpl.n	40229a <__swbuf_r+0x82>
  40223c:	6923      	ldr	r3, [r4, #16]
  40223e:	b363      	cbz	r3, 40229a <__swbuf_r+0x82>
  402240:	6923      	ldr	r3, [r4, #16]
  402242:	6820      	ldr	r0, [r4, #0]
  402244:	1ac0      	subs	r0, r0, r3
  402246:	6963      	ldr	r3, [r4, #20]
  402248:	b2f6      	uxtb	r6, r6
  40224a:	4298      	cmp	r0, r3
  40224c:	4637      	mov	r7, r6
  40224e:	db04      	blt.n	40225a <__swbuf_r+0x42>
  402250:	4621      	mov	r1, r4
  402252:	4628      	mov	r0, r5
  402254:	f000 f928 	bl	4024a8 <_fflush_r>
  402258:	bb28      	cbnz	r0, 4022a6 <__swbuf_r+0x8e>
  40225a:	68a3      	ldr	r3, [r4, #8]
  40225c:	3b01      	subs	r3, #1
  40225e:	60a3      	str	r3, [r4, #8]
  402260:	6823      	ldr	r3, [r4, #0]
  402262:	1c5a      	adds	r2, r3, #1
  402264:	6022      	str	r2, [r4, #0]
  402266:	701e      	strb	r6, [r3, #0]
  402268:	6963      	ldr	r3, [r4, #20]
  40226a:	3001      	adds	r0, #1
  40226c:	4298      	cmp	r0, r3
  40226e:	d004      	beq.n	40227a <__swbuf_r+0x62>
  402270:	89a3      	ldrh	r3, [r4, #12]
  402272:	07db      	lsls	r3, r3, #31
  402274:	d519      	bpl.n	4022aa <__swbuf_r+0x92>
  402276:	2e0a      	cmp	r6, #10
  402278:	d117      	bne.n	4022aa <__swbuf_r+0x92>
  40227a:	4621      	mov	r1, r4
  40227c:	4628      	mov	r0, r5
  40227e:	f000 f913 	bl	4024a8 <_fflush_r>
  402282:	b190      	cbz	r0, 4022aa <__swbuf_r+0x92>
  402284:	e00f      	b.n	4022a6 <__swbuf_r+0x8e>
  402286:	4b0b      	ldr	r3, [pc, #44]	; (4022b4 <__swbuf_r+0x9c>)
  402288:	429c      	cmp	r4, r3
  40228a:	d101      	bne.n	402290 <__swbuf_r+0x78>
  40228c:	68ac      	ldr	r4, [r5, #8]
  40228e:	e7d0      	b.n	402232 <__swbuf_r+0x1a>
  402290:	4b09      	ldr	r3, [pc, #36]	; (4022b8 <__swbuf_r+0xa0>)
  402292:	429c      	cmp	r4, r3
  402294:	bf08      	it	eq
  402296:	68ec      	ldreq	r4, [r5, #12]
  402298:	e7cb      	b.n	402232 <__swbuf_r+0x1a>
  40229a:	4621      	mov	r1, r4
  40229c:	4628      	mov	r0, r5
  40229e:	f000 f80d 	bl	4022bc <__swsetup_r>
  4022a2:	2800      	cmp	r0, #0
  4022a4:	d0cc      	beq.n	402240 <__swbuf_r+0x28>
  4022a6:	f04f 37ff 	mov.w	r7, #4294967295
  4022aa:	4638      	mov	r0, r7
  4022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022ae:	bf00      	nop
  4022b0:	004031cc 	.word	0x004031cc
  4022b4:	004031ec 	.word	0x004031ec
  4022b8:	004031ac 	.word	0x004031ac

004022bc <__swsetup_r>:
  4022bc:	4b32      	ldr	r3, [pc, #200]	; (402388 <__swsetup_r+0xcc>)
  4022be:	b570      	push	{r4, r5, r6, lr}
  4022c0:	681d      	ldr	r5, [r3, #0]
  4022c2:	4606      	mov	r6, r0
  4022c4:	460c      	mov	r4, r1
  4022c6:	b125      	cbz	r5, 4022d2 <__swsetup_r+0x16>
  4022c8:	69ab      	ldr	r3, [r5, #24]
  4022ca:	b913      	cbnz	r3, 4022d2 <__swsetup_r+0x16>
  4022cc:	4628      	mov	r0, r5
  4022ce:	f000 f955 	bl	40257c <__sinit>
  4022d2:	4b2e      	ldr	r3, [pc, #184]	; (40238c <__swsetup_r+0xd0>)
  4022d4:	429c      	cmp	r4, r3
  4022d6:	d10f      	bne.n	4022f8 <__swsetup_r+0x3c>
  4022d8:	686c      	ldr	r4, [r5, #4]
  4022da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022de:	b29a      	uxth	r2, r3
  4022e0:	0715      	lsls	r5, r2, #28
  4022e2:	d42c      	bmi.n	40233e <__swsetup_r+0x82>
  4022e4:	06d0      	lsls	r0, r2, #27
  4022e6:	d411      	bmi.n	40230c <__swsetup_r+0x50>
  4022e8:	2209      	movs	r2, #9
  4022ea:	6032      	str	r2, [r6, #0]
  4022ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4022f0:	81a3      	strh	r3, [r4, #12]
  4022f2:	f04f 30ff 	mov.w	r0, #4294967295
  4022f6:	bd70      	pop	{r4, r5, r6, pc}
  4022f8:	4b25      	ldr	r3, [pc, #148]	; (402390 <__swsetup_r+0xd4>)
  4022fa:	429c      	cmp	r4, r3
  4022fc:	d101      	bne.n	402302 <__swsetup_r+0x46>
  4022fe:	68ac      	ldr	r4, [r5, #8]
  402300:	e7eb      	b.n	4022da <__swsetup_r+0x1e>
  402302:	4b24      	ldr	r3, [pc, #144]	; (402394 <__swsetup_r+0xd8>)
  402304:	429c      	cmp	r4, r3
  402306:	bf08      	it	eq
  402308:	68ec      	ldreq	r4, [r5, #12]
  40230a:	e7e6      	b.n	4022da <__swsetup_r+0x1e>
  40230c:	0751      	lsls	r1, r2, #29
  40230e:	d512      	bpl.n	402336 <__swsetup_r+0x7a>
  402310:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402312:	b141      	cbz	r1, 402326 <__swsetup_r+0x6a>
  402314:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402318:	4299      	cmp	r1, r3
  40231a:	d002      	beq.n	402322 <__swsetup_r+0x66>
  40231c:	4630      	mov	r0, r6
  40231e:	f7ff fd8d 	bl	401e3c <_free_r>
  402322:	2300      	movs	r3, #0
  402324:	6363      	str	r3, [r4, #52]	; 0x34
  402326:	89a3      	ldrh	r3, [r4, #12]
  402328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40232c:	81a3      	strh	r3, [r4, #12]
  40232e:	2300      	movs	r3, #0
  402330:	6063      	str	r3, [r4, #4]
  402332:	6923      	ldr	r3, [r4, #16]
  402334:	6023      	str	r3, [r4, #0]
  402336:	89a3      	ldrh	r3, [r4, #12]
  402338:	f043 0308 	orr.w	r3, r3, #8
  40233c:	81a3      	strh	r3, [r4, #12]
  40233e:	6923      	ldr	r3, [r4, #16]
  402340:	b94b      	cbnz	r3, 402356 <__swsetup_r+0x9a>
  402342:	89a3      	ldrh	r3, [r4, #12]
  402344:	f403 7320 	and.w	r3, r3, #640	; 0x280
  402348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40234c:	d003      	beq.n	402356 <__swsetup_r+0x9a>
  40234e:	4621      	mov	r1, r4
  402350:	4630      	mov	r0, r6
  402352:	f000 f9c1 	bl	4026d8 <__smakebuf_r>
  402356:	89a2      	ldrh	r2, [r4, #12]
  402358:	f012 0301 	ands.w	r3, r2, #1
  40235c:	d00c      	beq.n	402378 <__swsetup_r+0xbc>
  40235e:	2300      	movs	r3, #0
  402360:	60a3      	str	r3, [r4, #8]
  402362:	6963      	ldr	r3, [r4, #20]
  402364:	425b      	negs	r3, r3
  402366:	61a3      	str	r3, [r4, #24]
  402368:	6923      	ldr	r3, [r4, #16]
  40236a:	b953      	cbnz	r3, 402382 <__swsetup_r+0xc6>
  40236c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402370:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  402374:	d1ba      	bne.n	4022ec <__swsetup_r+0x30>
  402376:	bd70      	pop	{r4, r5, r6, pc}
  402378:	0792      	lsls	r2, r2, #30
  40237a:	bf58      	it	pl
  40237c:	6963      	ldrpl	r3, [r4, #20]
  40237e:	60a3      	str	r3, [r4, #8]
  402380:	e7f2      	b.n	402368 <__swsetup_r+0xac>
  402382:	2000      	movs	r0, #0
  402384:	e7f7      	b.n	402376 <__swsetup_r+0xba>
  402386:	bf00      	nop
  402388:	20400000 	.word	0x20400000
  40238c:	004031cc 	.word	0x004031cc
  402390:	004031ec 	.word	0x004031ec
  402394:	004031ac 	.word	0x004031ac

00402398 <__sflush_r>:
  402398:	898a      	ldrh	r2, [r1, #12]
  40239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40239e:	4605      	mov	r5, r0
  4023a0:	0710      	lsls	r0, r2, #28
  4023a2:	460c      	mov	r4, r1
  4023a4:	d45a      	bmi.n	40245c <__sflush_r+0xc4>
  4023a6:	684b      	ldr	r3, [r1, #4]
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	dc05      	bgt.n	4023b8 <__sflush_r+0x20>
  4023ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	dc02      	bgt.n	4023b8 <__sflush_r+0x20>
  4023b2:	2000      	movs	r0, #0
  4023b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4023ba:	2e00      	cmp	r6, #0
  4023bc:	d0f9      	beq.n	4023b2 <__sflush_r+0x1a>
  4023be:	2300      	movs	r3, #0
  4023c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4023c4:	682f      	ldr	r7, [r5, #0]
  4023c6:	602b      	str	r3, [r5, #0]
  4023c8:	d033      	beq.n	402432 <__sflush_r+0x9a>
  4023ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4023cc:	89a3      	ldrh	r3, [r4, #12]
  4023ce:	075a      	lsls	r2, r3, #29
  4023d0:	d505      	bpl.n	4023de <__sflush_r+0x46>
  4023d2:	6863      	ldr	r3, [r4, #4]
  4023d4:	1ac0      	subs	r0, r0, r3
  4023d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4023d8:	b10b      	cbz	r3, 4023de <__sflush_r+0x46>
  4023da:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4023dc:	1ac0      	subs	r0, r0, r3
  4023de:	2300      	movs	r3, #0
  4023e0:	4602      	mov	r2, r0
  4023e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4023e4:	6a21      	ldr	r1, [r4, #32]
  4023e6:	4628      	mov	r0, r5
  4023e8:	47b0      	blx	r6
  4023ea:	1c43      	adds	r3, r0, #1
  4023ec:	89a3      	ldrh	r3, [r4, #12]
  4023ee:	d106      	bne.n	4023fe <__sflush_r+0x66>
  4023f0:	6829      	ldr	r1, [r5, #0]
  4023f2:	291d      	cmp	r1, #29
  4023f4:	d84b      	bhi.n	40248e <__sflush_r+0xf6>
  4023f6:	4a2b      	ldr	r2, [pc, #172]	; (4024a4 <__sflush_r+0x10c>)
  4023f8:	40ca      	lsrs	r2, r1
  4023fa:	07d6      	lsls	r6, r2, #31
  4023fc:	d547      	bpl.n	40248e <__sflush_r+0xf6>
  4023fe:	2200      	movs	r2, #0
  402400:	6062      	str	r2, [r4, #4]
  402402:	04d9      	lsls	r1, r3, #19
  402404:	6922      	ldr	r2, [r4, #16]
  402406:	6022      	str	r2, [r4, #0]
  402408:	d504      	bpl.n	402414 <__sflush_r+0x7c>
  40240a:	1c42      	adds	r2, r0, #1
  40240c:	d101      	bne.n	402412 <__sflush_r+0x7a>
  40240e:	682b      	ldr	r3, [r5, #0]
  402410:	b903      	cbnz	r3, 402414 <__sflush_r+0x7c>
  402412:	6560      	str	r0, [r4, #84]	; 0x54
  402414:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402416:	602f      	str	r7, [r5, #0]
  402418:	2900      	cmp	r1, #0
  40241a:	d0ca      	beq.n	4023b2 <__sflush_r+0x1a>
  40241c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402420:	4299      	cmp	r1, r3
  402422:	d002      	beq.n	40242a <__sflush_r+0x92>
  402424:	4628      	mov	r0, r5
  402426:	f7ff fd09 	bl	401e3c <_free_r>
  40242a:	2000      	movs	r0, #0
  40242c:	6360      	str	r0, [r4, #52]	; 0x34
  40242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402432:	6a21      	ldr	r1, [r4, #32]
  402434:	2301      	movs	r3, #1
  402436:	4628      	mov	r0, r5
  402438:	47b0      	blx	r6
  40243a:	1c41      	adds	r1, r0, #1
  40243c:	d1c6      	bne.n	4023cc <__sflush_r+0x34>
  40243e:	682b      	ldr	r3, [r5, #0]
  402440:	2b00      	cmp	r3, #0
  402442:	d0c3      	beq.n	4023cc <__sflush_r+0x34>
  402444:	2b1d      	cmp	r3, #29
  402446:	d001      	beq.n	40244c <__sflush_r+0xb4>
  402448:	2b16      	cmp	r3, #22
  40244a:	d101      	bne.n	402450 <__sflush_r+0xb8>
  40244c:	602f      	str	r7, [r5, #0]
  40244e:	e7b0      	b.n	4023b2 <__sflush_r+0x1a>
  402450:	89a3      	ldrh	r3, [r4, #12]
  402452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402456:	81a3      	strh	r3, [r4, #12]
  402458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40245c:	690f      	ldr	r7, [r1, #16]
  40245e:	2f00      	cmp	r7, #0
  402460:	d0a7      	beq.n	4023b2 <__sflush_r+0x1a>
  402462:	0793      	lsls	r3, r2, #30
  402464:	680e      	ldr	r6, [r1, #0]
  402466:	bf08      	it	eq
  402468:	694b      	ldreq	r3, [r1, #20]
  40246a:	600f      	str	r7, [r1, #0]
  40246c:	bf18      	it	ne
  40246e:	2300      	movne	r3, #0
  402470:	eba6 0807 	sub.w	r8, r6, r7
  402474:	608b      	str	r3, [r1, #8]
  402476:	f1b8 0f00 	cmp.w	r8, #0
  40247a:	dd9a      	ble.n	4023b2 <__sflush_r+0x1a>
  40247c:	4643      	mov	r3, r8
  40247e:	463a      	mov	r2, r7
  402480:	6a21      	ldr	r1, [r4, #32]
  402482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  402484:	4628      	mov	r0, r5
  402486:	47b0      	blx	r6
  402488:	2800      	cmp	r0, #0
  40248a:	dc07      	bgt.n	40249c <__sflush_r+0x104>
  40248c:	89a3      	ldrh	r3, [r4, #12]
  40248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402492:	81a3      	strh	r3, [r4, #12]
  402494:	f04f 30ff 	mov.w	r0, #4294967295
  402498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40249c:	4407      	add	r7, r0
  40249e:	eba8 0800 	sub.w	r8, r8, r0
  4024a2:	e7e8      	b.n	402476 <__sflush_r+0xde>
  4024a4:	20400001 	.word	0x20400001

004024a8 <_fflush_r>:
  4024a8:	b538      	push	{r3, r4, r5, lr}
  4024aa:	690b      	ldr	r3, [r1, #16]
  4024ac:	4605      	mov	r5, r0
  4024ae:	460c      	mov	r4, r1
  4024b0:	b1db      	cbz	r3, 4024ea <_fflush_r+0x42>
  4024b2:	b118      	cbz	r0, 4024bc <_fflush_r+0x14>
  4024b4:	6983      	ldr	r3, [r0, #24]
  4024b6:	b90b      	cbnz	r3, 4024bc <_fflush_r+0x14>
  4024b8:	f000 f860 	bl	40257c <__sinit>
  4024bc:	4b0c      	ldr	r3, [pc, #48]	; (4024f0 <_fflush_r+0x48>)
  4024be:	429c      	cmp	r4, r3
  4024c0:	d109      	bne.n	4024d6 <_fflush_r+0x2e>
  4024c2:	686c      	ldr	r4, [r5, #4]
  4024c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024c8:	b17b      	cbz	r3, 4024ea <_fflush_r+0x42>
  4024ca:	4621      	mov	r1, r4
  4024cc:	4628      	mov	r0, r5
  4024ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4024d2:	f7ff bf61 	b.w	402398 <__sflush_r>
  4024d6:	4b07      	ldr	r3, [pc, #28]	; (4024f4 <_fflush_r+0x4c>)
  4024d8:	429c      	cmp	r4, r3
  4024da:	d101      	bne.n	4024e0 <_fflush_r+0x38>
  4024dc:	68ac      	ldr	r4, [r5, #8]
  4024de:	e7f1      	b.n	4024c4 <_fflush_r+0x1c>
  4024e0:	4b05      	ldr	r3, [pc, #20]	; (4024f8 <_fflush_r+0x50>)
  4024e2:	429c      	cmp	r4, r3
  4024e4:	bf08      	it	eq
  4024e6:	68ec      	ldreq	r4, [r5, #12]
  4024e8:	e7ec      	b.n	4024c4 <_fflush_r+0x1c>
  4024ea:	2000      	movs	r0, #0
  4024ec:	bd38      	pop	{r3, r4, r5, pc}
  4024ee:	bf00      	nop
  4024f0:	004031cc 	.word	0x004031cc
  4024f4:	004031ec 	.word	0x004031ec
  4024f8:	004031ac 	.word	0x004031ac

004024fc <_cleanup_r>:
  4024fc:	4901      	ldr	r1, [pc, #4]	; (402504 <_cleanup_r+0x8>)
  4024fe:	f000 b8a9 	b.w	402654 <_fwalk_reent>
  402502:	bf00      	nop
  402504:	004024a9 	.word	0x004024a9

00402508 <std.isra.0>:
  402508:	2300      	movs	r3, #0
  40250a:	b510      	push	{r4, lr}
  40250c:	4604      	mov	r4, r0
  40250e:	6003      	str	r3, [r0, #0]
  402510:	6043      	str	r3, [r0, #4]
  402512:	6083      	str	r3, [r0, #8]
  402514:	8181      	strh	r1, [r0, #12]
  402516:	6643      	str	r3, [r0, #100]	; 0x64
  402518:	81c2      	strh	r2, [r0, #14]
  40251a:	6103      	str	r3, [r0, #16]
  40251c:	6143      	str	r3, [r0, #20]
  40251e:	6183      	str	r3, [r0, #24]
  402520:	4619      	mov	r1, r3
  402522:	2208      	movs	r2, #8
  402524:	305c      	adds	r0, #92	; 0x5c
  402526:	f7ff fc81 	bl	401e2c <memset>
  40252a:	4b05      	ldr	r3, [pc, #20]	; (402540 <std.isra.0+0x38>)
  40252c:	6263      	str	r3, [r4, #36]	; 0x24
  40252e:	4b05      	ldr	r3, [pc, #20]	; (402544 <std.isra.0+0x3c>)
  402530:	62a3      	str	r3, [r4, #40]	; 0x28
  402532:	4b05      	ldr	r3, [pc, #20]	; (402548 <std.isra.0+0x40>)
  402534:	62e3      	str	r3, [r4, #44]	; 0x2c
  402536:	4b05      	ldr	r3, [pc, #20]	; (40254c <std.isra.0+0x44>)
  402538:	6224      	str	r4, [r4, #32]
  40253a:	6323      	str	r3, [r4, #48]	; 0x30
  40253c:	bd10      	pop	{r4, pc}
  40253e:	bf00      	nop
  402540:	00402d05 	.word	0x00402d05
  402544:	00402d27 	.word	0x00402d27
  402548:	00402d5f 	.word	0x00402d5f
  40254c:	00402d83 	.word	0x00402d83

00402550 <__sfmoreglue>:
  402550:	b570      	push	{r4, r5, r6, lr}
  402552:	1e4a      	subs	r2, r1, #1
  402554:	2568      	movs	r5, #104	; 0x68
  402556:	4355      	muls	r5, r2
  402558:	460e      	mov	r6, r1
  40255a:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40255e:	f7ff fcbb 	bl	401ed8 <_malloc_r>
  402562:	4604      	mov	r4, r0
  402564:	b140      	cbz	r0, 402578 <__sfmoreglue+0x28>
  402566:	2100      	movs	r1, #0
  402568:	e880 0042 	stmia.w	r0, {r1, r6}
  40256c:	300c      	adds	r0, #12
  40256e:	60a0      	str	r0, [r4, #8]
  402570:	f105 0268 	add.w	r2, r5, #104	; 0x68
  402574:	f7ff fc5a 	bl	401e2c <memset>
  402578:	4620      	mov	r0, r4
  40257a:	bd70      	pop	{r4, r5, r6, pc}

0040257c <__sinit>:
  40257c:	6983      	ldr	r3, [r0, #24]
  40257e:	b510      	push	{r4, lr}
  402580:	4604      	mov	r4, r0
  402582:	bb33      	cbnz	r3, 4025d2 <__sinit+0x56>
  402584:	6483      	str	r3, [r0, #72]	; 0x48
  402586:	64c3      	str	r3, [r0, #76]	; 0x4c
  402588:	6503      	str	r3, [r0, #80]	; 0x50
  40258a:	4b12      	ldr	r3, [pc, #72]	; (4025d4 <__sinit+0x58>)
  40258c:	4a12      	ldr	r2, [pc, #72]	; (4025d8 <__sinit+0x5c>)
  40258e:	681b      	ldr	r3, [r3, #0]
  402590:	6282      	str	r2, [r0, #40]	; 0x28
  402592:	4298      	cmp	r0, r3
  402594:	bf04      	itt	eq
  402596:	2301      	moveq	r3, #1
  402598:	6183      	streq	r3, [r0, #24]
  40259a:	f000 f81f 	bl	4025dc <__sfp>
  40259e:	6060      	str	r0, [r4, #4]
  4025a0:	4620      	mov	r0, r4
  4025a2:	f000 f81b 	bl	4025dc <__sfp>
  4025a6:	60a0      	str	r0, [r4, #8]
  4025a8:	4620      	mov	r0, r4
  4025aa:	f000 f817 	bl	4025dc <__sfp>
  4025ae:	2200      	movs	r2, #0
  4025b0:	60e0      	str	r0, [r4, #12]
  4025b2:	2104      	movs	r1, #4
  4025b4:	6860      	ldr	r0, [r4, #4]
  4025b6:	f7ff ffa7 	bl	402508 <std.isra.0>
  4025ba:	2201      	movs	r2, #1
  4025bc:	2109      	movs	r1, #9
  4025be:	68a0      	ldr	r0, [r4, #8]
  4025c0:	f7ff ffa2 	bl	402508 <std.isra.0>
  4025c4:	2202      	movs	r2, #2
  4025c6:	2112      	movs	r1, #18
  4025c8:	68e0      	ldr	r0, [r4, #12]
  4025ca:	f7ff ff9d 	bl	402508 <std.isra.0>
  4025ce:	2301      	movs	r3, #1
  4025d0:	61a3      	str	r3, [r4, #24]
  4025d2:	bd10      	pop	{r4, pc}
  4025d4:	004031a8 	.word	0x004031a8
  4025d8:	004024fd 	.word	0x004024fd

004025dc <__sfp>:
  4025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025de:	4b1c      	ldr	r3, [pc, #112]	; (402650 <__sfp+0x74>)
  4025e0:	681e      	ldr	r6, [r3, #0]
  4025e2:	69b3      	ldr	r3, [r6, #24]
  4025e4:	4607      	mov	r7, r0
  4025e6:	b913      	cbnz	r3, 4025ee <__sfp+0x12>
  4025e8:	4630      	mov	r0, r6
  4025ea:	f7ff ffc7 	bl	40257c <__sinit>
  4025ee:	3648      	adds	r6, #72	; 0x48
  4025f0:	68b4      	ldr	r4, [r6, #8]
  4025f2:	6873      	ldr	r3, [r6, #4]
  4025f4:	3b01      	subs	r3, #1
  4025f6:	d503      	bpl.n	402600 <__sfp+0x24>
  4025f8:	6833      	ldr	r3, [r6, #0]
  4025fa:	b133      	cbz	r3, 40260a <__sfp+0x2e>
  4025fc:	6836      	ldr	r6, [r6, #0]
  4025fe:	e7f7      	b.n	4025f0 <__sfp+0x14>
  402600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  402604:	b16d      	cbz	r5, 402622 <__sfp+0x46>
  402606:	3468      	adds	r4, #104	; 0x68
  402608:	e7f4      	b.n	4025f4 <__sfp+0x18>
  40260a:	2104      	movs	r1, #4
  40260c:	4638      	mov	r0, r7
  40260e:	f7ff ff9f 	bl	402550 <__sfmoreglue>
  402612:	6030      	str	r0, [r6, #0]
  402614:	2800      	cmp	r0, #0
  402616:	d1f1      	bne.n	4025fc <__sfp+0x20>
  402618:	230c      	movs	r3, #12
  40261a:	603b      	str	r3, [r7, #0]
  40261c:	4604      	mov	r4, r0
  40261e:	4620      	mov	r0, r4
  402620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402622:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402626:	81e3      	strh	r3, [r4, #14]
  402628:	2301      	movs	r3, #1
  40262a:	81a3      	strh	r3, [r4, #12]
  40262c:	6665      	str	r5, [r4, #100]	; 0x64
  40262e:	6025      	str	r5, [r4, #0]
  402630:	60a5      	str	r5, [r4, #8]
  402632:	6065      	str	r5, [r4, #4]
  402634:	6125      	str	r5, [r4, #16]
  402636:	6165      	str	r5, [r4, #20]
  402638:	61a5      	str	r5, [r4, #24]
  40263a:	2208      	movs	r2, #8
  40263c:	4629      	mov	r1, r5
  40263e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  402642:	f7ff fbf3 	bl	401e2c <memset>
  402646:	6365      	str	r5, [r4, #52]	; 0x34
  402648:	63a5      	str	r5, [r4, #56]	; 0x38
  40264a:	64a5      	str	r5, [r4, #72]	; 0x48
  40264c:	64e5      	str	r5, [r4, #76]	; 0x4c
  40264e:	e7e6      	b.n	40261e <__sfp+0x42>
  402650:	004031a8 	.word	0x004031a8

00402654 <_fwalk_reent>:
  402654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402658:	4680      	mov	r8, r0
  40265a:	4689      	mov	r9, r1
  40265c:	f100 0448 	add.w	r4, r0, #72	; 0x48
  402660:	2600      	movs	r6, #0
  402662:	b914      	cbnz	r4, 40266a <_fwalk_reent+0x16>
  402664:	4630      	mov	r0, r6
  402666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40266a:	68a5      	ldr	r5, [r4, #8]
  40266c:	6867      	ldr	r7, [r4, #4]
  40266e:	3f01      	subs	r7, #1
  402670:	d501      	bpl.n	402676 <_fwalk_reent+0x22>
  402672:	6824      	ldr	r4, [r4, #0]
  402674:	e7f5      	b.n	402662 <_fwalk_reent+0xe>
  402676:	89ab      	ldrh	r3, [r5, #12]
  402678:	2b01      	cmp	r3, #1
  40267a:	d907      	bls.n	40268c <_fwalk_reent+0x38>
  40267c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  402680:	3301      	adds	r3, #1
  402682:	d003      	beq.n	40268c <_fwalk_reent+0x38>
  402684:	4629      	mov	r1, r5
  402686:	4640      	mov	r0, r8
  402688:	47c8      	blx	r9
  40268a:	4306      	orrs	r6, r0
  40268c:	3568      	adds	r5, #104	; 0x68
  40268e:	e7ee      	b.n	40266e <_fwalk_reent+0x1a>

00402690 <__swhatbuf_r>:
  402690:	b570      	push	{r4, r5, r6, lr}
  402692:	460e      	mov	r6, r1
  402694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402698:	2900      	cmp	r1, #0
  40269a:	b090      	sub	sp, #64	; 0x40
  40269c:	4614      	mov	r4, r2
  40269e:	461d      	mov	r5, r3
  4026a0:	da07      	bge.n	4026b2 <__swhatbuf_r+0x22>
  4026a2:	2300      	movs	r3, #0
  4026a4:	602b      	str	r3, [r5, #0]
  4026a6:	89b3      	ldrh	r3, [r6, #12]
  4026a8:	061a      	lsls	r2, r3, #24
  4026aa:	d410      	bmi.n	4026ce <__swhatbuf_r+0x3e>
  4026ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4026b0:	e00e      	b.n	4026d0 <__swhatbuf_r+0x40>
  4026b2:	aa01      	add	r2, sp, #4
  4026b4:	f000 fb8c 	bl	402dd0 <_fstat_r>
  4026b8:	2800      	cmp	r0, #0
  4026ba:	dbf2      	blt.n	4026a2 <__swhatbuf_r+0x12>
  4026bc:	9a02      	ldr	r2, [sp, #8]
  4026be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4026c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  4026c6:	425a      	negs	r2, r3
  4026c8:	415a      	adcs	r2, r3
  4026ca:	602a      	str	r2, [r5, #0]
  4026cc:	e7ee      	b.n	4026ac <__swhatbuf_r+0x1c>
  4026ce:	2340      	movs	r3, #64	; 0x40
  4026d0:	2000      	movs	r0, #0
  4026d2:	6023      	str	r3, [r4, #0]
  4026d4:	b010      	add	sp, #64	; 0x40
  4026d6:	bd70      	pop	{r4, r5, r6, pc}

004026d8 <__smakebuf_r>:
  4026d8:	898b      	ldrh	r3, [r1, #12]
  4026da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4026dc:	079d      	lsls	r5, r3, #30
  4026de:	4606      	mov	r6, r0
  4026e0:	460c      	mov	r4, r1
  4026e2:	d507      	bpl.n	4026f4 <__smakebuf_r+0x1c>
  4026e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4026e8:	6023      	str	r3, [r4, #0]
  4026ea:	6123      	str	r3, [r4, #16]
  4026ec:	2301      	movs	r3, #1
  4026ee:	6163      	str	r3, [r4, #20]
  4026f0:	b002      	add	sp, #8
  4026f2:	bd70      	pop	{r4, r5, r6, pc}
  4026f4:	ab01      	add	r3, sp, #4
  4026f6:	466a      	mov	r2, sp
  4026f8:	f7ff ffca 	bl	402690 <__swhatbuf_r>
  4026fc:	9900      	ldr	r1, [sp, #0]
  4026fe:	4605      	mov	r5, r0
  402700:	4630      	mov	r0, r6
  402702:	f7ff fbe9 	bl	401ed8 <_malloc_r>
  402706:	b948      	cbnz	r0, 40271c <__smakebuf_r+0x44>
  402708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40270c:	059a      	lsls	r2, r3, #22
  40270e:	d4ef      	bmi.n	4026f0 <__smakebuf_r+0x18>
  402710:	f023 0303 	bic.w	r3, r3, #3
  402714:	f043 0302 	orr.w	r3, r3, #2
  402718:	81a3      	strh	r3, [r4, #12]
  40271a:	e7e3      	b.n	4026e4 <__smakebuf_r+0xc>
  40271c:	4b0d      	ldr	r3, [pc, #52]	; (402754 <__smakebuf_r+0x7c>)
  40271e:	62b3      	str	r3, [r6, #40]	; 0x28
  402720:	89a3      	ldrh	r3, [r4, #12]
  402722:	6020      	str	r0, [r4, #0]
  402724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402728:	81a3      	strh	r3, [r4, #12]
  40272a:	9b00      	ldr	r3, [sp, #0]
  40272c:	6163      	str	r3, [r4, #20]
  40272e:	9b01      	ldr	r3, [sp, #4]
  402730:	6120      	str	r0, [r4, #16]
  402732:	b15b      	cbz	r3, 40274c <__smakebuf_r+0x74>
  402734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402738:	4630      	mov	r0, r6
  40273a:	f000 fb5b 	bl	402df4 <_isatty_r>
  40273e:	b128      	cbz	r0, 40274c <__smakebuf_r+0x74>
  402740:	89a3      	ldrh	r3, [r4, #12]
  402742:	f023 0303 	bic.w	r3, r3, #3
  402746:	f043 0301 	orr.w	r3, r3, #1
  40274a:	81a3      	strh	r3, [r4, #12]
  40274c:	89a3      	ldrh	r3, [r4, #12]
  40274e:	431d      	orrs	r5, r3
  402750:	81a5      	strh	r5, [r4, #12]
  402752:	e7cd      	b.n	4026f0 <__smakebuf_r+0x18>
  402754:	004024fd 	.word	0x004024fd

00402758 <__malloc_lock>:
  402758:	4770      	bx	lr

0040275a <__malloc_unlock>:
  40275a:	4770      	bx	lr

0040275c <__sfputc_r>:
  40275c:	6893      	ldr	r3, [r2, #8]
  40275e:	3b01      	subs	r3, #1
  402760:	2b00      	cmp	r3, #0
  402762:	b410      	push	{r4}
  402764:	6093      	str	r3, [r2, #8]
  402766:	da08      	bge.n	40277a <__sfputc_r+0x1e>
  402768:	6994      	ldr	r4, [r2, #24]
  40276a:	42a3      	cmp	r3, r4
  40276c:	db02      	blt.n	402774 <__sfputc_r+0x18>
  40276e:	b2cb      	uxtb	r3, r1
  402770:	2b0a      	cmp	r3, #10
  402772:	d102      	bne.n	40277a <__sfputc_r+0x1e>
  402774:	bc10      	pop	{r4}
  402776:	f7ff bd4f 	b.w	402218 <__swbuf_r>
  40277a:	6813      	ldr	r3, [r2, #0]
  40277c:	1c58      	adds	r0, r3, #1
  40277e:	6010      	str	r0, [r2, #0]
  402780:	7019      	strb	r1, [r3, #0]
  402782:	b2c8      	uxtb	r0, r1
  402784:	bc10      	pop	{r4}
  402786:	4770      	bx	lr

00402788 <__sfputs_r>:
  402788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40278a:	4606      	mov	r6, r0
  40278c:	460f      	mov	r7, r1
  40278e:	4614      	mov	r4, r2
  402790:	18d5      	adds	r5, r2, r3
  402792:	42ac      	cmp	r4, r5
  402794:	d101      	bne.n	40279a <__sfputs_r+0x12>
  402796:	2000      	movs	r0, #0
  402798:	e007      	b.n	4027aa <__sfputs_r+0x22>
  40279a:	463a      	mov	r2, r7
  40279c:	f814 1b01 	ldrb.w	r1, [r4], #1
  4027a0:	4630      	mov	r0, r6
  4027a2:	f7ff ffdb 	bl	40275c <__sfputc_r>
  4027a6:	1c43      	adds	r3, r0, #1
  4027a8:	d1f3      	bne.n	402792 <__sfputs_r+0xa>
  4027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004027ac <_vfiprintf_r>:
  4027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027b0:	b09d      	sub	sp, #116	; 0x74
  4027b2:	460c      	mov	r4, r1
  4027b4:	4617      	mov	r7, r2
  4027b6:	9303      	str	r3, [sp, #12]
  4027b8:	4606      	mov	r6, r0
  4027ba:	b118      	cbz	r0, 4027c4 <_vfiprintf_r+0x18>
  4027bc:	6983      	ldr	r3, [r0, #24]
  4027be:	b90b      	cbnz	r3, 4027c4 <_vfiprintf_r+0x18>
  4027c0:	f7ff fedc 	bl	40257c <__sinit>
  4027c4:	4b7c      	ldr	r3, [pc, #496]	; (4029b8 <_vfiprintf_r+0x20c>)
  4027c6:	429c      	cmp	r4, r3
  4027c8:	d157      	bne.n	40287a <_vfiprintf_r+0xce>
  4027ca:	6874      	ldr	r4, [r6, #4]
  4027cc:	89a3      	ldrh	r3, [r4, #12]
  4027ce:	0718      	lsls	r0, r3, #28
  4027d0:	d55d      	bpl.n	40288e <_vfiprintf_r+0xe2>
  4027d2:	6923      	ldr	r3, [r4, #16]
  4027d4:	2b00      	cmp	r3, #0
  4027d6:	d05a      	beq.n	40288e <_vfiprintf_r+0xe2>
  4027d8:	2300      	movs	r3, #0
  4027da:	9309      	str	r3, [sp, #36]	; 0x24
  4027dc:	2320      	movs	r3, #32
  4027de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4027e2:	2330      	movs	r3, #48	; 0x30
  4027e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4027e8:	f04f 0b01 	mov.w	fp, #1
  4027ec:	46b8      	mov	r8, r7
  4027ee:	4645      	mov	r5, r8
  4027f0:	f815 3b01 	ldrb.w	r3, [r5], #1
  4027f4:	2b00      	cmp	r3, #0
  4027f6:	d155      	bne.n	4028a4 <_vfiprintf_r+0xf8>
  4027f8:	ebb8 0a07 	subs.w	sl, r8, r7
  4027fc:	d00b      	beq.n	402816 <_vfiprintf_r+0x6a>
  4027fe:	4653      	mov	r3, sl
  402800:	463a      	mov	r2, r7
  402802:	4621      	mov	r1, r4
  402804:	4630      	mov	r0, r6
  402806:	f7ff ffbf 	bl	402788 <__sfputs_r>
  40280a:	3001      	adds	r0, #1
  40280c:	f000 80c4 	beq.w	402998 <_vfiprintf_r+0x1ec>
  402810:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402812:	4453      	add	r3, sl
  402814:	9309      	str	r3, [sp, #36]	; 0x24
  402816:	f898 3000 	ldrb.w	r3, [r8]
  40281a:	2b00      	cmp	r3, #0
  40281c:	f000 80bc 	beq.w	402998 <_vfiprintf_r+0x1ec>
  402820:	2300      	movs	r3, #0
  402822:	f04f 32ff 	mov.w	r2, #4294967295
  402826:	9304      	str	r3, [sp, #16]
  402828:	9307      	str	r3, [sp, #28]
  40282a:	9205      	str	r2, [sp, #20]
  40282c:	9306      	str	r3, [sp, #24]
  40282e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  402832:	931a      	str	r3, [sp, #104]	; 0x68
  402834:	2205      	movs	r2, #5
  402836:	7829      	ldrb	r1, [r5, #0]
  402838:	4860      	ldr	r0, [pc, #384]	; (4029bc <_vfiprintf_r+0x210>)
  40283a:	f000 fb01 	bl	402e40 <memchr>
  40283e:	f105 0801 	add.w	r8, r5, #1
  402842:	9b04      	ldr	r3, [sp, #16]
  402844:	2800      	cmp	r0, #0
  402846:	d131      	bne.n	4028ac <_vfiprintf_r+0x100>
  402848:	06d9      	lsls	r1, r3, #27
  40284a:	bf44      	itt	mi
  40284c:	2220      	movmi	r2, #32
  40284e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  402852:	071a      	lsls	r2, r3, #28
  402854:	bf44      	itt	mi
  402856:	222b      	movmi	r2, #43	; 0x2b
  402858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40285c:	782a      	ldrb	r2, [r5, #0]
  40285e:	2a2a      	cmp	r2, #42	; 0x2a
  402860:	d02c      	beq.n	4028bc <_vfiprintf_r+0x110>
  402862:	9a07      	ldr	r2, [sp, #28]
  402864:	2100      	movs	r1, #0
  402866:	200a      	movs	r0, #10
  402868:	46a8      	mov	r8, r5
  40286a:	3501      	adds	r5, #1
  40286c:	f898 3000 	ldrb.w	r3, [r8]
  402870:	3b30      	subs	r3, #48	; 0x30
  402872:	2b09      	cmp	r3, #9
  402874:	d96d      	bls.n	402952 <_vfiprintf_r+0x1a6>
  402876:	b371      	cbz	r1, 4028d6 <_vfiprintf_r+0x12a>
  402878:	e026      	b.n	4028c8 <_vfiprintf_r+0x11c>
  40287a:	4b51      	ldr	r3, [pc, #324]	; (4029c0 <_vfiprintf_r+0x214>)
  40287c:	429c      	cmp	r4, r3
  40287e:	d101      	bne.n	402884 <_vfiprintf_r+0xd8>
  402880:	68b4      	ldr	r4, [r6, #8]
  402882:	e7a3      	b.n	4027cc <_vfiprintf_r+0x20>
  402884:	4b4f      	ldr	r3, [pc, #316]	; (4029c4 <_vfiprintf_r+0x218>)
  402886:	429c      	cmp	r4, r3
  402888:	bf08      	it	eq
  40288a:	68f4      	ldreq	r4, [r6, #12]
  40288c:	e79e      	b.n	4027cc <_vfiprintf_r+0x20>
  40288e:	4621      	mov	r1, r4
  402890:	4630      	mov	r0, r6
  402892:	f7ff fd13 	bl	4022bc <__swsetup_r>
  402896:	2800      	cmp	r0, #0
  402898:	d09e      	beq.n	4027d8 <_vfiprintf_r+0x2c>
  40289a:	f04f 30ff 	mov.w	r0, #4294967295
  40289e:	b01d      	add	sp, #116	; 0x74
  4028a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028a4:	2b25      	cmp	r3, #37	; 0x25
  4028a6:	d0a7      	beq.n	4027f8 <_vfiprintf_r+0x4c>
  4028a8:	46a8      	mov	r8, r5
  4028aa:	e7a0      	b.n	4027ee <_vfiprintf_r+0x42>
  4028ac:	4a43      	ldr	r2, [pc, #268]	; (4029bc <_vfiprintf_r+0x210>)
  4028ae:	1a80      	subs	r0, r0, r2
  4028b0:	fa0b f000 	lsl.w	r0, fp, r0
  4028b4:	4318      	orrs	r0, r3
  4028b6:	9004      	str	r0, [sp, #16]
  4028b8:	4645      	mov	r5, r8
  4028ba:	e7bb      	b.n	402834 <_vfiprintf_r+0x88>
  4028bc:	9a03      	ldr	r2, [sp, #12]
  4028be:	1d11      	adds	r1, r2, #4
  4028c0:	6812      	ldr	r2, [r2, #0]
  4028c2:	9103      	str	r1, [sp, #12]
  4028c4:	2a00      	cmp	r2, #0
  4028c6:	db01      	blt.n	4028cc <_vfiprintf_r+0x120>
  4028c8:	9207      	str	r2, [sp, #28]
  4028ca:	e004      	b.n	4028d6 <_vfiprintf_r+0x12a>
  4028cc:	4252      	negs	r2, r2
  4028ce:	f043 0302 	orr.w	r3, r3, #2
  4028d2:	9207      	str	r2, [sp, #28]
  4028d4:	9304      	str	r3, [sp, #16]
  4028d6:	f898 3000 	ldrb.w	r3, [r8]
  4028da:	2b2e      	cmp	r3, #46	; 0x2e
  4028dc:	d110      	bne.n	402900 <_vfiprintf_r+0x154>
  4028de:	f898 3001 	ldrb.w	r3, [r8, #1]
  4028e2:	2b2a      	cmp	r3, #42	; 0x2a
  4028e4:	f108 0101 	add.w	r1, r8, #1
  4028e8:	d137      	bne.n	40295a <_vfiprintf_r+0x1ae>
  4028ea:	9b03      	ldr	r3, [sp, #12]
  4028ec:	1d1a      	adds	r2, r3, #4
  4028ee:	681b      	ldr	r3, [r3, #0]
  4028f0:	9203      	str	r2, [sp, #12]
  4028f2:	2b00      	cmp	r3, #0
  4028f4:	bfb8      	it	lt
  4028f6:	f04f 33ff 	movlt.w	r3, #4294967295
  4028fa:	f108 0802 	add.w	r8, r8, #2
  4028fe:	9305      	str	r3, [sp, #20]
  402900:	4d31      	ldr	r5, [pc, #196]	; (4029c8 <_vfiprintf_r+0x21c>)
  402902:	f898 1000 	ldrb.w	r1, [r8]
  402906:	2203      	movs	r2, #3
  402908:	4628      	mov	r0, r5
  40290a:	f000 fa99 	bl	402e40 <memchr>
  40290e:	b140      	cbz	r0, 402922 <_vfiprintf_r+0x176>
  402910:	2340      	movs	r3, #64	; 0x40
  402912:	1b40      	subs	r0, r0, r5
  402914:	fa03 f000 	lsl.w	r0, r3, r0
  402918:	9b04      	ldr	r3, [sp, #16]
  40291a:	4303      	orrs	r3, r0
  40291c:	9304      	str	r3, [sp, #16]
  40291e:	f108 0801 	add.w	r8, r8, #1
  402922:	f898 1000 	ldrb.w	r1, [r8]
  402926:	4829      	ldr	r0, [pc, #164]	; (4029cc <_vfiprintf_r+0x220>)
  402928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40292c:	2206      	movs	r2, #6
  40292e:	f108 0701 	add.w	r7, r8, #1
  402932:	f000 fa85 	bl	402e40 <memchr>
  402936:	2800      	cmp	r0, #0
  402938:	d034      	beq.n	4029a4 <_vfiprintf_r+0x1f8>
  40293a:	4b25      	ldr	r3, [pc, #148]	; (4029d0 <_vfiprintf_r+0x224>)
  40293c:	bb03      	cbnz	r3, 402980 <_vfiprintf_r+0x1d4>
  40293e:	9b03      	ldr	r3, [sp, #12]
  402940:	3307      	adds	r3, #7
  402942:	f023 0307 	bic.w	r3, r3, #7
  402946:	3308      	adds	r3, #8
  402948:	9303      	str	r3, [sp, #12]
  40294a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40294c:	444b      	add	r3, r9
  40294e:	9309      	str	r3, [sp, #36]	; 0x24
  402950:	e74c      	b.n	4027ec <_vfiprintf_r+0x40>
  402952:	fb00 3202 	mla	r2, r0, r2, r3
  402956:	2101      	movs	r1, #1
  402958:	e786      	b.n	402868 <_vfiprintf_r+0xbc>
  40295a:	2300      	movs	r3, #0
  40295c:	9305      	str	r3, [sp, #20]
  40295e:	4618      	mov	r0, r3
  402960:	250a      	movs	r5, #10
  402962:	4688      	mov	r8, r1
  402964:	3101      	adds	r1, #1
  402966:	f898 2000 	ldrb.w	r2, [r8]
  40296a:	3a30      	subs	r2, #48	; 0x30
  40296c:	2a09      	cmp	r2, #9
  40296e:	d903      	bls.n	402978 <_vfiprintf_r+0x1cc>
  402970:	2b00      	cmp	r3, #0
  402972:	d0c5      	beq.n	402900 <_vfiprintf_r+0x154>
  402974:	9005      	str	r0, [sp, #20]
  402976:	e7c3      	b.n	402900 <_vfiprintf_r+0x154>
  402978:	fb05 2000 	mla	r0, r5, r0, r2
  40297c:	2301      	movs	r3, #1
  40297e:	e7f0      	b.n	402962 <_vfiprintf_r+0x1b6>
  402980:	ab03      	add	r3, sp, #12
  402982:	9300      	str	r3, [sp, #0]
  402984:	4622      	mov	r2, r4
  402986:	4b13      	ldr	r3, [pc, #76]	; (4029d4 <_vfiprintf_r+0x228>)
  402988:	a904      	add	r1, sp, #16
  40298a:	4630      	mov	r0, r6
  40298c:	f3af 8000 	nop.w
  402990:	f1b0 3fff 	cmp.w	r0, #4294967295
  402994:	4681      	mov	r9, r0
  402996:	d1d8      	bne.n	40294a <_vfiprintf_r+0x19e>
  402998:	89a3      	ldrh	r3, [r4, #12]
  40299a:	065b      	lsls	r3, r3, #25
  40299c:	f53f af7d 	bmi.w	40289a <_vfiprintf_r+0xee>
  4029a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4029a2:	e77c      	b.n	40289e <_vfiprintf_r+0xf2>
  4029a4:	ab03      	add	r3, sp, #12
  4029a6:	9300      	str	r3, [sp, #0]
  4029a8:	4622      	mov	r2, r4
  4029aa:	4b0a      	ldr	r3, [pc, #40]	; (4029d4 <_vfiprintf_r+0x228>)
  4029ac:	a904      	add	r1, sp, #16
  4029ae:	4630      	mov	r0, r6
  4029b0:	f000 f888 	bl	402ac4 <_printf_i>
  4029b4:	e7ec      	b.n	402990 <_vfiprintf_r+0x1e4>
  4029b6:	bf00      	nop
  4029b8:	004031cc 	.word	0x004031cc
  4029bc:	0040320c 	.word	0x0040320c
  4029c0:	004031ec 	.word	0x004031ec
  4029c4:	004031ac 	.word	0x004031ac
  4029c8:	00403212 	.word	0x00403212
  4029cc:	00403216 	.word	0x00403216
  4029d0:	00000000 	.word	0x00000000
  4029d4:	00402789 	.word	0x00402789

004029d8 <_printf_common>:
  4029d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029dc:	4691      	mov	r9, r2
  4029de:	461f      	mov	r7, r3
  4029e0:	688a      	ldr	r2, [r1, #8]
  4029e2:	690b      	ldr	r3, [r1, #16]
  4029e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4029e8:	4293      	cmp	r3, r2
  4029ea:	bfb8      	it	lt
  4029ec:	4613      	movlt	r3, r2
  4029ee:	f8c9 3000 	str.w	r3, [r9]
  4029f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4029f6:	4606      	mov	r6, r0
  4029f8:	460c      	mov	r4, r1
  4029fa:	b112      	cbz	r2, 402a02 <_printf_common+0x2a>
  4029fc:	3301      	adds	r3, #1
  4029fe:	f8c9 3000 	str.w	r3, [r9]
  402a02:	6823      	ldr	r3, [r4, #0]
  402a04:	0699      	lsls	r1, r3, #26
  402a06:	bf42      	ittt	mi
  402a08:	f8d9 3000 	ldrmi.w	r3, [r9]
  402a0c:	3302      	addmi	r3, #2
  402a0e:	f8c9 3000 	strmi.w	r3, [r9]
  402a12:	6825      	ldr	r5, [r4, #0]
  402a14:	f015 0506 	ands.w	r5, r5, #6
  402a18:	d107      	bne.n	402a2a <_printf_common+0x52>
  402a1a:	f104 0a19 	add.w	sl, r4, #25
  402a1e:	68e3      	ldr	r3, [r4, #12]
  402a20:	f8d9 2000 	ldr.w	r2, [r9]
  402a24:	1a9b      	subs	r3, r3, r2
  402a26:	429d      	cmp	r5, r3
  402a28:	db29      	blt.n	402a7e <_printf_common+0xa6>
  402a2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402a2e:	6822      	ldr	r2, [r4, #0]
  402a30:	3300      	adds	r3, #0
  402a32:	bf18      	it	ne
  402a34:	2301      	movne	r3, #1
  402a36:	0692      	lsls	r2, r2, #26
  402a38:	d42e      	bmi.n	402a98 <_printf_common+0xc0>
  402a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402a3e:	4639      	mov	r1, r7
  402a40:	4630      	mov	r0, r6
  402a42:	47c0      	blx	r8
  402a44:	3001      	adds	r0, #1
  402a46:	d021      	beq.n	402a8c <_printf_common+0xb4>
  402a48:	6823      	ldr	r3, [r4, #0]
  402a4a:	68e5      	ldr	r5, [r4, #12]
  402a4c:	f8d9 2000 	ldr.w	r2, [r9]
  402a50:	f003 0306 	and.w	r3, r3, #6
  402a54:	2b04      	cmp	r3, #4
  402a56:	bf08      	it	eq
  402a58:	1aad      	subeq	r5, r5, r2
  402a5a:	68a3      	ldr	r3, [r4, #8]
  402a5c:	6922      	ldr	r2, [r4, #16]
  402a5e:	bf0c      	ite	eq
  402a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402a64:	2500      	movne	r5, #0
  402a66:	4293      	cmp	r3, r2
  402a68:	bfc4      	itt	gt
  402a6a:	1a9b      	subgt	r3, r3, r2
  402a6c:	18ed      	addgt	r5, r5, r3
  402a6e:	f04f 0900 	mov.w	r9, #0
  402a72:	341a      	adds	r4, #26
  402a74:	454d      	cmp	r5, r9
  402a76:	d11b      	bne.n	402ab0 <_printf_common+0xd8>
  402a78:	2000      	movs	r0, #0
  402a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a7e:	2301      	movs	r3, #1
  402a80:	4652      	mov	r2, sl
  402a82:	4639      	mov	r1, r7
  402a84:	4630      	mov	r0, r6
  402a86:	47c0      	blx	r8
  402a88:	3001      	adds	r0, #1
  402a8a:	d103      	bne.n	402a94 <_printf_common+0xbc>
  402a8c:	f04f 30ff 	mov.w	r0, #4294967295
  402a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a94:	3501      	adds	r5, #1
  402a96:	e7c2      	b.n	402a1e <_printf_common+0x46>
  402a98:	18e1      	adds	r1, r4, r3
  402a9a:	1c5a      	adds	r2, r3, #1
  402a9c:	2030      	movs	r0, #48	; 0x30
  402a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402aa2:	4422      	add	r2, r4
  402aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402aac:	3302      	adds	r3, #2
  402aae:	e7c4      	b.n	402a3a <_printf_common+0x62>
  402ab0:	2301      	movs	r3, #1
  402ab2:	4622      	mov	r2, r4
  402ab4:	4639      	mov	r1, r7
  402ab6:	4630      	mov	r0, r6
  402ab8:	47c0      	blx	r8
  402aba:	3001      	adds	r0, #1
  402abc:	d0e6      	beq.n	402a8c <_printf_common+0xb4>
  402abe:	f109 0901 	add.w	r9, r9, #1
  402ac2:	e7d7      	b.n	402a74 <_printf_common+0x9c>

00402ac4 <_printf_i>:
  402ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402ac8:	4617      	mov	r7, r2
  402aca:	7e0a      	ldrb	r2, [r1, #24]
  402acc:	b085      	sub	sp, #20
  402ace:	2a6e      	cmp	r2, #110	; 0x6e
  402ad0:	4698      	mov	r8, r3
  402ad2:	4606      	mov	r6, r0
  402ad4:	460c      	mov	r4, r1
  402ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402ad8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402adc:	f000 80bc 	beq.w	402c58 <_printf_i+0x194>
  402ae0:	d81a      	bhi.n	402b18 <_printf_i+0x54>
  402ae2:	2a63      	cmp	r2, #99	; 0x63
  402ae4:	d02e      	beq.n	402b44 <_printf_i+0x80>
  402ae6:	d80a      	bhi.n	402afe <_printf_i+0x3a>
  402ae8:	2a00      	cmp	r2, #0
  402aea:	f000 80c8 	beq.w	402c7e <_printf_i+0x1ba>
  402aee:	2a58      	cmp	r2, #88	; 0x58
  402af0:	f000 808a 	beq.w	402c08 <_printf_i+0x144>
  402af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402af8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402afc:	e02a      	b.n	402b54 <_printf_i+0x90>
  402afe:	2a64      	cmp	r2, #100	; 0x64
  402b00:	d001      	beq.n	402b06 <_printf_i+0x42>
  402b02:	2a69      	cmp	r2, #105	; 0x69
  402b04:	d1f6      	bne.n	402af4 <_printf_i+0x30>
  402b06:	6821      	ldr	r1, [r4, #0]
  402b08:	681a      	ldr	r2, [r3, #0]
  402b0a:	f011 0f80 	tst.w	r1, #128	; 0x80
  402b0e:	d023      	beq.n	402b58 <_printf_i+0x94>
  402b10:	1d11      	adds	r1, r2, #4
  402b12:	6019      	str	r1, [r3, #0]
  402b14:	6813      	ldr	r3, [r2, #0]
  402b16:	e027      	b.n	402b68 <_printf_i+0xa4>
  402b18:	2a73      	cmp	r2, #115	; 0x73
  402b1a:	f000 80b4 	beq.w	402c86 <_printf_i+0x1c2>
  402b1e:	d808      	bhi.n	402b32 <_printf_i+0x6e>
  402b20:	2a6f      	cmp	r2, #111	; 0x6f
  402b22:	d02a      	beq.n	402b7a <_printf_i+0xb6>
  402b24:	2a70      	cmp	r2, #112	; 0x70
  402b26:	d1e5      	bne.n	402af4 <_printf_i+0x30>
  402b28:	680a      	ldr	r2, [r1, #0]
  402b2a:	f042 0220 	orr.w	r2, r2, #32
  402b2e:	600a      	str	r2, [r1, #0]
  402b30:	e003      	b.n	402b3a <_printf_i+0x76>
  402b32:	2a75      	cmp	r2, #117	; 0x75
  402b34:	d021      	beq.n	402b7a <_printf_i+0xb6>
  402b36:	2a78      	cmp	r2, #120	; 0x78
  402b38:	d1dc      	bne.n	402af4 <_printf_i+0x30>
  402b3a:	2278      	movs	r2, #120	; 0x78
  402b3c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402b40:	496e      	ldr	r1, [pc, #440]	; (402cfc <_printf_i+0x238>)
  402b42:	e064      	b.n	402c0e <_printf_i+0x14a>
  402b44:	681a      	ldr	r2, [r3, #0]
  402b46:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402b4a:	1d11      	adds	r1, r2, #4
  402b4c:	6019      	str	r1, [r3, #0]
  402b4e:	6813      	ldr	r3, [r2, #0]
  402b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402b54:	2301      	movs	r3, #1
  402b56:	e0a3      	b.n	402ca0 <_printf_i+0x1dc>
  402b58:	f011 0f40 	tst.w	r1, #64	; 0x40
  402b5c:	f102 0104 	add.w	r1, r2, #4
  402b60:	6019      	str	r1, [r3, #0]
  402b62:	d0d7      	beq.n	402b14 <_printf_i+0x50>
  402b64:	f9b2 3000 	ldrsh.w	r3, [r2]
  402b68:	2b00      	cmp	r3, #0
  402b6a:	da03      	bge.n	402b74 <_printf_i+0xb0>
  402b6c:	222d      	movs	r2, #45	; 0x2d
  402b6e:	425b      	negs	r3, r3
  402b70:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402b74:	4962      	ldr	r1, [pc, #392]	; (402d00 <_printf_i+0x23c>)
  402b76:	220a      	movs	r2, #10
  402b78:	e017      	b.n	402baa <_printf_i+0xe6>
  402b7a:	6820      	ldr	r0, [r4, #0]
  402b7c:	6819      	ldr	r1, [r3, #0]
  402b7e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402b82:	d003      	beq.n	402b8c <_printf_i+0xc8>
  402b84:	1d08      	adds	r0, r1, #4
  402b86:	6018      	str	r0, [r3, #0]
  402b88:	680b      	ldr	r3, [r1, #0]
  402b8a:	e006      	b.n	402b9a <_printf_i+0xd6>
  402b8c:	f010 0f40 	tst.w	r0, #64	; 0x40
  402b90:	f101 0004 	add.w	r0, r1, #4
  402b94:	6018      	str	r0, [r3, #0]
  402b96:	d0f7      	beq.n	402b88 <_printf_i+0xc4>
  402b98:	880b      	ldrh	r3, [r1, #0]
  402b9a:	4959      	ldr	r1, [pc, #356]	; (402d00 <_printf_i+0x23c>)
  402b9c:	2a6f      	cmp	r2, #111	; 0x6f
  402b9e:	bf14      	ite	ne
  402ba0:	220a      	movne	r2, #10
  402ba2:	2208      	moveq	r2, #8
  402ba4:	2000      	movs	r0, #0
  402ba6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402baa:	6865      	ldr	r5, [r4, #4]
  402bac:	60a5      	str	r5, [r4, #8]
  402bae:	2d00      	cmp	r5, #0
  402bb0:	f2c0 809c 	blt.w	402cec <_printf_i+0x228>
  402bb4:	6820      	ldr	r0, [r4, #0]
  402bb6:	f020 0004 	bic.w	r0, r0, #4
  402bba:	6020      	str	r0, [r4, #0]
  402bbc:	2b00      	cmp	r3, #0
  402bbe:	d13f      	bne.n	402c40 <_printf_i+0x17c>
  402bc0:	2d00      	cmp	r5, #0
  402bc2:	f040 8095 	bne.w	402cf0 <_printf_i+0x22c>
  402bc6:	4675      	mov	r5, lr
  402bc8:	2a08      	cmp	r2, #8
  402bca:	d10b      	bne.n	402be4 <_printf_i+0x120>
  402bcc:	6823      	ldr	r3, [r4, #0]
  402bce:	07da      	lsls	r2, r3, #31
  402bd0:	d508      	bpl.n	402be4 <_printf_i+0x120>
  402bd2:	6923      	ldr	r3, [r4, #16]
  402bd4:	6862      	ldr	r2, [r4, #4]
  402bd6:	429a      	cmp	r2, r3
  402bd8:	bfde      	ittt	le
  402bda:	2330      	movle	r3, #48	; 0x30
  402bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
  402be0:	f105 35ff 	addle.w	r5, r5, #4294967295
  402be4:	ebae 0305 	sub.w	r3, lr, r5
  402be8:	6123      	str	r3, [r4, #16]
  402bea:	f8cd 8000 	str.w	r8, [sp]
  402bee:	463b      	mov	r3, r7
  402bf0:	aa03      	add	r2, sp, #12
  402bf2:	4621      	mov	r1, r4
  402bf4:	4630      	mov	r0, r6
  402bf6:	f7ff feef 	bl	4029d8 <_printf_common>
  402bfa:	3001      	adds	r0, #1
  402bfc:	d155      	bne.n	402caa <_printf_i+0x1e6>
  402bfe:	f04f 30ff 	mov.w	r0, #4294967295
  402c02:	b005      	add	sp, #20
  402c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402c08:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402c0c:	493c      	ldr	r1, [pc, #240]	; (402d00 <_printf_i+0x23c>)
  402c0e:	6822      	ldr	r2, [r4, #0]
  402c10:	6818      	ldr	r0, [r3, #0]
  402c12:	f012 0f80 	tst.w	r2, #128	; 0x80
  402c16:	f100 0504 	add.w	r5, r0, #4
  402c1a:	601d      	str	r5, [r3, #0]
  402c1c:	d001      	beq.n	402c22 <_printf_i+0x15e>
  402c1e:	6803      	ldr	r3, [r0, #0]
  402c20:	e002      	b.n	402c28 <_printf_i+0x164>
  402c22:	0655      	lsls	r5, r2, #25
  402c24:	d5fb      	bpl.n	402c1e <_printf_i+0x15a>
  402c26:	8803      	ldrh	r3, [r0, #0]
  402c28:	07d0      	lsls	r0, r2, #31
  402c2a:	bf44      	itt	mi
  402c2c:	f042 0220 	orrmi.w	r2, r2, #32
  402c30:	6022      	strmi	r2, [r4, #0]
  402c32:	b91b      	cbnz	r3, 402c3c <_printf_i+0x178>
  402c34:	6822      	ldr	r2, [r4, #0]
  402c36:	f022 0220 	bic.w	r2, r2, #32
  402c3a:	6022      	str	r2, [r4, #0]
  402c3c:	2210      	movs	r2, #16
  402c3e:	e7b1      	b.n	402ba4 <_printf_i+0xe0>
  402c40:	4675      	mov	r5, lr
  402c42:	fbb3 f0f2 	udiv	r0, r3, r2
  402c46:	fb02 3310 	mls	r3, r2, r0, r3
  402c4a:	5ccb      	ldrb	r3, [r1, r3]
  402c4c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402c50:	4603      	mov	r3, r0
  402c52:	2800      	cmp	r0, #0
  402c54:	d1f5      	bne.n	402c42 <_printf_i+0x17e>
  402c56:	e7b7      	b.n	402bc8 <_printf_i+0x104>
  402c58:	6808      	ldr	r0, [r1, #0]
  402c5a:	681a      	ldr	r2, [r3, #0]
  402c5c:	6949      	ldr	r1, [r1, #20]
  402c5e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402c62:	d004      	beq.n	402c6e <_printf_i+0x1aa>
  402c64:	1d10      	adds	r0, r2, #4
  402c66:	6018      	str	r0, [r3, #0]
  402c68:	6813      	ldr	r3, [r2, #0]
  402c6a:	6019      	str	r1, [r3, #0]
  402c6c:	e007      	b.n	402c7e <_printf_i+0x1ba>
  402c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
  402c72:	f102 0004 	add.w	r0, r2, #4
  402c76:	6018      	str	r0, [r3, #0]
  402c78:	6813      	ldr	r3, [r2, #0]
  402c7a:	d0f6      	beq.n	402c6a <_printf_i+0x1a6>
  402c7c:	8019      	strh	r1, [r3, #0]
  402c7e:	2300      	movs	r3, #0
  402c80:	6123      	str	r3, [r4, #16]
  402c82:	4675      	mov	r5, lr
  402c84:	e7b1      	b.n	402bea <_printf_i+0x126>
  402c86:	681a      	ldr	r2, [r3, #0]
  402c88:	1d11      	adds	r1, r2, #4
  402c8a:	6019      	str	r1, [r3, #0]
  402c8c:	6815      	ldr	r5, [r2, #0]
  402c8e:	6862      	ldr	r2, [r4, #4]
  402c90:	2100      	movs	r1, #0
  402c92:	4628      	mov	r0, r5
  402c94:	f000 f8d4 	bl	402e40 <memchr>
  402c98:	b108      	cbz	r0, 402c9e <_printf_i+0x1da>
  402c9a:	1b40      	subs	r0, r0, r5
  402c9c:	6060      	str	r0, [r4, #4]
  402c9e:	6863      	ldr	r3, [r4, #4]
  402ca0:	6123      	str	r3, [r4, #16]
  402ca2:	2300      	movs	r3, #0
  402ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402ca8:	e79f      	b.n	402bea <_printf_i+0x126>
  402caa:	6923      	ldr	r3, [r4, #16]
  402cac:	462a      	mov	r2, r5
  402cae:	4639      	mov	r1, r7
  402cb0:	4630      	mov	r0, r6
  402cb2:	47c0      	blx	r8
  402cb4:	3001      	adds	r0, #1
  402cb6:	d0a2      	beq.n	402bfe <_printf_i+0x13a>
  402cb8:	6823      	ldr	r3, [r4, #0]
  402cba:	079b      	lsls	r3, r3, #30
  402cbc:	d507      	bpl.n	402cce <_printf_i+0x20a>
  402cbe:	2500      	movs	r5, #0
  402cc0:	f104 0919 	add.w	r9, r4, #25
  402cc4:	68e3      	ldr	r3, [r4, #12]
  402cc6:	9a03      	ldr	r2, [sp, #12]
  402cc8:	1a9b      	subs	r3, r3, r2
  402cca:	429d      	cmp	r5, r3
  402ccc:	db05      	blt.n	402cda <_printf_i+0x216>
  402cce:	68e0      	ldr	r0, [r4, #12]
  402cd0:	9b03      	ldr	r3, [sp, #12]
  402cd2:	4298      	cmp	r0, r3
  402cd4:	bfb8      	it	lt
  402cd6:	4618      	movlt	r0, r3
  402cd8:	e793      	b.n	402c02 <_printf_i+0x13e>
  402cda:	2301      	movs	r3, #1
  402cdc:	464a      	mov	r2, r9
  402cde:	4639      	mov	r1, r7
  402ce0:	4630      	mov	r0, r6
  402ce2:	47c0      	blx	r8
  402ce4:	3001      	adds	r0, #1
  402ce6:	d08a      	beq.n	402bfe <_printf_i+0x13a>
  402ce8:	3501      	adds	r5, #1
  402cea:	e7eb      	b.n	402cc4 <_printf_i+0x200>
  402cec:	2b00      	cmp	r3, #0
  402cee:	d1a7      	bne.n	402c40 <_printf_i+0x17c>
  402cf0:	780b      	ldrb	r3, [r1, #0]
  402cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402cf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402cfa:	e765      	b.n	402bc8 <_printf_i+0x104>
  402cfc:	0040322e 	.word	0x0040322e
  402d00:	0040321d 	.word	0x0040321d

00402d04 <__sread>:
  402d04:	b510      	push	{r4, lr}
  402d06:	460c      	mov	r4, r1
  402d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d0c:	f000 f8e8 	bl	402ee0 <_read_r>
  402d10:	2800      	cmp	r0, #0
  402d12:	bfab      	itete	ge
  402d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  402d16:	89a3      	ldrhlt	r3, [r4, #12]
  402d18:	181b      	addge	r3, r3, r0
  402d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  402d1e:	bfac      	ite	ge
  402d20:	6563      	strge	r3, [r4, #84]	; 0x54
  402d22:	81a3      	strhlt	r3, [r4, #12]
  402d24:	bd10      	pop	{r4, pc}

00402d26 <__swrite>:
  402d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d2a:	461f      	mov	r7, r3
  402d2c:	898b      	ldrh	r3, [r1, #12]
  402d2e:	05db      	lsls	r3, r3, #23
  402d30:	4605      	mov	r5, r0
  402d32:	460c      	mov	r4, r1
  402d34:	4616      	mov	r6, r2
  402d36:	d505      	bpl.n	402d44 <__swrite+0x1e>
  402d38:	2302      	movs	r3, #2
  402d3a:	2200      	movs	r2, #0
  402d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d40:	f000 f868 	bl	402e14 <_lseek_r>
  402d44:	89a3      	ldrh	r3, [r4, #12]
  402d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402d4e:	81a3      	strh	r3, [r4, #12]
  402d50:	4632      	mov	r2, r6
  402d52:	463b      	mov	r3, r7
  402d54:	4628      	mov	r0, r5
  402d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402d5a:	f000 b817 	b.w	402d8c <_write_r>

00402d5e <__sseek>:
  402d5e:	b510      	push	{r4, lr}
  402d60:	460c      	mov	r4, r1
  402d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d66:	f000 f855 	bl	402e14 <_lseek_r>
  402d6a:	1c43      	adds	r3, r0, #1
  402d6c:	89a3      	ldrh	r3, [r4, #12]
  402d6e:	bf15      	itete	ne
  402d70:	6560      	strne	r0, [r4, #84]	; 0x54
  402d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402d7a:	81a3      	strheq	r3, [r4, #12]
  402d7c:	bf18      	it	ne
  402d7e:	81a3      	strhne	r3, [r4, #12]
  402d80:	bd10      	pop	{r4, pc}

00402d82 <__sclose>:
  402d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d86:	f000 b813 	b.w	402db0 <_close_r>
	...

00402d8c <_write_r>:
  402d8c:	b538      	push	{r3, r4, r5, lr}
  402d8e:	4c07      	ldr	r4, [pc, #28]	; (402dac <_write_r+0x20>)
  402d90:	4605      	mov	r5, r0
  402d92:	4608      	mov	r0, r1
  402d94:	4611      	mov	r1, r2
  402d96:	2200      	movs	r2, #0
  402d98:	6022      	str	r2, [r4, #0]
  402d9a:	461a      	mov	r2, r3
  402d9c:	f7fe ffbc 	bl	401d18 <_write>
  402da0:	1c43      	adds	r3, r0, #1
  402da2:	d102      	bne.n	402daa <_write_r+0x1e>
  402da4:	6823      	ldr	r3, [r4, #0]
  402da6:	b103      	cbz	r3, 402daa <_write_r+0x1e>
  402da8:	602b      	str	r3, [r5, #0]
  402daa:	bd38      	pop	{r3, r4, r5, pc}
  402dac:	20400124 	.word	0x20400124

00402db0 <_close_r>:
  402db0:	b538      	push	{r3, r4, r5, lr}
  402db2:	4c06      	ldr	r4, [pc, #24]	; (402dcc <_close_r+0x1c>)
  402db4:	2300      	movs	r3, #0
  402db6:	4605      	mov	r5, r0
  402db8:	4608      	mov	r0, r1
  402dba:	6023      	str	r3, [r4, #0]
  402dbc:	f7fd ff5a 	bl	400c74 <_close>
  402dc0:	1c43      	adds	r3, r0, #1
  402dc2:	d102      	bne.n	402dca <_close_r+0x1a>
  402dc4:	6823      	ldr	r3, [r4, #0]
  402dc6:	b103      	cbz	r3, 402dca <_close_r+0x1a>
  402dc8:	602b      	str	r3, [r5, #0]
  402dca:	bd38      	pop	{r3, r4, r5, pc}
  402dcc:	20400124 	.word	0x20400124

00402dd0 <_fstat_r>:
  402dd0:	b538      	push	{r3, r4, r5, lr}
  402dd2:	4c07      	ldr	r4, [pc, #28]	; (402df0 <_fstat_r+0x20>)
  402dd4:	2300      	movs	r3, #0
  402dd6:	4605      	mov	r5, r0
  402dd8:	4608      	mov	r0, r1
  402dda:	4611      	mov	r1, r2
  402ddc:	6023      	str	r3, [r4, #0]
  402dde:	f7fd ff4c 	bl	400c7a <_fstat>
  402de2:	1c43      	adds	r3, r0, #1
  402de4:	d102      	bne.n	402dec <_fstat_r+0x1c>
  402de6:	6823      	ldr	r3, [r4, #0]
  402de8:	b103      	cbz	r3, 402dec <_fstat_r+0x1c>
  402dea:	602b      	str	r3, [r5, #0]
  402dec:	bd38      	pop	{r3, r4, r5, pc}
  402dee:	bf00      	nop
  402df0:	20400124 	.word	0x20400124

00402df4 <_isatty_r>:
  402df4:	b538      	push	{r3, r4, r5, lr}
  402df6:	4c06      	ldr	r4, [pc, #24]	; (402e10 <_isatty_r+0x1c>)
  402df8:	2300      	movs	r3, #0
  402dfa:	4605      	mov	r5, r0
  402dfc:	4608      	mov	r0, r1
  402dfe:	6023      	str	r3, [r4, #0]
  402e00:	f7fd ff40 	bl	400c84 <_isatty>
  402e04:	1c43      	adds	r3, r0, #1
  402e06:	d102      	bne.n	402e0e <_isatty_r+0x1a>
  402e08:	6823      	ldr	r3, [r4, #0]
  402e0a:	b103      	cbz	r3, 402e0e <_isatty_r+0x1a>
  402e0c:	602b      	str	r3, [r5, #0]
  402e0e:	bd38      	pop	{r3, r4, r5, pc}
  402e10:	20400124 	.word	0x20400124

00402e14 <_lseek_r>:
  402e14:	b538      	push	{r3, r4, r5, lr}
  402e16:	4c07      	ldr	r4, [pc, #28]	; (402e34 <_lseek_r+0x20>)
  402e18:	4605      	mov	r5, r0
  402e1a:	4608      	mov	r0, r1
  402e1c:	4611      	mov	r1, r2
  402e1e:	2200      	movs	r2, #0
  402e20:	6022      	str	r2, [r4, #0]
  402e22:	461a      	mov	r2, r3
  402e24:	f7fd ff30 	bl	400c88 <_lseek>
  402e28:	1c43      	adds	r3, r0, #1
  402e2a:	d102      	bne.n	402e32 <_lseek_r+0x1e>
  402e2c:	6823      	ldr	r3, [r4, #0]
  402e2e:	b103      	cbz	r3, 402e32 <_lseek_r+0x1e>
  402e30:	602b      	str	r3, [r5, #0]
  402e32:	bd38      	pop	{r3, r4, r5, pc}
  402e34:	20400124 	.word	0x20400124
	...

00402e40 <memchr>:
  402e40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402e44:	2a10      	cmp	r2, #16
  402e46:	db2b      	blt.n	402ea0 <memchr+0x60>
  402e48:	f010 0f07 	tst.w	r0, #7
  402e4c:	d008      	beq.n	402e60 <memchr+0x20>
  402e4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402e52:	3a01      	subs	r2, #1
  402e54:	428b      	cmp	r3, r1
  402e56:	d02d      	beq.n	402eb4 <memchr+0x74>
  402e58:	f010 0f07 	tst.w	r0, #7
  402e5c:	b342      	cbz	r2, 402eb0 <memchr+0x70>
  402e5e:	d1f6      	bne.n	402e4e <memchr+0xe>
  402e60:	b4f0      	push	{r4, r5, r6, r7}
  402e62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402e66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402e6a:	f022 0407 	bic.w	r4, r2, #7
  402e6e:	f07f 0700 	mvns.w	r7, #0
  402e72:	2300      	movs	r3, #0
  402e74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402e78:	3c08      	subs	r4, #8
  402e7a:	ea85 0501 	eor.w	r5, r5, r1
  402e7e:	ea86 0601 	eor.w	r6, r6, r1
  402e82:	fa85 f547 	uadd8	r5, r5, r7
  402e86:	faa3 f587 	sel	r5, r3, r7
  402e8a:	fa86 f647 	uadd8	r6, r6, r7
  402e8e:	faa5 f687 	sel	r6, r5, r7
  402e92:	b98e      	cbnz	r6, 402eb8 <memchr+0x78>
  402e94:	d1ee      	bne.n	402e74 <memchr+0x34>
  402e96:	bcf0      	pop	{r4, r5, r6, r7}
  402e98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402e9c:	f002 0207 	and.w	r2, r2, #7
  402ea0:	b132      	cbz	r2, 402eb0 <memchr+0x70>
  402ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
  402ea6:	3a01      	subs	r2, #1
  402ea8:	ea83 0301 	eor.w	r3, r3, r1
  402eac:	b113      	cbz	r3, 402eb4 <memchr+0x74>
  402eae:	d1f8      	bne.n	402ea2 <memchr+0x62>
  402eb0:	2000      	movs	r0, #0
  402eb2:	4770      	bx	lr
  402eb4:	3801      	subs	r0, #1
  402eb6:	4770      	bx	lr
  402eb8:	2d00      	cmp	r5, #0
  402eba:	bf06      	itte	eq
  402ebc:	4635      	moveq	r5, r6
  402ebe:	3803      	subeq	r0, #3
  402ec0:	3807      	subne	r0, #7
  402ec2:	f015 0f01 	tst.w	r5, #1
  402ec6:	d107      	bne.n	402ed8 <memchr+0x98>
  402ec8:	3001      	adds	r0, #1
  402eca:	f415 7f80 	tst.w	r5, #256	; 0x100
  402ece:	bf02      	ittt	eq
  402ed0:	3001      	addeq	r0, #1
  402ed2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402ed6:	3001      	addeq	r0, #1
  402ed8:	bcf0      	pop	{r4, r5, r6, r7}
  402eda:	3801      	subs	r0, #1
  402edc:	4770      	bx	lr
  402ede:	bf00      	nop

00402ee0 <_read_r>:
  402ee0:	b538      	push	{r3, r4, r5, lr}
  402ee2:	4c07      	ldr	r4, [pc, #28]	; (402f00 <_read_r+0x20>)
  402ee4:	4605      	mov	r5, r0
  402ee6:	4608      	mov	r0, r1
  402ee8:	4611      	mov	r1, r2
  402eea:	2200      	movs	r2, #0
  402eec:	6022      	str	r2, [r4, #0]
  402eee:	461a      	mov	r2, r3
  402ef0:	f7fe ff00 	bl	401cf4 <_read>
  402ef4:	1c43      	adds	r3, r0, #1
  402ef6:	d102      	bne.n	402efe <_read_r+0x1e>
  402ef8:	6823      	ldr	r3, [r4, #0]
  402efa:	b103      	cbz	r3, 402efe <_read_r+0x1e>
  402efc:	602b      	str	r3, [r5, #0]
  402efe:	bd38      	pop	{r3, r4, r5, pc}
  402f00:	20400124 	.word	0x20400124
  402f04:	682f2e2e 	.word	0x682f2e2e
  402f08:	732f6c61 	.word	0x732f6c61
  402f0c:	682f6372 	.word	0x682f6372
  402f10:	615f6c61 	.word	0x615f6c61
  402f14:	735f6364 	.word	0x735f6364
  402f18:	2e636e79 	.word	0x2e636e79
  402f1c:	00000063 	.word	0x00000063
  402f20:	682f2e2e 	.word	0x682f2e2e
  402f24:	732f6c61 	.word	0x732f6c61
  402f28:	682f6372 	.word	0x682f6372
  402f2c:	695f6c61 	.word	0x695f6c61
  402f30:	6d5f6332 	.word	0x6d5f6332
  402f34:	6e79735f 	.word	0x6e79735f
  402f38:	00632e63 	.word	0x00632e63
  402f3c:	682f2e2e 	.word	0x682f2e2e
  402f40:	732f6c61 	.word	0x732f6c61
  402f44:	682f6372 	.word	0x682f6372
  402f48:	695f6c61 	.word	0x695f6c61
  402f4c:	00632e6f 	.word	0x00632e6f
  402f50:	682f2e2e 	.word	0x682f2e2e
  402f54:	732f6c61 	.word	0x732f6c61
  402f58:	682f6372 	.word	0x682f6372
  402f5c:	705f6c61 	.word	0x705f6c61
  402f60:	632e6d77 	.word	0x632e6d77
  402f64:	00000000 	.word	0x00000000
  402f68:	682f2e2e 	.word	0x682f2e2e
  402f6c:	732f6c61 	.word	0x732f6c61
  402f70:	682f6372 	.word	0x682f6372
  402f74:	735f6c61 	.word	0x735f6c61
  402f78:	6d5f6970 	.word	0x6d5f6970
  402f7c:	6e79735f 	.word	0x6e79735f
  402f80:	00632e63 	.word	0x00632e63
  402f84:	682f2e2e 	.word	0x682f2e2e
  402f88:	732f6c61 	.word	0x732f6c61
  402f8c:	682f6372 	.word	0x682f6372
  402f90:	755f6c61 	.word	0x755f6c61
  402f94:	74726173 	.word	0x74726173
  402f98:	6e79735f 	.word	0x6e79735f
  402f9c:	00632e63 	.word	0x00632e63

00402fa0 <_afecs>:
  402fa0:	00000000 2f843100 03000000 ffffffff     .....1./........
  402fb0:	0000ffff 00000000 00000000 00000000     ................
  402fc0:	0000010c 00000000 00000000 00000000     ................
  402fd0:	00000000 00000200 00000200 00000200     ................
  402fe0:	00000200 00000200 00000200 00000200     ................
  402ff0:	00000200 00000200 00000200 00000200     ................
  403000:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  403010:	5f6c7068 63656661 0000632e              hpl_afec.c..

0040301c <_ext_irq>:
  40301c:	00000000 00000020 00000020 00000020     .... ... ... ...
	...
  403034:	00000020 00000001 00000002 00000002      ...............
  403044:	00000002 00000000 00000000 00000002     ................

00403054 <_pio_irq_n>:
  403054:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  403064:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  403074:	00000000                                ....

00403078 <_pwms>:
  403078:	40020000 0000001f 00010001 00000001     ...@............
  403088:	00000001 000000ff 00000000 00000004     ................
	...
  4030a4:	00000004 004030b4 00000000 204000a0     .....0@.......@ 

004030b4 <_ch_cfg0>:
  4030b4:	00000000 00000208 00000400 00000200     ................
  4030c4:	00000001 00000208 00000400 00000200     ................
  4030d4:	00000002 00000208 00000400 00000200     ................
  4030e4:	00000003 00000208 00000400 00000200     ................
  4030f4:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  403104:	632e6d77 00000000                       wm.c....

0040310c <spi_regs>:
  40310c:	00000000 80000000 00000001 0496fa02     ................
  40311c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  40312c:	735f6c70 632e6970 00000000              pl_spi.c....

00403138 <_i2cm_sync_cfgs>:
  403138:	40018000 00000020 00000000 00000000     ...@ ...........
  403148:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  403158:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  403168:	00000000                                ....

0040316c <_usarts>:
  40316c:	00000001 001008c0 000100f4 682f2e2e     ............../h
  40317c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  40318c:	632e7472 00000000 bbccddee 000000aa     rt.c............
  40319c:	78323025 00000020 0000000d              %02x .......

004031a8 <_global_impure_ptr>:
  4031a8:	20400004                                ..@ 

004031ac <__sf_fake_stderr>:
	...

004031cc <__sf_fake_stdin>:
	...

004031ec <__sf_fake_stdout>:
	...
  40320c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  40321c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  40322c:	31300046 35343332 39383736 64636261     F.0123456789abcd
  40323c:	00006665                                ef..

00403240 <_init>:
  403240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403242:	bf00      	nop
  403244:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403246:	bc08      	pop	{r3}
  403248:	469e      	mov	lr, r3
  40324a:	4770      	bx	lr

0040324c <__init_array_start>:
  40324c:	0040018d 	.word	0x0040018d

00403250 <_fini>:
  403250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403252:	bf00      	nop
  403254:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403256:	bc08      	pop	{r3}
  403258:	469e      	mov	lr, r3
  40325a:	4770      	bx	lr

0040325c <__fini_array_start>:
  40325c:	00400169 	.word	0x00400169
