
RobotFirmwarev15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cb0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  00404cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000013e8  20400064  00404d14  00020064  2**2
                  ALLOC
  3 .heap         00000204  2040144c  004060fc  00020064  2**0
                  ALLOC
  4 .stack        00000400  20401650  00406300  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   000200be  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044b0  00000000  00000000  000401a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b430  00000000  00000000  00044659  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e08  00000000  00000000  0004fa89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ce0  00000000  00000000  00050891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00046279  00000000  00000000  00051571  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bb5e  00000000  00000000  000977ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001590d3  00000000  00000000  000b3348  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c48  00000000  00000000  0020c41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 1a 40 20 29 0c 40 00 25 0c 40 00 25 0c 40 00     P.@ ).@.%.@.%.@.
  400010:	25 0c 40 00 25 0c 40 00 25 0c 40 00 00 00 00 00     %.@.%.@.%.@.....
	...
  40002c:	25 0c 40 00 25 0c 40 00 00 00 00 00 25 0c 40 00     %.@.%.@.....%.@.
  40003c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40004c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40005c:	25 0c 40 00 25 0c 40 00 00 00 00 00 1d 1a 40 00     %.@.%.@.......@.
  40006c:	11 1a 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     ..@.%.@.%.@.%.@.
  40007c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40008c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40009c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  4000ac:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  4000bc:	55 1b 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     U.@.%.@.%.@.%.@.
  4000cc:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  4000dc:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  4000ec:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  4000fc:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40010c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 00 00 00 00     %.@.%.@.%.@.....
  40011c:	00 00 00 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     ....%.@.%.@.%.@.
  40012c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40013c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40014c:	25 0c 40 00 25 0c 40 00 25 0c 40 00 25 0c 40 00     %.@.%.@.%.@.%.@.
  40015c:	25 0c 40 00 25 0c 40 00 25 0c 40 00                 %.@.%.@.%.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400064 	.word	0x20400064
  400184:	00000000 	.word	0x00000000
  400188:	00404cb0 	.word	0x00404cb0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404cb0 	.word	0x00404cb0
  4001c8:	20400068 	.word	0x20400068
  4001cc:	00404cb0 	.word	0x00404cb0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400f81 	.word	0x00400f81
  4001e4:	00402401 	.word	0x00402401

004001e8 <find_SH2_control_channel>:
/* A very basic linear search function that looks through the valid channel name
array to find which channel is the SH2 control channel, and returns it as an int.
Returns 1000 if it couldn't find the channel name "control". */

int find_SH2_control_channel()
{
  4001e8:	b510      	push	{r4, lr}
	/* This for loop starts at 1 because index 0 is the command channel, which has the name
	"command", which is not the same as the SH2 command channel, which also has the name "command".
	It is unfortunate that this is very confusing from a naming perspective. */
	
	for(int i = 1; i < MAXIMUM_CHANNELS; i ++){
  4001ea:	2401      	movs	r4, #1
  4001ec:	2cff      	cmp	r4, #255	; 0xff
  4001ee:	dc0a      	bgt.n	400206 <find_SH2_control_channel+0x1e>
		if(strcmp(valid_channel_names[i],"control") == 0){
  4001f0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4001f4:	0053      	lsls	r3, r2, #1
  4001f6:	4906      	ldr	r1, [pc, #24]	; (400210 <find_SH2_control_channel+0x28>)
  4001f8:	4806      	ldr	r0, [pc, #24]	; (400214 <find_SH2_control_channel+0x2c>)
  4001fa:	4418      	add	r0, r3
  4001fc:	4b06      	ldr	r3, [pc, #24]	; (400218 <find_SH2_control_channel+0x30>)
  4001fe:	4798      	blx	r3
  400200:	b118      	cbz	r0, 40020a <find_SH2_control_channel+0x22>
	for(int i = 1; i < MAXIMUM_CHANNELS; i ++){
  400202:	3401      	adds	r4, #1
  400204:	e7f2      	b.n	4001ec <find_SH2_control_channel+0x4>
			return i;
		}
	}
	return 1000;
  400206:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
}
  40020a:	4620      	mov	r0, r4
  40020c:	bd10      	pop	{r4, pc}
  40020e:	bf00      	nop
  400210:	00403dc4 	.word	0x00403dc4
  400214:	204004cc 	.word	0x204004cc
  400218:	004030c1 	.word	0x004030c1

0040021c <find_SH2_inputNormal_channel>:
/* A very basic linear search function that looks through the valid channel name
array to find which channel is the SH2 inputNormal channel, and returns it as an int.
Returns 1000 if it couldn't find the channel name "inputNormal". */

int find_SH2_inputNormal_channel()
{
  40021c:	b510      	push	{r4, lr}
	/* This for loop starts at 1 because index 0 is the command channel, which has we
	know is not the inputNormal channel. So might as well start at 1 for consistency with the
	find_SH2_control_channel(). */
	
	for(int i = 1; i < MAXIMUM_CHANNELS; i ++){
  40021e:	2401      	movs	r4, #1
  400220:	2cff      	cmp	r4, #255	; 0xff
  400222:	dc0a      	bgt.n	40023a <find_SH2_inputNormal_channel+0x1e>
		if(strcmp(valid_channel_names[i],"inputNormal") == 0){
  400224:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400228:	0053      	lsls	r3, r2, #1
  40022a:	4906      	ldr	r1, [pc, #24]	; (400244 <find_SH2_inputNormal_channel+0x28>)
  40022c:	4806      	ldr	r0, [pc, #24]	; (400248 <find_SH2_inputNormal_channel+0x2c>)
  40022e:	4418      	add	r0, r3
  400230:	4b06      	ldr	r3, [pc, #24]	; (40024c <find_SH2_inputNormal_channel+0x30>)
  400232:	4798      	blx	r3
  400234:	b118      	cbz	r0, 40023e <find_SH2_inputNormal_channel+0x22>
	for(int i = 1; i < MAXIMUM_CHANNELS; i ++){
  400236:	3401      	adds	r4, #1
  400238:	e7f2      	b.n	400220 <find_SH2_inputNormal_channel+0x4>
			return i;
		}
	}
	return 1000;
  40023a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
}
  40023e:	4620      	mov	r0, r4
  400240:	bd10      	pop	{r4, pc}
  400242:	bf00      	nop
  400244:	00403dcc 	.word	0x00403dcc
  400248:	204004cc 	.word	0x204004cc
  40024c:	004030c1 	.word	0x004030c1

00400250 <byte_array_to_uint>:
(between 0 and 4 inclusively), and returns a uint that represents the 4 ordered correctly to be a uint.
Returns 0 if a length outside of the range 0 to 4 inclusive was given. */

uint byte_array_to_uint(uint8_t* byte_array, uint8_t length)
{
	if(length == 1){
  400250:	2901      	cmp	r1, #1
  400252:	d007      	beq.n	400264 <byte_array_to_uint+0x14>
		return (uint)byte_array[0];
	}
	else if(length == 2){
  400254:	2902      	cmp	r1, #2
  400256:	d007      	beq.n	400268 <byte_array_to_uint+0x18>
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8));
	}
	else if(length == 3){
  400258:	2903      	cmp	r1, #3
  40025a:	d00a      	beq.n	400272 <byte_array_to_uint+0x22>
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8) | ((uint)byte_array[2] << 16));
	}
	else if(length == 4){
  40025c:	2904      	cmp	r1, #4
  40025e:	d010      	beq.n	400282 <byte_array_to_uint+0x32>
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8) | ((uint)byte_array[2] << 16) | ((uint)byte_array[3] << 24));
	}
	else{
		return 0; //Error, uint can only store 4 bytes!
  400260:	2000      	movs	r0, #0
	}
}
  400262:	4770      	bx	lr
		return (uint)byte_array[0];
  400264:	7800      	ldrb	r0, [r0, #0]
  400266:	4770      	bx	lr
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8));
  400268:	7803      	ldrb	r3, [r0, #0]
  40026a:	7840      	ldrb	r0, [r0, #1]
  40026c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  400270:	4770      	bx	lr
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8) | ((uint)byte_array[2] << 16));
  400272:	7803      	ldrb	r3, [r0, #0]
  400274:	7842      	ldrb	r2, [r0, #1]
  400276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40027a:	7880      	ldrb	r0, [r0, #2]
  40027c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  400280:	4770      	bx	lr
		return (uint)((uint)byte_array[0] | ((uint)byte_array[1] << 8) | ((uint)byte_array[2] << 16) | ((uint)byte_array[3] << 24));
  400282:	7803      	ldrb	r3, [r0, #0]
  400284:	7842      	ldrb	r2, [r0, #1]
  400286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40028a:	7882      	ldrb	r2, [r0, #2]
  40028c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400290:	78c0      	ldrb	r0, [r0, #3]
  400292:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  400296:	4770      	bx	lr

00400298 <get_IMU_quaternion>:
/* This function is the bulk of the driver. Calling this function will update the 4 values inside of the global
float array that stores the quaternion coefficients with the most recent quaternion coefficients available
by reading the BNO085 incoming information if available. */

void get_IMU_quaternion()
{
  400298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40029c:	ed2d 8b04 	vpush	{d8-d9}
  4002a0:	b0c8      	sub	sp, #288	; 0x120
	/* Initialize a new SHTP_header struct called my header to be used to store the SHTP_header information,
	and zero it out */
	
	struct SHTP_header my_Header = {0};
	uint8_t header_Bytes[SHTP_HEADER_BYTES];
	memset(&header_Bytes[0], 0, SHTP_HEADER_BYTES*sizeof(uint8_t));
  4002a2:	2300      	movs	r3, #0
  4002a4:	9347      	str	r3, [sp, #284]	; 0x11c
	which means there is no packet ready to be read. In this case, simply exit the function without
	doing anything, as the most recent quaternion coefficients should still be stored in the global
	array, so leaving them unchanged leaves them as the most recent received coefficients. */
	
	uint8_t single_Byte[2];
	memset(&single_Byte[0], 0, 2*sizeof(uint8_t));
  4002a6:	f8ad 3118 	strh.w	r3, [sp, #280]	; 0x118
	io_read(i2c_0_io, &single_Byte[0], 2);
  4002aa:	2202      	movs	r2, #2
  4002ac:	a946      	add	r1, sp, #280	; 0x118
  4002ae:	4b9f      	ldr	r3, [pc, #636]	; (40052c <get_IMU_quaternion+0x294>)
  4002b0:	6818      	ldr	r0, [r3, #0]
  4002b2:	4b9f      	ldr	r3, [pc, #636]	; (400530 <get_IMU_quaternion+0x298>)
  4002b4:	4798      	blx	r3
	//printf("%d\n",single_Byte[0]);
	if(single_Byte[0]==0 && single_Byte[1]==0){
  4002b6:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  4002ba:	b913      	cbnz	r3, 4002c2 <get_IMU_quaternion+0x2a>
  4002bc:	f89d 3119 	ldrb.w	r3, [sp, #281]	; 0x119
  4002c0:	b35b      	cbz	r3, 40031a <get_IMU_quaternion+0x82>
		return;
	}
	/*Load the SHTP_header struct with the 3 pieces of information available inside of the SHTP
	header bytes. For the length, mask the first bit away, as it is reserved according to the protocol. */
	
	io_read(i2c_0_io, &header_Bytes[0], SHTP_HEADER_BYTES);
  4002c2:	f8df 8268 	ldr.w	r8, [pc, #616]	; 40052c <get_IMU_quaternion+0x294>
  4002c6:	2204      	movs	r2, #4
  4002c8:	a947      	add	r1, sp, #284	; 0x11c
  4002ca:	f8d8 0000 	ldr.w	r0, [r8]
  4002ce:	4f98      	ldr	r7, [pc, #608]	; (400530 <get_IMU_quaternion+0x298>)
  4002d0:	47b8      	blx	r7
	my_Header.length = ((header_Bytes[1]<<8)|header_Bytes[0]) & 32767; //01111111 11111111 = 32767
  4002d2:	f89d 311d 	ldrb.w	r3, [sp, #285]	; 0x11d
  4002d6:	f89d 411c 	ldrb.w	r4, [sp, #284]	; 0x11c
  4002da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  4002de:	f3c4 040e 	ubfx	r4, r4, #0, #15
	my_Header.channel = header_Bytes[2];
  4002e2:	f89d 611e 	ldrb.w	r6, [sp, #286]	; 0x11e
	my_Header.counter = header_Bytes[3];
  4002e6:	f89d 911f 	ldrb.w	r9, [sp, #287]	; 0x11f
	/*Dynamically allocate an array that is large enough to hold the entire packet
	(and zero it out), using the byte length of the whole packet from the SHTP header as
	calculated earlier. */
	
	uint8_t* packetPointer;
	packetPointer = (uint8_t*)malloc(my_Header.length*sizeof(uint8_t));
  4002ea:	4620      	mov	r0, r4
  4002ec:	4b91      	ldr	r3, [pc, #580]	; (400534 <get_IMU_quaternion+0x29c>)
  4002ee:	4798      	blx	r3
  4002f0:	4605      	mov	r5, r0
	memset(packetPointer, 0, my_Header.length);
  4002f2:	4622      	mov	r2, r4
  4002f4:	2100      	movs	r1, #0
  4002f6:	4b90      	ldr	r3, [pc, #576]	; (400538 <get_IMU_quaternion+0x2a0>)
  4002f8:	4798      	blx	r3
	
	/* Read the full packet bytes into this dynamically allocated array. */
	
	io_read(i2c_0_io, packetPointer, my_Header.length);
  4002fa:	4622      	mov	r2, r4
  4002fc:	4629      	mov	r1, r5
  4002fe:	f8d8 0000 	ldr.w	r0, [r8]
  400302:	47b8      	blx	r7
	
	/*Since we have received a message at this point, increment the messageCounter on
	the channel we received the message on, regardless of whether we consider it an
	already initialized channel. */
	
	valid_channel_messageCounter[my_Header.channel] = my_Header.counter;
  400304:	4b8d      	ldr	r3, [pc, #564]	; (40053c <get_IMU_quaternion+0x2a4>)
  400306:	f803 9006 	strb.w	r9, [r3, r6]
	However, upon receiving the SHTP Advertisement packet on channel 0, new valid channels
	will be updated and will becoming available to process on. If the channel is not valid,
	just skip to the end of the function, where the dynamically allocated memory is freed,
	and then the function call ends. */
	
	if(valid_channels[my_Header.channel] != 1){
  40030a:	4b8d      	ldr	r3, [pc, #564]	; (400540 <get_IMU_quaternion+0x2a8>)
  40030c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
  400310:	2b01      	cmp	r3, #1
  400312:	d007      	beq.n	400324 <get_IMU_quaternion+0x8c>
		if(VERBOSE == 1){
			printf("Attempted to read a packet on a channel that has not been initialized through an advertisement yet!\r\n");
  400314:	488b      	ldr	r0, [pc, #556]	; (400544 <get_IMU_quaternion+0x2ac>)
  400316:	4b8c      	ldr	r3, [pc, #560]	; (400548 <get_IMU_quaternion+0x2b0>)
  400318:	4798      	blx	r3
		}
		/* Free the memory that was used to dynamically allocated space for the packet that was read. */
		
		free(packetPointer);
	}
}
  40031a:	b048      	add	sp, #288	; 0x120
  40031c:	ecbd 8b04 	vpop	{d8-d9}
  400320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(my_Header.channel == 0){ // Entering this means the channel is the command channel
  400324:	2e00      	cmp	r6, #0
  400326:	f040 8159 	bne.w	4005dc <get_IMU_quaternion+0x344>
			if(packetPointer[4]==0){ // Entering this means the packet is a SHTP Advertisement (See above)
  40032a:	792b      	ldrb	r3, [r5, #4]
  40032c:	b133      	cbz	r3, 40033c <get_IMU_quaternion+0xa4>
			else if(packetPointer[4]==1){  // Entering this means the packet is a SHTP Error
  40032e:	2b01      	cmp	r3, #1
  400330:	f000 80a7 	beq.w	400482 <get_IMU_quaternion+0x1ea>
					printf("Command channel command type was a reserved bit!\r\n");
  400334:	4885      	ldr	r0, [pc, #532]	; (40054c <get_IMU_quaternion+0x2b4>)
  400336:	4b84      	ldr	r3, [pc, #528]	; (400548 <get_IMU_quaternion+0x2b0>)
  400338:	4798      	blx	r3
  40033a:	e158      	b.n	4005ee <get_IMU_quaternion+0x356>
					printf("SHTP Advertisement output:\r\n");
  40033c:	4884      	ldr	r0, [pc, #528]	; (400550 <get_IMU_quaternion+0x2b8>)
  40033e:	4b82      	ldr	r3, [pc, #520]	; (400548 <get_IMU_quaternion+0x2b0>)
  400340:	4798      	blx	r3
				uint8_t tvl_value[256] = {0};
  400342:	f44f 7280 	mov.w	r2, #256	; 0x100
  400346:	2100      	movs	r1, #0
  400348:	a806      	add	r0, sp, #24
  40034a:	4b7b      	ldr	r3, [pc, #492]	; (400538 <get_IMU_quaternion+0x2a0>)
  40034c:	4798      	blx	r3
				int byte_tracker = 5;
  40034e:	2605      	movs	r6, #5
				int valid_channel_index = 0;
  400350:	f04f 0900 	mov.w	r9, #0
				while(byte_tracker < my_Header.length){
  400354:	e01f      	b.n	400396 <get_IMU_quaternion+0xfe>
					switch(packetPointer[byte_tracker]){
  400356:	2b02      	cmp	r3, #2
  400358:	d05c      	beq.n	400414 <get_IMU_quaternion+0x17c>
  40035a:	d90f      	bls.n	40037c <get_IMU_quaternion+0xe4>
  40035c:	2b03      	cmp	r3, #3
  40035e:	d064      	beq.n	40042a <get_IMU_quaternion+0x192>
  400360:	2b04      	cmp	r3, #4
  400362:	f040 808a 	bne.w	40047a <get_IMU_quaternion+0x1e2>
							spec_MaxTransferWrite = byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length);
  400366:	4639      	mov	r1, r7
  400368:	4640      	mov	r0, r8
  40036a:	4b7a      	ldr	r3, [pc, #488]	; (400554 <get_IMU_quaternion+0x2bc>)
  40036c:	4798      	blx	r3
  40036e:	4601      	mov	r1, r0
  400370:	4b79      	ldr	r3, [pc, #484]	; (400558 <get_IMU_quaternion+0x2c0>)
  400372:	6098      	str	r0, [r3, #8]
								printf("MaxTransferWrite = %u\r\n", spec_MaxTransferWrite);
  400374:	4879      	ldr	r0, [pc, #484]	; (40055c <get_IMU_quaternion+0x2c4>)
  400376:	4b7a      	ldr	r3, [pc, #488]	; (400560 <get_IMU_quaternion+0x2c8>)
  400378:	4798      	blx	r3
  40037a:	e00a      	b.n	400392 <get_IMU_quaternion+0xfa>
					switch(packetPointer[byte_tracker]){
  40037c:	b14b      	cbz	r3, 400392 <get_IMU_quaternion+0xfa>
  40037e:	2b01      	cmp	r3, #1
  400380:	d17b      	bne.n	40047a <get_IMU_quaternion+0x1e2>
								printf("GUID = %u\r\n", byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length));
  400382:	4639      	mov	r1, r7
  400384:	4640      	mov	r0, r8
  400386:	4b73      	ldr	r3, [pc, #460]	; (400554 <get_IMU_quaternion+0x2bc>)
  400388:	4798      	blx	r3
  40038a:	4601      	mov	r1, r0
  40038c:	4875      	ldr	r0, [pc, #468]	; (400564 <get_IMU_quaternion+0x2cc>)
  40038e:	4b74      	ldr	r3, [pc, #464]	; (400560 <get_IMU_quaternion+0x2c8>)
  400390:	4798      	blx	r3
				byte_tracker = byte_tracker + tvl_length + 2;
  400392:	443e      	add	r6, r7
  400394:	3602      	adds	r6, #2
				while(byte_tracker < my_Header.length){
  400396:	42a6      	cmp	r6, r4
  400398:	f280 8129 	bge.w	4005ee <get_IMU_quaternion+0x356>
					uint8_t tvl_length = packetPointer[byte_tracker+1];
  40039c:	1c73      	adds	r3, r6, #1
  40039e:	5cef      	ldrb	r7, [r5, r3]
					memset(tvl_value, 0, 256);
  4003a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003a4:	2100      	movs	r1, #0
  4003a6:	a806      	add	r0, sp, #24
  4003a8:	4b63      	ldr	r3, [pc, #396]	; (400538 <get_IMU_quaternion+0x2a0>)
  4003aa:	4798      	blx	r3
					memcpy(tvl_value, &packetPointer[byte_tracker+2], tvl_length);
  4003ac:	f106 0802 	add.w	r8, r6, #2
  4003b0:	44a8      	add	r8, r5
  4003b2:	463a      	mov	r2, r7
  4003b4:	4641      	mov	r1, r8
  4003b6:	a806      	add	r0, sp, #24
  4003b8:	4b6b      	ldr	r3, [pc, #428]	; (400568 <get_IMU_quaternion+0x2d0>)
  4003ba:	4798      	blx	r3
					switch(packetPointer[byte_tracker]){
  4003bc:	5dab      	ldrb	r3, [r5, r6]
  4003be:	2b05      	cmp	r3, #5
  4003c0:	d03e      	beq.n	400440 <get_IMU_quaternion+0x1a8>
  4003c2:	d9c8      	bls.n	400356 <get_IMU_quaternion+0xbe>
  4003c4:	2b08      	cmp	r3, #8
  4003c6:	d04e      	beq.n	400466 <get_IMU_quaternion+0x1ce>
  4003c8:	d917      	bls.n	4003fa <get_IMU_quaternion+0x162>
  4003ca:	2b80      	cmp	r3, #128	; 0x80
  4003cc:	d050      	beq.n	400470 <get_IMU_quaternion+0x1d8>
  4003ce:	2b81      	cmp	r3, #129	; 0x81
  4003d0:	d0df      	beq.n	400392 <get_IMU_quaternion+0xfa>
  4003d2:	2b09      	cmp	r3, #9
  4003d4:	d151      	bne.n	40047a <get_IMU_quaternion+0x1e2>
							memcpy(&valid_channel_names[valid_channel_index][0], &packetPointer[byte_tracker+2], tvl_length);
  4003d6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
  4003da:	ea4f 0a43 	mov.w	sl, r3, lsl #1
  4003de:	4b63      	ldr	r3, [pc, #396]	; (40056c <get_IMU_quaternion+0x2d4>)
  4003e0:	449a      	add	sl, r3
  4003e2:	463a      	mov	r2, r7
  4003e4:	4641      	mov	r1, r8
  4003e6:	4650      	mov	r0, sl
  4003e8:	4b5f      	ldr	r3, [pc, #380]	; (400568 <get_IMU_quaternion+0x2d0>)
  4003ea:	4798      	blx	r3
								printf("ChannelName = %s\r\n", valid_channel_names[valid_channel_index]);
  4003ec:	4651      	mov	r1, sl
  4003ee:	4860      	ldr	r0, [pc, #384]	; (400570 <get_IMU_quaternion+0x2d8>)
  4003f0:	4b5b      	ldr	r3, [pc, #364]	; (400560 <get_IMU_quaternion+0x2c8>)
  4003f2:	4798      	blx	r3
							valid_channel_index++;
  4003f4:	f109 0901 	add.w	r9, r9, #1
						break;
  4003f8:	e7cb      	b.n	400392 <get_IMU_quaternion+0xfa>
					switch(packetPointer[byte_tracker]){
  4003fa:	2b06      	cmp	r3, #6
  4003fc:	d02b      	beq.n	400456 <get_IMU_quaternion+0x1be>
  4003fe:	2b07      	cmp	r3, #7
  400400:	d13b      	bne.n	40047a <get_IMU_quaternion+0x1e2>
								printf("WakeChannel = %u\r\n", byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length));
  400402:	4639      	mov	r1, r7
  400404:	4640      	mov	r0, r8
  400406:	4b53      	ldr	r3, [pc, #332]	; (400554 <get_IMU_quaternion+0x2bc>)
  400408:	4798      	blx	r3
  40040a:	4601      	mov	r1, r0
  40040c:	4859      	ldr	r0, [pc, #356]	; (400574 <get_IMU_quaternion+0x2dc>)
  40040e:	4b54      	ldr	r3, [pc, #336]	; (400560 <get_IMU_quaternion+0x2c8>)
  400410:	4798      	blx	r3
						break;
  400412:	e7be      	b.n	400392 <get_IMU_quaternion+0xfa>
							spec_MaxCargoPlusHeaderWrite = byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length);
  400414:	4639      	mov	r1, r7
  400416:	4640      	mov	r0, r8
  400418:	4b4e      	ldr	r3, [pc, #312]	; (400554 <get_IMU_quaternion+0x2bc>)
  40041a:	4798      	blx	r3
  40041c:	4601      	mov	r1, r0
  40041e:	4b4e      	ldr	r3, [pc, #312]	; (400558 <get_IMU_quaternion+0x2c0>)
  400420:	6018      	str	r0, [r3, #0]
								printf("MaxCargoPlusHeaderWrite = %u\r\n", spec_MaxCargoPlusHeaderWrite);
  400422:	4855      	ldr	r0, [pc, #340]	; (400578 <get_IMU_quaternion+0x2e0>)
  400424:	4b4e      	ldr	r3, [pc, #312]	; (400560 <get_IMU_quaternion+0x2c8>)
  400426:	4798      	blx	r3
  400428:	e7b3      	b.n	400392 <get_IMU_quaternion+0xfa>
							spec_MaxCargoPlusHeaderRead = byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length);
  40042a:	4639      	mov	r1, r7
  40042c:	4640      	mov	r0, r8
  40042e:	4b49      	ldr	r3, [pc, #292]	; (400554 <get_IMU_quaternion+0x2bc>)
  400430:	4798      	blx	r3
  400432:	4601      	mov	r1, r0
  400434:	4b48      	ldr	r3, [pc, #288]	; (400558 <get_IMU_quaternion+0x2c0>)
  400436:	6058      	str	r0, [r3, #4]
								printf("MaxCargoPlusHeaderRead = %u\r\n", spec_MaxCargoPlusHeaderRead);
  400438:	4850      	ldr	r0, [pc, #320]	; (40057c <get_IMU_quaternion+0x2e4>)
  40043a:	4b49      	ldr	r3, [pc, #292]	; (400560 <get_IMU_quaternion+0x2c8>)
  40043c:	4798      	blx	r3
  40043e:	e7a8      	b.n	400392 <get_IMU_quaternion+0xfa>
							spec_MaxTransferRead = byte_array_to_uint(&packetPointer[byte_tracker+2], tvl_length);
  400440:	4639      	mov	r1, r7
  400442:	4640      	mov	r0, r8
  400444:	4b43      	ldr	r3, [pc, #268]	; (400554 <get_IMU_quaternion+0x2bc>)
  400446:	4798      	blx	r3
  400448:	4601      	mov	r1, r0
  40044a:	4b43      	ldr	r3, [pc, #268]	; (400558 <get_IMU_quaternion+0x2c0>)
  40044c:	60d8      	str	r0, [r3, #12]
								printf("MaxTransferRead = %u\r\n", spec_MaxTransferRead);
  40044e:	484c      	ldr	r0, [pc, #304]	; (400580 <get_IMU_quaternion+0x2e8>)
  400450:	4b43      	ldr	r3, [pc, #268]	; (400560 <get_IMU_quaternion+0x2c8>)
  400452:	4798      	blx	r3
  400454:	e79d      	b.n	400392 <get_IMU_quaternion+0xfa>
							valid_channels[valid_channel_index] = 1;
  400456:	2101      	movs	r1, #1
  400458:	4b39      	ldr	r3, [pc, #228]	; (400540 <get_IMU_quaternion+0x2a8>)
  40045a:	f843 1029 	str.w	r1, [r3, r9, lsl #2]
								printf("NormalChannel = %u\r\n", valid_channels[valid_channel_index]);
  40045e:	4849      	ldr	r0, [pc, #292]	; (400584 <get_IMU_quaternion+0x2ec>)
  400460:	4b3f      	ldr	r3, [pc, #252]	; (400560 <get_IMU_quaternion+0x2c8>)
  400462:	4798      	blx	r3
  400464:	e795      	b.n	400392 <get_IMU_quaternion+0xfa>
								printf("AppName = %s\r\n", &packetPointer[byte_tracker+2]);
  400466:	4641      	mov	r1, r8
  400468:	4847      	ldr	r0, [pc, #284]	; (400588 <get_IMU_quaternion+0x2f0>)
  40046a:	4b3d      	ldr	r3, [pc, #244]	; (400560 <get_IMU_quaternion+0x2c8>)
  40046c:	4798      	blx	r3
						break;
  40046e:	e790      	b.n	400392 <get_IMU_quaternion+0xfa>
								printf("SHTP Version = %s\r\n",&packetPointer[byte_tracker+2]);
  400470:	4641      	mov	r1, r8
  400472:	4846      	ldr	r0, [pc, #280]	; (40058c <get_IMU_quaternion+0x2f4>)
  400474:	4b3a      	ldr	r3, [pc, #232]	; (400560 <get_IMU_quaternion+0x2c8>)
  400476:	4798      	blx	r3
						break;
  400478:	e78b      	b.n	400392 <get_IMU_quaternion+0xfa>
								printf("Cannot understand advertisement packet tag value");
  40047a:	4845      	ldr	r0, [pc, #276]	; (400590 <get_IMU_quaternion+0x2f8>)
  40047c:	4b38      	ldr	r3, [pc, #224]	; (400560 <get_IMU_quaternion+0x2c8>)
  40047e:	4798      	blx	r3
						break;
  400480:	e787      	b.n	400392 <get_IMU_quaternion+0xfa>
					printf("SHTP error output:\r\n");
  400482:	4844      	ldr	r0, [pc, #272]	; (400594 <get_IMU_quaternion+0x2fc>)
  400484:	4b30      	ldr	r3, [pc, #192]	; (400548 <get_IMU_quaternion+0x2b0>)
  400486:	4798      	blx	r3
					for(int x = 5; x < my_Header.length; x++){
  400488:	2605      	movs	r6, #5
  40048a:	e003      	b.n	400494 <get_IMU_quaternion+0x1fc>
							printf("No error\r\n");
  40048c:	4842      	ldr	r0, [pc, #264]	; (400598 <get_IMU_quaternion+0x300>)
  40048e:	4b2e      	ldr	r3, [pc, #184]	; (400548 <get_IMU_quaternion+0x2b0>)
  400490:	4798      	blx	r3
					for(int x = 5; x < my_Header.length; x++){
  400492:	3601      	adds	r6, #1
  400494:	42a6      	cmp	r6, r4
  400496:	f280 80aa 	bge.w	4005ee <get_IMU_quaternion+0x356>
						switch(packetPointer[x]){
  40049a:	5dab      	ldrb	r3, [r5, r6]
  40049c:	2b0c      	cmp	r3, #12
  40049e:	f200 8099 	bhi.w	4005d4 <get_IMU_quaternion+0x33c>
  4004a2:	a201      	add	r2, pc, #4	; (adr r2, 4004a8 <get_IMU_quaternion+0x210>)
  4004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004a8:	0040048d 	.word	0x0040048d
  4004ac:	004004dd 	.word	0x004004dd
  4004b0:	004004e5 	.word	0x004004e5
  4004b4:	004004ed 	.word	0x004004ed
  4004b8:	004004f5 	.word	0x004004f5
  4004bc:	004004fd 	.word	0x004004fd
  4004c0:	00400505 	.word	0x00400505
  4004c4:	0040050d 	.word	0x0040050d
  4004c8:	00400515 	.word	0x00400515
  4004cc:	0040051d 	.word	0x0040051d
  4004d0:	00400525 	.word	0x00400525
  4004d4:	004005c5 	.word	0x004005c5
  4004d8:	004005cd 	.word	0x004005cd
							printf("Hub application attempted to exceed maximum read cargo length\r\n");
  4004dc:	482f      	ldr	r0, [pc, #188]	; (40059c <get_IMU_quaternion+0x304>)
  4004de:	4b1a      	ldr	r3, [pc, #104]	; (400548 <get_IMU_quaternion+0x2b0>)
  4004e0:	4798      	blx	r3
							break;
  4004e2:	e7d6      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host write was too short (need at least a 4-byte header)\r\n");
  4004e4:	482e      	ldr	r0, [pc, #184]	; (4005a0 <get_IMU_quaternion+0x308>)
  4004e6:	4b18      	ldr	r3, [pc, #96]	; (400548 <get_IMU_quaternion+0x2b0>)
  4004e8:	4798      	blx	r3
							break;
  4004ea:	e7d2      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host wrote a header with length greater than maximum write cargo length\r\n");
  4004ec:	482d      	ldr	r0, [pc, #180]	; (4005a4 <get_IMU_quaternion+0x30c>)
  4004ee:	4b16      	ldr	r3, [pc, #88]	; (400548 <get_IMU_quaternion+0x2b0>)
  4004f0:	4798      	blx	r3
							break;
  4004f2:	e7ce      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host wrote a header with length less than or equal to header length (either invalid or no payload). Note that a length of 0 is permitted, indicating �no cargo�\r\n");
  4004f4:	482c      	ldr	r0, [pc, #176]	; (4005a8 <get_IMU_quaternion+0x310>)
  4004f6:	4b14      	ldr	r3, [pc, #80]	; (400548 <get_IMU_quaternion+0x2b0>)
  4004f8:	4798      	blx	r3
							break;
  4004fa:	e7ca      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host wrote beginning of fragmented cargo (transfer length was less than full cargo length), fragmentation not supported\r\n");
  4004fc:	482b      	ldr	r0, [pc, #172]	; (4005ac <get_IMU_quaternion+0x314>)
  4004fe:	4b12      	ldr	r3, [pc, #72]	; (400548 <get_IMU_quaternion+0x2b0>)
  400500:	4798      	blx	r3
							break;
  400502:	e7c6      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host wrote continuation of fragmented cargo (continuation bit sent), fragmentation not supported\r\n");
  400504:	482a      	ldr	r0, [pc, #168]	; (4005b0 <get_IMU_quaternion+0x318>)
  400506:	4b10      	ldr	r3, [pc, #64]	; (400548 <get_IMU_quaternion+0x2b0>)
  400508:	4798      	blx	r3
							break;
  40050a:	e7c2      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Unrecognized command on control channel\r\n");
  40050c:	4829      	ldr	r0, [pc, #164]	; (4005b4 <get_IMU_quaternion+0x31c>)
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <get_IMU_quaternion+0x2b0>)
  400510:	4798      	blx	r3
							break;
  400512:	e7be      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Unrecognized parameter to get-advertisement command\r\n");
  400514:	4828      	ldr	r0, [pc, #160]	; (4005b8 <get_IMU_quaternion+0x320>)
  400516:	4b0c      	ldr	r3, [pc, #48]	; (400548 <get_IMU_quaternion+0x2b0>)
  400518:	4798      	blx	r3
							break;
  40051a:	e7ba      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Host wrote to unrecognized channel\r\n");
  40051c:	4827      	ldr	r0, [pc, #156]	; (4005bc <get_IMU_quaternion+0x324>)
  40051e:	4b0a      	ldr	r3, [pc, #40]	; (400548 <get_IMU_quaternion+0x2b0>)
  400520:	4798      	blx	r3
							break;
  400522:	e7b6      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Advertisement request received while Advertisement Response was pending\r\n");
  400524:	4826      	ldr	r0, [pc, #152]	; (4005c0 <get_IMU_quaternion+0x328>)
  400526:	4b08      	ldr	r3, [pc, #32]	; (400548 <get_IMU_quaternion+0x2b0>)
  400528:	4798      	blx	r3
							break;
  40052a:	e7b2      	b.n	400492 <get_IMU_quaternion+0x1fa>
  40052c:	204013cc 	.word	0x204013cc
  400530:	00401311 	.word	0x00401311
  400534:	00402c9d 	.word	0x00402c9d
  400538:	00402cd3 	.word	0x00402cd3
  40053c:	204012cc 	.word	0x204012cc
  400540:	204000cc 	.word	0x204000cc
  400544:	00403dd8 	.word	0x00403dd8
  400548:	00402f25 	.word	0x00402f25
  40054c:	00404350 	.word	0x00404350
  400550:	00403e40 	.word	0x00403e40
  400554:	00400251 	.word	0x00400251
  400558:	20400080 	.word	0x20400080
  40055c:	00403ea8 	.word	0x00403ea8
  400560:	00402e3d 	.word	0x00402e3d
  400564:	00403e5c 	.word	0x00403e5c
  400568:	00402cbd 	.word	0x00402cbd
  40056c:	204004cc 	.word	0x204004cc
  400570:	00403f14 	.word	0x00403f14
  400574:	00403ef0 	.word	0x00403ef0
  400578:	00403e68 	.word	0x00403e68
  40057c:	00403e88 	.word	0x00403e88
  400580:	00403ec0 	.word	0x00403ec0
  400584:	00403ed8 	.word	0x00403ed8
  400588:	00403f04 	.word	0x00403f04
  40058c:	00403f28 	.word	0x00403f28
  400590:	00403f3c 	.word	0x00403f3c
  400594:	00403f70 	.word	0x00403f70
  400598:	00403f84 	.word	0x00403f84
  40059c:	00403f90 	.word	0x00403f90
  4005a0:	00403fd0 	.word	0x00403fd0
  4005a4:	0040400c 	.word	0x0040400c
  4005a8:	00404058 	.word	0x00404058
  4005ac:	00404100 	.word	0x00404100
  4005b0:	0040417c 	.word	0x0040417c
  4005b4:	004041e0 	.word	0x004041e0
  4005b8:	0040420c 	.word	0x0040420c
  4005bc:	00404244 	.word	0x00404244
  4005c0:	00404268 	.word	0x00404268
							printf("Host performed a write operation before the hub had finished sending its advertisement response\r\n");
  4005c4:	4897      	ldr	r0, [pc, #604]	; (400824 <get_IMU_quaternion+0x58c>)
  4005c6:	4b98      	ldr	r3, [pc, #608]	; (400828 <get_IMU_quaternion+0x590>)
  4005c8:	4798      	blx	r3
							break;
  4005ca:	e762      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Error list too long to send, truncated\r\n");
  4005cc:	4897      	ldr	r0, [pc, #604]	; (40082c <get_IMU_quaternion+0x594>)
  4005ce:	4b96      	ldr	r3, [pc, #600]	; (400828 <get_IMU_quaternion+0x590>)
  4005d0:	4798      	blx	r3
							break;
  4005d2:	e75e      	b.n	400492 <get_IMU_quaternion+0x1fa>
							printf("Unknown error\r\n");
  4005d4:	4896      	ldr	r0, [pc, #600]	; (400830 <get_IMU_quaternion+0x598>)
  4005d6:	4b94      	ldr	r3, [pc, #592]	; (400828 <get_IMU_quaternion+0x590>)
  4005d8:	4798      	blx	r3
							break;
  4005da:	e75a      	b.n	400492 <get_IMU_quaternion+0x1fa>
		else if((int)my_Header.channel == find_SH2_control_channel()){ // Entering this means the channel is the SH2 command channel
  4005dc:	4b95      	ldr	r3, [pc, #596]	; (400834 <get_IMU_quaternion+0x59c>)
  4005de:	4798      	blx	r3
  4005e0:	4286      	cmp	r6, r0
  4005e2:	d008      	beq.n	4005f6 <get_IMU_quaternion+0x35e>
		else if((int)my_Header.channel == find_SH2_inputNormal_channel()){ // Entering this means the channel is the SH2 inputNormal channel (This is where sensor data will be sent)
  4005e4:	4b94      	ldr	r3, [pc, #592]	; (400838 <get_IMU_quaternion+0x5a0>)
  4005e6:	4798      	blx	r3
  4005e8:	4286      	cmp	r6, r0
  4005ea:	f000 80dc 	beq.w	4007a6 <get_IMU_quaternion+0x50e>
		free(packetPointer);
  4005ee:	4628      	mov	r0, r5
  4005f0:	4b92      	ldr	r3, [pc, #584]	; (40083c <get_IMU_quaternion+0x5a4>)
  4005f2:	4798      	blx	r3
  4005f4:	e691      	b.n	40031a <get_IMU_quaternion+0x82>
				printf("SH-2 Control Channel Output:\r\n");
  4005f6:	4892      	ldr	r0, [pc, #584]	; (400840 <get_IMU_quaternion+0x5a8>)
  4005f8:	4b8b      	ldr	r3, [pc, #556]	; (400828 <get_IMU_quaternion+0x590>)
  4005fa:	4798      	blx	r3
			switch(packetPointer[4]){
  4005fc:	792b      	ldrb	r3, [r5, #4]
  4005fe:	3bf1      	subs	r3, #241	; 0xf1
  400600:	2b0b      	cmp	r3, #11
  400602:	f200 80cc 	bhi.w	40079e <get_IMU_quaternion+0x506>
  400606:	e8df f013 	tbh	[pc, r3, lsl #1]
  40060a:	0098      	.short	0x0098
  40060c:	006600ca 	.word	0x006600ca
  400610:	005700ca 	.word	0x005700ca
  400614:	00ca00ca 	.word	0x00ca00ca
  400618:	00ca0033 	.word	0x00ca0033
  40061c:	00ca00ca 	.word	0x00ca00ca
  400620:	000c      	.short	0x000c
						printf("Report ID = 0xFC 'Get Feature Response'\r\n");
  400622:	4888      	ldr	r0, [pc, #544]	; (400844 <get_IMU_quaternion+0x5ac>)
  400624:	4b80      	ldr	r3, [pc, #512]	; (400828 <get_IMU_quaternion+0x590>)
  400626:	4798      	blx	r3
						printf("Feature Report ID = %u\r\n", (uint)packetPointer[5]);
  400628:	7969      	ldrb	r1, [r5, #5]
  40062a:	4887      	ldr	r0, [pc, #540]	; (400848 <get_IMU_quaternion+0x5b0>)
  40062c:	4c87      	ldr	r4, [pc, #540]	; (40084c <get_IMU_quaternion+0x5b4>)
  40062e:	47a0      	blx	r4
						printf("Feature flags = %u\r\n", (uint)packetPointer[6]);
  400630:	79a9      	ldrb	r1, [r5, #6]
  400632:	4887      	ldr	r0, [pc, #540]	; (400850 <get_IMU_quaternion+0x5b8>)
  400634:	47a0      	blx	r4
						printf("Change sensitivity = %u\r\n", byte_array_to_uint(&packetPointer[7], 2));
  400636:	2102      	movs	r1, #2
  400638:	1de8      	adds	r0, r5, #7
  40063a:	4e86      	ldr	r6, [pc, #536]	; (400854 <get_IMU_quaternion+0x5bc>)
  40063c:	47b0      	blx	r6
  40063e:	4601      	mov	r1, r0
  400640:	4885      	ldr	r0, [pc, #532]	; (400858 <get_IMU_quaternion+0x5c0>)
  400642:	47a0      	blx	r4
						printf("Report interval = %u\r\n", byte_array_to_uint(&packetPointer[9], 4));
  400644:	2104      	movs	r1, #4
  400646:	f105 0009 	add.w	r0, r5, #9
  40064a:	47b0      	blx	r6
  40064c:	4601      	mov	r1, r0
  40064e:	4883      	ldr	r0, [pc, #524]	; (40085c <get_IMU_quaternion+0x5c4>)
  400650:	47a0      	blx	r4
						printf("Batch interval = %u\r\n", byte_array_to_uint(&packetPointer[13], 4));
  400652:	2104      	movs	r1, #4
  400654:	f105 000d 	add.w	r0, r5, #13
  400658:	47b0      	blx	r6
  40065a:	4601      	mov	r1, r0
  40065c:	4880      	ldr	r0, [pc, #512]	; (400860 <get_IMU_quaternion+0x5c8>)
  40065e:	47a0      	blx	r4
						printf("Sensor-specific configuration word = %u\r\n", byte_array_to_uint(&packetPointer[17], 4));
  400660:	2104      	movs	r1, #4
  400662:	f105 0011 	add.w	r0, r5, #17
  400666:	47b0      	blx	r6
  400668:	4601      	mov	r1, r0
  40066a:	487e      	ldr	r0, [pc, #504]	; (400864 <get_IMU_quaternion+0x5cc>)
  40066c:	47a0      	blx	r4
				break;
  40066e:	e7be      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Report ID = 0xF8 'Product ID Response'\r\n");
  400670:	487d      	ldr	r0, [pc, #500]	; (400868 <get_IMU_quaternion+0x5d0>)
  400672:	4b6d      	ldr	r3, [pc, #436]	; (400828 <get_IMU_quaternion+0x590>)
  400674:	4798      	blx	r3
						printf("Reset Cause = %u\r\n", (uint)packetPointer[5]);
  400676:	7969      	ldrb	r1, [r5, #5]
  400678:	487c      	ldr	r0, [pc, #496]	; (40086c <get_IMU_quaternion+0x5d4>)
  40067a:	4c74      	ldr	r4, [pc, #464]	; (40084c <get_IMU_quaternion+0x5b4>)
  40067c:	47a0      	blx	r4
						printf("SW Version Major = %u\r\n", (uint)packetPointer[6]);
  40067e:	79a9      	ldrb	r1, [r5, #6]
  400680:	487b      	ldr	r0, [pc, #492]	; (400870 <get_IMU_quaternion+0x5d8>)
  400682:	47a0      	blx	r4
						printf("SW Version Minor = %u\r\n", (uint)packetPointer[7]);
  400684:	79e9      	ldrb	r1, [r5, #7]
  400686:	487b      	ldr	r0, [pc, #492]	; (400874 <get_IMU_quaternion+0x5dc>)
  400688:	47a0      	blx	r4
						printf("SW Part Number = %u\r\n", byte_array_to_uint(&packetPointer[8], 4));
  40068a:	2104      	movs	r1, #4
  40068c:	f105 0008 	add.w	r0, r5, #8
  400690:	4e70      	ldr	r6, [pc, #448]	; (400854 <get_IMU_quaternion+0x5bc>)
  400692:	47b0      	blx	r6
  400694:	4601      	mov	r1, r0
  400696:	4878      	ldr	r0, [pc, #480]	; (400878 <get_IMU_quaternion+0x5e0>)
  400698:	47a0      	blx	r4
						printf("SW Build Number = %u\r\n", byte_array_to_uint(&packetPointer[12], 4));
  40069a:	2104      	movs	r1, #4
  40069c:	f105 000c 	add.w	r0, r5, #12
  4006a0:	47b0      	blx	r6
  4006a2:	4601      	mov	r1, r0
  4006a4:	4875      	ldr	r0, [pc, #468]	; (40087c <get_IMU_quaternion+0x5e4>)
  4006a6:	47a0      	blx	r4
						printf("SW Version Patch = %u\r\n", byte_array_to_uint(&packetPointer[16], 2));
  4006a8:	2102      	movs	r1, #2
  4006aa:	f105 0010 	add.w	r0, r5, #16
  4006ae:	47b0      	blx	r6
  4006b0:	4601      	mov	r1, r0
  4006b2:	4873      	ldr	r0, [pc, #460]	; (400880 <get_IMU_quaternion+0x5e8>)
  4006b4:	47a0      	blx	r4
				break;
  4006b6:	e79a      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Report ID = 0xF5 'FRS Write Response'\r\n");
  4006b8:	4872      	ldr	r0, [pc, #456]	; (400884 <get_IMU_quaternion+0x5ec>)
  4006ba:	4b5b      	ldr	r3, [pc, #364]	; (400828 <get_IMU_quaternion+0x590>)
  4006bc:	4798      	blx	r3
						printf("Status/Error = %u\r\n", (uint)packetPointer[5]);
  4006be:	7969      	ldrb	r1, [r5, #5]
  4006c0:	4871      	ldr	r0, [pc, #452]	; (400888 <get_IMU_quaternion+0x5f0>)
  4006c2:	4c62      	ldr	r4, [pc, #392]	; (40084c <get_IMU_quaternion+0x5b4>)
  4006c4:	47a0      	blx	r4
						printf("Word Offset = %u\r\n", byte_array_to_uint(&packetPointer[6], 2));
  4006c6:	2102      	movs	r1, #2
  4006c8:	1da8      	adds	r0, r5, #6
  4006ca:	4b62      	ldr	r3, [pc, #392]	; (400854 <get_IMU_quaternion+0x5bc>)
  4006cc:	4798      	blx	r3
  4006ce:	4601      	mov	r1, r0
  4006d0:	486e      	ldr	r0, [pc, #440]	; (40088c <get_IMU_quaternion+0x5f4>)
  4006d2:	47a0      	blx	r4
				break;
  4006d4:	e78b      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Report ID = 0xF3 'FRS Read Response'\r\n");
  4006d6:	486e      	ldr	r0, [pc, #440]	; (400890 <get_IMU_quaternion+0x5f8>)
  4006d8:	4b53      	ldr	r3, [pc, #332]	; (400828 <get_IMU_quaternion+0x590>)
  4006da:	4798      	blx	r3
						uint8_t data_length = (packetPointer[5] >> 4);
  4006dc:	796c      	ldrb	r4, [r5, #5]
  4006de:	0924      	lsrs	r4, r4, #4
						printf("Data Length = %u\r\n", (uint)data_length);
  4006e0:	4621      	mov	r1, r4
  4006e2:	486c      	ldr	r0, [pc, #432]	; (400894 <get_IMU_quaternion+0x5fc>)
  4006e4:	4e59      	ldr	r6, [pc, #356]	; (40084c <get_IMU_quaternion+0x5b4>)
  4006e6:	47b0      	blx	r6
						printf("Status = %u\r\n", (uint)(packetPointer[5]&15));
  4006e8:	7969      	ldrb	r1, [r5, #5]
  4006ea:	f001 010f 	and.w	r1, r1, #15
  4006ee:	486a      	ldr	r0, [pc, #424]	; (400898 <get_IMU_quaternion+0x600>)
  4006f0:	47b0      	blx	r6
						printf("Word Offset = %u\r\n", byte_array_to_uint(&packetPointer[6], 2));
  4006f2:	2102      	movs	r1, #2
  4006f4:	1da8      	adds	r0, r5, #6
  4006f6:	4b57      	ldr	r3, [pc, #348]	; (400854 <get_IMU_quaternion+0x5bc>)
  4006f8:	4798      	blx	r3
  4006fa:	4601      	mov	r1, r0
  4006fc:	4863      	ldr	r0, [pc, #396]	; (40088c <get_IMU_quaternion+0x5f4>)
  4006fe:	47b0      	blx	r6
						if(data_length==1){
  400700:	2c01      	cmp	r4, #1
  400702:	d009      	beq.n	400718 <get_IMU_quaternion+0x480>
							printf("FRS Type = %u\r\n", byte_array_to_uint(&packetPointer[16], 2));
  400704:	2102      	movs	r1, #2
  400706:	f105 0010 	add.w	r0, r5, #16
  40070a:	4b52      	ldr	r3, [pc, #328]	; (400854 <get_IMU_quaternion+0x5bc>)
  40070c:	4798      	blx	r3
  40070e:	4601      	mov	r1, r0
  400710:	4862      	ldr	r0, [pc, #392]	; (40089c <get_IMU_quaternion+0x604>)
  400712:	4b4e      	ldr	r3, [pc, #312]	; (40084c <get_IMU_quaternion+0x5b4>)
  400714:	4798      	blx	r3
  400716:	e76a      	b.n	4005ee <get_IMU_quaternion+0x356>
							printf("Data0 = %u\r\n", byte_array_to_uint(&packetPointer[8], 4));
  400718:	2104      	movs	r1, #4
  40071a:	f105 0008 	add.w	r0, r5, #8
  40071e:	4e4d      	ldr	r6, [pc, #308]	; (400854 <get_IMU_quaternion+0x5bc>)
  400720:	47b0      	blx	r6
  400722:	4601      	mov	r1, r0
  400724:	485e      	ldr	r0, [pc, #376]	; (4008a0 <get_IMU_quaternion+0x608>)
  400726:	4c49      	ldr	r4, [pc, #292]	; (40084c <get_IMU_quaternion+0x5b4>)
  400728:	47a0      	blx	r4
							printf("FRS Type = %u\r\n", byte_array_to_uint(&packetPointer[16], 2));
  40072a:	2102      	movs	r1, #2
  40072c:	f105 0010 	add.w	r0, r5, #16
  400730:	47b0      	blx	r6
  400732:	4601      	mov	r1, r0
  400734:	4859      	ldr	r0, [pc, #356]	; (40089c <get_IMU_quaternion+0x604>)
  400736:	47a0      	blx	r4
  400738:	e759      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Report ID = 0xF1 'Command Response'\r\n");
  40073a:	485a      	ldr	r0, [pc, #360]	; (4008a4 <get_IMU_quaternion+0x60c>)
  40073c:	4b3a      	ldr	r3, [pc, #232]	; (400828 <get_IMU_quaternion+0x590>)
  40073e:	4798      	blx	r3
						printf("Sequence Number = %u\r\n", (uint)packetPointer[5]);
  400740:	7969      	ldrb	r1, [r5, #5]
  400742:	4859      	ldr	r0, [pc, #356]	; (4008a8 <get_IMU_quaternion+0x610>)
  400744:	4c41      	ldr	r4, [pc, #260]	; (40084c <get_IMU_quaternion+0x5b4>)
  400746:	47a0      	blx	r4
						printf("Command = %u\r\n", (uint)packetPointer[6]);
  400748:	79a9      	ldrb	r1, [r5, #6]
  40074a:	4858      	ldr	r0, [pc, #352]	; (4008ac <get_IMU_quaternion+0x614>)
  40074c:	47a0      	blx	r4
						printf("Command Sequence Number = %u\r\n", (uint)packetPointer[7]);
  40074e:	79e9      	ldrb	r1, [r5, #7]
  400750:	4857      	ldr	r0, [pc, #348]	; (4008b0 <get_IMU_quaternion+0x618>)
  400752:	47a0      	blx	r4
						printf("Response Sequence Number = %u\r\n", (uint)packetPointer[8]);
  400754:	7a29      	ldrb	r1, [r5, #8]
  400756:	4857      	ldr	r0, [pc, #348]	; (4008b4 <get_IMU_quaternion+0x61c>)
  400758:	47a0      	blx	r4
						printf("R0 Value = %u\r\n", (uint)packetPointer[9]);
  40075a:	7a69      	ldrb	r1, [r5, #9]
  40075c:	4856      	ldr	r0, [pc, #344]	; (4008b8 <get_IMU_quaternion+0x620>)
  40075e:	47a0      	blx	r4
						printf("R1 Value = %u\r\n", (uint)packetPointer[10]);
  400760:	7aa9      	ldrb	r1, [r5, #10]
  400762:	4856      	ldr	r0, [pc, #344]	; (4008bc <get_IMU_quaternion+0x624>)
  400764:	47a0      	blx	r4
						printf("R2 Value = %u\r\n", (uint)packetPointer[11]);
  400766:	7ae9      	ldrb	r1, [r5, #11]
  400768:	4855      	ldr	r0, [pc, #340]	; (4008c0 <get_IMU_quaternion+0x628>)
  40076a:	47a0      	blx	r4
						printf("R3 Value = %u\r\n", (uint)packetPointer[12]);
  40076c:	7b29      	ldrb	r1, [r5, #12]
  40076e:	4855      	ldr	r0, [pc, #340]	; (4008c4 <get_IMU_quaternion+0x62c>)
  400770:	47a0      	blx	r4
						printf("R4 Value = %u\r\n", (uint)packetPointer[13]);
  400772:	7b69      	ldrb	r1, [r5, #13]
  400774:	4854      	ldr	r0, [pc, #336]	; (4008c8 <get_IMU_quaternion+0x630>)
  400776:	47a0      	blx	r4
						printf("R5 Value = %u\r\n", (uint)packetPointer[14]);
  400778:	7ba9      	ldrb	r1, [r5, #14]
  40077a:	4854      	ldr	r0, [pc, #336]	; (4008cc <get_IMU_quaternion+0x634>)
  40077c:	47a0      	blx	r4
						printf("R6 Value = %u\r\n", (uint)packetPointer[15]);
  40077e:	7be9      	ldrb	r1, [r5, #15]
  400780:	4853      	ldr	r0, [pc, #332]	; (4008d0 <get_IMU_quaternion+0x638>)
  400782:	47a0      	blx	r4
						printf("R7 Value = %u\r\n", (uint)packetPointer[16]);
  400784:	7c29      	ldrb	r1, [r5, #16]
  400786:	4853      	ldr	r0, [pc, #332]	; (4008d4 <get_IMU_quaternion+0x63c>)
  400788:	47a0      	blx	r4
						printf("R8 Value = %u\r\n", (uint)packetPointer[17]);
  40078a:	7c69      	ldrb	r1, [r5, #17]
  40078c:	4852      	ldr	r0, [pc, #328]	; (4008d8 <get_IMU_quaternion+0x640>)
  40078e:	47a0      	blx	r4
						printf("R9 Value = %u\r\n", (uint)packetPointer[18]);
  400790:	7ca9      	ldrb	r1, [r5, #18]
  400792:	4852      	ldr	r0, [pc, #328]	; (4008dc <get_IMU_quaternion+0x644>)
  400794:	47a0      	blx	r4
						printf("R10 Value = %u\r\n", (uint)packetPointer[19]);
  400796:	7ce9      	ldrb	r1, [r5, #19]
  400798:	4851      	ldr	r0, [pc, #324]	; (4008e0 <get_IMU_quaternion+0x648>)
  40079a:	47a0      	blx	r4
				break;
  40079c:	e727      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Received report ID over SH2 control channel that was not recognized");
  40079e:	4851      	ldr	r0, [pc, #324]	; (4008e4 <get_IMU_quaternion+0x64c>)
  4007a0:	4b2a      	ldr	r3, [pc, #168]	; (40084c <get_IMU_quaternion+0x5b4>)
  4007a2:	4798      	blx	r3
				break;
  4007a4:	e723      	b.n	4005ee <get_IMU_quaternion+0x356>
				printf("SH-2 inputNormal Channel Output:\r\n");
  4007a6:	4850      	ldr	r0, [pc, #320]	; (4008e8 <get_IMU_quaternion+0x650>)
  4007a8:	4b1f      	ldr	r3, [pc, #124]	; (400828 <get_IMU_quaternion+0x590>)
  4007aa:	4798      	blx	r3
				printf("Base Delta = %u\r\n", byte_array_to_uint(packetPointer[5],4));
  4007ac:	2104      	movs	r1, #4
  4007ae:	7968      	ldrb	r0, [r5, #5]
  4007b0:	4b28      	ldr	r3, [pc, #160]	; (400854 <get_IMU_quaternion+0x5bc>)
  4007b2:	4798      	blx	r3
  4007b4:	4601      	mov	r1, r0
  4007b6:	484d      	ldr	r0, [pc, #308]	; (4008ec <get_IMU_quaternion+0x654>)
  4007b8:	4b24      	ldr	r3, [pc, #144]	; (40084c <get_IMU_quaternion+0x5b4>)
  4007ba:	4798      	blx	r3
			switch(packetPointer[9]){
  4007bc:	7a6b      	ldrb	r3, [r5, #9]
  4007be:	3b01      	subs	r3, #1
  4007c0:	2b15      	cmp	r3, #21
  4007c2:	f200 8150 	bhi.w	400a66 <get_IMU_quaternion+0x7ce>
  4007c6:	a201      	add	r2, pc, #4	; (adr r2, 4007cc <get_IMU_quaternion+0x534>)
  4007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007cc:	004005ef 	.word	0x004005ef
  4007d0:	004005ef 	.word	0x004005ef
  4007d4:	004005ef 	.word	0x004005ef
  4007d8:	004005ef 	.word	0x004005ef
  4007dc:	004008f1 	.word	0x004008f1
  4007e0:	004005ef 	.word	0x004005ef
  4007e4:	004005ef 	.word	0x004005ef
  4007e8:	004005ef 	.word	0x004005ef
  4007ec:	004005ef 	.word	0x004005ef
  4007f0:	00400a67 	.word	0x00400a67
  4007f4:	00400a67 	.word	0x00400a67
  4007f8:	00400a67 	.word	0x00400a67
  4007fc:	00400a67 	.word	0x00400a67
  400800:	00400a67 	.word	0x00400a67
  400804:	004005ef 	.word	0x004005ef
  400808:	00400a67 	.word	0x00400a67
  40080c:	00400a67 	.word	0x00400a67
  400810:	00400a67 	.word	0x00400a67
  400814:	00400a67 	.word	0x00400a67
  400818:	004005ef 	.word	0x004005ef
  40081c:	004005ef 	.word	0x004005ef
  400820:	004005ef 	.word	0x004005ef
  400824:	004042b4 	.word	0x004042b4
  400828:	00402f25 	.word	0x00402f25
  40082c:	00404318 	.word	0x00404318
  400830:	00404340 	.word	0x00404340
  400834:	004001e9 	.word	0x004001e9
  400838:	0040021d 	.word	0x0040021d
  40083c:	00402cad 	.word	0x00402cad
  400840:	00404384 	.word	0x00404384
  400844:	004043a4 	.word	0x004043a4
  400848:	004043d0 	.word	0x004043d0
  40084c:	00402e3d 	.word	0x00402e3d
  400850:	004043ec 	.word	0x004043ec
  400854:	00400251 	.word	0x00400251
  400858:	00404404 	.word	0x00404404
  40085c:	00404420 	.word	0x00404420
  400860:	00404438 	.word	0x00404438
  400864:	00404450 	.word	0x00404450
  400868:	0040447c 	.word	0x0040447c
  40086c:	004044a4 	.word	0x004044a4
  400870:	004044b8 	.word	0x004044b8
  400874:	004044d0 	.word	0x004044d0
  400878:	004044e8 	.word	0x004044e8
  40087c:	00404500 	.word	0x00404500
  400880:	00404518 	.word	0x00404518
  400884:	00404530 	.word	0x00404530
  400888:	00404558 	.word	0x00404558
  40088c:	0040456c 	.word	0x0040456c
  400890:	00404580 	.word	0x00404580
  400894:	004045a8 	.word	0x004045a8
  400898:	004045bc 	.word	0x004045bc
  40089c:	004045dc 	.word	0x004045dc
  4008a0:	004045cc 	.word	0x004045cc
  4008a4:	004045ec 	.word	0x004045ec
  4008a8:	0040462c 	.word	0x0040462c
  4008ac:	00404614 	.word	0x00404614
  4008b0:	00404624 	.word	0x00404624
  4008b4:	00404644 	.word	0x00404644
  4008b8:	00404664 	.word	0x00404664
  4008bc:	00404674 	.word	0x00404674
  4008c0:	00404684 	.word	0x00404684
  4008c4:	00404694 	.word	0x00404694
  4008c8:	004046a4 	.word	0x004046a4
  4008cc:	004046b4 	.word	0x004046b4
  4008d0:	004046c4 	.word	0x004046c4
  4008d4:	004046d4 	.word	0x004046d4
  4008d8:	004046e4 	.word	0x004046e4
  4008dc:	004046f4 	.word	0x004046f4
  4008e0:	00404704 	.word	0x00404704
  4008e4:	00404718 	.word	0x00404718
  4008e8:	0040475c 	.word	0x0040475c
  4008ec:	00404780 	.word	0x00404780
						printf("Report ID = 0x05 'Rotation Vector'\r\n");
  4008f0:	485f      	ldr	r0, [pc, #380]	; (400a70 <get_IMU_quaternion+0x7d8>)
  4008f2:	4b60      	ldr	r3, [pc, #384]	; (400a74 <get_IMU_quaternion+0x7dc>)
  4008f4:	4798      	blx	r3
						printf("Sequence Number = %u\r\n", (uint)packetPointer[10]);
  4008f6:	7aa9      	ldrb	r1, [r5, #10]
  4008f8:	485f      	ldr	r0, [pc, #380]	; (400a78 <get_IMU_quaternion+0x7e0>)
  4008fa:	4c60      	ldr	r4, [pc, #384]	; (400a7c <get_IMU_quaternion+0x7e4>)
  4008fc:	47a0      	blx	r4
						printf("Status = %u\r\n", (uint)packetPointer[11]);
  4008fe:	7ae9      	ldrb	r1, [r5, #11]
  400900:	485f      	ldr	r0, [pc, #380]	; (400a80 <get_IMU_quaternion+0x7e8>)
  400902:	47a0      	blx	r4
						printf("Delay = %u\r\n", (uint)packetPointer[12]);
  400904:	7b29      	ldrb	r1, [r5, #12]
  400906:	485f      	ldr	r0, [pc, #380]	; (400a84 <get_IMU_quaternion+0x7ec>)
  400908:	47a0      	blx	r4
						printf("Unit Quaternion i = %f\r\n", QP(14)*(int16_t)(((int16_t)packetPointer[14] << 8) | packetPointer[13]));
  40090a:	7baa      	ldrb	r2, [r5, #14]
  40090c:	7b6b      	ldrb	r3, [r5, #13]
  40090e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400912:	b21b      	sxth	r3, r3
  400914:	ee07 3a90 	vmov	s15, r3
  400918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40091c:	eddf 9a5a 	vldr	s19, [pc, #360]	; 400a88 <get_IMU_quaternion+0x7f0>
  400920:	4e5a      	ldr	r6, [pc, #360]	; (400a8c <get_IMU_quaternion+0x7f4>)
  400922:	ee67 7aa9 	vmul.f32	s15, s15, s19
  400926:	ee17 0a90 	vmov	r0, s15
  40092a:	47b0      	blx	r6
  40092c:	4602      	mov	r2, r0
  40092e:	460b      	mov	r3, r1
  400930:	4857      	ldr	r0, [pc, #348]	; (400a90 <get_IMU_quaternion+0x7f8>)
  400932:	47a0      	blx	r4
						printf("Unit Quaternion j = %f\r\n", QP(14)*(int16_t)(((int16_t)packetPointer[16] << 8) | packetPointer[15]));
  400934:	7c2a      	ldrb	r2, [r5, #16]
  400936:	7beb      	ldrb	r3, [r5, #15]
  400938:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40093c:	b21b      	sxth	r3, r3
  40093e:	ee07 3a90 	vmov	s15, r3
  400942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400946:	ee67 7aa9 	vmul.f32	s15, s15, s19
  40094a:	ee17 0a90 	vmov	r0, s15
  40094e:	47b0      	blx	r6
  400950:	4602      	mov	r2, r0
  400952:	460b      	mov	r3, r1
  400954:	484f      	ldr	r0, [pc, #316]	; (400a94 <get_IMU_quaternion+0x7fc>)
  400956:	47a0      	blx	r4
						printf("Unit Quaternion k = %f\r\n", QP(14)*(int16_t)(((int16_t)packetPointer[18] << 8) | packetPointer[17]));
  400958:	7caa      	ldrb	r2, [r5, #18]
  40095a:	7c6b      	ldrb	r3, [r5, #17]
  40095c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400960:	b21b      	sxth	r3, r3
  400962:	ee07 3a90 	vmov	s15, r3
  400966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40096a:	ee67 7aa9 	vmul.f32	s15, s15, s19
  40096e:	ee17 0a90 	vmov	r0, s15
  400972:	47b0      	blx	r6
  400974:	4602      	mov	r2, r0
  400976:	460b      	mov	r3, r1
  400978:	4847      	ldr	r0, [pc, #284]	; (400a98 <get_IMU_quaternion+0x800>)
  40097a:	47a0      	blx	r4
						printf("Unit Quaternion real = %f\r\n", QP(14)*(int16_t)(((int16_t)packetPointer[20] << 8) | packetPointer[19]));
  40097c:	7d2a      	ldrb	r2, [r5, #20]
  40097e:	7ceb      	ldrb	r3, [r5, #19]
  400980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400984:	b21b      	sxth	r3, r3
  400986:	ee07 3a90 	vmov	s15, r3
  40098a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40098e:	ee67 7aa9 	vmul.f32	s15, s15, s19
  400992:	ee17 0a90 	vmov	r0, s15
  400996:	47b0      	blx	r6
  400998:	4602      	mov	r2, r0
  40099a:	460b      	mov	r3, r1
  40099c:	483f      	ldr	r0, [pc, #252]	; (400a9c <get_IMU_quaternion+0x804>)
  40099e:	47a0      	blx	r4
						printf("Accuracy estimate = %f\r\n", QP(12)*(int16_t)(((int16_t)packetPointer[22] << 8) | packetPointer[21]));
  4009a0:	7daa      	ldrb	r2, [r5, #22]
  4009a2:	7d6b      	ldrb	r3, [r5, #21]
  4009a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009a8:	b21b      	sxth	r3, r3
  4009aa:	ee07 3a90 	vmov	s15, r3
  4009ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4009b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 400aa0 <get_IMU_quaternion+0x808>
  4009b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  4009ba:	ee17 0a90 	vmov	r0, s15
  4009be:	47b0      	blx	r6
  4009c0:	4602      	mov	r2, r0
  4009c2:	460b      	mov	r3, r1
  4009c4:	4837      	ldr	r0, [pc, #220]	; (400aa4 <get_IMU_quaternion+0x80c>)
  4009c6:	47a0      	blx	r4
					location_of_imu_vector_buffer[0] = QP(14)*(int16_t)(((int16_t)packetPointer[20] << 8) | packetPointer[19]);
  4009c8:	4a37      	ldr	r2, [pc, #220]	; (400aa8 <get_IMU_quaternion+0x810>)
  4009ca:	6811      	ldr	r1, [r2, #0]
  4009cc:	7d28      	ldrb	r0, [r5, #20]
  4009ce:	7ceb      	ldrb	r3, [r5, #19]
  4009d0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  4009d4:	b21b      	sxth	r3, r3
  4009d6:	ee07 3a90 	vmov	s15, r3
  4009da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4009de:	ee67 7aa9 	vmul.f32	s15, s15, s19
  4009e2:	edc1 7a00 	vstr	s15, [r1]
					location_of_imu_vector_buffer[1] = QP(14)*(int16_t)(((int16_t)packetPointer[14] << 8) | packetPointer[13]);
  4009e6:	6812      	ldr	r2, [r2, #0]
  4009e8:	7ba9      	ldrb	r1, [r5, #14]
  4009ea:	7b6b      	ldrb	r3, [r5, #13]
  4009ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4009f0:	b21b      	sxth	r3, r3
  4009f2:	ee08 3a10 	vmov	s16, r3
  4009f6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  4009fa:	ee28 8a29 	vmul.f32	s16, s16, s19
  4009fe:	ed82 8a01 	vstr	s16, [r2, #4]
					location_of_imu_vector_buffer[2] = QP(14)*(int16_t)(((int16_t)packetPointer[16] << 8) | packetPointer[15]);
  400a02:	7c29      	ldrb	r1, [r5, #16]
  400a04:	7beb      	ldrb	r3, [r5, #15]
  400a06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  400a0a:	b21b      	sxth	r3, r3
  400a0c:	ee08 3a90 	vmov	s17, r3
  400a10:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400a14:	ee68 8aa9 	vmul.f32	s17, s17, s19
  400a18:	edc2 8a02 	vstr	s17, [r2, #8]
					location_of_imu_vector_buffer[3] = QP(14)*(int16_t)(((int16_t)packetPointer[18] << 8) | packetPointer[17]);
  400a1c:	7ca9      	ldrb	r1, [r5, #18]
  400a1e:	7c6b      	ldrb	r3, [r5, #17]
  400a20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  400a24:	b21b      	sxth	r3, r3
  400a26:	ee09 3a10 	vmov	s18, r3
  400a2a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  400a2e:	ee29 9a29 	vmul.f32	s18, s18, s19
  400a32:	ed82 9a03 	vstr	s18, [r2, #12]
						printf("%f,%f,%f,%f\r\n", location_of_imu_vector_buffer[0], location_of_imu_vector_buffer[1], location_of_imu_vector_buffer[2], location_of_imu_vector_buffer[3]);
  400a36:	6810      	ldr	r0, [r2, #0]
  400a38:	47b0      	blx	r6
  400a3a:	4680      	mov	r8, r0
  400a3c:	4689      	mov	r9, r1
  400a3e:	ee19 0a10 	vmov	r0, s18
  400a42:	47b0      	blx	r6
  400a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400a48:	ee18 0a90 	vmov	r0, s17
  400a4c:	47b0      	blx	r6
  400a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a52:	ee18 0a10 	vmov	r0, s16
  400a56:	47b0      	blx	r6
  400a58:	e9cd 0100 	strd	r0, r1, [sp]
  400a5c:	4642      	mov	r2, r8
  400a5e:	464b      	mov	r3, r9
  400a60:	4812      	ldr	r0, [pc, #72]	; (400aac <get_IMU_quaternion+0x814>)
  400a62:	47a0      	blx	r4
  400a64:	e5c3      	b.n	4005ee <get_IMU_quaternion+0x356>
						printf("Received report ID over SH2 inputNormal channel that was not recognized");
  400a66:	4812      	ldr	r0, [pc, #72]	; (400ab0 <get_IMU_quaternion+0x818>)
  400a68:	4b04      	ldr	r3, [pc, #16]	; (400a7c <get_IMU_quaternion+0x7e4>)
  400a6a:	4798      	blx	r3
				break;
  400a6c:	e5bf      	b.n	4005ee <get_IMU_quaternion+0x356>
  400a6e:	bf00      	nop
  400a70:	00404794 	.word	0x00404794
  400a74:	00402f25 	.word	0x00402f25
  400a78:	0040462c 	.word	0x0040462c
  400a7c:	00402e3d 	.word	0x00402e3d
  400a80:	004045bc 	.word	0x004045bc
  400a84:	004047b8 	.word	0x004047b8
  400a88:	38800000 	.word	0x38800000
  400a8c:	004026e9 	.word	0x004026e9
  400a90:	004047c8 	.word	0x004047c8
  400a94:	004047e4 	.word	0x004047e4
  400a98:	00404800 	.word	0x00404800
  400a9c:	0040481c 	.word	0x0040481c
  400aa0:	39800000 	.word	0x39800000
  400aa4:	00404838 	.word	0x00404838
  400aa8:	204013d0 	.word	0x204013d0
  400aac:	00404854 	.word	0x00404854
  400ab0:	00404864 	.word	0x00404864

00400ab4 <init_BQ76925>:
uint8_t* global_buffer_location; //global buffer location
//uint8_t* global_buffer_location[6]; //global buffer location, all 6 cells
uint8_t curr_slave_address; //register we wish to read/write

//initialize I2C based on the slave address we wish to read from (see .h file)
void init_BQ76925(uint8_t *buffer, uint8_t slave_address){
  400ab4:	b570      	push	{r4, r5, r6, lr}
  400ab6:	4606      	mov	r6, r0
  400ab8:	460d      	mov	r5, r1
	i2c_m_sync_get_io_descriptor(&I2C_0, &i2c_0_io_PD);
  400aba:	4c09      	ldr	r4, [pc, #36]	; (400ae0 <init_BQ76925+0x2c>)
  400abc:	4909      	ldr	r1, [pc, #36]	; (400ae4 <init_BQ76925+0x30>)
  400abe:	4620      	mov	r0, r4
  400ac0:	4b09      	ldr	r3, [pc, #36]	; (400ae8 <init_BQ76925+0x34>)
  400ac2:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b09      	ldr	r3, [pc, #36]	; (400aec <init_BQ76925+0x38>)
  400ac8:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, slave_address, I2C_M_SEVEN); //replace w/ address
  400aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ace:	4629      	mov	r1, r5
  400ad0:	4620      	mov	r0, r4
  400ad2:	4b07      	ldr	r3, [pc, #28]	; (400af0 <init_BQ76925+0x3c>)
  400ad4:	4798      	blx	r3
	
	global_buffer_location = buffer;	
  400ad6:	4b07      	ldr	r3, [pc, #28]	; (400af4 <init_BQ76925+0x40>)
  400ad8:	601e      	str	r6, [r3, #0]
	curr_slave_address = slave_address;
  400ada:	4b07      	ldr	r3, [pc, #28]	; (400af8 <init_BQ76925+0x44>)
  400adc:	701d      	strb	r5, [r3, #0]
  400ade:	bd70      	pop	{r4, r5, r6, pc}
  400ae0:	20401428 	.word	0x20401428
  400ae4:	204013d4 	.word	0x204013d4
  400ae8:	004012d9 	.word	0x004012d9
  400aec:	004012bd 	.word	0x004012bd
  400af0:	004012c9 	.word	0x004012c9
  400af4:	204013d8 	.word	0x204013d8
  400af8:	204013dc 	.word	0x204013dc

00400afc <handleMasking>:
}

//masking for CELL selection
// bits [5, 4] must be [0, 1] respectively for VCOUT_SEL to be put on VCOUT pin
uint8_t handleMasking(uint8_t single_byte, uint8_t cell){
	single_byte &= 0b11001000;	 //keep bits 7, 6, 3 same, revert others
  400afc:	f000 00c8 	and.w	r0, r0, #200	; 0xc8
	single_byte |= 0b00010000; //set bits 5, 4 to 0, 1, respectively, to ensure cell goes on VCOUT pin
  400b00:	f040 0010 	orr.w	r0, r0, #16
	uint8_t mask = 0;
	switch(cell){ //cell selection (last three bits of CELL_CTL register)
  400b04:	1e4b      	subs	r3, r1, #1
  400b06:	2b04      	cmp	r3, #4
  400b08:	d801      	bhi.n	400b0e <handleMasking+0x12>
		mask |= 0b101;
		break;
	}
	single_byte |= mask;
	return single_byte;
}
  400b0a:	4308      	orrs	r0, r1
  400b0c:	4770      	bx	lr
	uint8_t mask = 0;
  400b0e:	2100      	movs	r1, #0
  400b10:	e7fb      	b.n	400b0a <handleMasking+0xe>
	...

00400b14 <change_BQ76925_cell>:
	if(cell < 0 || cell > 5)return; //check cell
  400b14:	2805      	cmp	r0, #5
  400b16:	d900      	bls.n	400b1a <change_BQ76925_cell+0x6>
  400b18:	4770      	bx	lr
void change_BQ76925_cell(uint8_t cell){
  400b1a:	b570      	push	{r4, r5, r6, lr}
  400b1c:	b082      	sub	sp, #8
  400b1e:	4604      	mov	r4, r0
	printf("Changing Pin\n");
  400b20:	480d      	ldr	r0, [pc, #52]	; (400b58 <change_BQ76925_cell+0x44>)
  400b22:	4b0e      	ldr	r3, [pc, #56]	; (400b5c <change_BQ76925_cell+0x48>)
  400b24:	4798      	blx	r3
	single_Byte = 0; //initialize to 0
  400b26:	ad02      	add	r5, sp, #8
  400b28:	2300      	movs	r3, #0
  400b2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
	io_read(i2c_0_io_PD, &single_Byte, sizeof(uint8_t));
  400b2e:	4e0c      	ldr	r6, [pc, #48]	; (400b60 <change_BQ76925_cell+0x4c>)
  400b30:	2201      	movs	r2, #1
  400b32:	4629      	mov	r1, r5
  400b34:	6830      	ldr	r0, [r6, #0]
  400b36:	4b0b      	ldr	r3, [pc, #44]	; (400b64 <change_BQ76925_cell+0x50>)
  400b38:	4798      	blx	r3
	single_Byte = handleMasking(single_Byte, cell);
  400b3a:	4621      	mov	r1, r4
  400b3c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400b40:	4b09      	ldr	r3, [pc, #36]	; (400b68 <change_BQ76925_cell+0x54>)
  400b42:	4798      	blx	r3
  400b44:	f88d 0007 	strb.w	r0, [sp, #7]
	io_write(i2c_0_io_PD, &single_Byte, sizeof(uint8_t));
  400b48:	2201      	movs	r2, #1
  400b4a:	4629      	mov	r1, r5
  400b4c:	6830      	ldr	r0, [r6, #0]
  400b4e:	4b07      	ldr	r3, [pc, #28]	; (400b6c <change_BQ76925_cell+0x58>)
  400b50:	4798      	blx	r3
}
  400b52:	b002      	add	sp, #8
  400b54:	bd70      	pop	{r4, r5, r6, pc}
  400b56:	bf00      	nop
  400b58:	00404958 	.word	0x00404958
  400b5c:	00402f25 	.word	0x00402f25
  400b60:	204013d4 	.word	0x204013d4
  400b64:	00401311 	.word	0x00401311
  400b68:	00400afd 	.word	0x00400afd
  400b6c:	004012e1 	.word	0x004012e1

00400b70 <setup_BQ7_for_adc>:
void setup_BQ7_for_adc(uint8_t *buffer, uint8_t cell){
  400b70:	b510      	push	{r4, lr}
  400b72:	460c      	mov	r4, r1
	init_BQ76925(buffer, CELL_CTL);
  400b74:	2121      	movs	r1, #33	; 0x21
  400b76:	4b03      	ldr	r3, [pc, #12]	; (400b84 <setup_BQ7_for_adc+0x14>)
  400b78:	4798      	blx	r3
	change_BQ76925_cell(cell);
  400b7a:	4620      	mov	r0, r4
  400b7c:	4b02      	ldr	r3, [pc, #8]	; (400b88 <setup_BQ7_for_adc+0x18>)
  400b7e:	4798      	blx	r3
  400b80:	bd10      	pop	{r4, pc}
  400b82:	bf00      	nop
  400b84:	00400ab5 	.word	0x00400ab5
  400b88:	00400b15 	.word	0x00400b15

00400b8c <set_ref_voltage>:
// CRC_EN is set to 0 b/c makes more difficult
// register bit layout
//   D7		D6   D5    D4     D3     D2     D1     D0
// CRC_EN   -    -     -      -      -      -    REF_SEL
void set_ref_voltage(uint8_t *buffer, uint8_t selection){
	if(selection != 0 && selection != 1) return; //check bounds
  400b8c:	2901      	cmp	r1, #1
  400b8e:	d900      	bls.n	400b92 <set_ref_voltage+0x6>
  400b90:	4770      	bx	lr
void set_ref_voltage(uint8_t *buffer, uint8_t selection){
  400b92:	b510      	push	{r4, lr}
  400b94:	b082      	sub	sp, #8
  400b96:	460c      	mov	r4, r1
	init_BQ76925(buffer, CONFIG_2);
  400b98:	2124      	movs	r1, #36	; 0x24
  400b9a:	4b07      	ldr	r3, [pc, #28]	; (400bb8 <set_ref_voltage+0x2c>)
  400b9c:	4798      	blx	r3
	//uint8_t single_Byte; //buffer to read register
	//single_Byte = 0;
	//io_read(i2c_0_io_PD, &single_Byte, sizeof(uint8_t));
	uint8_t single_Byte = (0b01111110 | selection); //disable CRC, keep bits 6-1 same, toggle bit 0
  400b9e:	f044 047e 	orr.w	r4, r4, #126	; 0x7e
  400ba2:	a902      	add	r1, sp, #8
  400ba4:	f801 4d01 	strb.w	r4, [r1, #-1]!
	
	io_write(i2c_0_io_PD, &single_Byte, sizeof(uint8_t));
  400ba8:	2201      	movs	r2, #1
  400baa:	4b04      	ldr	r3, [pc, #16]	; (400bbc <set_ref_voltage+0x30>)
  400bac:	6818      	ldr	r0, [r3, #0]
  400bae:	4b04      	ldr	r3, [pc, #16]	; (400bc0 <set_ref_voltage+0x34>)
  400bb0:	4798      	blx	r3
	//io_read(i2c_0_io_PD, &single_Byte, sizeof(uint8_t));
}
  400bb2:	b002      	add	sp, #8
  400bb4:	bd10      	pop	{r4, pc}
  400bb6:	bf00      	nop
  400bb8:	00400ab5 	.word	0x00400ab5
  400bbc:	204013d4 	.word	0x204013d4
  400bc0:	004012e1 	.word	0x004012e1
  400bc4:	00000000 	.word	0x00000000

00400bc8 <v_cell>:
	 adc_sync_enable_channel(&ADC_0, 0);
}
	
//does ADC conversion and calculates voltage of cell
//ADC -> voltage/3.3 -> [0, 3.3] -> [0.0, 3.7]
float v_cell(void){
  400bc8:	b538      	push	{r3, r4, r5, lr}
	adc_sync_read_channel(&ADC_0, 0, add_values, 2);
  400bca:	4c0f      	ldr	r4, [pc, #60]	; (400c08 <v_cell+0x40>)
  400bcc:	2302      	movs	r3, #2
  400bce:	4622      	mov	r2, r4
  400bd0:	2100      	movs	r1, #0
  400bd2:	480e      	ldr	r0, [pc, #56]	; (400c0c <v_cell+0x44>)
  400bd4:	4d0e      	ldr	r5, [pc, #56]	; (400c10 <v_cell+0x48>)
  400bd6:	47a8      	blx	r5
	
	int32_t value = add_values[0] + ((add_values[1] & 0x0F) << 8);
  400bd8:	7820      	ldrb	r0, [r4, #0]
  400bda:	7863      	ldrb	r3, [r4, #1]
  400bdc:	021b      	lsls	r3, r3, #8
  400bde:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
	
	float voltage = (value / 4096.0)*3.7; // out of 3.3V ADC on uC
  400be2:	4418      	add	r0, r3
  400be4:	4b0b      	ldr	r3, [pc, #44]	; (400c14 <v_cell+0x4c>)
  400be6:	4798      	blx	r3
  400be8:	4c0b      	ldr	r4, [pc, #44]	; (400c18 <v_cell+0x50>)
  400bea:	2200      	movs	r2, #0
  400bec:	4b0b      	ldr	r3, [pc, #44]	; (400c1c <v_cell+0x54>)
  400bee:	47a0      	blx	r4
  400bf0:	a303      	add	r3, pc, #12	; (adr r3, 400c00 <v_cell+0x38>)
  400bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bf6:	47a0      	blx	r4
  400bf8:	4b09      	ldr	r3, [pc, #36]	; (400c20 <v_cell+0x58>)
  400bfa:	4798      	blx	r3
	
	//float v_cell = pre_voltage * (3.7/3.3);
	return voltage;
}
  400bfc:	bd38      	pop	{r3, r4, r5, pc}
  400bfe:	bf00      	nop
  400c00:	9999999a 	.word	0x9999999a
  400c04:	400d9999 	.word	0x400d9999
  400c08:	204013e0 	.word	0x204013e0
  400c0c:	2040140c 	.word	0x2040140c
  400c10:	004010b5 	.word	0x004010b5
  400c14:	004026c5 	.word	0x004026c5
  400c18:	00402791 	.word	0x00402791
  400c1c:	3f300000 	.word	0x3f300000
  400c20:	00402bb5 	.word	0x00402bb5

00400c24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400c24:	e7fe      	b.n	400c24 <Dummy_Handler>
	...

00400c28 <Reset_Handler>:
{
  400c28:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400c2a:	4b10      	ldr	r3, [pc, #64]	; (400c6c <Reset_Handler+0x44>)
  400c2c:	4a10      	ldr	r2, [pc, #64]	; (400c70 <Reset_Handler+0x48>)
  400c2e:	429a      	cmp	r2, r3
  400c30:	d009      	beq.n	400c46 <Reset_Handler+0x1e>
  400c32:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <Reset_Handler+0x44>)
  400c34:	4a0e      	ldr	r2, [pc, #56]	; (400c70 <Reset_Handler+0x48>)
  400c36:	e003      	b.n	400c40 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400c38:	6811      	ldr	r1, [r2, #0]
  400c3a:	6019      	str	r1, [r3, #0]
  400c3c:	3304      	adds	r3, #4
  400c3e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400c40:	490c      	ldr	r1, [pc, #48]	; (400c74 <Reset_Handler+0x4c>)
  400c42:	428b      	cmp	r3, r1
  400c44:	d3f8      	bcc.n	400c38 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400c46:	4b0c      	ldr	r3, [pc, #48]	; (400c78 <Reset_Handler+0x50>)
  400c48:	e002      	b.n	400c50 <Reset_Handler+0x28>
                *pDest++ = 0;
  400c4a:	2200      	movs	r2, #0
  400c4c:	601a      	str	r2, [r3, #0]
  400c4e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400c50:	4a0a      	ldr	r2, [pc, #40]	; (400c7c <Reset_Handler+0x54>)
  400c52:	4293      	cmp	r3, r2
  400c54:	d3f9      	bcc.n	400c4a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400c56:	4a0a      	ldr	r2, [pc, #40]	; (400c80 <Reset_Handler+0x58>)
  400c58:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <Reset_Handler+0x5c>)
  400c5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400c5e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400c60:	4b09      	ldr	r3, [pc, #36]	; (400c88 <Reset_Handler+0x60>)
  400c62:	4798      	blx	r3
        main();
  400c64:	4b09      	ldr	r3, [pc, #36]	; (400c8c <Reset_Handler+0x64>)
  400c66:	4798      	blx	r3
  400c68:	e7fe      	b.n	400c68 <Reset_Handler+0x40>
  400c6a:	bf00      	nop
  400c6c:	20400000 	.word	0x20400000
  400c70:	00404cb0 	.word	0x00404cb0
  400c74:	20400064 	.word	0x20400064
  400c78:	20400064 	.word	0x20400064
  400c7c:	2040144c 	.word	0x2040144c
  400c80:	e000ed00 	.word	0xe000ed00
  400c84:	00400000 	.word	0x00400000
  400c88:	00402c55 	.word	0x00402c55
  400c8c:	004022ed 	.word	0x004022ed

00400c90 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c94:	4b01      	ldr	r3, [pc, #4]	; (400c9c <ADC_0_PORT_init+0xc>)
  400c96:	601a      	str	r2, [r3, #0]
  400c98:	4770      	bx	lr
  400c9a:	bf00      	nop
  400c9c:	400e1400 	.word	0x400e1400

00400ca0 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ca0:	4b04      	ldr	r3, [pc, #16]	; (400cb4 <ADC_0_CLOCK_init+0x14>)
  400ca2:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400ca4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ca8:	d103      	bne.n	400cb2 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400caa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400cae:	4b01      	ldr	r3, [pc, #4]	; (400cb4 <ADC_0_CLOCK_init+0x14>)
  400cb0:	611a      	str	r2, [r3, #16]
  400cb2:	4770      	bx	lr
  400cb4:	400e0600 	.word	0x400e0600

00400cb8 <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  400cb8:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  400cba:	4b05      	ldr	r3, [pc, #20]	; (400cd0 <ADC_0_init+0x18>)
  400cbc:	4798      	blx	r3
	ADC_0_PORT_init();
  400cbe:	4b05      	ldr	r3, [pc, #20]	; (400cd4 <ADC_0_init+0x1c>)
  400cc0:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400cc2:	2200      	movs	r2, #0
  400cc4:	4904      	ldr	r1, [pc, #16]	; (400cd8 <ADC_0_init+0x20>)
  400cc6:	4805      	ldr	r0, [pc, #20]	; (400cdc <ADC_0_init+0x24>)
  400cc8:	4b05      	ldr	r3, [pc, #20]	; (400ce0 <ADC_0_init+0x28>)
  400cca:	4798      	blx	r3
  400ccc:	bd08      	pop	{r3, pc}
  400cce:	bf00      	nop
  400cd0:	00400ca1 	.word	0x00400ca1
  400cd4:	00400c91 	.word	0x00400c91
  400cd8:	4003c000 	.word	0x4003c000
  400cdc:	2040140c 	.word	0x2040140c
  400ce0:	00401059 	.word	0x00401059

00400ce4 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400ce4:	4b03      	ldr	r3, [pc, #12]	; (400cf4 <EXTERNAL_IRQ_1_init+0x10>)
  400ce6:	2202      	movs	r2, #2
  400ce8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400cea:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cf0:	601a      	str	r2, [r3, #0]
  400cf2:	4770      	bx	lr
  400cf4:	400e1000 	.word	0x400e1000

00400cf8 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400cf8:	4b03      	ldr	r3, [pc, #12]	; (400d08 <EXTERNAL_IRQ_0_init+0x10>)
  400cfa:	2220      	movs	r2, #32
  400cfc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cfe:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400d04:	601a      	str	r2, [r3, #0]
  400d06:	4770      	bx	lr
  400d08:	400e0e00 	.word	0x400e0e00

00400d0c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d0c:	4b18      	ldr	r3, [pc, #96]	; (400d70 <PWM_0_PORT_init+0x64>)
  400d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400d14:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d16:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400d1c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d22:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d24:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d2a:	f022 0204 	bic.w	r2, r2, #4
  400d2e:	671a      	str	r2, [r3, #112]	; 0x70
  400d30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d32:	f022 0204 	bic.w	r2, r2, #4
  400d36:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d38:	2204      	movs	r2, #4
  400d3a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400d46:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d4a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  400d4e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d54:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400d5c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400d64:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400d6a:	605a      	str	r2, [r3, #4]
  400d6c:	4770      	bx	lr
  400d6e:	bf00      	nop
  400d70:	400e1400 	.word	0x400e1400

00400d74 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d74:	4b04      	ldr	r3, [pc, #16]	; (400d88 <PWM_0_CLOCK_init+0x14>)
  400d76:	699b      	ldr	r3, [r3, #24]
  400d78:	2b00      	cmp	r3, #0
  400d7a:	db03      	blt.n	400d84 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400d80:	4b01      	ldr	r3, [pc, #4]	; (400d88 <PWM_0_CLOCK_init+0x14>)
  400d82:	611a      	str	r2, [r3, #16]
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop
  400d88:	400e0600 	.word	0x400e0600

00400d8c <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400d8c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <PWM_0_init+0x1c>)
  400d90:	4798      	blx	r3
	PWM_0_PORT_init();
  400d92:	4b06      	ldr	r3, [pc, #24]	; (400dac <PWM_0_init+0x20>)
  400d94:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400d96:	4b06      	ldr	r3, [pc, #24]	; (400db0 <PWM_0_init+0x24>)
  400d98:	4798      	blx	r3
  400d9a:	4602      	mov	r2, r0
  400d9c:	4905      	ldr	r1, [pc, #20]	; (400db4 <PWM_0_init+0x28>)
  400d9e:	4806      	ldr	r0, [pc, #24]	; (400db8 <PWM_0_init+0x2c>)
  400da0:	4b06      	ldr	r3, [pc, #24]	; (400dbc <PWM_0_init+0x30>)
  400da2:	4798      	blx	r3
  400da4:	bd08      	pop	{r3, pc}
  400da6:	bf00      	nop
  400da8:	00400d75 	.word	0x00400d75
  400dac:	00400d0d 	.word	0x00400d0d
  400db0:	00401ca1 	.word	0x00401ca1
  400db4:	40020000 	.word	0x40020000
  400db8:	204013e4 	.word	0x204013e4
  400dbc:	00401355 	.word	0x00401355

00400dc0 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dc0:	4b11      	ldr	r3, [pc, #68]	; (400e08 <SPI_0_PORT_init+0x48>)
  400dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dc4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400dc8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dcc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400dd0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400dd6:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dda:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  400dde:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400de0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400de2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400de6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400de8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dec:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400df0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400df4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400df6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400df8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400dfc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400e02:	605a      	str	r2, [r3, #4]
  400e04:	4770      	bx	lr
  400e06:	bf00      	nop
  400e08:	400e1400 	.word	0x400e1400

00400e0c <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e0c:	4b04      	ldr	r3, [pc, #16]	; (400e20 <SPI_0_CLOCK_init+0x14>)
  400e0e:	699b      	ldr	r3, [r3, #24]
  400e10:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400e14:	d103      	bne.n	400e1e <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400e1a:	4b01      	ldr	r3, [pc, #4]	; (400e20 <SPI_0_CLOCK_init+0x14>)
  400e1c:	611a      	str	r2, [r3, #16]
  400e1e:	4770      	bx	lr
  400e20:	400e0600 	.word	0x400e0600

00400e24 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void SPI_0_init(void)
{
  400e24:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400e26:	4b08      	ldr	r3, [pc, #32]	; (400e48 <SPI_0_init+0x24>)
  400e28:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400e2a:	4b08      	ldr	r3, [pc, #32]	; (400e4c <SPI_0_init+0x28>)
  400e2c:	4798      	blx	r3
  400e2e:	4c08      	ldr	r4, [pc, #32]	; (400e50 <SPI_0_init+0x2c>)
  400e30:	4601      	mov	r1, r0
  400e32:	4620      	mov	r0, r4
  400e34:	4b07      	ldr	r3, [pc, #28]	; (400e54 <SPI_0_init+0x30>)
  400e36:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400e38:	4907      	ldr	r1, [pc, #28]	; (400e58 <SPI_0_init+0x34>)
  400e3a:	4620      	mov	r0, r4
  400e3c:	4b07      	ldr	r3, [pc, #28]	; (400e5c <SPI_0_init+0x38>)
  400e3e:	4798      	blx	r3
	SPI_0_PORT_init();
  400e40:	4b07      	ldr	r3, [pc, #28]	; (400e60 <SPI_0_init+0x3c>)
  400e42:	4798      	blx	r3
  400e44:	bd10      	pop	{r4, pc}
  400e46:	bf00      	nop
  400e48:	00400e0d 	.word	0x00400e0d
  400e4c:	00401e65 	.word	0x00401e65
  400e50:	20401410 	.word	0x20401410
  400e54:	00401399 	.word	0x00401399
  400e58:	40008000 	.word	0x40008000
  400e5c:	004013b9 	.word	0x004013b9
  400e60:	00400dc1 	.word	0x00400dc1

00400e64 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e64:	4b0a      	ldr	r3, [pc, #40]	; (400e90 <I2C_0_PORT_init+0x2c>)
  400e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e68:	f022 0210 	bic.w	r2, r2, #16
  400e6c:	671a      	str	r2, [r3, #112]	; 0x70
  400e6e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e70:	f022 0210 	bic.w	r2, r2, #16
  400e74:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e76:	2210      	movs	r2, #16
  400e78:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e7c:	f022 0208 	bic.w	r2, r2, #8
  400e80:	671a      	str	r2, [r3, #112]	; 0x70
  400e82:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e84:	f022 0208 	bic.w	r2, r2, #8
  400e88:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e8a:	2208      	movs	r2, #8
  400e8c:	605a      	str	r2, [r3, #4]
  400e8e:	4770      	bx	lr
  400e90:	400e0e00 	.word	0x400e0e00

00400e94 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e94:	4b04      	ldr	r3, [pc, #16]	; (400ea8 <I2C_0_CLOCK_init+0x14>)
  400e96:	699b      	ldr	r3, [r3, #24]
  400e98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400e9c:	d103      	bne.n	400ea6 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ea2:	4b01      	ldr	r3, [pc, #4]	; (400ea8 <I2C_0_CLOCK_init+0x14>)
  400ea4:	611a      	str	r2, [r3, #16]
  400ea6:	4770      	bx	lr
  400ea8:	400e0600 	.word	0x400e0600

00400eac <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400eac:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  400eae:	4b04      	ldr	r3, [pc, #16]	; (400ec0 <I2C_0_init+0x14>)
  400eb0:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400eb2:	4904      	ldr	r1, [pc, #16]	; (400ec4 <I2C_0_init+0x18>)
  400eb4:	4804      	ldr	r0, [pc, #16]	; (400ec8 <I2C_0_init+0x1c>)
  400eb6:	4b05      	ldr	r3, [pc, #20]	; (400ecc <I2C_0_init+0x20>)
  400eb8:	4798      	blx	r3

	I2C_0_PORT_init();
  400eba:	4b05      	ldr	r3, [pc, #20]	; (400ed0 <I2C_0_init+0x24>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	00400e95 	.word	0x00400e95
  400ec4:	40018000 	.word	0x40018000
  400ec8:	20401428 	.word	0x20401428
  400ecc:	0040127d 	.word	0x0040127d
  400ed0:	00400e65 	.word	0x00400e65

00400ed4 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400ed4:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400ed6:	4802      	ldr	r0, [pc, #8]	; (400ee0 <delay_driver_init+0xc>)
  400ed8:	4b02      	ldr	r3, [pc, #8]	; (400ee4 <delay_driver_init+0x10>)
  400eda:	4798      	blx	r3
  400edc:	bd08      	pop	{r3, pc}
  400ede:	bf00      	nop
  400ee0:	e000e010 	.word	0xe000e010
  400ee4:	00401171 	.word	0x00401171

00400ee8 <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400ee8:	4b0f      	ldr	r3, [pc, #60]	; (400f28 <TARGET_IO_PORT_init+0x40>)
  400eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400eec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400ef0:	671a      	str	r2, [r3, #112]	; 0x70
  400ef2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ef4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400ef8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400efa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400efe:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400f00:	4a0a      	ldr	r2, [pc, #40]	; (400f2c <TARGET_IO_PORT_init+0x44>)
  400f02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f06:	f043 0310 	orr.w	r3, r3, #16
  400f0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f0e:	4b08      	ldr	r3, [pc, #32]	; (400f30 <TARGET_IO_PORT_init+0x48>)
  400f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f12:	f042 0210 	orr.w	r2, r2, #16
  400f16:	671a      	str	r2, [r3, #112]	; 0x70
  400f18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f1a:	f042 0210 	orr.w	r2, r2, #16
  400f1e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f20:	2210      	movs	r2, #16
  400f22:	605a      	str	r2, [r3, #4]
  400f24:	4770      	bx	lr
  400f26:	bf00      	nop
  400f28:	400e0e00 	.word	0x400e0e00
  400f2c:	40088000 	.word	0x40088000
  400f30:	400e1000 	.word	0x400e1000

00400f34 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f34:	4b04      	ldr	r3, [pc, #16]	; (400f48 <TARGET_IO_CLOCK_init+0x14>)
  400f36:	699b      	ldr	r3, [r3, #24]
  400f38:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400f3c:	d103      	bne.n	400f46 <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400f42:	4b01      	ldr	r3, [pc, #4]	; (400f48 <TARGET_IO_CLOCK_init+0x14>)
  400f44:	611a      	str	r2, [r3, #16]
  400f46:	4770      	bx	lr
  400f48:	400e0600 	.word	0x400e0600

00400f4c <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  400f4c:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  400f4e:	4b06      	ldr	r3, [pc, #24]	; (400f68 <TARGET_IO_init+0x1c>)
  400f50:	4798      	blx	r3
	TARGET_IO_PORT_init();
  400f52:	4b06      	ldr	r3, [pc, #24]	; (400f6c <TARGET_IO_init+0x20>)
  400f54:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  400f56:	4b06      	ldr	r3, [pc, #24]	; (400f70 <TARGET_IO_init+0x24>)
  400f58:	4798      	blx	r3
  400f5a:	4602      	mov	r2, r0
  400f5c:	4905      	ldr	r1, [pc, #20]	; (400f74 <TARGET_IO_init+0x28>)
  400f5e:	4806      	ldr	r0, [pc, #24]	; (400f78 <TARGET_IO_init+0x2c>)
  400f60:	4b06      	ldr	r3, [pc, #24]	; (400f7c <TARGET_IO_init+0x30>)
  400f62:	4798      	blx	r3
  400f64:	bd08      	pop	{r3, pc}
  400f66:	bf00      	nop
  400f68:	00400f35 	.word	0x00400f35
  400f6c:	00400ee9 	.word	0x00400ee9
  400f70:	004022e9 	.word	0x004022e9
  400f74:	40028000 	.word	0x40028000
  400f78:	20401400 	.word	0x20401400
  400f7c:	00401591 	.word	0x00401591

00400f80 <system_init>:
}

void system_init(void)
{
  400f80:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400f82:	4b28      	ldr	r3, [pc, #160]	; (401024 <system_init+0xa4>)
  400f84:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f86:	4b28      	ldr	r3, [pc, #160]	; (401028 <system_init+0xa8>)
  400f88:	699b      	ldr	r3, [r3, #24]
  400f8a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400f8e:	d103      	bne.n	400f98 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400f94:	4b24      	ldr	r3, [pc, #144]	; (401028 <system_init+0xa8>)
  400f96:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f98:	4b23      	ldr	r3, [pc, #140]	; (401028 <system_init+0xa8>)
  400f9a:	699b      	ldr	r3, [r3, #24]
  400f9c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400fa0:	d103      	bne.n	400faa <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fa6:	4b20      	ldr	r3, [pc, #128]	; (401028 <system_init+0xa8>)
  400fa8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400faa:	4b1f      	ldr	r3, [pc, #124]	; (401028 <system_init+0xa8>)
  400fac:	699b      	ldr	r3, [r3, #24]
  400fae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400fb2:	d103      	bne.n	400fbc <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400fb8:	4b1b      	ldr	r3, [pc, #108]	; (401028 <system_init+0xa8>)
  400fba:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fbc:	4b1a      	ldr	r3, [pc, #104]	; (401028 <system_init+0xa8>)
  400fbe:	699b      	ldr	r3, [r3, #24]
  400fc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fc4:	d103      	bne.n	400fce <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400fca:	4b17      	ldr	r3, [pc, #92]	; (401028 <system_init+0xa8>)
  400fcc:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400fce:	4a17      	ldr	r2, [pc, #92]	; (40102c <system_init+0xac>)
  400fd0:	6853      	ldr	r3, [r2, #4]
  400fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400fd6:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_SODR = mask;
  400fd8:	4b15      	ldr	r3, [pc, #84]	; (401030 <system_init+0xb0>)
  400fda:	2201      	movs	r2, #1
  400fdc:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400fde:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400fe0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
  400fea:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400fec:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400fee:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ff0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ff8:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ffa:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ffc:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(RF24_CE, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(RF24_CE, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400ffe:	4b0d      	ldr	r3, [pc, #52]	; (401034 <system_init+0xb4>)
  401000:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  401002:	4b0d      	ldr	r3, [pc, #52]	; (401038 <system_init+0xb8>)
  401004:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  401006:	4b0d      	ldr	r3, [pc, #52]	; (40103c <system_init+0xbc>)
  401008:	4798      	blx	r3

	PWM_0_init();
  40100a:	4b0d      	ldr	r3, [pc, #52]	; (401040 <system_init+0xc0>)
  40100c:	4798      	blx	r3

	SPI_0_init();
  40100e:	4b0d      	ldr	r3, [pc, #52]	; (401044 <system_init+0xc4>)
  401010:	4798      	blx	r3

	I2C_0_init();
  401012:	4b0d      	ldr	r3, [pc, #52]	; (401048 <system_init+0xc8>)
  401014:	4798      	blx	r3

	delay_driver_init();
  401016:	4b0d      	ldr	r3, [pc, #52]	; (40104c <system_init+0xcc>)
  401018:	4798      	blx	r3

	TARGET_IO_init();
  40101a:	4b0d      	ldr	r3, [pc, #52]	; (401050 <system_init+0xd0>)
  40101c:	4798      	blx	r3

	ext_irq_init();
  40101e:	4b0d      	ldr	r3, [pc, #52]	; (401054 <system_init+0xd4>)
  401020:	4798      	blx	r3
  401022:	bd08      	pop	{r3, pc}
  401024:	004017a1 	.word	0x004017a1
  401028:	400e0600 	.word	0x400e0600
  40102c:	400e1850 	.word	0x400e1850
  401030:	400e0e00 	.word	0x400e0e00
  401034:	00400cb9 	.word	0x00400cb9
  401038:	00400ce5 	.word	0x00400ce5
  40103c:	00400cf9 	.word	0x00400cf9
  401040:	00400d8d 	.word	0x00400d8d
  401044:	00400e25 	.word	0x00400e25
  401048:	00400ead 	.word	0x00400ead
  40104c:	00400ed5 	.word	0x00400ed5
  401050:	00400f4d 	.word	0x00400f4d
  401054:	004011e9 	.word	0x004011e9

00401058 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  401058:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40105a:	4604      	mov	r4, r0
  40105c:	460d      	mov	r5, r1
  40105e:	2800      	cmp	r0, #0
  401060:	bf18      	it	ne
  401062:	2900      	cmpne	r1, #0
  401064:	bf14      	ite	ne
  401066:	2001      	movne	r0, #1
  401068:	2000      	moveq	r0, #0
  40106a:	2239      	movs	r2, #57	; 0x39
  40106c:	4903      	ldr	r1, [pc, #12]	; (40107c <adc_sync_init+0x24>)
  40106e:	4b04      	ldr	r3, [pc, #16]	; (401080 <adc_sync_init+0x28>)
  401070:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  401072:	4629      	mov	r1, r5
  401074:	4620      	mov	r0, r4
  401076:	4b03      	ldr	r3, [pc, #12]	; (401084 <adc_sync_init+0x2c>)
  401078:	4798      	blx	r3
}
  40107a:	bd38      	pop	{r3, r4, r5, pc}
  40107c:	00404968 	.word	0x00404968
  401080:	00401605 	.word	0x00401605
  401084:	00401725 	.word	0x00401725

00401088 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  401088:	b538      	push	{r3, r4, r5, lr}
  40108a:	460d      	mov	r5, r1
	ASSERT(descr);
  40108c:	4604      	mov	r4, r0
  40108e:	224e      	movs	r2, #78	; 0x4e
  401090:	4905      	ldr	r1, [pc, #20]	; (4010a8 <adc_sync_enable_channel+0x20>)
  401092:	3000      	adds	r0, #0
  401094:	bf18      	it	ne
  401096:	2001      	movne	r0, #1
  401098:	4b04      	ldr	r3, [pc, #16]	; (4010ac <adc_sync_enable_channel+0x24>)
  40109a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  40109c:	4629      	mov	r1, r5
  40109e:	4620      	mov	r0, r4
  4010a0:	4b03      	ldr	r3, [pc, #12]	; (4010b0 <adc_sync_enable_channel+0x28>)
  4010a2:	4798      	blx	r3

	return ERR_NONE;
}
  4010a4:	2000      	movs	r0, #0
  4010a6:	bd38      	pop	{r3, r4, r5, pc}
  4010a8:	00404968 	.word	0x00404968
  4010ac:	00401605 	.word	0x00401605
  4010b0:	0040175d 	.word	0x0040175d

004010b4 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  4010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4010b8:	460d      	mov	r5, r1
  4010ba:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  4010bc:	4607      	mov	r7, r0
  4010be:	4690      	mov	r8, r2
  4010c0:	2800      	cmp	r0, #0
  4010c2:	bf18      	it	ne
  4010c4:	2a00      	cmpne	r2, #0
  4010c6:	d002      	beq.n	4010ce <adc_sync_read_channel+0x1a>
  4010c8:	b9cb      	cbnz	r3, 4010fe <adc_sync_read_channel+0x4a>
  4010ca:	2000      	movs	r0, #0
  4010cc:	e000      	b.n	4010d0 <adc_sync_read_channel+0x1c>
  4010ce:	2000      	movs	r0, #0
  4010d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 401150 <adc_sync_read_channel+0x9c>
  4010d4:	2267      	movs	r2, #103	; 0x67
  4010d6:	4651      	mov	r1, sl
  4010d8:	4e18      	ldr	r6, [pc, #96]	; (40113c <adc_sync_read_channel+0x88>)
  4010da:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  4010dc:	463c      	mov	r4, r7
  4010de:	4638      	mov	r0, r7
  4010e0:	4b17      	ldr	r3, [pc, #92]	; (401140 <adc_sync_read_channel+0x8c>)
  4010e2:	4798      	blx	r3
  4010e4:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  4010e6:	fb99 f0f0 	sdiv	r0, r9, r0
  4010ea:	fb07 9010 	mls	r0, r7, r0, r9
  4010ee:	2269      	movs	r2, #105	; 0x69
  4010f0:	4651      	mov	r1, sl
  4010f2:	fab0 f080 	clz	r0, r0
  4010f6:	0940      	lsrs	r0, r0, #5
  4010f8:	47b0      	blx	r6
	uint16_t offset = 0;
  4010fa:	2600      	movs	r6, #0
  4010fc:	e005      	b.n	40110a <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  4010fe:	2001      	movs	r0, #1
  401100:	e7e6      	b.n	4010d0 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  401102:	443e      	add	r6, r7
  401104:	b2b6      	uxth	r6, r6
	} while (offset < length);
  401106:	45b1      	cmp	r9, r6
  401108:	d915      	bls.n	401136 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  40110a:	4620      	mov	r0, r4
  40110c:	4b0d      	ldr	r3, [pc, #52]	; (401144 <adc_sync_read_channel+0x90>)
  40110e:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  401110:	4629      	mov	r1, r5
  401112:	4620      	mov	r0, r4
  401114:	4b0c      	ldr	r3, [pc, #48]	; (401148 <adc_sync_read_channel+0x94>)
  401116:	4798      	blx	r3
  401118:	2800      	cmp	r0, #0
  40111a:	d0f9      	beq.n	401110 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  40111c:	4629      	mov	r1, r5
  40111e:	4620      	mov	r0, r4
  401120:	4b0a      	ldr	r3, [pc, #40]	; (40114c <adc_sync_read_channel+0x98>)
  401122:	4798      	blx	r3
		buffer[offset] = result;
  401124:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  401128:	2f01      	cmp	r7, #1
  40112a:	d9ea      	bls.n	401102 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  40112c:	1c73      	adds	r3, r6, #1
  40112e:	0a00      	lsrs	r0, r0, #8
  401130:	f808 0003 	strb.w	r0, [r8, r3]
  401134:	e7e5      	b.n	401102 <adc_sync_read_channel+0x4e>

	return offset;
}
  401136:	4630      	mov	r0, r6
  401138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40113c:	00401605 	.word	0x00401605
  401140:	00401769 	.word	0x00401769
  401144:	00401781 	.word	0x00401781
  401148:	0040176d 	.word	0x0040176d
  40114c:	00401789 	.word	0x00401789
  401150:	00404968 	.word	0x00404968

00401154 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401154:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  401158:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40115a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40115c:	f3bf 8f5f 	dmb	sy
  401160:	4770      	bx	lr

00401162 <atomic_leave_critical>:
  401162:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  401166:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401168:	f383 8810 	msr	PRIMASK, r3
  40116c:	4770      	bx	lr
	...

00401170 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  401170:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  401172:	4b02      	ldr	r3, [pc, #8]	; (40117c <delay_init+0xc>)
  401174:	6018      	str	r0, [r3, #0]
  401176:	4b02      	ldr	r3, [pc, #8]	; (401180 <delay_init+0x10>)
  401178:	4798      	blx	r3
  40117a:	bd08      	pop	{r3, pc}
  40117c:	20400094 	.word	0x20400094
  401180:	00401e7d 	.word	0x00401e7d

00401184 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  401184:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  401186:	4b04      	ldr	r3, [pc, #16]	; (401198 <delay_us+0x14>)
  401188:	681c      	ldr	r4, [r3, #0]
  40118a:	4b04      	ldr	r3, [pc, #16]	; (40119c <delay_us+0x18>)
  40118c:	4798      	blx	r3
  40118e:	4601      	mov	r1, r0
  401190:	4620      	mov	r0, r4
  401192:	4b03      	ldr	r3, [pc, #12]	; (4011a0 <delay_us+0x1c>)
  401194:	4798      	blx	r3
  401196:	bd10      	pop	{r4, pc}
  401198:	20400094 	.word	0x20400094
  40119c:	00401795 	.word	0x00401795
  4011a0:	00401e89 	.word	0x00401e89

004011a4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4011a4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4011a6:	2502      	movs	r5, #2
  4011a8:	2400      	movs	r4, #0

	while (upper >= lower) {
  4011aa:	e007      	b.n	4011bc <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4011ac:	4a0d      	ldr	r2, [pc, #52]	; (4011e4 <process_ext_irq+0x40>)
  4011ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4011b2:	b1b3      	cbz	r3, 4011e2 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4011b4:	4798      	blx	r3
  4011b6:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4011b8:	3a01      	subs	r2, #1
  4011ba:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4011bc:	42ac      	cmp	r4, r5
  4011be:	d810      	bhi.n	4011e2 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4011c0:	192b      	adds	r3, r5, r4
  4011c2:	105b      	asrs	r3, r3, #1
  4011c4:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  4011c6:	2a01      	cmp	r2, #1
  4011c8:	d80b      	bhi.n	4011e2 <process_ext_irq+0x3e>
  4011ca:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  4011cc:	4905      	ldr	r1, [pc, #20]	; (4011e4 <process_ext_irq+0x40>)
  4011ce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4011d2:	6849      	ldr	r1, [r1, #4]
  4011d4:	4281      	cmp	r1, r0
  4011d6:	d0e9      	beq.n	4011ac <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4011d8:	4281      	cmp	r1, r0
  4011da:	d2ed      	bcs.n	4011b8 <process_ext_irq+0x14>
			lower = middle + 1;
  4011dc:	3201      	adds	r2, #1
  4011de:	b2d4      	uxtb	r4, r2
  4011e0:	e7ec      	b.n	4011bc <process_ext_irq+0x18>
  4011e2:	bd38      	pop	{r3, r4, r5, pc}
  4011e4:	20400098 	.word	0x20400098

004011e8 <ext_irq_init>:
{
  4011e8:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4011ea:	2300      	movs	r3, #0
  4011ec:	e00a      	b.n	401204 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4011ee:	4a08      	ldr	r2, [pc, #32]	; (401210 <ext_irq_init+0x28>)
  4011f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4011f4:	f04f 30ff 	mov.w	r0, #4294967295
  4011f8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4011fa:	2100      	movs	r1, #0
  4011fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401200:	3301      	adds	r3, #1
  401202:	b29b      	uxth	r3, r3
  401204:	2b01      	cmp	r3, #1
  401206:	d9f2      	bls.n	4011ee <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401208:	4802      	ldr	r0, [pc, #8]	; (401214 <ext_irq_init+0x2c>)
  40120a:	4b03      	ldr	r3, [pc, #12]	; (401218 <ext_irq_init+0x30>)
  40120c:	4798      	blx	r3
}
  40120e:	bd08      	pop	{r3, pc}
  401210:	20400098 	.word	0x20400098
  401214:	004011a5 	.word	0x004011a5
  401218:	00401a29 	.word	0x00401a29

0040121c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  40121c:	b510      	push	{r4, lr}
  40121e:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  401220:	8903      	ldrh	r3, [r0, #8]
  401222:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  401226:	4614      	mov	r4, r2
  401228:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  40122a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40122e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  401232:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  401234:	a901      	add	r1, sp, #4
  401236:	3814      	subs	r0, #20
  401238:	4b03      	ldr	r3, [pc, #12]	; (401248 <i2c_m_sync_write+0x2c>)
  40123a:	4798      	blx	r3

	if (ret) {
  40123c:	b910      	cbnz	r0, 401244 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  40123e:	4620      	mov	r0, r4
  401240:	b004      	add	sp, #16
  401242:	bd10      	pop	{r4, pc}
		return ret;
  401244:	4604      	mov	r4, r0
  401246:	e7fa      	b.n	40123e <i2c_m_sync_write+0x22>
  401248:	00401f6d 	.word	0x00401f6d

0040124c <i2c_m_sync_read>:
{
  40124c:	b510      	push	{r4, lr}
  40124e:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  401250:	8903      	ldrh	r3, [r0, #8]
  401252:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  401256:	4614      	mov	r4, r2
  401258:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  40125a:	f248 0301 	movw	r3, #32769	; 0x8001
  40125e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  401262:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  401264:	a901      	add	r1, sp, #4
  401266:	3814      	subs	r0, #20
  401268:	4b03      	ldr	r3, [pc, #12]	; (401278 <i2c_m_sync_read+0x2c>)
  40126a:	4798      	blx	r3
	if (ret) {
  40126c:	b910      	cbnz	r0, 401274 <i2c_m_sync_read+0x28>
}
  40126e:	4620      	mov	r0, r4
  401270:	b004      	add	sp, #16
  401272:	bd10      	pop	{r4, pc}
		return ret;
  401274:	4604      	mov	r4, r0
  401276:	e7fa      	b.n	40126e <i2c_m_sync_read+0x22>
  401278:	00401f6d 	.word	0x00401f6d

0040127c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  40127c:	b538      	push	{r3, r4, r5, lr}
  40127e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  401280:	4604      	mov	r4, r0
  401282:	225e      	movs	r2, #94	; 0x5e
  401284:	4908      	ldr	r1, [pc, #32]	; (4012a8 <i2c_m_sync_init+0x2c>)
  401286:	3000      	adds	r0, #0
  401288:	bf18      	it	ne
  40128a:	2001      	movne	r0, #1
  40128c:	4b07      	ldr	r3, [pc, #28]	; (4012ac <i2c_m_sync_init+0x30>)
  40128e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  401290:	4629      	mov	r1, r5
  401292:	4620      	mov	r0, r4
  401294:	4b06      	ldr	r3, [pc, #24]	; (4012b0 <i2c_m_sync_init+0x34>)
  401296:	4798      	blx	r3
	if (init_status) {
  401298:	4603      	mov	r3, r0
  40129a:	b918      	cbnz	r0, 4012a4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  40129c:	4a05      	ldr	r2, [pc, #20]	; (4012b4 <i2c_m_sync_init+0x38>)
  40129e:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  4012a0:	4a05      	ldr	r2, [pc, #20]	; (4012b8 <i2c_m_sync_init+0x3c>)
  4012a2:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  4012a4:	4618      	mov	r0, r3
  4012a6:	bd38      	pop	{r3, r4, r5, pc}
  4012a8:	00404984 	.word	0x00404984
  4012ac:	00401605 	.word	0x00401605
  4012b0:	00401f01 	.word	0x00401f01
  4012b4:	0040124d 	.word	0x0040124d
  4012b8:	0040121d 	.word	0x0040121d

004012bc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
  4012bc:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
  4012be:	4b01      	ldr	r3, [pc, #4]	; (4012c4 <i2c_m_sync_enable+0x8>)
  4012c0:	4798      	blx	r3
}
  4012c2:	bd08      	pop	{r3, pc}
  4012c4:	00401f49 	.word	0x00401f49

004012c8 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
  4012c8:	f3c1 0109 	ubfx	r1, r1, #0, #10
  4012cc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
  4012d0:	430a      	orrs	r2, r1
  4012d2:	8382      	strh	r2, [r0, #28]
}
  4012d4:	4610      	mov	r0, r2
  4012d6:	4770      	bx	lr

004012d8 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
  4012d8:	3014      	adds	r0, #20
  4012da:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
  4012dc:	2000      	movs	r0, #0
  4012de:	4770      	bx	lr

004012e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4012e0:	b570      	push	{r4, r5, r6, lr}
  4012e2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4012e4:	4604      	mov	r4, r0
  4012e6:	460d      	mov	r5, r1
  4012e8:	2800      	cmp	r0, #0
  4012ea:	bf18      	it	ne
  4012ec:	2900      	cmpne	r1, #0
  4012ee:	bf14      	ite	ne
  4012f0:	2001      	movne	r0, #1
  4012f2:	2000      	moveq	r0, #0
  4012f4:	2234      	movs	r2, #52	; 0x34
  4012f6:	4904      	ldr	r1, [pc, #16]	; (401308 <io_write+0x28>)
  4012f8:	4b04      	ldr	r3, [pc, #16]	; (40130c <io_write+0x2c>)
  4012fa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4012fc:	6823      	ldr	r3, [r4, #0]
  4012fe:	4632      	mov	r2, r6
  401300:	4629      	mov	r1, r5
  401302:	4620      	mov	r0, r4
  401304:	4798      	blx	r3
}
  401306:	bd70      	pop	{r4, r5, r6, pc}
  401308:	004049a0 	.word	0x004049a0
  40130c:	00401605 	.word	0x00401605

00401310 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401310:	b570      	push	{r4, r5, r6, lr}
  401312:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401314:	4604      	mov	r4, r0
  401316:	460d      	mov	r5, r1
  401318:	2800      	cmp	r0, #0
  40131a:	bf18      	it	ne
  40131c:	2900      	cmpne	r1, #0
  40131e:	bf14      	ite	ne
  401320:	2001      	movne	r0, #1
  401322:	2000      	moveq	r0, #0
  401324:	223d      	movs	r2, #61	; 0x3d
  401326:	4904      	ldr	r1, [pc, #16]	; (401338 <io_read+0x28>)
  401328:	4b04      	ldr	r3, [pc, #16]	; (40133c <io_read+0x2c>)
  40132a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40132c:	6863      	ldr	r3, [r4, #4]
  40132e:	4632      	mov	r2, r6
  401330:	4629      	mov	r1, r5
  401332:	4620      	mov	r0, r4
  401334:	4798      	blx	r3
}
  401336:	bd70      	pop	{r4, r5, r6, pc}
  401338:	004049a0 	.word	0x004049a0
  40133c:	00401605 	.word	0x00401605

00401340 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401340:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401342:	6943      	ldr	r3, [r0, #20]
  401344:	b103      	cbz	r3, 401348 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  401346:	4798      	blx	r3
  401348:	bd08      	pop	{r3, pc}

0040134a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40134a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  40134c:	6983      	ldr	r3, [r0, #24]
  40134e:	b103      	cbz	r3, 401352 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401350:	4798      	blx	r3
  401352:	bd08      	pop	{r3, pc}

00401354 <pwm_init>:
{
  401354:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401356:	4604      	mov	r4, r0
  401358:	460d      	mov	r5, r1
  40135a:	2800      	cmp	r0, #0
  40135c:	bf18      	it	ne
  40135e:	2900      	cmpne	r1, #0
  401360:	bf14      	ite	ne
  401362:	2001      	movne	r0, #1
  401364:	2000      	moveq	r0, #0
  401366:	2233      	movs	r2, #51	; 0x33
  401368:	4906      	ldr	r1, [pc, #24]	; (401384 <pwm_init+0x30>)
  40136a:	4b07      	ldr	r3, [pc, #28]	; (401388 <pwm_init+0x34>)
  40136c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40136e:	4629      	mov	r1, r5
  401370:	4620      	mov	r0, r4
  401372:	4b06      	ldr	r3, [pc, #24]	; (40138c <pwm_init+0x38>)
  401374:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  401376:	4b06      	ldr	r3, [pc, #24]	; (401390 <pwm_init+0x3c>)
  401378:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  40137a:	4b06      	ldr	r3, [pc, #24]	; (401394 <pwm_init+0x40>)
  40137c:	6063      	str	r3, [r4, #4]
}
  40137e:	2000      	movs	r0, #0
  401380:	bd38      	pop	{r3, r4, r5, pc}
  401382:	bf00      	nop
  401384:	004049b4 	.word	0x004049b4
  401388:	00401605 	.word	0x00401605
  40138c:	00401b69 	.word	0x00401b69
  401390:	00401341 	.word	0x00401341
  401394:	0040134b 	.word	0x0040134b

00401398 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  401398:	b538      	push	{r3, r4, r5, lr}
  40139a:	460d      	mov	r5, r1
	ASSERT(spi);
  40139c:	4604      	mov	r4, r0
  40139e:	2239      	movs	r2, #57	; 0x39
  4013a0:	4903      	ldr	r1, [pc, #12]	; (4013b0 <spi_m_sync_set_func_ptr+0x18>)
  4013a2:	3000      	adds	r0, #0
  4013a4:	bf18      	it	ne
  4013a6:	2001      	movne	r0, #1
  4013a8:	4b02      	ldr	r3, [pc, #8]	; (4013b4 <spi_m_sync_set_func_ptr+0x1c>)
  4013aa:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  4013ac:	6025      	str	r5, [r4, #0]
  4013ae:	bd38      	pop	{r3, r4, r5, pc}
  4013b0:	004049cc 	.word	0x004049cc
  4013b4:	00401605 	.word	0x00401605

004013b8 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4013b8:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  4013ba:	4604      	mov	r4, r0
  4013bc:	460d      	mov	r5, r1
  4013be:	2800      	cmp	r0, #0
  4013c0:	bf18      	it	ne
  4013c2:	2900      	cmpne	r1, #0
  4013c4:	bf14      	ite	ne
  4013c6:	2001      	movne	r0, #1
  4013c8:	2000      	moveq	r0, #0
  4013ca:	2240      	movs	r2, #64	; 0x40
  4013cc:	4909      	ldr	r1, [pc, #36]	; (4013f4 <spi_m_sync_init+0x3c>)
  4013ce:	4b0a      	ldr	r3, [pc, #40]	; (4013f8 <spi_m_sync_init+0x40>)
  4013d0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4013d2:	4620      	mov	r0, r4
  4013d4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4013d8:	4629      	mov	r1, r5
  4013da:	4b08      	ldr	r3, [pc, #32]	; (4013fc <spi_m_sync_init+0x44>)
  4013dc:	4798      	blx	r3

	if (rc < 0) {
  4013de:	2800      	cmp	r0, #0
  4013e0:	db07      	blt.n	4013f2 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  4013e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4013e6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4013e8:	4b05      	ldr	r3, [pc, #20]	; (401400 <spi_m_sync_init+0x48>)
  4013ea:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4013ec:	4b05      	ldr	r3, [pc, #20]	; (401404 <spi_m_sync_init+0x4c>)
  4013ee:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4013f0:	2000      	movs	r0, #0
}
  4013f2:	bd38      	pop	{r3, r4, r5, pc}
  4013f4:	004049cc 	.word	0x004049cc
  4013f8:	00401605 	.word	0x00401605
  4013fc:	00401cbd 	.word	0x00401cbd
  401400:	00401485 	.word	0x00401485
  401404:	00401449 	.word	0x00401449

00401408 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  401408:	b530      	push	{r4, r5, lr}
  40140a:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  40140c:	4605      	mov	r5, r0
  40140e:	460c      	mov	r4, r1
  401410:	2800      	cmp	r0, #0
  401412:	bf18      	it	ne
  401414:	2900      	cmpne	r1, #0
  401416:	bf14      	ite	ne
  401418:	2001      	movne	r0, #1
  40141a:	2000      	moveq	r0, #0
  40141c:	22b3      	movs	r2, #179	; 0xb3
  40141e:	4907      	ldr	r1, [pc, #28]	; (40143c <spi_m_sync_transfer+0x34>)
  401420:	4b07      	ldr	r3, [pc, #28]	; (401440 <spi_m_sync_transfer+0x38>)
  401422:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  401424:	6823      	ldr	r3, [r4, #0]
  401426:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  401428:	6863      	ldr	r3, [r4, #4]
  40142a:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  40142c:	68a3      	ldr	r3, [r4, #8]
  40142e:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  401430:	a901      	add	r1, sp, #4
  401432:	1d28      	adds	r0, r5, #4
  401434:	4b03      	ldr	r3, [pc, #12]	; (401444 <spi_m_sync_transfer+0x3c>)
  401436:	4798      	blx	r3
}
  401438:	b005      	add	sp, #20
  40143a:	bd30      	pop	{r4, r5, pc}
  40143c:	004049cc 	.word	0x004049cc
  401440:	00401605 	.word	0x00401605
  401444:	00401d65 	.word	0x00401d65

00401448 <_spi_m_sync_io_write>:
{
  401448:	b570      	push	{r4, r5, r6, lr}
  40144a:	b084      	sub	sp, #16
  40144c:	460e      	mov	r6, r1
  40144e:	4615      	mov	r5, r2
	ASSERT(io);
  401450:	4604      	mov	r4, r0
  401452:	22a3      	movs	r2, #163	; 0xa3
  401454:	4908      	ldr	r1, [pc, #32]	; (401478 <_spi_m_sync_io_write+0x30>)
  401456:	3000      	adds	r0, #0
  401458:	bf18      	it	ne
  40145a:	2001      	movne	r0, #1
  40145c:	4b07      	ldr	r3, [pc, #28]	; (40147c <_spi_m_sync_io_write+0x34>)
  40145e:	4798      	blx	r3
	xfer.rxbuf = 0;
  401460:	2300      	movs	r3, #0
  401462:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  401464:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  401466:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  401468:	a901      	add	r1, sp, #4
  40146a:	f1a4 000c 	sub.w	r0, r4, #12
  40146e:	4b04      	ldr	r3, [pc, #16]	; (401480 <_spi_m_sync_io_write+0x38>)
  401470:	4798      	blx	r3
}
  401472:	b004      	add	sp, #16
  401474:	bd70      	pop	{r4, r5, r6, pc}
  401476:	bf00      	nop
  401478:	004049cc 	.word	0x004049cc
  40147c:	00401605 	.word	0x00401605
  401480:	00401409 	.word	0x00401409

00401484 <_spi_m_sync_io_read>:
{
  401484:	b570      	push	{r4, r5, r6, lr}
  401486:	b084      	sub	sp, #16
  401488:	460e      	mov	r6, r1
  40148a:	4615      	mov	r5, r2
	ASSERT(io);
  40148c:	4604      	mov	r4, r0
  40148e:	2287      	movs	r2, #135	; 0x87
  401490:	4908      	ldr	r1, [pc, #32]	; (4014b4 <_spi_m_sync_io_read+0x30>)
  401492:	3000      	adds	r0, #0
  401494:	bf18      	it	ne
  401496:	2001      	movne	r0, #1
  401498:	4b07      	ldr	r3, [pc, #28]	; (4014b8 <_spi_m_sync_io_read+0x34>)
  40149a:	4798      	blx	r3
	xfer.rxbuf = buf;
  40149c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  40149e:	2300      	movs	r3, #0
  4014a0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  4014a2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4014a4:	a901      	add	r1, sp, #4
  4014a6:	f1a4 000c 	sub.w	r0, r4, #12
  4014aa:	4b04      	ldr	r3, [pc, #16]	; (4014bc <_spi_m_sync_io_read+0x38>)
  4014ac:	4798      	blx	r3
}
  4014ae:	b004      	add	sp, #16
  4014b0:	bd70      	pop	{r4, r5, r6, pc}
  4014b2:	bf00      	nop
  4014b4:	004049cc 	.word	0x004049cc
  4014b8:	00401605 	.word	0x00401605
  4014bc:	00401409 	.word	0x00401409

004014c0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014c2:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4014c4:	4605      	mov	r5, r0
  4014c6:	460f      	mov	r7, r1
  4014c8:	2800      	cmp	r0, #0
  4014ca:	bf18      	it	ne
  4014cc:	2900      	cmpne	r1, #0
  4014ce:	d002      	beq.n	4014d6 <usart_sync_write+0x16>
  4014d0:	bb0a      	cbnz	r2, 401516 <usart_sync_write+0x56>
  4014d2:	2000      	movs	r0, #0
  4014d4:	e000      	b.n	4014d8 <usart_sync_write+0x18>
  4014d6:	2000      	movs	r0, #0
  4014d8:	22f1      	movs	r2, #241	; 0xf1
  4014da:	4910      	ldr	r1, [pc, #64]	; (40151c <usart_sync_write+0x5c>)
  4014dc:	4b10      	ldr	r3, [pc, #64]	; (401520 <usart_sync_write+0x60>)
  4014de:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4014e0:	f105 0408 	add.w	r4, r5, #8
  4014e4:	4620      	mov	r0, r4
  4014e6:	4b0f      	ldr	r3, [pc, #60]	; (401524 <usart_sync_write+0x64>)
  4014e8:	4798      	blx	r3
  4014ea:	2800      	cmp	r0, #0
  4014ec:	d0f8      	beq.n	4014e0 <usart_sync_write+0x20>
  4014ee:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4014f0:	5d79      	ldrb	r1, [r7, r5]
  4014f2:	4620      	mov	r0, r4
  4014f4:	4b0c      	ldr	r3, [pc, #48]	; (401528 <usart_sync_write+0x68>)
  4014f6:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4014f8:	4620      	mov	r0, r4
  4014fa:	4b0a      	ldr	r3, [pc, #40]	; (401524 <usart_sync_write+0x64>)
  4014fc:	4798      	blx	r3
  4014fe:	2800      	cmp	r0, #0
  401500:	d0fa      	beq.n	4014f8 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401502:	3501      	adds	r5, #1
  401504:	42b5      	cmp	r5, r6
  401506:	d3f3      	bcc.n	4014f0 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401508:	4620      	mov	r0, r4
  40150a:	4b08      	ldr	r3, [pc, #32]	; (40152c <usart_sync_write+0x6c>)
  40150c:	4798      	blx	r3
  40150e:	2800      	cmp	r0, #0
  401510:	d0fa      	beq.n	401508 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401512:	4628      	mov	r0, r5
  401514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401516:	2001      	movs	r0, #1
  401518:	e7de      	b.n	4014d8 <usart_sync_write+0x18>
  40151a:	bf00      	nop
  40151c:	004049e8 	.word	0x004049e8
  401520:	00401605 	.word	0x00401605
  401524:	00402271 	.word	0x00402271
  401528:	00402229 	.word	0x00402229
  40152c:	00402299 	.word	0x00402299

00401530 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401534:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401536:	4605      	mov	r5, r0
  401538:	4688      	mov	r8, r1
  40153a:	2800      	cmp	r0, #0
  40153c:	bf18      	it	ne
  40153e:	2900      	cmpne	r1, #0
  401540:	d002      	beq.n	401548 <usart_sync_read+0x18>
  401542:	b9d2      	cbnz	r2, 40157a <usart_sync_read+0x4a>
  401544:	2000      	movs	r0, #0
  401546:	e000      	b.n	40154a <usart_sync_read+0x1a>
  401548:	2000      	movs	r0, #0
  40154a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40154e:	490c      	ldr	r1, [pc, #48]	; (401580 <usart_sync_read+0x50>)
  401550:	4b0c      	ldr	r3, [pc, #48]	; (401584 <usart_sync_read+0x54>)
  401552:	4798      	blx	r3
	uint32_t                      offset = 0;
  401554:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401556:	f105 0408 	add.w	r4, r5, #8
  40155a:	4620      	mov	r0, r4
  40155c:	4b0a      	ldr	r3, [pc, #40]	; (401588 <usart_sync_read+0x58>)
  40155e:	4798      	blx	r3
  401560:	2800      	cmp	r0, #0
  401562:	d0f8      	beq.n	401556 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401564:	4620      	mov	r0, r4
  401566:	4b09      	ldr	r3, [pc, #36]	; (40158c <usart_sync_read+0x5c>)
  401568:	4798      	blx	r3
  40156a:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40156e:	3601      	adds	r6, #1
  401570:	42be      	cmp	r6, r7
  401572:	d3f0      	bcc.n	401556 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401574:	4630      	mov	r0, r6
  401576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40157a:	2001      	movs	r0, #1
  40157c:	e7e5      	b.n	40154a <usart_sync_read+0x1a>
  40157e:	bf00      	nop
  401580:	004049e8 	.word	0x004049e8
  401584:	00401605 	.word	0x00401605
  401588:	004022c1 	.word	0x004022c1
  40158c:	0040224d 	.word	0x0040224d

00401590 <usart_sync_init>:
{
  401590:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401592:	4604      	mov	r4, r0
  401594:	460d      	mov	r5, r1
  401596:	2800      	cmp	r0, #0
  401598:	bf18      	it	ne
  40159a:	2900      	cmpne	r1, #0
  40159c:	bf14      	ite	ne
  40159e:	2001      	movne	r0, #1
  4015a0:	2000      	moveq	r0, #0
  4015a2:	2234      	movs	r2, #52	; 0x34
  4015a4:	4907      	ldr	r1, [pc, #28]	; (4015c4 <usart_sync_init+0x34>)
  4015a6:	4b08      	ldr	r3, [pc, #32]	; (4015c8 <usart_sync_init+0x38>)
  4015a8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4015aa:	4629      	mov	r1, r5
  4015ac:	f104 0008 	add.w	r0, r4, #8
  4015b0:	4b06      	ldr	r3, [pc, #24]	; (4015cc <usart_sync_init+0x3c>)
  4015b2:	4798      	blx	r3
	if (init_status) {
  4015b4:	4603      	mov	r3, r0
  4015b6:	b918      	cbnz	r0, 4015c0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4015b8:	4a05      	ldr	r2, [pc, #20]	; (4015d0 <usart_sync_init+0x40>)
  4015ba:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4015bc:	4a05      	ldr	r2, [pc, #20]	; (4015d4 <usart_sync_init+0x44>)
  4015be:	6022      	str	r2, [r4, #0]
}
  4015c0:	4618      	mov	r0, r3
  4015c2:	bd38      	pop	{r3, r4, r5, pc}
  4015c4:	004049e8 	.word	0x004049e8
  4015c8:	00401605 	.word	0x00401605
  4015cc:	004021bd 	.word	0x004021bd
  4015d0:	00401531 	.word	0x00401531
  4015d4:	004014c1 	.word	0x004014c1

004015d8 <usart_sync_enable>:
{
  4015d8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4015da:	4604      	mov	r4, r0
  4015dc:	2253      	movs	r2, #83	; 0x53
  4015de:	4906      	ldr	r1, [pc, #24]	; (4015f8 <usart_sync_enable+0x20>)
  4015e0:	3000      	adds	r0, #0
  4015e2:	bf18      	it	ne
  4015e4:	2001      	movne	r0, #1
  4015e6:	4b05      	ldr	r3, [pc, #20]	; (4015fc <usart_sync_enable+0x24>)
  4015e8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4015ea:	f104 0008 	add.w	r0, r4, #8
  4015ee:	4b04      	ldr	r3, [pc, #16]	; (401600 <usart_sync_enable+0x28>)
  4015f0:	4798      	blx	r3
}
  4015f2:	2000      	movs	r0, #0
  4015f4:	bd10      	pop	{r4, pc}
  4015f6:	bf00      	nop
  4015f8:	004049e8 	.word	0x004049e8
  4015fc:	00401605 	.word	0x00401605
  401600:	004021f5 	.word	0x004021f5

00401604 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401604:	b900      	cbnz	r0, 401608 <assert+0x4>
		__asm("BKPT #0");
  401606:	be00      	bkpt	0x0000
  401608:	4770      	bx	lr
	...

0040160c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40160c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40160e:	4a06      	ldr	r2, [pc, #24]	; (401628 <_sbrk+0x1c>)
  401610:	6812      	ldr	r2, [r2, #0]
  401612:	b122      	cbz	r2, 40161e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401614:	4a04      	ldr	r2, [pc, #16]	; (401628 <_sbrk+0x1c>)
  401616:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401618:	4403      	add	r3, r0
  40161a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40161c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40161e:	4903      	ldr	r1, [pc, #12]	; (40162c <_sbrk+0x20>)
  401620:	4a01      	ldr	r2, [pc, #4]	; (401628 <_sbrk+0x1c>)
  401622:	6011      	str	r1, [r2, #0]
  401624:	e7f6      	b.n	401614 <_sbrk+0x8>
  401626:	bf00      	nop
  401628:	204000a8 	.word	0x204000a8
  40162c:	20401a50 	.word	0x20401a50

00401630 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401630:	f04f 30ff 	mov.w	r0, #4294967295
  401634:	4770      	bx	lr

00401636 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40163a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40163c:	2000      	movs	r0, #0
  40163e:	4770      	bx	lr

00401640 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401640:	2001      	movs	r0, #1
  401642:	4770      	bx	lr

00401644 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401644:	2000      	movs	r0, #0
  401646:	4770      	bx	lr

00401648 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401648:	2364      	movs	r3, #100	; 0x64
  40164a:	4a1d      	ldr	r2, [pc, #116]	; (4016c0 <_afec_init+0x78>)
  40164c:	fb03 2301 	mla	r3, r3, r1, r2
  401650:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401652:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401654:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401656:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401658:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  40165a:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  40165c:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  40165e:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401660:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401662:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401664:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401666:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401668:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  40166a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  40166c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  40166e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401674:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  40167a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  40167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401680:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401686:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40168a:	2200      	movs	r2, #0
  40168c:	2a0b      	cmp	r2, #11
  40168e:	d814      	bhi.n	4016ba <_afec_init+0x72>
{
  401690:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401692:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401694:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40169c:	4413      	add	r3, r2
  40169e:	330c      	adds	r3, #12
  4016a0:	4c07      	ldr	r4, [pc, #28]	; (4016c0 <_afec_init+0x78>)
  4016a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4016a6:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4016a8:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4016aa:	3201      	adds	r2, #1
  4016ac:	b2d2      	uxtb	r2, r2
  4016ae:	2a0b      	cmp	r2, #11
  4016b0:	d9ef      	bls.n	401692 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4016b2:	2000      	movs	r0, #0
  4016b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016b8:	4770      	bx	lr
  4016ba:	2000      	movs	r0, #0
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop
  4016c0:	00404a04 	.word	0x00404a04

004016c4 <_afec_get_hardware_index>:
{
  4016c4:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4016c6:	4b09      	ldr	r3, [pc, #36]	; (4016ec <_afec_get_hardware_index+0x28>)
  4016c8:	4298      	cmp	r0, r3
  4016ca:	d00a      	beq.n	4016e2 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4016cc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4016d0:	4298      	cmp	r0, r3
  4016d2:	d008      	beq.n	4016e6 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4016d4:	22a3      	movs	r2, #163	; 0xa3
  4016d6:	4906      	ldr	r1, [pc, #24]	; (4016f0 <_afec_get_hardware_index+0x2c>)
  4016d8:	2000      	movs	r0, #0
  4016da:	4b06      	ldr	r3, [pc, #24]	; (4016f4 <_afec_get_hardware_index+0x30>)
  4016dc:	4798      	blx	r3
	return 0;
  4016de:	2000      	movs	r0, #0
  4016e0:	bd08      	pop	{r3, pc}
		return 0;
  4016e2:	2000      	movs	r0, #0
  4016e4:	bd08      	pop	{r3, pc}
		return 1;
  4016e6:	2001      	movs	r0, #1
}
  4016e8:	bd08      	pop	{r3, pc}
  4016ea:	bf00      	nop
  4016ec:	4003c000 	.word	0x4003c000
  4016f0:	00404a68 	.word	0x00404a68
  4016f4:	00401605 	.word	0x00401605

004016f8 <_afec_get_regs>:
{
  4016f8:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4016fa:	4b08      	ldr	r3, [pc, #32]	; (40171c <_afec_get_regs+0x24>)
  4016fc:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4016fe:	2300      	movs	r3, #0
  401700:	b113      	cbz	r3, 401708 <_afec_get_regs+0x10>
	return 0;
  401702:	2300      	movs	r3, #0
}
  401704:	4618      	mov	r0, r3
  401706:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  401708:	2264      	movs	r2, #100	; 0x64
  40170a:	fb02 f203 	mul.w	r2, r2, r3
  40170e:	4904      	ldr	r1, [pc, #16]	; (401720 <_afec_get_regs+0x28>)
  401710:	5c8a      	ldrb	r2, [r1, r2]
  401712:	4290      	cmp	r0, r2
  401714:	d0f6      	beq.n	401704 <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401716:	3301      	adds	r3, #1
  401718:	b2db      	uxtb	r3, r3
  40171a:	e7f1      	b.n	401700 <_afec_get_regs+0x8>
  40171c:	004016c5 	.word	0x004016c5
  401720:	00404a04 	.word	0x00404a04

00401724 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  401724:	b538      	push	{r3, r4, r5, lr}
  401726:	460c      	mov	r4, r1
	ASSERT(device);
  401728:	4605      	mov	r5, r0
  40172a:	f44f 728d 	mov.w	r2, #282	; 0x11a
  40172e:	4907      	ldr	r1, [pc, #28]	; (40174c <_adc_sync_init+0x28>)
  401730:	3000      	adds	r0, #0
  401732:	bf18      	it	ne
  401734:	2001      	movne	r0, #1
  401736:	4b06      	ldr	r3, [pc, #24]	; (401750 <_adc_sync_init+0x2c>)
  401738:	4798      	blx	r3

	device->hw = hw;
  40173a:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40173c:	4620      	mov	r0, r4
  40173e:	4b05      	ldr	r3, [pc, #20]	; (401754 <_adc_sync_init+0x30>)
  401740:	4798      	blx	r3
  401742:	4601      	mov	r1, r0
  401744:	4620      	mov	r0, r4
  401746:	4b04      	ldr	r3, [pc, #16]	; (401758 <_adc_sync_init+0x34>)
  401748:	4798      	blx	r3
}
  40174a:	bd38      	pop	{r3, r4, r5, pc}
  40174c:	00404a68 	.word	0x00404a68
  401750:	00401605 	.word	0x00401605
  401754:	004016f9 	.word	0x004016f9
  401758:	00401649 	.word	0x00401649

0040175c <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  40175c:	6802      	ldr	r2, [r0, #0]
  40175e:	2301      	movs	r3, #1
  401760:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401764:	6151      	str	r1, [r2, #20]
  401766:	4770      	bx	lr

00401768 <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  401768:	2002      	movs	r0, #2
  40176a:	4770      	bx	lr

0040176c <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  40176c:	6802      	ldr	r2, [r0, #0]
  40176e:	2301      	movs	r3, #1
  401770:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  401774:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401776:	4219      	tst	r1, r3
}
  401778:	bf14      	ite	ne
  40177a:	2001      	movne	r0, #1
  40177c:	2000      	moveq	r0, #0
  40177e:	4770      	bx	lr

00401780 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401780:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401782:	2202      	movs	r2, #2
  401784:	601a      	str	r2, [r3, #0]
  401786:	4770      	bx	lr

00401788 <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  401788:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  40178a:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  40178c:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  40178e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401790:	b280      	uxth	r0, r0
  401792:	4770      	bx	lr

00401794 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401794:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401798:	fb03 f000 	mul.w	r0, r3, r0
  40179c:	4770      	bx	lr
	...

004017a0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4017a0:	b500      	push	{lr}
  4017a2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4017a4:	a801      	add	r0, sp, #4
  4017a6:	4b0e      	ldr	r3, [pc, #56]	; (4017e0 <_init_chip+0x40>)
  4017a8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4017aa:	4a0e      	ldr	r2, [pc, #56]	; (4017e4 <_init_chip+0x44>)
  4017ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4017b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017bc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4017c0:	a801      	add	r0, sp, #4
  4017c2:	4b09      	ldr	r3, [pc, #36]	; (4017e8 <_init_chip+0x48>)
  4017c4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4017c6:	4a09      	ldr	r2, [pc, #36]	; (4017ec <_init_chip+0x4c>)
  4017c8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4017ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4017ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4017d2:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4017d4:	4b06      	ldr	r3, [pc, #24]	; (4017f0 <_init_chip+0x50>)
  4017d6:	4798      	blx	r3
}
  4017d8:	b003      	add	sp, #12
  4017da:	f85d fb04 	ldr.w	pc, [sp], #4
  4017de:	bf00      	nop
  4017e0:	00401155 	.word	0x00401155
  4017e4:	e000ed00 	.word	0xe000ed00
  4017e8:	00401163 	.word	0x00401163
  4017ec:	400e0c00 	.word	0x400e0c00
  4017f0:	00401aed 	.word	0x00401aed

004017f4 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  4017f4:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4017f6:	2500      	movs	r5, #0
  4017f8:	428d      	cmp	r5, r1
  4017fa:	d210      	bcs.n	40181e <_ffs+0x2a>
  4017fc:	2201      	movs	r2, #1
  4017fe:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401800:	2b1f      	cmp	r3, #31
  401802:	d80a      	bhi.n	40181a <_ffs+0x26>
			if (v[i] & bit) {
  401804:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401808:	4222      	tst	r2, r4
  40180a:	d102      	bne.n	401812 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  40180c:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40180e:	3301      	adds	r3, #1
  401810:	e7f6      	b.n	401800 <_ffs+0xc>
				return i * 32 + j;
  401812:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401816:	bc30      	pop	{r4, r5}
  401818:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  40181a:	3501      	adds	r5, #1
  40181c:	e7ec      	b.n	4017f8 <_ffs+0x4>
	return -1;
  40181e:	f04f 30ff 	mov.w	r0, #4294967295
  401822:	e7f8      	b.n	401816 <_ffs+0x22>

00401824 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401824:	b510      	push	{r4, lr}
  401826:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401828:	2300      	movs	r3, #0
  40182a:	9301      	str	r3, [sp, #4]
  40182c:	9302      	str	r3, [sp, #8]
  40182e:	9303      	str	r3, [sp, #12]
  401830:	9304      	str	r3, [sp, #16]
  401832:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401834:	4b21      	ldr	r3, [pc, #132]	; (4018bc <_ext_irq_handler+0x98>)
  401836:	6818      	ldr	r0, [r3, #0]
  401838:	22f8      	movs	r2, #248	; 0xf8
  40183a:	4921      	ldr	r1, [pc, #132]	; (4018c0 <_ext_irq_handler+0x9c>)
  40183c:	3000      	adds	r0, #0
  40183e:	bf18      	it	ne
  401840:	2001      	movne	r0, #1
  401842:	4b20      	ldr	r3, [pc, #128]	; (4018c4 <_ext_irq_handler+0xa0>)
  401844:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401846:	4b20      	ldr	r3, [pc, #128]	; (4018c8 <_ext_irq_handler+0xa4>)
  401848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40184a:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40184c:	4013      	ands	r3, r2
  40184e:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401850:	491e      	ldr	r1, [pc, #120]	; (4018cc <_ext_irq_handler+0xa8>)
  401852:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401854:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401856:	400a      	ands	r2, r1
  401858:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  40185a:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  40185c:	e025      	b.n	4018aa <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40185e:	4b17      	ldr	r3, [pc, #92]	; (4018bc <_ext_irq_handler+0x98>)
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	4620      	mov	r0, r4
  401864:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401866:	1163      	asrs	r3, r4, #5
  401868:	f004 041f 	and.w	r4, r4, #31
  40186c:	2201      	movs	r2, #1
  40186e:	fa02 f404 	lsl.w	r4, r2, r4
  401872:	aa06      	add	r2, sp, #24
  401874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401878:	f853 2c14 	ldr.w	r2, [r3, #-20]
  40187c:	ea22 0204 	bic.w	r2, r2, r4
  401880:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401884:	2105      	movs	r1, #5
  401886:	a801      	add	r0, sp, #4
  401888:	4b11      	ldr	r3, [pc, #68]	; (4018d0 <_ext_irq_handler+0xac>)
  40188a:	4798      	blx	r3
  40188c:	4604      	mov	r4, r0
		while (-1 != pos) {
  40188e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401892:	d1e4      	bne.n	40185e <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401894:	4a0c      	ldr	r2, [pc, #48]	; (4018c8 <_ext_irq_handler+0xa4>)
  401896:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401898:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40189a:	400b      	ands	r3, r1
  40189c:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40189e:	490b      	ldr	r1, [pc, #44]	; (4018cc <_ext_irq_handler+0xa8>)
  4018a0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4018a2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4018a4:	4002      	ands	r2, r0
  4018a6:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  4018a8:	4313      	orrs	r3, r2
	while (flag_total) {
  4018aa:	b12b      	cbz	r3, 4018b8 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4018ac:	2105      	movs	r1, #5
  4018ae:	a801      	add	r0, sp, #4
  4018b0:	4b07      	ldr	r3, [pc, #28]	; (4018d0 <_ext_irq_handler+0xac>)
  4018b2:	4798      	blx	r3
  4018b4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4018b6:	e7ea      	b.n	40188e <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4018b8:	b006      	add	sp, #24
  4018ba:	bd10      	pop	{r4, pc}
  4018bc:	204000ac 	.word	0x204000ac
  4018c0:	00404ac0 	.word	0x00404ac0
  4018c4:	00401605 	.word	0x00401605
  4018c8:	400e0e00 	.word	0x400e0e00
  4018cc:	400e1000 	.word	0x400e1000
  4018d0:	004017f5 	.word	0x004017f5

004018d4 <_pio_get_hardware_index>:
{
  4018d4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4018d6:	4604      	mov	r4, r0
  4018d8:	22d2      	movs	r2, #210	; 0xd2
  4018da:	4905      	ldr	r1, [pc, #20]	; (4018f0 <_pio_get_hardware_index+0x1c>)
  4018dc:	3000      	adds	r0, #0
  4018de:	bf18      	it	ne
  4018e0:	2001      	movne	r0, #1
  4018e2:	4b04      	ldr	r3, [pc, #16]	; (4018f4 <_pio_get_hardware_index+0x20>)
  4018e4:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4018e6:	4804      	ldr	r0, [pc, #16]	; (4018f8 <_pio_get_hardware_index+0x24>)
  4018e8:	4420      	add	r0, r4
}
  4018ea:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4018ee:	bd10      	pop	{r4, pc}
  4018f0:	00404ac0 	.word	0x00404ac0
  4018f4:	00401605 	.word	0x00401605
  4018f8:	bff1f200 	.word	0xbff1f200

004018fc <_pio_get_index>:
{
  4018fc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4018fe:	4604      	mov	r4, r0
  401900:	22e0      	movs	r2, #224	; 0xe0
  401902:	490d      	ldr	r1, [pc, #52]	; (401938 <_pio_get_index+0x3c>)
  401904:	3000      	adds	r0, #0
  401906:	bf18      	it	ne
  401908:	2001      	movne	r0, #1
  40190a:	4b0c      	ldr	r3, [pc, #48]	; (40193c <_pio_get_index+0x40>)
  40190c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40190e:	4620      	mov	r0, r4
  401910:	4b0b      	ldr	r3, [pc, #44]	; (401940 <_pio_get_index+0x44>)
  401912:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401914:	2300      	movs	r3, #0
  401916:	2b01      	cmp	r3, #1
  401918:	d80b      	bhi.n	401932 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  40191a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40191e:	008a      	lsls	r2, r1, #2
  401920:	4908      	ldr	r1, [pc, #32]	; (401944 <_pio_get_index+0x48>)
  401922:	5c8a      	ldrb	r2, [r1, r2]
  401924:	4290      	cmp	r0, r2
  401926:	d002      	beq.n	40192e <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401928:	3301      	adds	r3, #1
  40192a:	b2db      	uxtb	r3, r3
  40192c:	e7f3      	b.n	401916 <_pio_get_index+0x1a>
			return i;
  40192e:	b258      	sxtb	r0, r3
  401930:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401932:	f04f 30ff 	mov.w	r0, #4294967295
}
  401936:	bd10      	pop	{r4, pc}
  401938:	00404ac0 	.word	0x00404ac0
  40193c:	00401605 	.word	0x00401605
  401940:	004018d5 	.word	0x004018d5
  401944:	00404a80 	.word	0x00404a80

00401948 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401948:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40194a:	4604      	mov	r4, r0
  40194c:	f240 1259 	movw	r2, #345	; 0x159
  401950:	4929      	ldr	r1, [pc, #164]	; (4019f8 <_pio_init+0xb0>)
  401952:	3000      	adds	r0, #0
  401954:	bf18      	it	ne
  401956:	2001      	movne	r0, #1
  401958:	4b28      	ldr	r3, [pc, #160]	; (4019fc <_pio_init+0xb4>)
  40195a:	4798      	blx	r3

	i = _pio_get_index(hw);
  40195c:	4620      	mov	r0, r4
  40195e:	4b28      	ldr	r3, [pc, #160]	; (401a00 <_pio_init+0xb8>)
  401960:	4798      	blx	r3
	if (i < 0) {
  401962:	2800      	cmp	r0, #0
  401964:	db43      	blt.n	4019ee <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401966:	4d27      	ldr	r5, [pc, #156]	; (401a04 <_pio_init+0xbc>)
  401968:	00c2      	lsls	r2, r0, #3
  40196a:	1a11      	subs	r1, r2, r0
  40196c:	008b      	lsls	r3, r1, #2
  40196e:	442b      	add	r3, r5
  401970:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401972:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401976:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401978:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  40197c:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  40197e:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401982:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401984:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401988:	1a10      	subs	r0, r2, r0
  40198a:	0083      	lsls	r3, r0, #2
  40198c:	442b      	add	r3, r5
  40198e:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401990:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401994:	4620      	mov	r0, r4
  401996:	4b1c      	ldr	r3, [pc, #112]	; (401a08 <_pio_init+0xc0>)
  401998:	4798      	blx	r3
  40199a:	4428      	add	r0, r5
  40199c:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	db0c      	blt.n	4019be <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019a4:	095a      	lsrs	r2, r3, #5
  4019a6:	f003 001f 	and.w	r0, r3, #31
  4019aa:	2101      	movs	r1, #1
  4019ac:	4081      	lsls	r1, r0
  4019ae:	3220      	adds	r2, #32
  4019b0:	4816      	ldr	r0, [pc, #88]	; (401a0c <_pio_init+0xc4>)
  4019b2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4019b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4019ba:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4019be:	2b00      	cmp	r3, #0
  4019c0:	db08      	blt.n	4019d4 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019c2:	095a      	lsrs	r2, r3, #5
  4019c4:	f003 001f 	and.w	r0, r3, #31
  4019c8:	2101      	movs	r1, #1
  4019ca:	4081      	lsls	r1, r0
  4019cc:	3260      	adds	r2, #96	; 0x60
  4019ce:	480f      	ldr	r0, [pc, #60]	; (401a0c <_pio_init+0xc4>)
  4019d0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	db0d      	blt.n	4019f4 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019d8:	0959      	lsrs	r1, r3, #5
  4019da:	f003 031f 	and.w	r3, r3, #31
  4019de:	2201      	movs	r2, #1
  4019e0:	fa02 f303 	lsl.w	r3, r2, r3
  4019e4:	4a09      	ldr	r2, [pc, #36]	; (401a0c <_pio_init+0xc4>)
  4019e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  4019ea:	2000      	movs	r0, #0
  4019ec:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  4019ee:	f06f 0010 	mvn.w	r0, #16
  4019f2:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  4019f4:	2000      	movs	r0, #0
}
  4019f6:	bd38      	pop	{r3, r4, r5, pc}
  4019f8:	00404ac0 	.word	0x00404ac0
  4019fc:	00401605 	.word	0x00401605
  401a00:	004018fd 	.word	0x004018fd
  401a04:	00404a80 	.word	0x00404a80
  401a08:	004018d5 	.word	0x004018d5
  401a0c:	e000e100 	.word	0xe000e100

00401a10 <PIOB_Handler>:
{
  401a10:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401a12:	4b01      	ldr	r3, [pc, #4]	; (401a18 <PIOB_Handler+0x8>)
  401a14:	4798      	blx	r3
  401a16:	bd08      	pop	{r3, pc}
  401a18:	00401825 	.word	0x00401825

00401a1c <PIOA_Handler>:
{
  401a1c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401a1e:	4b01      	ldr	r3, [pc, #4]	; (401a24 <PIOA_Handler+0x8>)
  401a20:	4798      	blx	r3
  401a22:	bd08      	pop	{r3, pc}
  401a24:	00401825 	.word	0x00401825

00401a28 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401a28:	b538      	push	{r3, r4, r5, lr}
  401a2a:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401a2c:	4804      	ldr	r0, [pc, #16]	; (401a40 <_ext_irq_init+0x18>)
  401a2e:	4c05      	ldr	r4, [pc, #20]	; (401a44 <_ext_irq_init+0x1c>)
  401a30:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401a32:	4805      	ldr	r0, [pc, #20]	; (401a48 <_ext_irq_init+0x20>)
  401a34:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401a36:	4b05      	ldr	r3, [pc, #20]	; (401a4c <_ext_irq_init+0x24>)
  401a38:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401a3a:	2000      	movs	r0, #0
  401a3c:	bd38      	pop	{r3, r4, r5, pc}
  401a3e:	bf00      	nop
  401a40:	400e0e00 	.word	0x400e0e00
  401a44:	00401949 	.word	0x00401949
  401a48:	400e1000 	.word	0x400e1000
  401a4c:	204000ac 	.word	0x204000ac

00401a50 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401a50:	490e      	ldr	r1, [pc, #56]	; (401a8c <_pmc_init_sources+0x3c>)
  401a52:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401a54:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401a58:	4b0d      	ldr	r3, [pc, #52]	; (401a90 <_pmc_init_sources+0x40>)
  401a5a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401a5c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401a5e:	4b0b      	ldr	r3, [pc, #44]	; (401a8c <_pmc_init_sources+0x3c>)
  401a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401a62:	f013 0f01 	tst.w	r3, #1
  401a66:	d0fa      	beq.n	401a5e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401a68:	4b08      	ldr	r3, [pc, #32]	; (401a8c <_pmc_init_sources+0x3c>)
  401a6a:	6a19      	ldr	r1, [r3, #32]
  401a6c:	4a09      	ldr	r2, [pc, #36]	; (401a94 <_pmc_init_sources+0x44>)
  401a6e:	430a      	orrs	r2, r1
  401a70:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401a72:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401a74:	4a08      	ldr	r2, [pc, #32]	; (401a98 <_pmc_init_sources+0x48>)
  401a76:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401a78:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401a7a:	4a08      	ldr	r2, [pc, #32]	; (401a9c <_pmc_init_sources+0x4c>)
  401a7c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401a7e:	4b03      	ldr	r3, [pc, #12]	; (401a8c <_pmc_init_sources+0x3c>)
  401a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401a82:	f013 0f02 	tst.w	r3, #2
  401a86:	d0fa      	beq.n	401a7e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401a88:	4770      	bx	lr
  401a8a:	bf00      	nop
  401a8c:	400e0600 	.word	0x400e0600
  401a90:	00373e01 	.word	0x00373e01
  401a94:	01370000 	.word	0x01370000
  401a98:	f800ffff 	.word	0xf800ffff
  401a9c:	20183f01 	.word	0x20183f01

00401aa0 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401aa0:	4a11      	ldr	r2, [pc, #68]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401aa2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401aa8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401aaa:	4b0f      	ldr	r3, [pc, #60]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401aae:	f013 0f08 	tst.w	r3, #8
  401ab2:	d0fa      	beq.n	401aaa <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401ab4:	4a0c      	ldr	r2, [pc, #48]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401ab6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401ac0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401ac2:	4b09      	ldr	r3, [pc, #36]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401ac6:	f013 0f08 	tst.w	r3, #8
  401aca:	d0fa      	beq.n	401ac2 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401acc:	4a06      	ldr	r2, [pc, #24]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401ace:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401ad0:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401ad4:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401ad8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401ada:	4b03      	ldr	r3, [pc, #12]	; (401ae8 <_pmc_init_master_clock+0x48>)
  401adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401ade:	f013 0f08 	tst.w	r3, #8
  401ae2:	d0fa      	beq.n	401ada <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401ae4:	4770      	bx	lr
  401ae6:	bf00      	nop
  401ae8:	400e0600 	.word	0x400e0600

00401aec <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401aec:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401aee:	4b02      	ldr	r3, [pc, #8]	; (401af8 <_pmc_init+0xc>)
  401af0:	4798      	blx	r3
	_pmc_init_master_clock();
  401af2:	4b02      	ldr	r3, [pc, #8]	; (401afc <_pmc_init+0x10>)
  401af4:	4798      	blx	r3
  401af6:	bd08      	pop	{r3, pc}
  401af8:	00401a51 	.word	0x00401a51
  401afc:	00401aa1 	.word	0x00401aa1

00401b00 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401b00:	2300      	movs	r3, #0
  401b02:	b10b      	cbz	r3, 401b08 <_pwm_get_cfg+0x8>
		if (_pwms[i].hw == hw) {
			return (_pwms + i);
		}
	}

	return NULL;
  401b04:	2000      	movs	r0, #0
}
  401b06:	4770      	bx	lr
		if (_pwms[i].hw == hw) {
  401b08:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401b0c:	008a      	lsls	r2, r1, #2
  401b0e:	4906      	ldr	r1, [pc, #24]	; (401b28 <_pwm_get_cfg+0x28>)
  401b10:	588a      	ldr	r2, [r1, r2]
  401b12:	4282      	cmp	r2, r0
  401b14:	d002      	beq.n	401b1c <_pwm_get_cfg+0x1c>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401b16:	3301      	adds	r3, #1
  401b18:	b2db      	uxtb	r3, r3
  401b1a:	e7f2      	b.n	401b02 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401b1c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401b20:	009a      	lsls	r2, r3, #2
  401b22:	4608      	mov	r0, r1
  401b24:	4410      	add	r0, r2
  401b26:	4770      	bx	lr
  401b28:	00404adc 	.word	0x00404adc

00401b2c <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401b2c:	4b03      	ldr	r3, [pc, #12]	; (401b3c <_pwm_init_irq_param+0x10>)
  401b2e:	4298      	cmp	r0, r3
  401b30:	d000      	beq.n	401b34 <_pwm_init_irq_param+0x8>
  401b32:	4770      	bx	lr
		_pwm0_dev = dev;
  401b34:	4b02      	ldr	r3, [pc, #8]	; (401b40 <_pwm_init_irq_param+0x14>)
  401b36:	6019      	str	r1, [r3, #0]
	}
}
  401b38:	e7fb      	b.n	401b32 <_pwm_init_irq_param+0x6>
  401b3a:	bf00      	nop
  401b3c:	40020000 	.word	0x40020000
  401b40:	204000b0 	.word	0x204000b0

00401b44 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401b44:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401b46:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401b48:	69db      	ldr	r3, [r3, #28]
  401b4a:	b113      	cbz	r3, 401b52 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401b4c:	6803      	ldr	r3, [r0, #0]
  401b4e:	b103      	cbz	r3, 401b52 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401b50:	4798      	blx	r3
  401b52:	bd08      	pop	{r3, pc}

00401b54 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401b54:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401b56:	4b02      	ldr	r3, [pc, #8]	; (401b60 <PWM0_Handler+0xc>)
  401b58:	6818      	ldr	r0, [r3, #0]
  401b5a:	4b02      	ldr	r3, [pc, #8]	; (401b64 <PWM0_Handler+0x10>)
  401b5c:	4798      	blx	r3
  401b5e:	bd08      	pop	{r3, pc}
  401b60:	204000b0 	.word	0x204000b0
  401b64:	00401b45 	.word	0x00401b45

00401b68 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b6a:	4606      	mov	r6, r0
	ASSERT(hw);
  401b6c:	460c      	mov	r4, r1
  401b6e:	1c08      	adds	r0, r1, #0
  401b70:	bf18      	it	ne
  401b72:	2001      	movne	r0, #1
  401b74:	f240 1271 	movw	r2, #369	; 0x171
  401b78:	4944      	ldr	r1, [pc, #272]	; (401c8c <_pwm_init+0x124>)
  401b7a:	4b45      	ldr	r3, [pc, #276]	; (401c90 <_pwm_init+0x128>)
  401b7c:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401b7e:	4620      	mov	r0, r4
  401b80:	4b44      	ldr	r3, [pc, #272]	; (401c94 <_pwm_init+0x12c>)
  401b82:	4798      	blx	r3
  401b84:	4605      	mov	r5, r0

	device->hw = hw;
  401b86:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401b88:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401b8a:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401b8c:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401b8e:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401b90:	6903      	ldr	r3, [r0, #16]
  401b92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401b96:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401b98:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401b9a:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401b9c:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401b9e:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401ba0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401ba4:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401ba6:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401ba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401baa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401bae:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401bb0:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401bb4:	2300      	movs	r3, #0
  401bb6:	e019      	b.n	401bec <_pwm_init+0x84>
		ch = cfg->ch + i;
  401bb8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401bba:	0118      	lsls	r0, r3, #4
  401bbc:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401bc0:	5c3a      	ldrb	r2, [r7, r0]
  401bc2:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401bc6:	3210      	adds	r2, #16
  401bc8:	0152      	lsls	r2, r2, #5
  401bca:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401bcc:	5c3a      	ldrb	r2, [r7, r0]
  401bce:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401bd2:	3210      	adds	r2, #16
  401bd4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401bd8:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401bda:	5c3a      	ldrb	r2, [r7, r0]
  401bdc:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401be0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401be4:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401be8:	3301      	adds	r3, #1
  401bea:	b25b      	sxtb	r3, r3
  401bec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bee:	4293      	cmp	r3, r2
  401bf0:	d3e2      	bcc.n	401bb8 <_pwm_init+0x50>
  401bf2:	2300      	movs	r3, #0
  401bf4:	e014      	b.n	401c20 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401bf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401bf8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401bfc:	0082      	lsls	r2, r0, #2
  401bfe:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401c02:	5c88      	ldrb	r0, [r1, r2]
  401c04:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401c08:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401c0c:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401c10:	5c8a      	ldrb	r2, [r1, r2]
  401c12:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401c16:	3213      	adds	r2, #19
  401c18:	0112      	lsls	r2, r2, #4
  401c1a:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401c1c:	3301      	adds	r3, #1
  401c1e:	b25b      	sxtb	r3, r3
  401c20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401c22:	4293      	cmp	r3, r2
  401c24:	d3e7      	bcc.n	401bf6 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  401c26:	4631      	mov	r1, r6
  401c28:	4620      	mov	r0, r4
  401c2a:	4b1b      	ldr	r3, [pc, #108]	; (401c98 <_pwm_init+0x130>)
  401c2c:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401c2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401c32:	2b00      	cmp	r3, #0
  401c34:	db0d      	blt.n	401c52 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c36:	095a      	lsrs	r2, r3, #5
  401c38:	f003 031f 	and.w	r3, r3, #31
  401c3c:	2101      	movs	r1, #1
  401c3e:	fa01 f303 	lsl.w	r3, r1, r3
  401c42:	3220      	adds	r2, #32
  401c44:	4915      	ldr	r1, [pc, #84]	; (401c9c <_pwm_init+0x134>)
  401c46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c4e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401c52:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401c56:	2b00      	cmp	r3, #0
  401c58:	db09      	blt.n	401c6e <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c5a:	095a      	lsrs	r2, r3, #5
  401c5c:	f003 031f 	and.w	r3, r3, #31
  401c60:	2101      	movs	r1, #1
  401c62:	fa01 f303 	lsl.w	r3, r1, r3
  401c66:	3260      	adds	r2, #96	; 0x60
  401c68:	490c      	ldr	r1, [pc, #48]	; (401c9c <_pwm_init+0x134>)
  401c6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401c6e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401c72:	2b00      	cmp	r3, #0
  401c74:	db08      	blt.n	401c88 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c76:	0959      	lsrs	r1, r3, #5
  401c78:	f003 031f 	and.w	r3, r3, #31
  401c7c:	2201      	movs	r2, #1
  401c7e:	fa02 f303 	lsl.w	r3, r2, r3
  401c82:	4a06      	ldr	r2, [pc, #24]	; (401c9c <_pwm_init+0x134>)
  401c84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401c88:	2000      	movs	r0, #0
  401c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c8c:	00404b58 	.word	0x00404b58
  401c90:	00401605 	.word	0x00401605
  401c94:	00401b01 	.word	0x00401b01
  401c98:	00401b2d 	.word	0x00401b2d
  401c9c:	e000e100 	.word	0xe000e100

00401ca0 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401ca0:	2000      	movs	r0, #0
  401ca2:	4770      	bx	lr

00401ca4 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  401ca4:	4b04      	ldr	r3, [pc, #16]	; (401cb8 <_spi_get_hardware_index+0x14>)
  401ca6:	4403      	add	r3, r0
  401ca8:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  401cac:	2b05      	cmp	r3, #5
  401cae:	d001      	beq.n	401cb4 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401cb0:	2000      	movs	r0, #0
	}
}
  401cb2:	4770      	bx	lr
		return 1;
  401cb4:	2001      	movs	r0, #1
  401cb6:	4770      	bx	lr
  401cb8:	bfff8000 	.word	0xbfff8000

00401cbc <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  401cbc:	b570      	push	{r4, r5, r6, lr}
  401cbe:	4606      	mov	r6, r0
  401cc0:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  401cc2:	4608      	mov	r0, r1
  401cc4:	4b20      	ldr	r3, [pc, #128]	; (401d48 <_spi_m_sync_init+0x8c>)
  401cc6:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401cc8:	2300      	movs	r3, #0
  401cca:	b33b      	cbz	r3, 401d1c <_spi_m_sync_init+0x60>
	return NULL;
  401ccc:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  401cce:	f44f 729a 	mov.w	r2, #308	; 0x134
  401cd2:	491e      	ldr	r1, [pc, #120]	; (401d4c <_spi_m_sync_init+0x90>)
  401cd4:	2e00      	cmp	r6, #0
  401cd6:	bf18      	it	ne
  401cd8:	2c00      	cmpne	r4, #0
  401cda:	bf14      	ite	ne
  401cdc:	2001      	movne	r0, #1
  401cde:	2000      	moveq	r0, #0
  401ce0:	4b1b      	ldr	r3, [pc, #108]	; (401d50 <_spi_m_sync_init+0x94>)
  401ce2:	4798      	blx	r3

	if (regs == NULL) {
  401ce4:	b355      	cbz	r5, 401d3c <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401ce6:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401ce8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401cec:	d129      	bne.n	401d42 <_spi_m_sync_init+0x86>
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  401cee:	2380      	movs	r3, #128	; 0x80
  401cf0:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  401cf2:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  401cf4:	686a      	ldr	r2, [r5, #4]
  401cf6:	4b17      	ldr	r3, [pc, #92]	; (401d54 <_spi_m_sync_init+0x98>)
  401cf8:	4013      	ands	r3, r2
  401cfa:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401cfc:	68ab      	ldr	r3, [r5, #8]
  401cfe:	4a16      	ldr	r2, [pc, #88]	; (401d58 <_spi_m_sync_init+0x9c>)
  401d00:	401a      	ands	r2, r3
  401d02:	4b16      	ldr	r3, [pc, #88]	; (401d5c <_spi_m_sync_init+0xa0>)
  401d04:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  401d06:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401d08:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  401d0a:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401d0c:	8a2b      	ldrh	r3, [r5, #16]
  401d0e:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  401d10:	68eb      	ldr	r3, [r5, #12]
  401d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401d16:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  401d18:	2000      	movs	r0, #0
  401d1a:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401d1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401d20:	008a      	lsls	r2, r1, #2
  401d22:	490f      	ldr	r1, [pc, #60]	; (401d60 <_spi_m_sync_init+0xa4>)
  401d24:	5c8a      	ldrb	r2, [r1, r2]
  401d26:	4290      	cmp	r0, r2
  401d28:	d002      	beq.n	401d30 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401d2a:	3301      	adds	r3, #1
  401d2c:	b2db      	uxtb	r3, r3
  401d2e:	e7cc      	b.n	401cca <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401d30:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401d34:	00ab      	lsls	r3, r5, #2
  401d36:	460d      	mov	r5, r1
  401d38:	441d      	add	r5, r3
  401d3a:	e7c8      	b.n	401cce <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401d3c:	f06f 000c 	mvn.w	r0, #12
  401d40:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  401d42:	f06f 0010 	mvn.w	r0, #16
}
  401d46:	bd70      	pop	{r4, r5, r6, pc}
  401d48:	00401ca5 	.word	0x00401ca5
  401d4c:	00404b84 	.word	0x00404b84
  401d50:	00401605 	.word	0x00401605
  401d54:	feffff7c 	.word	0xfeffff7c
  401d58:	fff1ff6f 	.word	0xfff1ff6f
  401d5c:	000e0010 	.word	0x000e0010
  401d60:	00404b70 	.word	0x00404b70

00401d64 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d68:	b086      	sub	sp, #24
  401d6a:	4607      	mov	r7, r0
  401d6c:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401d6e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401d70:	680b      	ldr	r3, [r1, #0]
  401d72:	9301      	str	r3, [sp, #4]
  401d74:	684b      	ldr	r3, [r1, #4]
  401d76:	9302      	str	r3, [sp, #8]
  401d78:	2300      	movs	r3, #0
  401d7a:	9303      	str	r3, [sp, #12]
  401d7c:	9304      	str	r3, [sp, #16]
  401d7e:	7903      	ldrb	r3, [r0, #4]
  401d80:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401d84:	1c26      	adds	r6, r4, #0
  401d86:	bf18      	it	ne
  401d88:	2601      	movne	r6, #1
  401d8a:	f240 2231 	movw	r2, #561	; 0x231
  401d8e:	4933      	ldr	r1, [pc, #204]	; (401e5c <_spi_m_sync_trans+0xf8>)
  401d90:	2800      	cmp	r0, #0
  401d92:	bf0c      	ite	eq
  401d94:	2000      	moveq	r0, #0
  401d96:	f006 0001 	andne.w	r0, r6, #1
  401d9a:	4b31      	ldr	r3, [pc, #196]	; (401e60 <_spi_m_sync_trans+0xfc>)
  401d9c:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401d9e:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401da0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401da4:	d122      	bne.n	401dec <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  401da6:	f06f 0013 	mvn.w	r0, #19
  401daa:	e053      	b.n	401e54 <_spi_m_sync_trans+0xf0>
		return false;
  401dac:	2300      	movs	r3, #0
  401dae:	e035      	b.n	401e1c <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401db0:	7850      	ldrb	r0, [r2, #1]
  401db2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  401db6:	3202      	adds	r2, #2
  401db8:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  401dba:	3301      	adds	r3, #1
  401dbc:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  401dbe:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  401dc0:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  401dc4:	f240 2222 	movw	r2, #546	; 0x222
  401dc8:	4924      	ldr	r1, [pc, #144]	; (401e5c <_spi_m_sync_trans+0xf8>)
  401dca:	4630      	mov	r0, r6
  401dcc:	4b24      	ldr	r3, [pc, #144]	; (401e60 <_spi_m_sync_trans+0xfc>)
  401dce:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  401dd0:	f018 0f08 	tst.w	r8, #8
  401dd4:	d038      	beq.n	401e48 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  401dd6:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  401dda:	2800      	cmp	r0, #0
  401ddc:	db36      	blt.n	401e4c <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  401dde:	9803      	ldr	r0, [sp, #12]
  401de0:	68ab      	ldr	r3, [r5, #8]
  401de2:	4298      	cmp	r0, r3
  401de4:	d302      	bcc.n	401dec <_spi_m_sync_trans+0x88>
  401de6:	9a04      	ldr	r2, [sp, #16]
  401de8:	4293      	cmp	r3, r2
  401dea:	d92f      	bls.n	401e4c <_spi_m_sync_trans+0xe8>
  401dec:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  401dee:	f013 0f01 	tst.w	r3, #1
  401df2:	d0db      	beq.n	401dac <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  401df4:	68a3      	ldr	r3, [r4, #8]
  401df6:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401df8:	9a02      	ldr	r2, [sp, #8]
  401dfa:	b15a      	cbz	r2, 401e14 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401dfc:	1c51      	adds	r1, r2, #1
  401dfe:	9102      	str	r1, [sp, #8]
  401e00:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  401e02:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401e06:	2a01      	cmp	r2, #1
  401e08:	d904      	bls.n	401e14 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  401e0a:	460a      	mov	r2, r1
  401e0c:	3101      	adds	r1, #1
  401e0e:	9102      	str	r1, [sp, #8]
  401e10:	0a1b      	lsrs	r3, r3, #8
  401e12:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401e14:	9b04      	ldr	r3, [sp, #16]
  401e16:	3301      	adds	r3, #1
  401e18:	9304      	str	r3, [sp, #16]
	return true;
  401e1a:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d1cf      	bne.n	401dc0 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401e20:	9b03      	ldr	r3, [sp, #12]
  401e22:	9a04      	ldr	r2, [sp, #16]
  401e24:	429a      	cmp	r2, r3
  401e26:	d3cb      	bcc.n	401dc0 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  401e28:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  401e2a:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401e2c:	f012 0f02 	tst.w	r2, #2
  401e30:	d0c6      	beq.n	401dc0 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401e32:	9a01      	ldr	r2, [sp, #4]
  401e34:	2a00      	cmp	r2, #0
  401e36:	d0c0      	beq.n	401dba <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  401e38:	1c51      	adds	r1, r2, #1
  401e3a:	9101      	str	r1, [sp, #4]
  401e3c:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401e3e:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401e42:	2801      	cmp	r0, #1
  401e44:	d8b4      	bhi.n	401db0 <_spi_m_sync_trans+0x4c>
  401e46:	e7b8      	b.n	401dba <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  401e48:	2000      	movs	r0, #0
  401e4a:	e7c6      	b.n	401dda <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401e4c:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401e4e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401e52:	d0fb      	beq.n	401e4c <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401e54:	b006      	add	sp, #24
  401e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e5a:	bf00      	nop
  401e5c:	00404b84 	.word	0x00404b84
  401e60:	00401605 	.word	0x00401605

00401e64 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401e64:	2000      	movs	r0, #0
  401e66:	4770      	bx	lr

00401e68 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401e68:	4b03      	ldr	r3, [pc, #12]	; (401e78 <_system_time_init+0x10>)
  401e6a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401e6e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401e70:	2205      	movs	r2, #5
  401e72:	601a      	str	r2, [r3, #0]
  401e74:	4770      	bx	lr
  401e76:	bf00      	nop
  401e78:	e000e010 	.word	0xe000e010

00401e7c <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401e7c:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401e7e:	4b01      	ldr	r3, [pc, #4]	; (401e84 <_delay_init+0x8>)
  401e80:	4798      	blx	r3
  401e82:	bd08      	pop	{r3, pc}
  401e84:	00401e69 	.word	0x00401e69

00401e88 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401e88:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401e8a:	e00d      	b.n	401ea8 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401e8c:	4b0d      	ldr	r3, [pc, #52]	; (401ec4 <_delay_cycles+0x3c>)
  401e8e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401e92:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401e94:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401e96:	4b0b      	ldr	r3, [pc, #44]	; (401ec4 <_delay_cycles+0x3c>)
  401e98:	681b      	ldr	r3, [r3, #0]
  401e9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401e9e:	d0fa      	beq.n	401e96 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401ea0:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401ea4:	3101      	adds	r1, #1
	while (n--) {
  401ea6:	4610      	mov	r0, r2
  401ea8:	1e43      	subs	r3, r0, #1
  401eaa:	b2da      	uxtb	r2, r3
  401eac:	2800      	cmp	r0, #0
  401eae:	d1ed      	bne.n	401e8c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401eb0:	4b04      	ldr	r3, [pc, #16]	; (401ec4 <_delay_cycles+0x3c>)
  401eb2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401eb4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401eb6:	4b03      	ldr	r3, [pc, #12]	; (401ec4 <_delay_cycles+0x3c>)
  401eb8:	681b      	ldr	r3, [r3, #0]
  401eba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401ebe:	d0fa      	beq.n	401eb6 <_delay_cycles+0x2e>
		;
}
  401ec0:	4770      	bx	lr
  401ec2:	bf00      	nop
  401ec4:	e000e010 	.word	0xe000e010

00401ec8 <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401ec8:	2300      	movs	r3, #0
  401eca:	b13b      	cbz	r3, 401edc <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  401ecc:	2000      	movs	r0, #0
  401ece:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  401ed0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401ed4:	00e3      	lsls	r3, r4, #3
  401ed6:	4608      	mov	r0, r1
  401ed8:	4418      	add	r0, r3
  401eda:	e00c      	b.n	401ef6 <_get_i2cm_sync_cfg+0x2e>
{
  401edc:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  401ede:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401ee2:	00ca      	lsls	r2, r1, #3
  401ee4:	4905      	ldr	r1, [pc, #20]	; (401efc <_get_i2cm_sync_cfg+0x34>)
  401ee6:	588a      	ldr	r2, [r1, r2]
  401ee8:	4282      	cmp	r2, r0
  401eea:	d0f1      	beq.n	401ed0 <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401eec:	3301      	adds	r3, #1
  401eee:	b2db      	uxtb	r3, r3
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d0f4      	beq.n	401ede <_get_i2cm_sync_cfg+0x16>
	return NULL;
  401ef4:	2000      	movs	r0, #0
}
  401ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401efa:	4770      	bx	lr
  401efc:	00404b9c 	.word	0x00404b9c

00401f00 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  401f00:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401f02:	4604      	mov	r4, r0
  401f04:	460d      	mov	r5, r1
  401f06:	2800      	cmp	r0, #0
  401f08:	bf18      	it	ne
  401f0a:	2900      	cmpne	r1, #0
  401f0c:	bf14      	ite	ne
  401f0e:	2001      	movne	r0, #1
  401f10:	2000      	moveq	r0, #0
  401f12:	2278      	movs	r2, #120	; 0x78
  401f14:	4909      	ldr	r1, [pc, #36]	; (401f3c <_i2c_m_sync_init+0x3c>)
  401f16:	4b0a      	ldr	r3, [pc, #40]	; (401f40 <_i2c_m_sync_init+0x40>)
  401f18:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  401f1a:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  401f1c:	4628      	mov	r0, r5
  401f1e:	4b09      	ldr	r3, [pc, #36]	; (401f44 <_i2c_m_sync_init+0x44>)
  401f20:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  401f22:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  401f24:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  401f26:	6923      	ldr	r3, [r4, #16]
  401f28:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  401f2a:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  401f2c:	6923      	ldr	r3, [r4, #16]
  401f2e:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  401f30:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  401f32:	6923      	ldr	r3, [r4, #16]
  401f34:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  401f36:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  401f38:	2000      	movs	r0, #0
  401f3a:	bd38      	pop	{r3, r4, r5, pc}
  401f3c:	00404bb4 	.word	0x00404bb4
  401f40:	00401605 	.word	0x00401605
  401f44:	00401ec9 	.word	0x00401ec9

00401f48 <_i2c_m_sync_enable>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const dev)
{
  401f48:	b510      	push	{r4, lr}
	ASSERT(dev);
  401f4a:	4604      	mov	r4, r0
  401f4c:	2295      	movs	r2, #149	; 0x95
  401f4e:	4905      	ldr	r1, [pc, #20]	; (401f64 <_i2c_m_sync_enable+0x1c>)
  401f50:	3000      	adds	r0, #0
  401f52:	bf18      	it	ne
  401f54:	2001      	movne	r0, #1
  401f56:	4b04      	ldr	r3, [pc, #16]	; (401f68 <_i2c_m_sync_enable+0x20>)
  401f58:	4798      	blx	r3

	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_MSEN);
  401f5a:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401f5c:	2204      	movs	r2, #4
  401f5e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
}
  401f60:	2000      	movs	r0, #0
  401f62:	bd10      	pop	{r4, pc}
  401f64:	00404bb4 	.word	0x00404bb4
  401f68:	00401605 	.word	0x00401605

00401f6c <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  401f6c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  401f6e:	4604      	mov	r4, r0
  401f70:	460d      	mov	r5, r1
  401f72:	2800      	cmp	r0, #0
  401f74:	bf18      	it	ne
  401f76:	2900      	cmpne	r1, #0
  401f78:	bf14      	ite	ne
  401f7a:	2001      	movne	r0, #1
  401f7c:	2000      	moveq	r0, #0
  401f7e:	22ba      	movs	r2, #186	; 0xba
  401f80:	4952      	ldr	r1, [pc, #328]	; (4020cc <_i2c_m_sync_transfer+0x160>)
  401f82:	4b53      	ldr	r3, [pc, #332]	; (4020d0 <_i2c_m_sync_transfer+0x164>)
  401f84:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  401f86:	8863      	ldrh	r3, [r4, #2]
  401f88:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f8c:	f040 809a 	bne.w	4020c4 <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401f90:	886b      	ldrh	r3, [r5, #2]
  401f92:	f013 0f01 	tst.w	r3, #1
  401f96:	d118      	bne.n	401fca <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401f98:	886b      	ldrh	r3, [r5, #2]
  401f9a:	b29b      	uxth	r3, r3
  401f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401fa0:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401fa2:	882b      	ldrh	r3, [r5, #0]
  401fa4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401fa8:	d05f      	beq.n	40206a <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  401faa:	6922      	ldr	r2, [r4, #16]
  401fac:	0a1b      	lsrs	r3, r3, #8
  401fae:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401fb2:	041b      	lsls	r3, r3, #16
  401fb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  401fbc:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401fbe:	6923      	ldr	r3, [r4, #16]
  401fc0:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401fc2:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  401fc4:	2000      	movs	r0, #0
  401fc6:	4601      	mov	r1, r0
  401fc8:	e05c      	b.n	402084 <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  401fca:	886b      	ldrh	r3, [r5, #2]
  401fcc:	b29b      	uxth	r3, r3
  401fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401fd2:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401fd4:	882b      	ldrh	r3, [r5, #0]
  401fd6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401fda:	d022      	beq.n	402022 <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  401fdc:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  401fde:	0a1b      	lsrs	r3, r3, #8
  401fe0:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401fe4:	041b      	lsls	r3, r3, #16
  401fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401fea:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  401fee:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401ff0:	6923      	ldr	r3, [r4, #16]
  401ff2:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401ff4:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  401ff6:	6923      	ldr	r3, [r4, #16]
  401ff8:	686a      	ldr	r2, [r5, #4]
  401ffa:	2a01      	cmp	r2, #1
  401ffc:	d019      	beq.n	402032 <_i2c_m_sync_transfer+0xc6>
  401ffe:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  402000:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  402002:	2100      	movs	r1, #0
  402004:	686b      	ldr	r3, [r5, #4]
  402006:	4299      	cmp	r1, r3
  402008:	d222      	bcs.n	402050 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  40200a:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  40200c:	6a1a      	ldr	r2, [r3, #32]
  40200e:	f012 0f02 	tst.w	r2, #2
  402012:	d110      	bne.n	402036 <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  402014:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  402016:	f413 7f80 	tst.w	r3, #256	; 0x100
  40201a:	d0f6      	beq.n	40200a <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  40201c:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  402020:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  402022:	6922      	ldr	r2, [r4, #16]
  402024:	041b      	lsls	r3, r3, #16
  402026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40202a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  40202e:	6053      	str	r3, [r2, #4]
  402030:	e7e1      	b.n	401ff6 <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  402032:	2203      	movs	r2, #3
  402034:	e7e4      	b.n	402000 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  402036:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  402038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40203a:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  40203c:	686b      	ldr	r3, [r5, #4]
  40203e:	3b02      	subs	r3, #2
  402040:	4299      	cmp	r1, r3
  402042:	d001      	beq.n	402048 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  402044:	3101      	adds	r1, #1
  402046:	e7dd      	b.n	402004 <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  402048:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  40204a:	2202      	movs	r2, #2
  40204c:	601a      	str	r2, [r3, #0]
  40204e:	e7f9      	b.n	402044 <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  402050:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  402052:	6a1b      	ldr	r3, [r3, #32]
  402054:	f013 0f01 	tst.w	r3, #1
  402058:	d0fa      	beq.n	402050 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  40205a:	8863      	ldrh	r3, [r4, #2]
  40205c:	b29b      	uxth	r3, r3
  40205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402062:	b29b      	uxth	r3, r3
  402064:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  402066:	2000      	movs	r0, #0
  402068:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  40206a:	6922      	ldr	r2, [r4, #16]
  40206c:	041b      	lsls	r3, r3, #16
  40206e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  402072:	6053      	str	r3, [r2, #4]
  402074:	e7a6      	b.n	401fc4 <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  402076:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  40207a:	b978      	cbnz	r0, 40209c <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  40207c:	68ab      	ldr	r3, [r5, #8]
  40207e:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  402080:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  402082:	3101      	adds	r1, #1
  402084:	686b      	ldr	r3, [r5, #4]
  402086:	4299      	cmp	r1, r3
  402088:	d208      	bcs.n	40209c <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  40208a:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  40208c:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  40208e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402092:	d1f0      	bne.n	402076 <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  402094:	f013 0f04 	tst.w	r3, #4
  402098:	d0f7      	beq.n	40208a <_i2c_m_sync_transfer+0x11e>
  40209a:	e7ee      	b.n	40207a <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  40209c:	886b      	ldrh	r3, [r5, #2]
  40209e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4020a2:	d106      	bne.n	4020b2 <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  4020a4:	8863      	ldrh	r3, [r4, #2]
  4020a6:	b29b      	uxth	r3, r3
  4020a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4020ac:	b29b      	uxth	r3, r3
  4020ae:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  4020b0:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  4020b2:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  4020b4:	2202      	movs	r2, #2
  4020b6:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  4020b8:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  4020ba:	6a1b      	ldr	r3, [r3, #32]
  4020bc:	f013 0f01 	tst.w	r3, #1
  4020c0:	d0fa      	beq.n	4020b8 <_i2c_m_sync_transfer+0x14c>
  4020c2:	e7ef      	b.n	4020a4 <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  4020c4:	f06f 0005 	mvn.w	r0, #5
}
  4020c8:	bd38      	pop	{r3, r4, r5, pc}
  4020ca:	bf00      	nop
  4020cc:	00404bb4 	.word	0x00404bb4
  4020d0:	00401605 	.word	0x00401605

004020d4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4020d4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4020d6:	4604      	mov	r4, r0
  4020d8:	f240 222b 	movw	r2, #555	; 0x22b
  4020dc:	4905      	ldr	r1, [pc, #20]	; (4020f4 <_usart_get_hardware_index+0x20>)
  4020de:	3000      	adds	r0, #0
  4020e0:	bf18      	it	ne
  4020e2:	2001      	movne	r0, #1
  4020e4:	4b04      	ldr	r3, [pc, #16]	; (4020f8 <_usart_get_hardware_index+0x24>)
  4020e6:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4020e8:	4804      	ldr	r0, [pc, #16]	; (4020fc <_usart_get_hardware_index+0x28>)
  4020ea:	4420      	add	r0, r4
}
  4020ec:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4020f0:	bd10      	pop	{r4, pc}
  4020f2:	bf00      	nop
  4020f4:	00404bdc 	.word	0x00404bdc
  4020f8:	00401605 	.word	0x00401605
  4020fc:	bffdc000 	.word	0xbffdc000

00402100 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402100:	b510      	push	{r4, lr}
	ASSERT(hw);
  402102:	4604      	mov	r4, r0
  402104:	f240 2287 	movw	r2, #647	; 0x287
  402108:	490e      	ldr	r1, [pc, #56]	; (402144 <_get_usart_index+0x44>)
  40210a:	3000      	adds	r0, #0
  40210c:	bf18      	it	ne
  40210e:	2001      	movne	r0, #1
  402110:	4b0d      	ldr	r3, [pc, #52]	; (402148 <_get_usart_index+0x48>)
  402112:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402114:	4620      	mov	r0, r4
  402116:	4b0d      	ldr	r3, [pc, #52]	; (40214c <_get_usart_index+0x4c>)
  402118:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40211a:	2300      	movs	r3, #0
  40211c:	b143      	cbz	r3, 402130 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40211e:	f240 2291 	movw	r2, #657	; 0x291
  402122:	4908      	ldr	r1, [pc, #32]	; (402144 <_get_usart_index+0x44>)
  402124:	2000      	movs	r0, #0
  402126:	4b08      	ldr	r3, [pc, #32]	; (402148 <_get_usart_index+0x48>)
  402128:	4798      	blx	r3
	return 0;
  40212a:	2300      	movs	r3, #0
}
  40212c:	4618      	mov	r0, r3
  40212e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402130:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402134:	008a      	lsls	r2, r1, #2
  402136:	4906      	ldr	r1, [pc, #24]	; (402150 <_get_usart_index+0x50>)
  402138:	5c8a      	ldrb	r2, [r1, r2]
  40213a:	4290      	cmp	r0, r2
  40213c:	d0f6      	beq.n	40212c <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40213e:	3301      	adds	r3, #1
  402140:	b2db      	uxtb	r3, r3
  402142:	e7eb      	b.n	40211c <_get_usart_index+0x1c>
  402144:	00404bdc 	.word	0x00404bdc
  402148:	00401605 	.word	0x00401605
  40214c:	004020d5 	.word	0x004020d5
  402150:	00404bd0 	.word	0x00404bd0

00402154 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402154:	b510      	push	{r4, lr}
	ASSERT(hw);
  402156:	4604      	mov	r4, r0
  402158:	f240 229e 	movw	r2, #670	; 0x29e
  40215c:	4911      	ldr	r1, [pc, #68]	; (4021a4 <_usart_init+0x50>)
  40215e:	3000      	adds	r0, #0
  402160:	bf18      	it	ne
  402162:	2001      	movne	r0, #1
  402164:	4b10      	ldr	r3, [pc, #64]	; (4021a8 <_usart_init+0x54>)
  402166:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402168:	4620      	mov	r0, r4
  40216a:	4b10      	ldr	r3, [pc, #64]	; (4021ac <_usart_init+0x58>)
  40216c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40216e:	4b10      	ldr	r3, [pc, #64]	; (4021b0 <_usart_init+0x5c>)
  402170:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402174:	2300      	movs	r3, #0
  402176:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402178:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40217a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40217c:	22ac      	movs	r2, #172	; 0xac
  40217e:	6022      	str	r2, [r4, #0]
  402180:	f44f 7280 	mov.w	r2, #256	; 0x100
  402184:	6022      	str	r2, [r4, #0]
  402186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40218a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40218c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402190:	0081      	lsls	r1, r0, #2
  402192:	4a08      	ldr	r2, [pc, #32]	; (4021b4 <_usart_init+0x60>)
  402194:	440a      	add	r2, r1
  402196:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402198:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40219a:	4a07      	ldr	r2, [pc, #28]	; (4021b8 <_usart_init+0x64>)
  40219c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40219e:	4618      	mov	r0, r3
  4021a0:	bd10      	pop	{r4, pc}
  4021a2:	bf00      	nop
  4021a4:	00404bdc 	.word	0x00404bdc
  4021a8:	00401605 	.word	0x00401605
  4021ac:	00402101 	.word	0x00402101
  4021b0:	55534100 	.word	0x55534100
  4021b4:	00404bd0 	.word	0x00404bd0
  4021b8:	000100f4 	.word	0x000100f4

004021bc <_usart_sync_init>:
{
  4021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021be:	460c      	mov	r4, r1
	ASSERT(device);
  4021c0:	4e09      	ldr	r6, [pc, #36]	; (4021e8 <_usart_sync_init+0x2c>)
  4021c2:	4607      	mov	r7, r0
  4021c4:	22bd      	movs	r2, #189	; 0xbd
  4021c6:	4631      	mov	r1, r6
  4021c8:	3000      	adds	r0, #0
  4021ca:	bf18      	it	ne
  4021cc:	2001      	movne	r0, #1
  4021ce:	4d07      	ldr	r5, [pc, #28]	; (4021ec <_usart_sync_init+0x30>)
  4021d0:	47a8      	blx	r5
	ASSERT(hw);
  4021d2:	22be      	movs	r2, #190	; 0xbe
  4021d4:	4631      	mov	r1, r6
  4021d6:	1c20      	adds	r0, r4, #0
  4021d8:	bf18      	it	ne
  4021da:	2001      	movne	r0, #1
  4021dc:	47a8      	blx	r5
	device->hw = hw;
  4021de:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4021e0:	4620      	mov	r0, r4
  4021e2:	4b03      	ldr	r3, [pc, #12]	; (4021f0 <_usart_sync_init+0x34>)
  4021e4:	4798      	blx	r3
}
  4021e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021e8:	00404bdc 	.word	0x00404bdc
  4021ec:	00401605 	.word	0x00401605
  4021f0:	00402155 	.word	0x00402155

004021f4 <_usart_sync_enable>:
{
  4021f4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4021f6:	4e0a      	ldr	r6, [pc, #40]	; (402220 <_usart_sync_enable+0x2c>)
  4021f8:	4604      	mov	r4, r0
  4021fa:	f240 1205 	movw	r2, #261	; 0x105
  4021fe:	4631      	mov	r1, r6
  402200:	3000      	adds	r0, #0
  402202:	bf18      	it	ne
  402204:	2001      	movne	r0, #1
  402206:	4d07      	ldr	r5, [pc, #28]	; (402224 <_usart_sync_enable+0x30>)
  402208:	47a8      	blx	r5
	_usart_enable(device->hw);
  40220a:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  40220c:	f240 22c7 	movw	r2, #711	; 0x2c7
  402210:	4631      	mov	r1, r6
  402212:	1c20      	adds	r0, r4, #0
  402214:	bf18      	it	ne
  402216:	2001      	movne	r0, #1
  402218:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  40221a:	2350      	movs	r3, #80	; 0x50
  40221c:	6023      	str	r3, [r4, #0]
  40221e:	bd70      	pop	{r4, r5, r6, pc}
  402220:	00404bdc 	.word	0x00404bdc
  402224:	00401605 	.word	0x00401605

00402228 <_usart_sync_write_byte>:
{
  402228:	b538      	push	{r3, r4, r5, lr}
  40222a:	460c      	mov	r4, r1
	ASSERT(device);
  40222c:	4605      	mov	r5, r0
  40222e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402232:	4904      	ldr	r1, [pc, #16]	; (402244 <_usart_sync_write_byte+0x1c>)
  402234:	3000      	adds	r0, #0
  402236:	bf18      	it	ne
  402238:	2001      	movne	r0, #1
  40223a:	4b03      	ldr	r3, [pc, #12]	; (402248 <_usart_sync_write_byte+0x20>)
  40223c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40223e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402240:	61dc      	str	r4, [r3, #28]
  402242:	bd38      	pop	{r3, r4, r5, pc}
  402244:	00404bdc 	.word	0x00404bdc
  402248:	00401605 	.word	0x00401605

0040224c <_usart_sync_read_byte>:
{
  40224c:	b510      	push	{r4, lr}
	ASSERT(device);
  40224e:	4604      	mov	r4, r0
  402250:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402254:	4904      	ldr	r1, [pc, #16]	; (402268 <_usart_sync_read_byte+0x1c>)
  402256:	3000      	adds	r0, #0
  402258:	bf18      	it	ne
  40225a:	2001      	movne	r0, #1
  40225c:	4b03      	ldr	r3, [pc, #12]	; (40226c <_usart_sync_read_byte+0x20>)
  40225e:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402260:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402262:	6998      	ldr	r0, [r3, #24]
}
  402264:	b2c0      	uxtb	r0, r0
  402266:	bd10      	pop	{r4, pc}
  402268:	00404bdc 	.word	0x00404bdc
  40226c:	00401605 	.word	0x00401605

00402270 <_usart_sync_is_ready_to_send>:
{
  402270:	b510      	push	{r4, lr}
	ASSERT(device);
  402272:	4604      	mov	r4, r0
  402274:	f240 12c3 	movw	r2, #451	; 0x1c3
  402278:	4905      	ldr	r1, [pc, #20]	; (402290 <_usart_sync_is_ready_to_send+0x20>)
  40227a:	3000      	adds	r0, #0
  40227c:	bf18      	it	ne
  40227e:	2001      	movne	r0, #1
  402280:	4b04      	ldr	r3, [pc, #16]	; (402294 <_usart_sync_is_ready_to_send+0x24>)
  402282:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402284:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402286:	6958      	ldr	r0, [r3, #20]
}
  402288:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40228c:	bd10      	pop	{r4, pc}
  40228e:	bf00      	nop
  402290:	00404bdc 	.word	0x00404bdc
  402294:	00401605 	.word	0x00401605

00402298 <_usart_sync_is_transmit_done>:
{
  402298:	b510      	push	{r4, lr}
	ASSERT(device);
  40229a:	4604      	mov	r4, r0
  40229c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4022a0:	4905      	ldr	r1, [pc, #20]	; (4022b8 <_usart_sync_is_transmit_done+0x20>)
  4022a2:	3000      	adds	r0, #0
  4022a4:	bf18      	it	ne
  4022a6:	2001      	movne	r0, #1
  4022a8:	4b04      	ldr	r3, [pc, #16]	; (4022bc <_usart_sync_is_transmit_done+0x24>)
  4022aa:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4022ac:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4022ae:	6958      	ldr	r0, [r3, #20]
}
  4022b0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4022b4:	bd10      	pop	{r4, pc}
  4022b6:	bf00      	nop
  4022b8:	00404bdc 	.word	0x00404bdc
  4022bc:	00401605 	.word	0x00401605

004022c0 <_usart_sync_is_byte_received>:
{
  4022c0:	b510      	push	{r4, lr}
	ASSERT(device);
  4022c2:	4604      	mov	r4, r0
  4022c4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4022c8:	4905      	ldr	r1, [pc, #20]	; (4022e0 <_usart_sync_is_byte_received+0x20>)
  4022ca:	3000      	adds	r0, #0
  4022cc:	bf18      	it	ne
  4022ce:	2001      	movne	r0, #1
  4022d0:	4b04      	ldr	r3, [pc, #16]	; (4022e4 <_usart_sync_is_byte_received+0x24>)
  4022d2:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4022d4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4022d6:	6958      	ldr	r0, [r3, #20]
  4022d8:	f000 0001 	and.w	r0, r0, #1
}
  4022dc:	bd10      	pop	{r4, pc}
  4022de:	bf00      	nop
  4022e0:	00404bdc 	.word	0x00404bdc
  4022e4:	00401605 	.word	0x00401605

004022e8 <_usart_get_usart_sync>:
}
  4022e8:	2000      	movs	r0, #0
  4022ea:	4770      	bx	lr

004022ec <main>:
#include "nRF24_driver.h"
#include "PWM_driver.h"
#include "BQ76925_driver.h"

int main(void)
{
  4022ec:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4022ee:	4b0c      	ldr	r3, [pc, #48]	; (402320 <main+0x34>)
  4022f0:	4798      	blx	r3
	//init_IMU(&imu_vector_buffer[0]);
	
	//uint8_t data_store[32];
	//memset(&data_store[0], 0, sizeof(uint8_t)*32);
	//nRF24_init(data_store);
	delay_us(200); //Should be 200 us, setting higher for testing
  4022f2:	20c8      	movs	r0, #200	; 0xc8
  4022f4:	4b0b      	ldr	r3, [pc, #44]	; (402324 <main+0x38>)
  4022f6:	4798      	blx	r3
	char* buffer;
	char* buffer2;
	char* buffer3;
	uint8_t* ptr;
	int x = 1;
	set_ref_voltage(buffer, 1);
  4022f8:	2101      	movs	r1, #1
  4022fa:	2000      	movs	r0, #0
  4022fc:	4b0a      	ldr	r3, [pc, #40]	; (402328 <main+0x3c>)
  4022fe:	4798      	blx	r3
	setup_BQ7_for_adc(buffer2, CELL_1);
  402300:	2100      	movs	r1, #0
  402302:	4608      	mov	r0, r1
  402304:	4c09      	ldr	r4, [pc, #36]	; (40232c <main+0x40>)
  402306:	47a0      	blx	r4
	setup_BQ7_for_adc(buffer3, CELL_2);
  402308:	2101      	movs	r1, #1
  40230a:	2000      	movs	r0, #0
  40230c:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, 0);
  40230e:	2100      	movs	r1, #0
  402310:	4807      	ldr	r0, [pc, #28]	; (402330 <main+0x44>)
  402312:	4b08      	ldr	r3, [pc, #32]	; (402334 <main+0x48>)
  402314:	4798      	blx	r3
	float y = v_cell();
  402316:	4b08      	ldr	r3, [pc, #32]	; (402338 <main+0x4c>)
  402318:	4798      	blx	r3
			uint8_t m_period;
			m_period = data_store[0];
			set_pmw_motor_0(&(PWM_0.device), m_period);
			memset(&data_store[0], 0, sizeof(uint8_t)*32);
		}*/
		get_IMU_quaternion();
  40231a:	4b08      	ldr	r3, [pc, #32]	; (40233c <main+0x50>)
  40231c:	4798      	blx	r3
  40231e:	e7fc      	b.n	40231a <main+0x2e>
  402320:	004001d5 	.word	0x004001d5
  402324:	00401185 	.word	0x00401185
  402328:	00400b8d 	.word	0x00400b8d
  40232c:	00400b71 	.word	0x00400b71
  402330:	2040140c 	.word	0x2040140c
  402334:	00401089 	.word	0x00401089
  402338:	00400bc9 	.word	0x00400bc9
  40233c:	00400299 	.word	0x00400299

00402340 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402340:	b958      	cbnz	r0, 40235a <_read+0x1a>
{
  402342:	b508      	push	{r3, lr}
  402344:	460b      	mov	r3, r1
  402346:	4611      	mov	r1, r2
  402348:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  40234a:	4b05      	ldr	r3, [pc, #20]	; (402360 <_read+0x20>)
  40234c:	4798      	blx	r3
	if (n < 0) {
  40234e:	2800      	cmp	r0, #0
  402350:	db00      	blt.n	402354 <_read+0x14>
		return -1;
	}

	return n;
}
  402352:	bd08      	pop	{r3, pc}
		return -1;
  402354:	f04f 30ff 	mov.w	r0, #4294967295
  402358:	bd08      	pop	{r3, pc}
		return -1;
  40235a:	f04f 30ff 	mov.w	r0, #4294967295
  40235e:	4770      	bx	lr
  402360:	004023b9 	.word	0x004023b9

00402364 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402364:	3801      	subs	r0, #1
  402366:	2802      	cmp	r0, #2
  402368:	d80b      	bhi.n	402382 <_write+0x1e>
{
  40236a:	b508      	push	{r3, lr}
  40236c:	460b      	mov	r3, r1
  40236e:	4611      	mov	r1, r2
  402370:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402372:	4b05      	ldr	r3, [pc, #20]	; (402388 <_write+0x24>)
  402374:	4798      	blx	r3
	if (n < 0) {
  402376:	2800      	cmp	r0, #0
  402378:	db00      	blt.n	40237c <_write+0x18>
		return -1;
	}

	return n;
}
  40237a:	bd08      	pop	{r3, pc}
		return -1;
  40237c:	f04f 30ff 	mov.w	r0, #4294967295
  402380:	bd08      	pop	{r3, pc}
		return -1;
  402382:	f04f 30ff 	mov.w	r0, #4294967295
  402386:	4770      	bx	lr
  402388:	004023dd 	.word	0x004023dd

0040238c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  40238c:	b570      	push	{r4, r5, r6, lr}
  40238e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402390:	4d06      	ldr	r5, [pc, #24]	; (4023ac <stdio_io_init+0x20>)
  402392:	682b      	ldr	r3, [r5, #0]
  402394:	2100      	movs	r1, #0
  402396:	6898      	ldr	r0, [r3, #8]
  402398:	4c05      	ldr	r4, [pc, #20]	; (4023b0 <stdio_io_init+0x24>)
  40239a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40239c:	682b      	ldr	r3, [r5, #0]
  40239e:	2100      	movs	r1, #0
  4023a0:	6858      	ldr	r0, [r3, #4]
  4023a2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4023a4:	4b03      	ldr	r3, [pc, #12]	; (4023b4 <stdio_io_init+0x28>)
  4023a6:	601e      	str	r6, [r3, #0]
  4023a8:	bd70      	pop	{r4, r5, r6, pc}
  4023aa:	bf00      	nop
  4023ac:	20400000 	.word	0x20400000
  4023b0:	00402f55 	.word	0x00402f55
  4023b4:	204000c0 	.word	0x204000c0

004023b8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4023b8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4023ba:	4b06      	ldr	r3, [pc, #24]	; (4023d4 <stdio_io_read+0x1c>)
  4023bc:	681b      	ldr	r3, [r3, #0]
  4023be:	b133      	cbz	r3, 4023ce <stdio_io_read+0x16>
  4023c0:	460a      	mov	r2, r1
  4023c2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4023c4:	b292      	uxth	r2, r2
  4023c6:	4618      	mov	r0, r3
  4023c8:	4b03      	ldr	r3, [pc, #12]	; (4023d8 <stdio_io_read+0x20>)
  4023ca:	4798      	blx	r3
  4023cc:	bd08      	pop	{r3, pc}
		return 0;
  4023ce:	2000      	movs	r0, #0
}
  4023d0:	bd08      	pop	{r3, pc}
  4023d2:	bf00      	nop
  4023d4:	204000c0 	.word	0x204000c0
  4023d8:	00401311 	.word	0x00401311

004023dc <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4023dc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4023de:	4b06      	ldr	r3, [pc, #24]	; (4023f8 <stdio_io_write+0x1c>)
  4023e0:	681b      	ldr	r3, [r3, #0]
  4023e2:	b133      	cbz	r3, 4023f2 <stdio_io_write+0x16>
  4023e4:	460a      	mov	r2, r1
  4023e6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4023e8:	b292      	uxth	r2, r2
  4023ea:	4618      	mov	r0, r3
  4023ec:	4b03      	ldr	r3, [pc, #12]	; (4023fc <stdio_io_write+0x20>)
  4023ee:	4798      	blx	r3
  4023f0:	bd08      	pop	{r3, pc}
		return 0;
  4023f2:	2000      	movs	r0, #0
}
  4023f4:	bd08      	pop	{r3, pc}
  4023f6:	bf00      	nop
  4023f8:	204000c0 	.word	0x204000c0
  4023fc:	004012e1 	.word	0x004012e1

00402400 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402400:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  402402:	4c04      	ldr	r4, [pc, #16]	; (402414 <stdio_redirect_init+0x14>)
  402404:	4620      	mov	r0, r4
  402406:	4b04      	ldr	r3, [pc, #16]	; (402418 <stdio_redirect_init+0x18>)
  402408:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  40240a:	4620      	mov	r0, r4
  40240c:	4b03      	ldr	r3, [pc, #12]	; (40241c <stdio_redirect_init+0x1c>)
  40240e:	4798      	blx	r3
  402410:	bd10      	pop	{r4, pc}
  402412:	bf00      	nop
  402414:	20401400 	.word	0x20401400
  402418:	004015d9 	.word	0x004015d9
  40241c:	0040238d 	.word	0x0040238d

00402420 <__aeabi_drsub>:
  402420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402424:	e002      	b.n	40242c <__adddf3>
  402426:	bf00      	nop

00402428 <__aeabi_dsub>:
  402428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040242c <__adddf3>:
  40242c:	b530      	push	{r4, r5, lr}
  40242e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402432:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402436:	ea94 0f05 	teq	r4, r5
  40243a:	bf08      	it	eq
  40243c:	ea90 0f02 	teqeq	r0, r2
  402440:	bf1f      	itttt	ne
  402442:	ea54 0c00 	orrsne.w	ip, r4, r0
  402446:	ea55 0c02 	orrsne.w	ip, r5, r2
  40244a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40244e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402452:	f000 80e2 	beq.w	40261a <__adddf3+0x1ee>
  402456:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40245a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40245e:	bfb8      	it	lt
  402460:	426d      	neglt	r5, r5
  402462:	dd0c      	ble.n	40247e <__adddf3+0x52>
  402464:	442c      	add	r4, r5
  402466:	ea80 0202 	eor.w	r2, r0, r2
  40246a:	ea81 0303 	eor.w	r3, r1, r3
  40246e:	ea82 0000 	eor.w	r0, r2, r0
  402472:	ea83 0101 	eor.w	r1, r3, r1
  402476:	ea80 0202 	eor.w	r2, r0, r2
  40247a:	ea81 0303 	eor.w	r3, r1, r3
  40247e:	2d36      	cmp	r5, #54	; 0x36
  402480:	bf88      	it	hi
  402482:	bd30      	pophi	{r4, r5, pc}
  402484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402488:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40248c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402494:	d002      	beq.n	40249c <__adddf3+0x70>
  402496:	4240      	negs	r0, r0
  402498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40249c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4024a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4024a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4024a8:	d002      	beq.n	4024b0 <__adddf3+0x84>
  4024aa:	4252      	negs	r2, r2
  4024ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4024b0:	ea94 0f05 	teq	r4, r5
  4024b4:	f000 80a7 	beq.w	402606 <__adddf3+0x1da>
  4024b8:	f1a4 0401 	sub.w	r4, r4, #1
  4024bc:	f1d5 0e20 	rsbs	lr, r5, #32
  4024c0:	db0d      	blt.n	4024de <__adddf3+0xb2>
  4024c2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4024c6:	fa22 f205 	lsr.w	r2, r2, r5
  4024ca:	1880      	adds	r0, r0, r2
  4024cc:	f141 0100 	adc.w	r1, r1, #0
  4024d0:	fa03 f20e 	lsl.w	r2, r3, lr
  4024d4:	1880      	adds	r0, r0, r2
  4024d6:	fa43 f305 	asr.w	r3, r3, r5
  4024da:	4159      	adcs	r1, r3
  4024dc:	e00e      	b.n	4024fc <__adddf3+0xd0>
  4024de:	f1a5 0520 	sub.w	r5, r5, #32
  4024e2:	f10e 0e20 	add.w	lr, lr, #32
  4024e6:	2a01      	cmp	r2, #1
  4024e8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4024ec:	bf28      	it	cs
  4024ee:	f04c 0c02 	orrcs.w	ip, ip, #2
  4024f2:	fa43 f305 	asr.w	r3, r3, r5
  4024f6:	18c0      	adds	r0, r0, r3
  4024f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4024fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402500:	d507      	bpl.n	402512 <__adddf3+0xe6>
  402502:	f04f 0e00 	mov.w	lr, #0
  402506:	f1dc 0c00 	rsbs	ip, ip, #0
  40250a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40250e:	eb6e 0101 	sbc.w	r1, lr, r1
  402512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402516:	d31b      	bcc.n	402550 <__adddf3+0x124>
  402518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40251c:	d30c      	bcc.n	402538 <__adddf3+0x10c>
  40251e:	0849      	lsrs	r1, r1, #1
  402520:	ea5f 0030 	movs.w	r0, r0, rrx
  402524:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402528:	f104 0401 	add.w	r4, r4, #1
  40252c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402534:	f080 809a 	bcs.w	40266c <__adddf3+0x240>
  402538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40253c:	bf08      	it	eq
  40253e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402542:	f150 0000 	adcs.w	r0, r0, #0
  402546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40254a:	ea41 0105 	orr.w	r1, r1, r5
  40254e:	bd30      	pop	{r4, r5, pc}
  402550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402554:	4140      	adcs	r0, r0
  402556:	eb41 0101 	adc.w	r1, r1, r1
  40255a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40255e:	f1a4 0401 	sub.w	r4, r4, #1
  402562:	d1e9      	bne.n	402538 <__adddf3+0x10c>
  402564:	f091 0f00 	teq	r1, #0
  402568:	bf04      	itt	eq
  40256a:	4601      	moveq	r1, r0
  40256c:	2000      	moveq	r0, #0
  40256e:	fab1 f381 	clz	r3, r1
  402572:	bf08      	it	eq
  402574:	3320      	addeq	r3, #32
  402576:	f1a3 030b 	sub.w	r3, r3, #11
  40257a:	f1b3 0220 	subs.w	r2, r3, #32
  40257e:	da0c      	bge.n	40259a <__adddf3+0x16e>
  402580:	320c      	adds	r2, #12
  402582:	dd08      	ble.n	402596 <__adddf3+0x16a>
  402584:	f102 0c14 	add.w	ip, r2, #20
  402588:	f1c2 020c 	rsb	r2, r2, #12
  40258c:	fa01 f00c 	lsl.w	r0, r1, ip
  402590:	fa21 f102 	lsr.w	r1, r1, r2
  402594:	e00c      	b.n	4025b0 <__adddf3+0x184>
  402596:	f102 0214 	add.w	r2, r2, #20
  40259a:	bfd8      	it	le
  40259c:	f1c2 0c20 	rsble	ip, r2, #32
  4025a0:	fa01 f102 	lsl.w	r1, r1, r2
  4025a4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4025a8:	bfdc      	itt	le
  4025aa:	ea41 010c 	orrle.w	r1, r1, ip
  4025ae:	4090      	lslle	r0, r2
  4025b0:	1ae4      	subs	r4, r4, r3
  4025b2:	bfa2      	ittt	ge
  4025b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4025b8:	4329      	orrge	r1, r5
  4025ba:	bd30      	popge	{r4, r5, pc}
  4025bc:	ea6f 0404 	mvn.w	r4, r4
  4025c0:	3c1f      	subs	r4, #31
  4025c2:	da1c      	bge.n	4025fe <__adddf3+0x1d2>
  4025c4:	340c      	adds	r4, #12
  4025c6:	dc0e      	bgt.n	4025e6 <__adddf3+0x1ba>
  4025c8:	f104 0414 	add.w	r4, r4, #20
  4025cc:	f1c4 0220 	rsb	r2, r4, #32
  4025d0:	fa20 f004 	lsr.w	r0, r0, r4
  4025d4:	fa01 f302 	lsl.w	r3, r1, r2
  4025d8:	ea40 0003 	orr.w	r0, r0, r3
  4025dc:	fa21 f304 	lsr.w	r3, r1, r4
  4025e0:	ea45 0103 	orr.w	r1, r5, r3
  4025e4:	bd30      	pop	{r4, r5, pc}
  4025e6:	f1c4 040c 	rsb	r4, r4, #12
  4025ea:	f1c4 0220 	rsb	r2, r4, #32
  4025ee:	fa20 f002 	lsr.w	r0, r0, r2
  4025f2:	fa01 f304 	lsl.w	r3, r1, r4
  4025f6:	ea40 0003 	orr.w	r0, r0, r3
  4025fa:	4629      	mov	r1, r5
  4025fc:	bd30      	pop	{r4, r5, pc}
  4025fe:	fa21 f004 	lsr.w	r0, r1, r4
  402602:	4629      	mov	r1, r5
  402604:	bd30      	pop	{r4, r5, pc}
  402606:	f094 0f00 	teq	r4, #0
  40260a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40260e:	bf06      	itte	eq
  402610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402614:	3401      	addeq	r4, #1
  402616:	3d01      	subne	r5, #1
  402618:	e74e      	b.n	4024b8 <__adddf3+0x8c>
  40261a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40261e:	bf18      	it	ne
  402620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402624:	d029      	beq.n	40267a <__adddf3+0x24e>
  402626:	ea94 0f05 	teq	r4, r5
  40262a:	bf08      	it	eq
  40262c:	ea90 0f02 	teqeq	r0, r2
  402630:	d005      	beq.n	40263e <__adddf3+0x212>
  402632:	ea54 0c00 	orrs.w	ip, r4, r0
  402636:	bf04      	itt	eq
  402638:	4619      	moveq	r1, r3
  40263a:	4610      	moveq	r0, r2
  40263c:	bd30      	pop	{r4, r5, pc}
  40263e:	ea91 0f03 	teq	r1, r3
  402642:	bf1e      	ittt	ne
  402644:	2100      	movne	r1, #0
  402646:	2000      	movne	r0, #0
  402648:	bd30      	popne	{r4, r5, pc}
  40264a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40264e:	d105      	bne.n	40265c <__adddf3+0x230>
  402650:	0040      	lsls	r0, r0, #1
  402652:	4149      	adcs	r1, r1
  402654:	bf28      	it	cs
  402656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40265a:	bd30      	pop	{r4, r5, pc}
  40265c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402660:	bf3c      	itt	cc
  402662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402666:	bd30      	popcc	{r4, r5, pc}
  402668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40266c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402674:	f04f 0000 	mov.w	r0, #0
  402678:	bd30      	pop	{r4, r5, pc}
  40267a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40267e:	bf1a      	itte	ne
  402680:	4619      	movne	r1, r3
  402682:	4610      	movne	r0, r2
  402684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402688:	bf1c      	itt	ne
  40268a:	460b      	movne	r3, r1
  40268c:	4602      	movne	r2, r0
  40268e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402692:	bf06      	itte	eq
  402694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402698:	ea91 0f03 	teqeq	r1, r3
  40269c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4026a0:	bd30      	pop	{r4, r5, pc}
  4026a2:	bf00      	nop

004026a4 <__aeabi_ui2d>:
  4026a4:	f090 0f00 	teq	r0, #0
  4026a8:	bf04      	itt	eq
  4026aa:	2100      	moveq	r1, #0
  4026ac:	4770      	bxeq	lr
  4026ae:	b530      	push	{r4, r5, lr}
  4026b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4026b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4026b8:	f04f 0500 	mov.w	r5, #0
  4026bc:	f04f 0100 	mov.w	r1, #0
  4026c0:	e750      	b.n	402564 <__adddf3+0x138>
  4026c2:	bf00      	nop

004026c4 <__aeabi_i2d>:
  4026c4:	f090 0f00 	teq	r0, #0
  4026c8:	bf04      	itt	eq
  4026ca:	2100      	moveq	r1, #0
  4026cc:	4770      	bxeq	lr
  4026ce:	b530      	push	{r4, r5, lr}
  4026d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4026d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4026d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4026dc:	bf48      	it	mi
  4026de:	4240      	negmi	r0, r0
  4026e0:	f04f 0100 	mov.w	r1, #0
  4026e4:	e73e      	b.n	402564 <__adddf3+0x138>
  4026e6:	bf00      	nop

004026e8 <__aeabi_f2d>:
  4026e8:	0042      	lsls	r2, r0, #1
  4026ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4026ee:	ea4f 0131 	mov.w	r1, r1, rrx
  4026f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4026f6:	bf1f      	itttt	ne
  4026f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4026fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402704:	4770      	bxne	lr
  402706:	f092 0f00 	teq	r2, #0
  40270a:	bf14      	ite	ne
  40270c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402710:	4770      	bxeq	lr
  402712:	b530      	push	{r4, r5, lr}
  402714:	f44f 7460 	mov.w	r4, #896	; 0x380
  402718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40271c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402720:	e720      	b.n	402564 <__adddf3+0x138>
  402722:	bf00      	nop

00402724 <__aeabi_ul2d>:
  402724:	ea50 0201 	orrs.w	r2, r0, r1
  402728:	bf08      	it	eq
  40272a:	4770      	bxeq	lr
  40272c:	b530      	push	{r4, r5, lr}
  40272e:	f04f 0500 	mov.w	r5, #0
  402732:	e00a      	b.n	40274a <__aeabi_l2d+0x16>

00402734 <__aeabi_l2d>:
  402734:	ea50 0201 	orrs.w	r2, r0, r1
  402738:	bf08      	it	eq
  40273a:	4770      	bxeq	lr
  40273c:	b530      	push	{r4, r5, lr}
  40273e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402742:	d502      	bpl.n	40274a <__aeabi_l2d+0x16>
  402744:	4240      	negs	r0, r0
  402746:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40274a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40274e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402752:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402756:	f43f aedc 	beq.w	402512 <__adddf3+0xe6>
  40275a:	f04f 0203 	mov.w	r2, #3
  40275e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402762:	bf18      	it	ne
  402764:	3203      	addne	r2, #3
  402766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40276a:	bf18      	it	ne
  40276c:	3203      	addne	r2, #3
  40276e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402772:	f1c2 0320 	rsb	r3, r2, #32
  402776:	fa00 fc03 	lsl.w	ip, r0, r3
  40277a:	fa20 f002 	lsr.w	r0, r0, r2
  40277e:	fa01 fe03 	lsl.w	lr, r1, r3
  402782:	ea40 000e 	orr.w	r0, r0, lr
  402786:	fa21 f102 	lsr.w	r1, r1, r2
  40278a:	4414      	add	r4, r2
  40278c:	e6c1      	b.n	402512 <__adddf3+0xe6>
  40278e:	bf00      	nop

00402790 <__aeabi_dmul>:
  402790:	b570      	push	{r4, r5, r6, lr}
  402792:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402796:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40279a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40279e:	bf1d      	ittte	ne
  4027a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4027a4:	ea94 0f0c 	teqne	r4, ip
  4027a8:	ea95 0f0c 	teqne	r5, ip
  4027ac:	f000 f8de 	bleq	40296c <__aeabi_dmul+0x1dc>
  4027b0:	442c      	add	r4, r5
  4027b2:	ea81 0603 	eor.w	r6, r1, r3
  4027b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4027ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4027be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4027c2:	bf18      	it	ne
  4027c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4027c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4027cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4027d0:	d038      	beq.n	402844 <__aeabi_dmul+0xb4>
  4027d2:	fba0 ce02 	umull	ip, lr, r0, r2
  4027d6:	f04f 0500 	mov.w	r5, #0
  4027da:	fbe1 e502 	umlal	lr, r5, r1, r2
  4027de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4027e2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4027e6:	f04f 0600 	mov.w	r6, #0
  4027ea:	fbe1 5603 	umlal	r5, r6, r1, r3
  4027ee:	f09c 0f00 	teq	ip, #0
  4027f2:	bf18      	it	ne
  4027f4:	f04e 0e01 	orrne.w	lr, lr, #1
  4027f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4027fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402800:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402804:	d204      	bcs.n	402810 <__aeabi_dmul+0x80>
  402806:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40280a:	416d      	adcs	r5, r5
  40280c:	eb46 0606 	adc.w	r6, r6, r6
  402810:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402814:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402818:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40281c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402820:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402824:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402828:	bf88      	it	hi
  40282a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40282e:	d81e      	bhi.n	40286e <__aeabi_dmul+0xde>
  402830:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402834:	bf08      	it	eq
  402836:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40283a:	f150 0000 	adcs.w	r0, r0, #0
  40283e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402842:	bd70      	pop	{r4, r5, r6, pc}
  402844:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402848:	ea46 0101 	orr.w	r1, r6, r1
  40284c:	ea40 0002 	orr.w	r0, r0, r2
  402850:	ea81 0103 	eor.w	r1, r1, r3
  402854:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402858:	bfc2      	ittt	gt
  40285a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40285e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402862:	bd70      	popgt	{r4, r5, r6, pc}
  402864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402868:	f04f 0e00 	mov.w	lr, #0
  40286c:	3c01      	subs	r4, #1
  40286e:	f300 80ab 	bgt.w	4029c8 <__aeabi_dmul+0x238>
  402872:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402876:	bfde      	ittt	le
  402878:	2000      	movle	r0, #0
  40287a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40287e:	bd70      	pople	{r4, r5, r6, pc}
  402880:	f1c4 0400 	rsb	r4, r4, #0
  402884:	3c20      	subs	r4, #32
  402886:	da35      	bge.n	4028f4 <__aeabi_dmul+0x164>
  402888:	340c      	adds	r4, #12
  40288a:	dc1b      	bgt.n	4028c4 <__aeabi_dmul+0x134>
  40288c:	f104 0414 	add.w	r4, r4, #20
  402890:	f1c4 0520 	rsb	r5, r4, #32
  402894:	fa00 f305 	lsl.w	r3, r0, r5
  402898:	fa20 f004 	lsr.w	r0, r0, r4
  40289c:	fa01 f205 	lsl.w	r2, r1, r5
  4028a0:	ea40 0002 	orr.w	r0, r0, r2
  4028a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4028a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4028ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4028b0:	fa21 f604 	lsr.w	r6, r1, r4
  4028b4:	eb42 0106 	adc.w	r1, r2, r6
  4028b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4028bc:	bf08      	it	eq
  4028be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4028c2:	bd70      	pop	{r4, r5, r6, pc}
  4028c4:	f1c4 040c 	rsb	r4, r4, #12
  4028c8:	f1c4 0520 	rsb	r5, r4, #32
  4028cc:	fa00 f304 	lsl.w	r3, r0, r4
  4028d0:	fa20 f005 	lsr.w	r0, r0, r5
  4028d4:	fa01 f204 	lsl.w	r2, r1, r4
  4028d8:	ea40 0002 	orr.w	r0, r0, r2
  4028dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4028e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4028e4:	f141 0100 	adc.w	r1, r1, #0
  4028e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4028ec:	bf08      	it	eq
  4028ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4028f2:	bd70      	pop	{r4, r5, r6, pc}
  4028f4:	f1c4 0520 	rsb	r5, r4, #32
  4028f8:	fa00 f205 	lsl.w	r2, r0, r5
  4028fc:	ea4e 0e02 	orr.w	lr, lr, r2
  402900:	fa20 f304 	lsr.w	r3, r0, r4
  402904:	fa01 f205 	lsl.w	r2, r1, r5
  402908:	ea43 0302 	orr.w	r3, r3, r2
  40290c:	fa21 f004 	lsr.w	r0, r1, r4
  402910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402914:	fa21 f204 	lsr.w	r2, r1, r4
  402918:	ea20 0002 	bic.w	r0, r0, r2
  40291c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402924:	bf08      	it	eq
  402926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40292a:	bd70      	pop	{r4, r5, r6, pc}
  40292c:	f094 0f00 	teq	r4, #0
  402930:	d10f      	bne.n	402952 <__aeabi_dmul+0x1c2>
  402932:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402936:	0040      	lsls	r0, r0, #1
  402938:	eb41 0101 	adc.w	r1, r1, r1
  40293c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402940:	bf08      	it	eq
  402942:	3c01      	subeq	r4, #1
  402944:	d0f7      	beq.n	402936 <__aeabi_dmul+0x1a6>
  402946:	ea41 0106 	orr.w	r1, r1, r6
  40294a:	f095 0f00 	teq	r5, #0
  40294e:	bf18      	it	ne
  402950:	4770      	bxne	lr
  402952:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402956:	0052      	lsls	r2, r2, #1
  402958:	eb43 0303 	adc.w	r3, r3, r3
  40295c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402960:	bf08      	it	eq
  402962:	3d01      	subeq	r5, #1
  402964:	d0f7      	beq.n	402956 <__aeabi_dmul+0x1c6>
  402966:	ea43 0306 	orr.w	r3, r3, r6
  40296a:	4770      	bx	lr
  40296c:	ea94 0f0c 	teq	r4, ip
  402970:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402974:	bf18      	it	ne
  402976:	ea95 0f0c 	teqne	r5, ip
  40297a:	d00c      	beq.n	402996 <__aeabi_dmul+0x206>
  40297c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402980:	bf18      	it	ne
  402982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402986:	d1d1      	bne.n	40292c <__aeabi_dmul+0x19c>
  402988:	ea81 0103 	eor.w	r1, r1, r3
  40298c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402990:	f04f 0000 	mov.w	r0, #0
  402994:	bd70      	pop	{r4, r5, r6, pc}
  402996:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40299a:	bf06      	itte	eq
  40299c:	4610      	moveq	r0, r2
  40299e:	4619      	moveq	r1, r3
  4029a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4029a4:	d019      	beq.n	4029da <__aeabi_dmul+0x24a>
  4029a6:	ea94 0f0c 	teq	r4, ip
  4029aa:	d102      	bne.n	4029b2 <__aeabi_dmul+0x222>
  4029ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4029b0:	d113      	bne.n	4029da <__aeabi_dmul+0x24a>
  4029b2:	ea95 0f0c 	teq	r5, ip
  4029b6:	d105      	bne.n	4029c4 <__aeabi_dmul+0x234>
  4029b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4029bc:	bf1c      	itt	ne
  4029be:	4610      	movne	r0, r2
  4029c0:	4619      	movne	r1, r3
  4029c2:	d10a      	bne.n	4029da <__aeabi_dmul+0x24a>
  4029c4:	ea81 0103 	eor.w	r1, r1, r3
  4029c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4029cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4029d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4029d4:	f04f 0000 	mov.w	r0, #0
  4029d8:	bd70      	pop	{r4, r5, r6, pc}
  4029da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4029de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4029e2:	bd70      	pop	{r4, r5, r6, pc}

004029e4 <__aeabi_ddiv>:
  4029e4:	b570      	push	{r4, r5, r6, lr}
  4029e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4029ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4029ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4029f2:	bf1d      	ittte	ne
  4029f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4029f8:	ea94 0f0c 	teqne	r4, ip
  4029fc:	ea95 0f0c 	teqne	r5, ip
  402a00:	f000 f8a7 	bleq	402b52 <__aeabi_ddiv+0x16e>
  402a04:	eba4 0405 	sub.w	r4, r4, r5
  402a08:	ea81 0e03 	eor.w	lr, r1, r3
  402a0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402a10:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402a14:	f000 8088 	beq.w	402b28 <__aeabi_ddiv+0x144>
  402a18:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402a1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402a20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402a24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402a28:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402a2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402a30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402a34:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402a38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402a3c:	429d      	cmp	r5, r3
  402a3e:	bf08      	it	eq
  402a40:	4296      	cmpeq	r6, r2
  402a42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402a46:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402a4a:	d202      	bcs.n	402a52 <__aeabi_ddiv+0x6e>
  402a4c:	085b      	lsrs	r3, r3, #1
  402a4e:	ea4f 0232 	mov.w	r2, r2, rrx
  402a52:	1ab6      	subs	r6, r6, r2
  402a54:	eb65 0503 	sbc.w	r5, r5, r3
  402a58:	085b      	lsrs	r3, r3, #1
  402a5a:	ea4f 0232 	mov.w	r2, r2, rrx
  402a5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402a62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402a66:	ebb6 0e02 	subs.w	lr, r6, r2
  402a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a6e:	bf22      	ittt	cs
  402a70:	1ab6      	subcs	r6, r6, r2
  402a72:	4675      	movcs	r5, lr
  402a74:	ea40 000c 	orrcs.w	r0, r0, ip
  402a78:	085b      	lsrs	r3, r3, #1
  402a7a:	ea4f 0232 	mov.w	r2, r2, rrx
  402a7e:	ebb6 0e02 	subs.w	lr, r6, r2
  402a82:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a86:	bf22      	ittt	cs
  402a88:	1ab6      	subcs	r6, r6, r2
  402a8a:	4675      	movcs	r5, lr
  402a8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402a90:	085b      	lsrs	r3, r3, #1
  402a92:	ea4f 0232 	mov.w	r2, r2, rrx
  402a96:	ebb6 0e02 	subs.w	lr, r6, r2
  402a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a9e:	bf22      	ittt	cs
  402aa0:	1ab6      	subcs	r6, r6, r2
  402aa2:	4675      	movcs	r5, lr
  402aa4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402aa8:	085b      	lsrs	r3, r3, #1
  402aaa:	ea4f 0232 	mov.w	r2, r2, rrx
  402aae:	ebb6 0e02 	subs.w	lr, r6, r2
  402ab2:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ab6:	bf22      	ittt	cs
  402ab8:	1ab6      	subcs	r6, r6, r2
  402aba:	4675      	movcs	r5, lr
  402abc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402ac0:	ea55 0e06 	orrs.w	lr, r5, r6
  402ac4:	d018      	beq.n	402af8 <__aeabi_ddiv+0x114>
  402ac6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402aca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402ace:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402ad2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402ad6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402ada:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402ade:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402ae2:	d1c0      	bne.n	402a66 <__aeabi_ddiv+0x82>
  402ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ae8:	d10b      	bne.n	402b02 <__aeabi_ddiv+0x11e>
  402aea:	ea41 0100 	orr.w	r1, r1, r0
  402aee:	f04f 0000 	mov.w	r0, #0
  402af2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402af6:	e7b6      	b.n	402a66 <__aeabi_ddiv+0x82>
  402af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402afc:	bf04      	itt	eq
  402afe:	4301      	orreq	r1, r0
  402b00:	2000      	moveq	r0, #0
  402b02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402b06:	bf88      	it	hi
  402b08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402b0c:	f63f aeaf 	bhi.w	40286e <__aeabi_dmul+0xde>
  402b10:	ebb5 0c03 	subs.w	ip, r5, r3
  402b14:	bf04      	itt	eq
  402b16:	ebb6 0c02 	subseq.w	ip, r6, r2
  402b1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402b1e:	f150 0000 	adcs.w	r0, r0, #0
  402b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402b26:	bd70      	pop	{r4, r5, r6, pc}
  402b28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402b2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402b30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402b34:	bfc2      	ittt	gt
  402b36:	ebd4 050c 	rsbsgt	r5, r4, ip
  402b3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b3e:	bd70      	popgt	{r4, r5, r6, pc}
  402b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b44:	f04f 0e00 	mov.w	lr, #0
  402b48:	3c01      	subs	r4, #1
  402b4a:	e690      	b.n	40286e <__aeabi_dmul+0xde>
  402b4c:	ea45 0e06 	orr.w	lr, r5, r6
  402b50:	e68d      	b.n	40286e <__aeabi_dmul+0xde>
  402b52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402b56:	ea94 0f0c 	teq	r4, ip
  402b5a:	bf08      	it	eq
  402b5c:	ea95 0f0c 	teqeq	r5, ip
  402b60:	f43f af3b 	beq.w	4029da <__aeabi_dmul+0x24a>
  402b64:	ea94 0f0c 	teq	r4, ip
  402b68:	d10a      	bne.n	402b80 <__aeabi_ddiv+0x19c>
  402b6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402b6e:	f47f af34 	bne.w	4029da <__aeabi_dmul+0x24a>
  402b72:	ea95 0f0c 	teq	r5, ip
  402b76:	f47f af25 	bne.w	4029c4 <__aeabi_dmul+0x234>
  402b7a:	4610      	mov	r0, r2
  402b7c:	4619      	mov	r1, r3
  402b7e:	e72c      	b.n	4029da <__aeabi_dmul+0x24a>
  402b80:	ea95 0f0c 	teq	r5, ip
  402b84:	d106      	bne.n	402b94 <__aeabi_ddiv+0x1b0>
  402b86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402b8a:	f43f aefd 	beq.w	402988 <__aeabi_dmul+0x1f8>
  402b8e:	4610      	mov	r0, r2
  402b90:	4619      	mov	r1, r3
  402b92:	e722      	b.n	4029da <__aeabi_dmul+0x24a>
  402b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402b98:	bf18      	it	ne
  402b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402b9e:	f47f aec5 	bne.w	40292c <__aeabi_dmul+0x19c>
  402ba2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402ba6:	f47f af0d 	bne.w	4029c4 <__aeabi_dmul+0x234>
  402baa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402bae:	f47f aeeb 	bne.w	402988 <__aeabi_dmul+0x1f8>
  402bb2:	e712      	b.n	4029da <__aeabi_dmul+0x24a>

00402bb4 <__aeabi_d2f>:
  402bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402bbc:	bf24      	itt	cs
  402bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402bc6:	d90d      	bls.n	402be4 <__aeabi_d2f+0x30>
  402bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402bdc:	bf08      	it	eq
  402bde:	f020 0001 	biceq.w	r0, r0, #1
  402be2:	4770      	bx	lr
  402be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402be8:	d121      	bne.n	402c2e <__aeabi_d2f+0x7a>
  402bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402bee:	bfbc      	itt	lt
  402bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402bf4:	4770      	bxlt	lr
  402bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402bfe:	f1c2 0218 	rsb	r2, r2, #24
  402c02:	f1c2 0c20 	rsb	ip, r2, #32
  402c06:	fa10 f30c 	lsls.w	r3, r0, ip
  402c0a:	fa20 f002 	lsr.w	r0, r0, r2
  402c0e:	bf18      	it	ne
  402c10:	f040 0001 	orrne.w	r0, r0, #1
  402c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
  402c20:	ea40 000c 	orr.w	r0, r0, ip
  402c24:	fa23 f302 	lsr.w	r3, r3, r2
  402c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402c2c:	e7cc      	b.n	402bc8 <__aeabi_d2f+0x14>
  402c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402c32:	d107      	bne.n	402c44 <__aeabi_d2f+0x90>
  402c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402c38:	bf1e      	ittt	ne
  402c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402c42:	4770      	bxne	lr
  402c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402c50:	4770      	bx	lr
  402c52:	bf00      	nop

00402c54 <__libc_init_array>:
  402c54:	b570      	push	{r4, r5, r6, lr}
  402c56:	4e0d      	ldr	r6, [pc, #52]	; (402c8c <__libc_init_array+0x38>)
  402c58:	4c0d      	ldr	r4, [pc, #52]	; (402c90 <__libc_init_array+0x3c>)
  402c5a:	1ba4      	subs	r4, r4, r6
  402c5c:	10a4      	asrs	r4, r4, #2
  402c5e:	2500      	movs	r5, #0
  402c60:	42a5      	cmp	r5, r4
  402c62:	d109      	bne.n	402c78 <__libc_init_array+0x24>
  402c64:	4e0b      	ldr	r6, [pc, #44]	; (402c94 <__libc_init_array+0x40>)
  402c66:	4c0c      	ldr	r4, [pc, #48]	; (402c98 <__libc_init_array+0x44>)
  402c68:	f002 f812 	bl	404c90 <_init>
  402c6c:	1ba4      	subs	r4, r4, r6
  402c6e:	10a4      	asrs	r4, r4, #2
  402c70:	2500      	movs	r5, #0
  402c72:	42a5      	cmp	r5, r4
  402c74:	d105      	bne.n	402c82 <__libc_init_array+0x2e>
  402c76:	bd70      	pop	{r4, r5, r6, pc}
  402c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402c7c:	4798      	blx	r3
  402c7e:	3501      	adds	r5, #1
  402c80:	e7ee      	b.n	402c60 <__libc_init_array+0xc>
  402c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402c86:	4798      	blx	r3
  402c88:	3501      	adds	r5, #1
  402c8a:	e7f2      	b.n	402c72 <__libc_init_array+0x1e>
  402c8c:	00404c9c 	.word	0x00404c9c
  402c90:	00404c9c 	.word	0x00404c9c
  402c94:	00404c9c 	.word	0x00404c9c
  402c98:	00404ca0 	.word	0x00404ca0

00402c9c <malloc>:
  402c9c:	4b02      	ldr	r3, [pc, #8]	; (402ca8 <malloc+0xc>)
  402c9e:	4601      	mov	r1, r0
  402ca0:	6818      	ldr	r0, [r3, #0]
  402ca2:	f000 b86d 	b.w	402d80 <_malloc_r>
  402ca6:	bf00      	nop
  402ca8:	20400000 	.word	0x20400000

00402cac <free>:
  402cac:	4b02      	ldr	r3, [pc, #8]	; (402cb8 <free+0xc>)
  402cae:	4601      	mov	r1, r0
  402cb0:	6818      	ldr	r0, [r3, #0]
  402cb2:	f000 b817 	b.w	402ce4 <_free_r>
  402cb6:	bf00      	nop
  402cb8:	20400000 	.word	0x20400000

00402cbc <memcpy>:
  402cbc:	b510      	push	{r4, lr}
  402cbe:	1e43      	subs	r3, r0, #1
  402cc0:	440a      	add	r2, r1
  402cc2:	4291      	cmp	r1, r2
  402cc4:	d100      	bne.n	402cc8 <memcpy+0xc>
  402cc6:	bd10      	pop	{r4, pc}
  402cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
  402ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
  402cd0:	e7f7      	b.n	402cc2 <memcpy+0x6>

00402cd2 <memset>:
  402cd2:	4402      	add	r2, r0
  402cd4:	4603      	mov	r3, r0
  402cd6:	4293      	cmp	r3, r2
  402cd8:	d100      	bne.n	402cdc <memset+0xa>
  402cda:	4770      	bx	lr
  402cdc:	f803 1b01 	strb.w	r1, [r3], #1
  402ce0:	e7f9      	b.n	402cd6 <memset+0x4>
	...

00402ce4 <_free_r>:
  402ce4:	b538      	push	{r3, r4, r5, lr}
  402ce6:	4605      	mov	r5, r0
  402ce8:	2900      	cmp	r1, #0
  402cea:	d045      	beq.n	402d78 <_free_r+0x94>
  402cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
  402cf0:	1f0c      	subs	r4, r1, #4
  402cf2:	2b00      	cmp	r3, #0
  402cf4:	bfb8      	it	lt
  402cf6:	18e4      	addlt	r4, r4, r3
  402cf8:	f000 fc8c 	bl	403614 <__malloc_lock>
  402cfc:	4a1f      	ldr	r2, [pc, #124]	; (402d7c <_free_r+0x98>)
  402cfe:	6813      	ldr	r3, [r2, #0]
  402d00:	4610      	mov	r0, r2
  402d02:	b933      	cbnz	r3, 402d12 <_free_r+0x2e>
  402d04:	6063      	str	r3, [r4, #4]
  402d06:	6014      	str	r4, [r2, #0]
  402d08:	4628      	mov	r0, r5
  402d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402d0e:	f000 bc82 	b.w	403616 <__malloc_unlock>
  402d12:	42a3      	cmp	r3, r4
  402d14:	d90c      	bls.n	402d30 <_free_r+0x4c>
  402d16:	6821      	ldr	r1, [r4, #0]
  402d18:	1862      	adds	r2, r4, r1
  402d1a:	4293      	cmp	r3, r2
  402d1c:	bf04      	itt	eq
  402d1e:	681a      	ldreq	r2, [r3, #0]
  402d20:	685b      	ldreq	r3, [r3, #4]
  402d22:	6063      	str	r3, [r4, #4]
  402d24:	bf04      	itt	eq
  402d26:	1852      	addeq	r2, r2, r1
  402d28:	6022      	streq	r2, [r4, #0]
  402d2a:	6004      	str	r4, [r0, #0]
  402d2c:	e7ec      	b.n	402d08 <_free_r+0x24>
  402d2e:	4613      	mov	r3, r2
  402d30:	685a      	ldr	r2, [r3, #4]
  402d32:	b10a      	cbz	r2, 402d38 <_free_r+0x54>
  402d34:	42a2      	cmp	r2, r4
  402d36:	d9fa      	bls.n	402d2e <_free_r+0x4a>
  402d38:	6819      	ldr	r1, [r3, #0]
  402d3a:	1858      	adds	r0, r3, r1
  402d3c:	42a0      	cmp	r0, r4
  402d3e:	d10b      	bne.n	402d58 <_free_r+0x74>
  402d40:	6820      	ldr	r0, [r4, #0]
  402d42:	4401      	add	r1, r0
  402d44:	1858      	adds	r0, r3, r1
  402d46:	4282      	cmp	r2, r0
  402d48:	6019      	str	r1, [r3, #0]
  402d4a:	d1dd      	bne.n	402d08 <_free_r+0x24>
  402d4c:	6810      	ldr	r0, [r2, #0]
  402d4e:	6852      	ldr	r2, [r2, #4]
  402d50:	605a      	str	r2, [r3, #4]
  402d52:	4401      	add	r1, r0
  402d54:	6019      	str	r1, [r3, #0]
  402d56:	e7d7      	b.n	402d08 <_free_r+0x24>
  402d58:	d902      	bls.n	402d60 <_free_r+0x7c>
  402d5a:	230c      	movs	r3, #12
  402d5c:	602b      	str	r3, [r5, #0]
  402d5e:	e7d3      	b.n	402d08 <_free_r+0x24>
  402d60:	6820      	ldr	r0, [r4, #0]
  402d62:	1821      	adds	r1, r4, r0
  402d64:	428a      	cmp	r2, r1
  402d66:	bf04      	itt	eq
  402d68:	6811      	ldreq	r1, [r2, #0]
  402d6a:	6852      	ldreq	r2, [r2, #4]
  402d6c:	6062      	str	r2, [r4, #4]
  402d6e:	bf04      	itt	eq
  402d70:	1809      	addeq	r1, r1, r0
  402d72:	6021      	streq	r1, [r4, #0]
  402d74:	605c      	str	r4, [r3, #4]
  402d76:	e7c7      	b.n	402d08 <_free_r+0x24>
  402d78:	bd38      	pop	{r3, r4, r5, pc}
  402d7a:	bf00      	nop
  402d7c:	204000c4 	.word	0x204000c4

00402d80 <_malloc_r>:
  402d80:	b570      	push	{r4, r5, r6, lr}
  402d82:	1ccd      	adds	r5, r1, #3
  402d84:	f025 0503 	bic.w	r5, r5, #3
  402d88:	3508      	adds	r5, #8
  402d8a:	2d0c      	cmp	r5, #12
  402d8c:	bf38      	it	cc
  402d8e:	250c      	movcc	r5, #12
  402d90:	2d00      	cmp	r5, #0
  402d92:	4606      	mov	r6, r0
  402d94:	db01      	blt.n	402d9a <_malloc_r+0x1a>
  402d96:	42a9      	cmp	r1, r5
  402d98:	d903      	bls.n	402da2 <_malloc_r+0x22>
  402d9a:	230c      	movs	r3, #12
  402d9c:	6033      	str	r3, [r6, #0]
  402d9e:	2000      	movs	r0, #0
  402da0:	bd70      	pop	{r4, r5, r6, pc}
  402da2:	f000 fc37 	bl	403614 <__malloc_lock>
  402da6:	4a23      	ldr	r2, [pc, #140]	; (402e34 <_malloc_r+0xb4>)
  402da8:	6814      	ldr	r4, [r2, #0]
  402daa:	4621      	mov	r1, r4
  402dac:	b991      	cbnz	r1, 402dd4 <_malloc_r+0x54>
  402dae:	4c22      	ldr	r4, [pc, #136]	; (402e38 <_malloc_r+0xb8>)
  402db0:	6823      	ldr	r3, [r4, #0]
  402db2:	b91b      	cbnz	r3, 402dbc <_malloc_r+0x3c>
  402db4:	4630      	mov	r0, r6
  402db6:	f000 f8bd 	bl	402f34 <_sbrk_r>
  402dba:	6020      	str	r0, [r4, #0]
  402dbc:	4629      	mov	r1, r5
  402dbe:	4630      	mov	r0, r6
  402dc0:	f000 f8b8 	bl	402f34 <_sbrk_r>
  402dc4:	1c43      	adds	r3, r0, #1
  402dc6:	d126      	bne.n	402e16 <_malloc_r+0x96>
  402dc8:	230c      	movs	r3, #12
  402dca:	6033      	str	r3, [r6, #0]
  402dcc:	4630      	mov	r0, r6
  402dce:	f000 fc22 	bl	403616 <__malloc_unlock>
  402dd2:	e7e4      	b.n	402d9e <_malloc_r+0x1e>
  402dd4:	680b      	ldr	r3, [r1, #0]
  402dd6:	1b5b      	subs	r3, r3, r5
  402dd8:	d41a      	bmi.n	402e10 <_malloc_r+0x90>
  402dda:	2b0b      	cmp	r3, #11
  402ddc:	d90f      	bls.n	402dfe <_malloc_r+0x7e>
  402dde:	600b      	str	r3, [r1, #0]
  402de0:	50cd      	str	r5, [r1, r3]
  402de2:	18cc      	adds	r4, r1, r3
  402de4:	4630      	mov	r0, r6
  402de6:	f000 fc16 	bl	403616 <__malloc_unlock>
  402dea:	f104 000b 	add.w	r0, r4, #11
  402dee:	1d23      	adds	r3, r4, #4
  402df0:	f020 0007 	bic.w	r0, r0, #7
  402df4:	1ac3      	subs	r3, r0, r3
  402df6:	d01b      	beq.n	402e30 <_malloc_r+0xb0>
  402df8:	425a      	negs	r2, r3
  402dfa:	50e2      	str	r2, [r4, r3]
  402dfc:	bd70      	pop	{r4, r5, r6, pc}
  402dfe:	428c      	cmp	r4, r1
  402e00:	bf0d      	iteet	eq
  402e02:	6863      	ldreq	r3, [r4, #4]
  402e04:	684b      	ldrne	r3, [r1, #4]
  402e06:	6063      	strne	r3, [r4, #4]
  402e08:	6013      	streq	r3, [r2, #0]
  402e0a:	bf18      	it	ne
  402e0c:	460c      	movne	r4, r1
  402e0e:	e7e9      	b.n	402de4 <_malloc_r+0x64>
  402e10:	460c      	mov	r4, r1
  402e12:	6849      	ldr	r1, [r1, #4]
  402e14:	e7ca      	b.n	402dac <_malloc_r+0x2c>
  402e16:	1cc4      	adds	r4, r0, #3
  402e18:	f024 0403 	bic.w	r4, r4, #3
  402e1c:	42a0      	cmp	r0, r4
  402e1e:	d005      	beq.n	402e2c <_malloc_r+0xac>
  402e20:	1a21      	subs	r1, r4, r0
  402e22:	4630      	mov	r0, r6
  402e24:	f000 f886 	bl	402f34 <_sbrk_r>
  402e28:	3001      	adds	r0, #1
  402e2a:	d0cd      	beq.n	402dc8 <_malloc_r+0x48>
  402e2c:	6025      	str	r5, [r4, #0]
  402e2e:	e7d9      	b.n	402de4 <_malloc_r+0x64>
  402e30:	bd70      	pop	{r4, r5, r6, pc}
  402e32:	bf00      	nop
  402e34:	204000c4 	.word	0x204000c4
  402e38:	204000c8 	.word	0x204000c8

00402e3c <iprintf>:
  402e3c:	b40f      	push	{r0, r1, r2, r3}
  402e3e:	4b0a      	ldr	r3, [pc, #40]	; (402e68 <iprintf+0x2c>)
  402e40:	b513      	push	{r0, r1, r4, lr}
  402e42:	681c      	ldr	r4, [r3, #0]
  402e44:	b124      	cbz	r4, 402e50 <iprintf+0x14>
  402e46:	69a3      	ldr	r3, [r4, #24]
  402e48:	b913      	cbnz	r3, 402e50 <iprintf+0x14>
  402e4a:	4620      	mov	r0, r4
  402e4c:	f000 faf4 	bl	403438 <__sinit>
  402e50:	ab05      	add	r3, sp, #20
  402e52:	9a04      	ldr	r2, [sp, #16]
  402e54:	68a1      	ldr	r1, [r4, #8]
  402e56:	9301      	str	r3, [sp, #4]
  402e58:	4620      	mov	r0, r4
  402e5a:	f000 fc05 	bl	403668 <_vfiprintf_r>
  402e5e:	b002      	add	sp, #8
  402e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402e64:	b004      	add	sp, #16
  402e66:	4770      	bx	lr
  402e68:	20400000 	.word	0x20400000

00402e6c <_puts_r>:
  402e6c:	b570      	push	{r4, r5, r6, lr}
  402e6e:	460e      	mov	r6, r1
  402e70:	4605      	mov	r5, r0
  402e72:	b118      	cbz	r0, 402e7c <_puts_r+0x10>
  402e74:	6983      	ldr	r3, [r0, #24]
  402e76:	b90b      	cbnz	r3, 402e7c <_puts_r+0x10>
  402e78:	f000 fade 	bl	403438 <__sinit>
  402e7c:	69ab      	ldr	r3, [r5, #24]
  402e7e:	68ac      	ldr	r4, [r5, #8]
  402e80:	b913      	cbnz	r3, 402e88 <_puts_r+0x1c>
  402e82:	4628      	mov	r0, r5
  402e84:	f000 fad8 	bl	403438 <__sinit>
  402e88:	4b23      	ldr	r3, [pc, #140]	; (402f18 <_puts_r+0xac>)
  402e8a:	429c      	cmp	r4, r3
  402e8c:	d117      	bne.n	402ebe <_puts_r+0x52>
  402e8e:	686c      	ldr	r4, [r5, #4]
  402e90:	89a3      	ldrh	r3, [r4, #12]
  402e92:	071b      	lsls	r3, r3, #28
  402e94:	d51d      	bpl.n	402ed2 <_puts_r+0x66>
  402e96:	6923      	ldr	r3, [r4, #16]
  402e98:	b1db      	cbz	r3, 402ed2 <_puts_r+0x66>
  402e9a:	3e01      	subs	r6, #1
  402e9c:	68a3      	ldr	r3, [r4, #8]
  402e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402ea2:	3b01      	subs	r3, #1
  402ea4:	60a3      	str	r3, [r4, #8]
  402ea6:	b9e9      	cbnz	r1, 402ee4 <_puts_r+0x78>
  402ea8:	2b00      	cmp	r3, #0
  402eaa:	da2e      	bge.n	402f0a <_puts_r+0x9e>
  402eac:	4622      	mov	r2, r4
  402eae:	210a      	movs	r1, #10
  402eb0:	4628      	mov	r0, r5
  402eb2:	f000 f90f 	bl	4030d4 <__swbuf_r>
  402eb6:	3001      	adds	r0, #1
  402eb8:	d011      	beq.n	402ede <_puts_r+0x72>
  402eba:	200a      	movs	r0, #10
  402ebc:	bd70      	pop	{r4, r5, r6, pc}
  402ebe:	4b17      	ldr	r3, [pc, #92]	; (402f1c <_puts_r+0xb0>)
  402ec0:	429c      	cmp	r4, r3
  402ec2:	d101      	bne.n	402ec8 <_puts_r+0x5c>
  402ec4:	68ac      	ldr	r4, [r5, #8]
  402ec6:	e7e3      	b.n	402e90 <_puts_r+0x24>
  402ec8:	4b15      	ldr	r3, [pc, #84]	; (402f20 <_puts_r+0xb4>)
  402eca:	429c      	cmp	r4, r3
  402ecc:	bf08      	it	eq
  402ece:	68ec      	ldreq	r4, [r5, #12]
  402ed0:	e7de      	b.n	402e90 <_puts_r+0x24>
  402ed2:	4621      	mov	r1, r4
  402ed4:	4628      	mov	r0, r5
  402ed6:	f000 f94f 	bl	403178 <__swsetup_r>
  402eda:	2800      	cmp	r0, #0
  402edc:	d0dd      	beq.n	402e9a <_puts_r+0x2e>
  402ede:	f04f 30ff 	mov.w	r0, #4294967295
  402ee2:	bd70      	pop	{r4, r5, r6, pc}
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	da04      	bge.n	402ef2 <_puts_r+0x86>
  402ee8:	69a2      	ldr	r2, [r4, #24]
  402eea:	4293      	cmp	r3, r2
  402eec:	db06      	blt.n	402efc <_puts_r+0x90>
  402eee:	290a      	cmp	r1, #10
  402ef0:	d004      	beq.n	402efc <_puts_r+0x90>
  402ef2:	6823      	ldr	r3, [r4, #0]
  402ef4:	1c5a      	adds	r2, r3, #1
  402ef6:	6022      	str	r2, [r4, #0]
  402ef8:	7019      	strb	r1, [r3, #0]
  402efa:	e7cf      	b.n	402e9c <_puts_r+0x30>
  402efc:	4622      	mov	r2, r4
  402efe:	4628      	mov	r0, r5
  402f00:	f000 f8e8 	bl	4030d4 <__swbuf_r>
  402f04:	3001      	adds	r0, #1
  402f06:	d1c9      	bne.n	402e9c <_puts_r+0x30>
  402f08:	e7e9      	b.n	402ede <_puts_r+0x72>
  402f0a:	6823      	ldr	r3, [r4, #0]
  402f0c:	200a      	movs	r0, #10
  402f0e:	1c5a      	adds	r2, r3, #1
  402f10:	6022      	str	r2, [r4, #0]
  402f12:	7018      	strb	r0, [r3, #0]
  402f14:	bd70      	pop	{r4, r5, r6, pc}
  402f16:	bf00      	nop
  402f18:	00404c1c 	.word	0x00404c1c
  402f1c:	00404c3c 	.word	0x00404c3c
  402f20:	00404bfc 	.word	0x00404bfc

00402f24 <puts>:
  402f24:	4b02      	ldr	r3, [pc, #8]	; (402f30 <puts+0xc>)
  402f26:	4601      	mov	r1, r0
  402f28:	6818      	ldr	r0, [r3, #0]
  402f2a:	f7ff bf9f 	b.w	402e6c <_puts_r>
  402f2e:	bf00      	nop
  402f30:	20400000 	.word	0x20400000

00402f34 <_sbrk_r>:
  402f34:	b538      	push	{r3, r4, r5, lr}
  402f36:	4c06      	ldr	r4, [pc, #24]	; (402f50 <_sbrk_r+0x1c>)
  402f38:	2300      	movs	r3, #0
  402f3a:	4605      	mov	r5, r0
  402f3c:	4608      	mov	r0, r1
  402f3e:	6023      	str	r3, [r4, #0]
  402f40:	f7fe fb64 	bl	40160c <_sbrk>
  402f44:	1c43      	adds	r3, r0, #1
  402f46:	d102      	bne.n	402f4e <_sbrk_r+0x1a>
  402f48:	6823      	ldr	r3, [r4, #0]
  402f4a:	b103      	cbz	r3, 402f4e <_sbrk_r+0x1a>
  402f4c:	602b      	str	r3, [r5, #0]
  402f4e:	bd38      	pop	{r3, r4, r5, pc}
  402f50:	20401448 	.word	0x20401448

00402f54 <setbuf>:
  402f54:	2900      	cmp	r1, #0
  402f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402f5a:	bf0c      	ite	eq
  402f5c:	2202      	moveq	r2, #2
  402f5e:	2200      	movne	r2, #0
  402f60:	f000 b800 	b.w	402f64 <setvbuf>

00402f64 <setvbuf>:
  402f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402f68:	461d      	mov	r5, r3
  402f6a:	4b51      	ldr	r3, [pc, #324]	; (4030b0 <setvbuf+0x14c>)
  402f6c:	681e      	ldr	r6, [r3, #0]
  402f6e:	4604      	mov	r4, r0
  402f70:	460f      	mov	r7, r1
  402f72:	4690      	mov	r8, r2
  402f74:	b126      	cbz	r6, 402f80 <setvbuf+0x1c>
  402f76:	69b3      	ldr	r3, [r6, #24]
  402f78:	b913      	cbnz	r3, 402f80 <setvbuf+0x1c>
  402f7a:	4630      	mov	r0, r6
  402f7c:	f000 fa5c 	bl	403438 <__sinit>
  402f80:	4b4c      	ldr	r3, [pc, #304]	; (4030b4 <setvbuf+0x150>)
  402f82:	429c      	cmp	r4, r3
  402f84:	d152      	bne.n	40302c <setvbuf+0xc8>
  402f86:	6874      	ldr	r4, [r6, #4]
  402f88:	f1b8 0f02 	cmp.w	r8, #2
  402f8c:	d006      	beq.n	402f9c <setvbuf+0x38>
  402f8e:	f1b8 0f01 	cmp.w	r8, #1
  402f92:	f200 8089 	bhi.w	4030a8 <setvbuf+0x144>
  402f96:	2d00      	cmp	r5, #0
  402f98:	f2c0 8086 	blt.w	4030a8 <setvbuf+0x144>
  402f9c:	4621      	mov	r1, r4
  402f9e:	4630      	mov	r0, r6
  402fa0:	f000 f9e0 	bl	403364 <_fflush_r>
  402fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402fa6:	b141      	cbz	r1, 402fba <setvbuf+0x56>
  402fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402fac:	4299      	cmp	r1, r3
  402fae:	d002      	beq.n	402fb6 <setvbuf+0x52>
  402fb0:	4630      	mov	r0, r6
  402fb2:	f7ff fe97 	bl	402ce4 <_free_r>
  402fb6:	2300      	movs	r3, #0
  402fb8:	6363      	str	r3, [r4, #52]	; 0x34
  402fba:	2300      	movs	r3, #0
  402fbc:	61a3      	str	r3, [r4, #24]
  402fbe:	6063      	str	r3, [r4, #4]
  402fc0:	89a3      	ldrh	r3, [r4, #12]
  402fc2:	061b      	lsls	r3, r3, #24
  402fc4:	d503      	bpl.n	402fce <setvbuf+0x6a>
  402fc6:	6921      	ldr	r1, [r4, #16]
  402fc8:	4630      	mov	r0, r6
  402fca:	f7ff fe8b 	bl	402ce4 <_free_r>
  402fce:	89a3      	ldrh	r3, [r4, #12]
  402fd0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402fd4:	f023 0303 	bic.w	r3, r3, #3
  402fd8:	f1b8 0f02 	cmp.w	r8, #2
  402fdc:	81a3      	strh	r3, [r4, #12]
  402fde:	d05d      	beq.n	40309c <setvbuf+0x138>
  402fe0:	ab01      	add	r3, sp, #4
  402fe2:	466a      	mov	r2, sp
  402fe4:	4621      	mov	r1, r4
  402fe6:	4630      	mov	r0, r6
  402fe8:	f000 fab0 	bl	40354c <__swhatbuf_r>
  402fec:	89a3      	ldrh	r3, [r4, #12]
  402fee:	4318      	orrs	r0, r3
  402ff0:	81a0      	strh	r0, [r4, #12]
  402ff2:	bb2d      	cbnz	r5, 403040 <setvbuf+0xdc>
  402ff4:	9d00      	ldr	r5, [sp, #0]
  402ff6:	4628      	mov	r0, r5
  402ff8:	f7ff fe50 	bl	402c9c <malloc>
  402ffc:	4607      	mov	r7, r0
  402ffe:	2800      	cmp	r0, #0
  403000:	d14e      	bne.n	4030a0 <setvbuf+0x13c>
  403002:	f8dd 9000 	ldr.w	r9, [sp]
  403006:	45a9      	cmp	r9, r5
  403008:	d13c      	bne.n	403084 <setvbuf+0x120>
  40300a:	f04f 30ff 	mov.w	r0, #4294967295
  40300e:	89a3      	ldrh	r3, [r4, #12]
  403010:	f043 0302 	orr.w	r3, r3, #2
  403014:	81a3      	strh	r3, [r4, #12]
  403016:	2300      	movs	r3, #0
  403018:	60a3      	str	r3, [r4, #8]
  40301a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40301e:	6023      	str	r3, [r4, #0]
  403020:	6123      	str	r3, [r4, #16]
  403022:	2301      	movs	r3, #1
  403024:	6163      	str	r3, [r4, #20]
  403026:	b003      	add	sp, #12
  403028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40302c:	4b22      	ldr	r3, [pc, #136]	; (4030b8 <setvbuf+0x154>)
  40302e:	429c      	cmp	r4, r3
  403030:	d101      	bne.n	403036 <setvbuf+0xd2>
  403032:	68b4      	ldr	r4, [r6, #8]
  403034:	e7a8      	b.n	402f88 <setvbuf+0x24>
  403036:	4b21      	ldr	r3, [pc, #132]	; (4030bc <setvbuf+0x158>)
  403038:	429c      	cmp	r4, r3
  40303a:	bf08      	it	eq
  40303c:	68f4      	ldreq	r4, [r6, #12]
  40303e:	e7a3      	b.n	402f88 <setvbuf+0x24>
  403040:	2f00      	cmp	r7, #0
  403042:	d0d8      	beq.n	402ff6 <setvbuf+0x92>
  403044:	69b3      	ldr	r3, [r6, #24]
  403046:	b913      	cbnz	r3, 40304e <setvbuf+0xea>
  403048:	4630      	mov	r0, r6
  40304a:	f000 f9f5 	bl	403438 <__sinit>
  40304e:	f1b8 0f01 	cmp.w	r8, #1
  403052:	bf08      	it	eq
  403054:	89a3      	ldrheq	r3, [r4, #12]
  403056:	6027      	str	r7, [r4, #0]
  403058:	bf04      	itt	eq
  40305a:	f043 0301 	orreq.w	r3, r3, #1
  40305e:	81a3      	strheq	r3, [r4, #12]
  403060:	89a3      	ldrh	r3, [r4, #12]
  403062:	6127      	str	r7, [r4, #16]
  403064:	f013 0008 	ands.w	r0, r3, #8
  403068:	6165      	str	r5, [r4, #20]
  40306a:	d01b      	beq.n	4030a4 <setvbuf+0x140>
  40306c:	f013 0001 	ands.w	r0, r3, #1
  403070:	bf18      	it	ne
  403072:	426d      	negne	r5, r5
  403074:	f04f 0300 	mov.w	r3, #0
  403078:	bf1d      	ittte	ne
  40307a:	60a3      	strne	r3, [r4, #8]
  40307c:	61a5      	strne	r5, [r4, #24]
  40307e:	4618      	movne	r0, r3
  403080:	60a5      	streq	r5, [r4, #8]
  403082:	e7d0      	b.n	403026 <setvbuf+0xc2>
  403084:	4648      	mov	r0, r9
  403086:	f7ff fe09 	bl	402c9c <malloc>
  40308a:	4607      	mov	r7, r0
  40308c:	2800      	cmp	r0, #0
  40308e:	d0bc      	beq.n	40300a <setvbuf+0xa6>
  403090:	89a3      	ldrh	r3, [r4, #12]
  403092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403096:	81a3      	strh	r3, [r4, #12]
  403098:	464d      	mov	r5, r9
  40309a:	e7d3      	b.n	403044 <setvbuf+0xe0>
  40309c:	2000      	movs	r0, #0
  40309e:	e7b6      	b.n	40300e <setvbuf+0xaa>
  4030a0:	46a9      	mov	r9, r5
  4030a2:	e7f5      	b.n	403090 <setvbuf+0x12c>
  4030a4:	60a0      	str	r0, [r4, #8]
  4030a6:	e7be      	b.n	403026 <setvbuf+0xc2>
  4030a8:	f04f 30ff 	mov.w	r0, #4294967295
  4030ac:	e7bb      	b.n	403026 <setvbuf+0xc2>
  4030ae:	bf00      	nop
  4030b0:	20400000 	.word	0x20400000
  4030b4:	00404c1c 	.word	0x00404c1c
  4030b8:	00404c3c 	.word	0x00404c3c
  4030bc:	00404bfc 	.word	0x00404bfc

004030c0 <strcmp>:
  4030c0:	f810 2b01 	ldrb.w	r2, [r0], #1
  4030c4:	f811 3b01 	ldrb.w	r3, [r1], #1
  4030c8:	2a01      	cmp	r2, #1
  4030ca:	bf28      	it	cs
  4030cc:	429a      	cmpcs	r2, r3
  4030ce:	d0f7      	beq.n	4030c0 <strcmp>
  4030d0:	1ad0      	subs	r0, r2, r3
  4030d2:	4770      	bx	lr

004030d4 <__swbuf_r>:
  4030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4030d6:	460e      	mov	r6, r1
  4030d8:	4614      	mov	r4, r2
  4030da:	4605      	mov	r5, r0
  4030dc:	b118      	cbz	r0, 4030e6 <__swbuf_r+0x12>
  4030de:	6983      	ldr	r3, [r0, #24]
  4030e0:	b90b      	cbnz	r3, 4030e6 <__swbuf_r+0x12>
  4030e2:	f000 f9a9 	bl	403438 <__sinit>
  4030e6:	4b21      	ldr	r3, [pc, #132]	; (40316c <__swbuf_r+0x98>)
  4030e8:	429c      	cmp	r4, r3
  4030ea:	d12a      	bne.n	403142 <__swbuf_r+0x6e>
  4030ec:	686c      	ldr	r4, [r5, #4]
  4030ee:	69a3      	ldr	r3, [r4, #24]
  4030f0:	60a3      	str	r3, [r4, #8]
  4030f2:	89a3      	ldrh	r3, [r4, #12]
  4030f4:	071a      	lsls	r2, r3, #28
  4030f6:	d52e      	bpl.n	403156 <__swbuf_r+0x82>
  4030f8:	6923      	ldr	r3, [r4, #16]
  4030fa:	b363      	cbz	r3, 403156 <__swbuf_r+0x82>
  4030fc:	6923      	ldr	r3, [r4, #16]
  4030fe:	6820      	ldr	r0, [r4, #0]
  403100:	1ac0      	subs	r0, r0, r3
  403102:	6963      	ldr	r3, [r4, #20]
  403104:	b2f6      	uxtb	r6, r6
  403106:	4298      	cmp	r0, r3
  403108:	4637      	mov	r7, r6
  40310a:	db04      	blt.n	403116 <__swbuf_r+0x42>
  40310c:	4621      	mov	r1, r4
  40310e:	4628      	mov	r0, r5
  403110:	f000 f928 	bl	403364 <_fflush_r>
  403114:	bb28      	cbnz	r0, 403162 <__swbuf_r+0x8e>
  403116:	68a3      	ldr	r3, [r4, #8]
  403118:	3b01      	subs	r3, #1
  40311a:	60a3      	str	r3, [r4, #8]
  40311c:	6823      	ldr	r3, [r4, #0]
  40311e:	1c5a      	adds	r2, r3, #1
  403120:	6022      	str	r2, [r4, #0]
  403122:	701e      	strb	r6, [r3, #0]
  403124:	6963      	ldr	r3, [r4, #20]
  403126:	3001      	adds	r0, #1
  403128:	4298      	cmp	r0, r3
  40312a:	d004      	beq.n	403136 <__swbuf_r+0x62>
  40312c:	89a3      	ldrh	r3, [r4, #12]
  40312e:	07db      	lsls	r3, r3, #31
  403130:	d519      	bpl.n	403166 <__swbuf_r+0x92>
  403132:	2e0a      	cmp	r6, #10
  403134:	d117      	bne.n	403166 <__swbuf_r+0x92>
  403136:	4621      	mov	r1, r4
  403138:	4628      	mov	r0, r5
  40313a:	f000 f913 	bl	403364 <_fflush_r>
  40313e:	b190      	cbz	r0, 403166 <__swbuf_r+0x92>
  403140:	e00f      	b.n	403162 <__swbuf_r+0x8e>
  403142:	4b0b      	ldr	r3, [pc, #44]	; (403170 <__swbuf_r+0x9c>)
  403144:	429c      	cmp	r4, r3
  403146:	d101      	bne.n	40314c <__swbuf_r+0x78>
  403148:	68ac      	ldr	r4, [r5, #8]
  40314a:	e7d0      	b.n	4030ee <__swbuf_r+0x1a>
  40314c:	4b09      	ldr	r3, [pc, #36]	; (403174 <__swbuf_r+0xa0>)
  40314e:	429c      	cmp	r4, r3
  403150:	bf08      	it	eq
  403152:	68ec      	ldreq	r4, [r5, #12]
  403154:	e7cb      	b.n	4030ee <__swbuf_r+0x1a>
  403156:	4621      	mov	r1, r4
  403158:	4628      	mov	r0, r5
  40315a:	f000 f80d 	bl	403178 <__swsetup_r>
  40315e:	2800      	cmp	r0, #0
  403160:	d0cc      	beq.n	4030fc <__swbuf_r+0x28>
  403162:	f04f 37ff 	mov.w	r7, #4294967295
  403166:	4638      	mov	r0, r7
  403168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40316a:	bf00      	nop
  40316c:	00404c1c 	.word	0x00404c1c
  403170:	00404c3c 	.word	0x00404c3c
  403174:	00404bfc 	.word	0x00404bfc

00403178 <__swsetup_r>:
  403178:	4b32      	ldr	r3, [pc, #200]	; (403244 <__swsetup_r+0xcc>)
  40317a:	b570      	push	{r4, r5, r6, lr}
  40317c:	681d      	ldr	r5, [r3, #0]
  40317e:	4606      	mov	r6, r0
  403180:	460c      	mov	r4, r1
  403182:	b125      	cbz	r5, 40318e <__swsetup_r+0x16>
  403184:	69ab      	ldr	r3, [r5, #24]
  403186:	b913      	cbnz	r3, 40318e <__swsetup_r+0x16>
  403188:	4628      	mov	r0, r5
  40318a:	f000 f955 	bl	403438 <__sinit>
  40318e:	4b2e      	ldr	r3, [pc, #184]	; (403248 <__swsetup_r+0xd0>)
  403190:	429c      	cmp	r4, r3
  403192:	d10f      	bne.n	4031b4 <__swsetup_r+0x3c>
  403194:	686c      	ldr	r4, [r5, #4]
  403196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40319a:	b29a      	uxth	r2, r3
  40319c:	0715      	lsls	r5, r2, #28
  40319e:	d42c      	bmi.n	4031fa <__swsetup_r+0x82>
  4031a0:	06d0      	lsls	r0, r2, #27
  4031a2:	d411      	bmi.n	4031c8 <__swsetup_r+0x50>
  4031a4:	2209      	movs	r2, #9
  4031a6:	6032      	str	r2, [r6, #0]
  4031a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031ac:	81a3      	strh	r3, [r4, #12]
  4031ae:	f04f 30ff 	mov.w	r0, #4294967295
  4031b2:	bd70      	pop	{r4, r5, r6, pc}
  4031b4:	4b25      	ldr	r3, [pc, #148]	; (40324c <__swsetup_r+0xd4>)
  4031b6:	429c      	cmp	r4, r3
  4031b8:	d101      	bne.n	4031be <__swsetup_r+0x46>
  4031ba:	68ac      	ldr	r4, [r5, #8]
  4031bc:	e7eb      	b.n	403196 <__swsetup_r+0x1e>
  4031be:	4b24      	ldr	r3, [pc, #144]	; (403250 <__swsetup_r+0xd8>)
  4031c0:	429c      	cmp	r4, r3
  4031c2:	bf08      	it	eq
  4031c4:	68ec      	ldreq	r4, [r5, #12]
  4031c6:	e7e6      	b.n	403196 <__swsetup_r+0x1e>
  4031c8:	0751      	lsls	r1, r2, #29
  4031ca:	d512      	bpl.n	4031f2 <__swsetup_r+0x7a>
  4031cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4031ce:	b141      	cbz	r1, 4031e2 <__swsetup_r+0x6a>
  4031d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4031d4:	4299      	cmp	r1, r3
  4031d6:	d002      	beq.n	4031de <__swsetup_r+0x66>
  4031d8:	4630      	mov	r0, r6
  4031da:	f7ff fd83 	bl	402ce4 <_free_r>
  4031de:	2300      	movs	r3, #0
  4031e0:	6363      	str	r3, [r4, #52]	; 0x34
  4031e2:	89a3      	ldrh	r3, [r4, #12]
  4031e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4031e8:	81a3      	strh	r3, [r4, #12]
  4031ea:	2300      	movs	r3, #0
  4031ec:	6063      	str	r3, [r4, #4]
  4031ee:	6923      	ldr	r3, [r4, #16]
  4031f0:	6023      	str	r3, [r4, #0]
  4031f2:	89a3      	ldrh	r3, [r4, #12]
  4031f4:	f043 0308 	orr.w	r3, r3, #8
  4031f8:	81a3      	strh	r3, [r4, #12]
  4031fa:	6923      	ldr	r3, [r4, #16]
  4031fc:	b94b      	cbnz	r3, 403212 <__swsetup_r+0x9a>
  4031fe:	89a3      	ldrh	r3, [r4, #12]
  403200:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403208:	d003      	beq.n	403212 <__swsetup_r+0x9a>
  40320a:	4621      	mov	r1, r4
  40320c:	4630      	mov	r0, r6
  40320e:	f000 f9c1 	bl	403594 <__smakebuf_r>
  403212:	89a2      	ldrh	r2, [r4, #12]
  403214:	f012 0301 	ands.w	r3, r2, #1
  403218:	d00c      	beq.n	403234 <__swsetup_r+0xbc>
  40321a:	2300      	movs	r3, #0
  40321c:	60a3      	str	r3, [r4, #8]
  40321e:	6963      	ldr	r3, [r4, #20]
  403220:	425b      	negs	r3, r3
  403222:	61a3      	str	r3, [r4, #24]
  403224:	6923      	ldr	r3, [r4, #16]
  403226:	b953      	cbnz	r3, 40323e <__swsetup_r+0xc6>
  403228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40322c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  403230:	d1ba      	bne.n	4031a8 <__swsetup_r+0x30>
  403232:	bd70      	pop	{r4, r5, r6, pc}
  403234:	0792      	lsls	r2, r2, #30
  403236:	bf58      	it	pl
  403238:	6963      	ldrpl	r3, [r4, #20]
  40323a:	60a3      	str	r3, [r4, #8]
  40323c:	e7f2      	b.n	403224 <__swsetup_r+0xac>
  40323e:	2000      	movs	r0, #0
  403240:	e7f7      	b.n	403232 <__swsetup_r+0xba>
  403242:	bf00      	nop
  403244:	20400000 	.word	0x20400000
  403248:	00404c1c 	.word	0x00404c1c
  40324c:	00404c3c 	.word	0x00404c3c
  403250:	00404bfc 	.word	0x00404bfc

00403254 <__sflush_r>:
  403254:	898a      	ldrh	r2, [r1, #12]
  403256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40325a:	4605      	mov	r5, r0
  40325c:	0710      	lsls	r0, r2, #28
  40325e:	460c      	mov	r4, r1
  403260:	d45a      	bmi.n	403318 <__sflush_r+0xc4>
  403262:	684b      	ldr	r3, [r1, #4]
  403264:	2b00      	cmp	r3, #0
  403266:	dc05      	bgt.n	403274 <__sflush_r+0x20>
  403268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40326a:	2b00      	cmp	r3, #0
  40326c:	dc02      	bgt.n	403274 <__sflush_r+0x20>
  40326e:	2000      	movs	r0, #0
  403270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403276:	2e00      	cmp	r6, #0
  403278:	d0f9      	beq.n	40326e <__sflush_r+0x1a>
  40327a:	2300      	movs	r3, #0
  40327c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  403280:	682f      	ldr	r7, [r5, #0]
  403282:	602b      	str	r3, [r5, #0]
  403284:	d033      	beq.n	4032ee <__sflush_r+0x9a>
  403286:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403288:	89a3      	ldrh	r3, [r4, #12]
  40328a:	075a      	lsls	r2, r3, #29
  40328c:	d505      	bpl.n	40329a <__sflush_r+0x46>
  40328e:	6863      	ldr	r3, [r4, #4]
  403290:	1ac0      	subs	r0, r0, r3
  403292:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403294:	b10b      	cbz	r3, 40329a <__sflush_r+0x46>
  403296:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403298:	1ac0      	subs	r0, r0, r3
  40329a:	2300      	movs	r3, #0
  40329c:	4602      	mov	r2, r0
  40329e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4032a0:	6a21      	ldr	r1, [r4, #32]
  4032a2:	4628      	mov	r0, r5
  4032a4:	47b0      	blx	r6
  4032a6:	1c43      	adds	r3, r0, #1
  4032a8:	89a3      	ldrh	r3, [r4, #12]
  4032aa:	d106      	bne.n	4032ba <__sflush_r+0x66>
  4032ac:	6829      	ldr	r1, [r5, #0]
  4032ae:	291d      	cmp	r1, #29
  4032b0:	d84b      	bhi.n	40334a <__sflush_r+0xf6>
  4032b2:	4a2b      	ldr	r2, [pc, #172]	; (403360 <__sflush_r+0x10c>)
  4032b4:	40ca      	lsrs	r2, r1
  4032b6:	07d6      	lsls	r6, r2, #31
  4032b8:	d547      	bpl.n	40334a <__sflush_r+0xf6>
  4032ba:	2200      	movs	r2, #0
  4032bc:	6062      	str	r2, [r4, #4]
  4032be:	04d9      	lsls	r1, r3, #19
  4032c0:	6922      	ldr	r2, [r4, #16]
  4032c2:	6022      	str	r2, [r4, #0]
  4032c4:	d504      	bpl.n	4032d0 <__sflush_r+0x7c>
  4032c6:	1c42      	adds	r2, r0, #1
  4032c8:	d101      	bne.n	4032ce <__sflush_r+0x7a>
  4032ca:	682b      	ldr	r3, [r5, #0]
  4032cc:	b903      	cbnz	r3, 4032d0 <__sflush_r+0x7c>
  4032ce:	6560      	str	r0, [r4, #84]	; 0x54
  4032d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4032d2:	602f      	str	r7, [r5, #0]
  4032d4:	2900      	cmp	r1, #0
  4032d6:	d0ca      	beq.n	40326e <__sflush_r+0x1a>
  4032d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4032dc:	4299      	cmp	r1, r3
  4032de:	d002      	beq.n	4032e6 <__sflush_r+0x92>
  4032e0:	4628      	mov	r0, r5
  4032e2:	f7ff fcff 	bl	402ce4 <_free_r>
  4032e6:	2000      	movs	r0, #0
  4032e8:	6360      	str	r0, [r4, #52]	; 0x34
  4032ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032ee:	6a21      	ldr	r1, [r4, #32]
  4032f0:	2301      	movs	r3, #1
  4032f2:	4628      	mov	r0, r5
  4032f4:	47b0      	blx	r6
  4032f6:	1c41      	adds	r1, r0, #1
  4032f8:	d1c6      	bne.n	403288 <__sflush_r+0x34>
  4032fa:	682b      	ldr	r3, [r5, #0]
  4032fc:	2b00      	cmp	r3, #0
  4032fe:	d0c3      	beq.n	403288 <__sflush_r+0x34>
  403300:	2b1d      	cmp	r3, #29
  403302:	d001      	beq.n	403308 <__sflush_r+0xb4>
  403304:	2b16      	cmp	r3, #22
  403306:	d101      	bne.n	40330c <__sflush_r+0xb8>
  403308:	602f      	str	r7, [r5, #0]
  40330a:	e7b0      	b.n	40326e <__sflush_r+0x1a>
  40330c:	89a3      	ldrh	r3, [r4, #12]
  40330e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403312:	81a3      	strh	r3, [r4, #12]
  403314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403318:	690f      	ldr	r7, [r1, #16]
  40331a:	2f00      	cmp	r7, #0
  40331c:	d0a7      	beq.n	40326e <__sflush_r+0x1a>
  40331e:	0793      	lsls	r3, r2, #30
  403320:	680e      	ldr	r6, [r1, #0]
  403322:	bf08      	it	eq
  403324:	694b      	ldreq	r3, [r1, #20]
  403326:	600f      	str	r7, [r1, #0]
  403328:	bf18      	it	ne
  40332a:	2300      	movne	r3, #0
  40332c:	eba6 0807 	sub.w	r8, r6, r7
  403330:	608b      	str	r3, [r1, #8]
  403332:	f1b8 0f00 	cmp.w	r8, #0
  403336:	dd9a      	ble.n	40326e <__sflush_r+0x1a>
  403338:	4643      	mov	r3, r8
  40333a:	463a      	mov	r2, r7
  40333c:	6a21      	ldr	r1, [r4, #32]
  40333e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403340:	4628      	mov	r0, r5
  403342:	47b0      	blx	r6
  403344:	2800      	cmp	r0, #0
  403346:	dc07      	bgt.n	403358 <__sflush_r+0x104>
  403348:	89a3      	ldrh	r3, [r4, #12]
  40334a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40334e:	81a3      	strh	r3, [r4, #12]
  403350:	f04f 30ff 	mov.w	r0, #4294967295
  403354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403358:	4407      	add	r7, r0
  40335a:	eba8 0800 	sub.w	r8, r8, r0
  40335e:	e7e8      	b.n	403332 <__sflush_r+0xde>
  403360:	20400001 	.word	0x20400001

00403364 <_fflush_r>:
  403364:	b538      	push	{r3, r4, r5, lr}
  403366:	690b      	ldr	r3, [r1, #16]
  403368:	4605      	mov	r5, r0
  40336a:	460c      	mov	r4, r1
  40336c:	b1db      	cbz	r3, 4033a6 <_fflush_r+0x42>
  40336e:	b118      	cbz	r0, 403378 <_fflush_r+0x14>
  403370:	6983      	ldr	r3, [r0, #24]
  403372:	b90b      	cbnz	r3, 403378 <_fflush_r+0x14>
  403374:	f000 f860 	bl	403438 <__sinit>
  403378:	4b0c      	ldr	r3, [pc, #48]	; (4033ac <_fflush_r+0x48>)
  40337a:	429c      	cmp	r4, r3
  40337c:	d109      	bne.n	403392 <_fflush_r+0x2e>
  40337e:	686c      	ldr	r4, [r5, #4]
  403380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403384:	b17b      	cbz	r3, 4033a6 <_fflush_r+0x42>
  403386:	4621      	mov	r1, r4
  403388:	4628      	mov	r0, r5
  40338a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40338e:	f7ff bf61 	b.w	403254 <__sflush_r>
  403392:	4b07      	ldr	r3, [pc, #28]	; (4033b0 <_fflush_r+0x4c>)
  403394:	429c      	cmp	r4, r3
  403396:	d101      	bne.n	40339c <_fflush_r+0x38>
  403398:	68ac      	ldr	r4, [r5, #8]
  40339a:	e7f1      	b.n	403380 <_fflush_r+0x1c>
  40339c:	4b05      	ldr	r3, [pc, #20]	; (4033b4 <_fflush_r+0x50>)
  40339e:	429c      	cmp	r4, r3
  4033a0:	bf08      	it	eq
  4033a2:	68ec      	ldreq	r4, [r5, #12]
  4033a4:	e7ec      	b.n	403380 <_fflush_r+0x1c>
  4033a6:	2000      	movs	r0, #0
  4033a8:	bd38      	pop	{r3, r4, r5, pc}
  4033aa:	bf00      	nop
  4033ac:	00404c1c 	.word	0x00404c1c
  4033b0:	00404c3c 	.word	0x00404c3c
  4033b4:	00404bfc 	.word	0x00404bfc

004033b8 <_cleanup_r>:
  4033b8:	4901      	ldr	r1, [pc, #4]	; (4033c0 <_cleanup_r+0x8>)
  4033ba:	f000 b8a9 	b.w	403510 <_fwalk_reent>
  4033be:	bf00      	nop
  4033c0:	00403365 	.word	0x00403365

004033c4 <std.isra.0>:
  4033c4:	2300      	movs	r3, #0
  4033c6:	b510      	push	{r4, lr}
  4033c8:	4604      	mov	r4, r0
  4033ca:	6003      	str	r3, [r0, #0]
  4033cc:	6043      	str	r3, [r0, #4]
  4033ce:	6083      	str	r3, [r0, #8]
  4033d0:	8181      	strh	r1, [r0, #12]
  4033d2:	6643      	str	r3, [r0, #100]	; 0x64
  4033d4:	81c2      	strh	r2, [r0, #14]
  4033d6:	6103      	str	r3, [r0, #16]
  4033d8:	6143      	str	r3, [r0, #20]
  4033da:	6183      	str	r3, [r0, #24]
  4033dc:	4619      	mov	r1, r3
  4033de:	2208      	movs	r2, #8
  4033e0:	305c      	adds	r0, #92	; 0x5c
  4033e2:	f7ff fc76 	bl	402cd2 <memset>
  4033e6:	4b05      	ldr	r3, [pc, #20]	; (4033fc <std.isra.0+0x38>)
  4033e8:	6263      	str	r3, [r4, #36]	; 0x24
  4033ea:	4b05      	ldr	r3, [pc, #20]	; (403400 <std.isra.0+0x3c>)
  4033ec:	62a3      	str	r3, [r4, #40]	; 0x28
  4033ee:	4b05      	ldr	r3, [pc, #20]	; (403404 <std.isra.0+0x40>)
  4033f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  4033f2:	4b05      	ldr	r3, [pc, #20]	; (403408 <std.isra.0+0x44>)
  4033f4:	6224      	str	r4, [r4, #32]
  4033f6:	6323      	str	r3, [r4, #48]	; 0x30
  4033f8:	bd10      	pop	{r4, pc}
  4033fa:	bf00      	nop
  4033fc:	00403bc1 	.word	0x00403bc1
  403400:	00403be3 	.word	0x00403be3
  403404:	00403c1b 	.word	0x00403c1b
  403408:	00403c3f 	.word	0x00403c3f

0040340c <__sfmoreglue>:
  40340c:	b570      	push	{r4, r5, r6, lr}
  40340e:	1e4a      	subs	r2, r1, #1
  403410:	2568      	movs	r5, #104	; 0x68
  403412:	4355      	muls	r5, r2
  403414:	460e      	mov	r6, r1
  403416:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40341a:	f7ff fcb1 	bl	402d80 <_malloc_r>
  40341e:	4604      	mov	r4, r0
  403420:	b140      	cbz	r0, 403434 <__sfmoreglue+0x28>
  403422:	2100      	movs	r1, #0
  403424:	e880 0042 	stmia.w	r0, {r1, r6}
  403428:	300c      	adds	r0, #12
  40342a:	60a0      	str	r0, [r4, #8]
  40342c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  403430:	f7ff fc4f 	bl	402cd2 <memset>
  403434:	4620      	mov	r0, r4
  403436:	bd70      	pop	{r4, r5, r6, pc}

00403438 <__sinit>:
  403438:	6983      	ldr	r3, [r0, #24]
  40343a:	b510      	push	{r4, lr}
  40343c:	4604      	mov	r4, r0
  40343e:	bb33      	cbnz	r3, 40348e <__sinit+0x56>
  403440:	6483      	str	r3, [r0, #72]	; 0x48
  403442:	64c3      	str	r3, [r0, #76]	; 0x4c
  403444:	6503      	str	r3, [r0, #80]	; 0x50
  403446:	4b12      	ldr	r3, [pc, #72]	; (403490 <__sinit+0x58>)
  403448:	4a12      	ldr	r2, [pc, #72]	; (403494 <__sinit+0x5c>)
  40344a:	681b      	ldr	r3, [r3, #0]
  40344c:	6282      	str	r2, [r0, #40]	; 0x28
  40344e:	4298      	cmp	r0, r3
  403450:	bf04      	itt	eq
  403452:	2301      	moveq	r3, #1
  403454:	6183      	streq	r3, [r0, #24]
  403456:	f000 f81f 	bl	403498 <__sfp>
  40345a:	6060      	str	r0, [r4, #4]
  40345c:	4620      	mov	r0, r4
  40345e:	f000 f81b 	bl	403498 <__sfp>
  403462:	60a0      	str	r0, [r4, #8]
  403464:	4620      	mov	r0, r4
  403466:	f000 f817 	bl	403498 <__sfp>
  40346a:	2200      	movs	r2, #0
  40346c:	60e0      	str	r0, [r4, #12]
  40346e:	2104      	movs	r1, #4
  403470:	6860      	ldr	r0, [r4, #4]
  403472:	f7ff ffa7 	bl	4033c4 <std.isra.0>
  403476:	2201      	movs	r2, #1
  403478:	2109      	movs	r1, #9
  40347a:	68a0      	ldr	r0, [r4, #8]
  40347c:	f7ff ffa2 	bl	4033c4 <std.isra.0>
  403480:	2202      	movs	r2, #2
  403482:	2112      	movs	r1, #18
  403484:	68e0      	ldr	r0, [r4, #12]
  403486:	f7ff ff9d 	bl	4033c4 <std.isra.0>
  40348a:	2301      	movs	r3, #1
  40348c:	61a3      	str	r3, [r4, #24]
  40348e:	bd10      	pop	{r4, pc}
  403490:	00404bf8 	.word	0x00404bf8
  403494:	004033b9 	.word	0x004033b9

00403498 <__sfp>:
  403498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40349a:	4b1c      	ldr	r3, [pc, #112]	; (40350c <__sfp+0x74>)
  40349c:	681e      	ldr	r6, [r3, #0]
  40349e:	69b3      	ldr	r3, [r6, #24]
  4034a0:	4607      	mov	r7, r0
  4034a2:	b913      	cbnz	r3, 4034aa <__sfp+0x12>
  4034a4:	4630      	mov	r0, r6
  4034a6:	f7ff ffc7 	bl	403438 <__sinit>
  4034aa:	3648      	adds	r6, #72	; 0x48
  4034ac:	68b4      	ldr	r4, [r6, #8]
  4034ae:	6873      	ldr	r3, [r6, #4]
  4034b0:	3b01      	subs	r3, #1
  4034b2:	d503      	bpl.n	4034bc <__sfp+0x24>
  4034b4:	6833      	ldr	r3, [r6, #0]
  4034b6:	b133      	cbz	r3, 4034c6 <__sfp+0x2e>
  4034b8:	6836      	ldr	r6, [r6, #0]
  4034ba:	e7f7      	b.n	4034ac <__sfp+0x14>
  4034bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4034c0:	b16d      	cbz	r5, 4034de <__sfp+0x46>
  4034c2:	3468      	adds	r4, #104	; 0x68
  4034c4:	e7f4      	b.n	4034b0 <__sfp+0x18>
  4034c6:	2104      	movs	r1, #4
  4034c8:	4638      	mov	r0, r7
  4034ca:	f7ff ff9f 	bl	40340c <__sfmoreglue>
  4034ce:	6030      	str	r0, [r6, #0]
  4034d0:	2800      	cmp	r0, #0
  4034d2:	d1f1      	bne.n	4034b8 <__sfp+0x20>
  4034d4:	230c      	movs	r3, #12
  4034d6:	603b      	str	r3, [r7, #0]
  4034d8:	4604      	mov	r4, r0
  4034da:	4620      	mov	r0, r4
  4034dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4034e2:	81e3      	strh	r3, [r4, #14]
  4034e4:	2301      	movs	r3, #1
  4034e6:	81a3      	strh	r3, [r4, #12]
  4034e8:	6665      	str	r5, [r4, #100]	; 0x64
  4034ea:	6025      	str	r5, [r4, #0]
  4034ec:	60a5      	str	r5, [r4, #8]
  4034ee:	6065      	str	r5, [r4, #4]
  4034f0:	6125      	str	r5, [r4, #16]
  4034f2:	6165      	str	r5, [r4, #20]
  4034f4:	61a5      	str	r5, [r4, #24]
  4034f6:	2208      	movs	r2, #8
  4034f8:	4629      	mov	r1, r5
  4034fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4034fe:	f7ff fbe8 	bl	402cd2 <memset>
  403502:	6365      	str	r5, [r4, #52]	; 0x34
  403504:	63a5      	str	r5, [r4, #56]	; 0x38
  403506:	64a5      	str	r5, [r4, #72]	; 0x48
  403508:	64e5      	str	r5, [r4, #76]	; 0x4c
  40350a:	e7e6      	b.n	4034da <__sfp+0x42>
  40350c:	00404bf8 	.word	0x00404bf8

00403510 <_fwalk_reent>:
  403510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403514:	4680      	mov	r8, r0
  403516:	4689      	mov	r9, r1
  403518:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40351c:	2600      	movs	r6, #0
  40351e:	b914      	cbnz	r4, 403526 <_fwalk_reent+0x16>
  403520:	4630      	mov	r0, r6
  403522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403526:	68a5      	ldr	r5, [r4, #8]
  403528:	6867      	ldr	r7, [r4, #4]
  40352a:	3f01      	subs	r7, #1
  40352c:	d501      	bpl.n	403532 <_fwalk_reent+0x22>
  40352e:	6824      	ldr	r4, [r4, #0]
  403530:	e7f5      	b.n	40351e <_fwalk_reent+0xe>
  403532:	89ab      	ldrh	r3, [r5, #12]
  403534:	2b01      	cmp	r3, #1
  403536:	d907      	bls.n	403548 <_fwalk_reent+0x38>
  403538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40353c:	3301      	adds	r3, #1
  40353e:	d003      	beq.n	403548 <_fwalk_reent+0x38>
  403540:	4629      	mov	r1, r5
  403542:	4640      	mov	r0, r8
  403544:	47c8      	blx	r9
  403546:	4306      	orrs	r6, r0
  403548:	3568      	adds	r5, #104	; 0x68
  40354a:	e7ee      	b.n	40352a <_fwalk_reent+0x1a>

0040354c <__swhatbuf_r>:
  40354c:	b570      	push	{r4, r5, r6, lr}
  40354e:	460e      	mov	r6, r1
  403550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403554:	2900      	cmp	r1, #0
  403556:	b090      	sub	sp, #64	; 0x40
  403558:	4614      	mov	r4, r2
  40355a:	461d      	mov	r5, r3
  40355c:	da07      	bge.n	40356e <__swhatbuf_r+0x22>
  40355e:	2300      	movs	r3, #0
  403560:	602b      	str	r3, [r5, #0]
  403562:	89b3      	ldrh	r3, [r6, #12]
  403564:	061a      	lsls	r2, r3, #24
  403566:	d410      	bmi.n	40358a <__swhatbuf_r+0x3e>
  403568:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40356c:	e00e      	b.n	40358c <__swhatbuf_r+0x40>
  40356e:	aa01      	add	r2, sp, #4
  403570:	f000 fb8c 	bl	403c8c <_fstat_r>
  403574:	2800      	cmp	r0, #0
  403576:	dbf2      	blt.n	40355e <__swhatbuf_r+0x12>
  403578:	9a02      	ldr	r2, [sp, #8]
  40357a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40357e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403582:	425a      	negs	r2, r3
  403584:	415a      	adcs	r2, r3
  403586:	602a      	str	r2, [r5, #0]
  403588:	e7ee      	b.n	403568 <__swhatbuf_r+0x1c>
  40358a:	2340      	movs	r3, #64	; 0x40
  40358c:	2000      	movs	r0, #0
  40358e:	6023      	str	r3, [r4, #0]
  403590:	b010      	add	sp, #64	; 0x40
  403592:	bd70      	pop	{r4, r5, r6, pc}

00403594 <__smakebuf_r>:
  403594:	898b      	ldrh	r3, [r1, #12]
  403596:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403598:	079d      	lsls	r5, r3, #30
  40359a:	4606      	mov	r6, r0
  40359c:	460c      	mov	r4, r1
  40359e:	d507      	bpl.n	4035b0 <__smakebuf_r+0x1c>
  4035a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4035a4:	6023      	str	r3, [r4, #0]
  4035a6:	6123      	str	r3, [r4, #16]
  4035a8:	2301      	movs	r3, #1
  4035aa:	6163      	str	r3, [r4, #20]
  4035ac:	b002      	add	sp, #8
  4035ae:	bd70      	pop	{r4, r5, r6, pc}
  4035b0:	ab01      	add	r3, sp, #4
  4035b2:	466a      	mov	r2, sp
  4035b4:	f7ff ffca 	bl	40354c <__swhatbuf_r>
  4035b8:	9900      	ldr	r1, [sp, #0]
  4035ba:	4605      	mov	r5, r0
  4035bc:	4630      	mov	r0, r6
  4035be:	f7ff fbdf 	bl	402d80 <_malloc_r>
  4035c2:	b948      	cbnz	r0, 4035d8 <__smakebuf_r+0x44>
  4035c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035c8:	059a      	lsls	r2, r3, #22
  4035ca:	d4ef      	bmi.n	4035ac <__smakebuf_r+0x18>
  4035cc:	f023 0303 	bic.w	r3, r3, #3
  4035d0:	f043 0302 	orr.w	r3, r3, #2
  4035d4:	81a3      	strh	r3, [r4, #12]
  4035d6:	e7e3      	b.n	4035a0 <__smakebuf_r+0xc>
  4035d8:	4b0d      	ldr	r3, [pc, #52]	; (403610 <__smakebuf_r+0x7c>)
  4035da:	62b3      	str	r3, [r6, #40]	; 0x28
  4035dc:	89a3      	ldrh	r3, [r4, #12]
  4035de:	6020      	str	r0, [r4, #0]
  4035e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4035e4:	81a3      	strh	r3, [r4, #12]
  4035e6:	9b00      	ldr	r3, [sp, #0]
  4035e8:	6163      	str	r3, [r4, #20]
  4035ea:	9b01      	ldr	r3, [sp, #4]
  4035ec:	6120      	str	r0, [r4, #16]
  4035ee:	b15b      	cbz	r3, 403608 <__smakebuf_r+0x74>
  4035f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4035f4:	4630      	mov	r0, r6
  4035f6:	f000 fb5b 	bl	403cb0 <_isatty_r>
  4035fa:	b128      	cbz	r0, 403608 <__smakebuf_r+0x74>
  4035fc:	89a3      	ldrh	r3, [r4, #12]
  4035fe:	f023 0303 	bic.w	r3, r3, #3
  403602:	f043 0301 	orr.w	r3, r3, #1
  403606:	81a3      	strh	r3, [r4, #12]
  403608:	89a3      	ldrh	r3, [r4, #12]
  40360a:	431d      	orrs	r5, r3
  40360c:	81a5      	strh	r5, [r4, #12]
  40360e:	e7cd      	b.n	4035ac <__smakebuf_r+0x18>
  403610:	004033b9 	.word	0x004033b9

00403614 <__malloc_lock>:
  403614:	4770      	bx	lr

00403616 <__malloc_unlock>:
  403616:	4770      	bx	lr

00403618 <__sfputc_r>:
  403618:	6893      	ldr	r3, [r2, #8]
  40361a:	3b01      	subs	r3, #1
  40361c:	2b00      	cmp	r3, #0
  40361e:	b410      	push	{r4}
  403620:	6093      	str	r3, [r2, #8]
  403622:	da08      	bge.n	403636 <__sfputc_r+0x1e>
  403624:	6994      	ldr	r4, [r2, #24]
  403626:	42a3      	cmp	r3, r4
  403628:	db02      	blt.n	403630 <__sfputc_r+0x18>
  40362a:	b2cb      	uxtb	r3, r1
  40362c:	2b0a      	cmp	r3, #10
  40362e:	d102      	bne.n	403636 <__sfputc_r+0x1e>
  403630:	bc10      	pop	{r4}
  403632:	f7ff bd4f 	b.w	4030d4 <__swbuf_r>
  403636:	6813      	ldr	r3, [r2, #0]
  403638:	1c58      	adds	r0, r3, #1
  40363a:	6010      	str	r0, [r2, #0]
  40363c:	7019      	strb	r1, [r3, #0]
  40363e:	b2c8      	uxtb	r0, r1
  403640:	bc10      	pop	{r4}
  403642:	4770      	bx	lr

00403644 <__sfputs_r>:
  403644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403646:	4606      	mov	r6, r0
  403648:	460f      	mov	r7, r1
  40364a:	4614      	mov	r4, r2
  40364c:	18d5      	adds	r5, r2, r3
  40364e:	42ac      	cmp	r4, r5
  403650:	d101      	bne.n	403656 <__sfputs_r+0x12>
  403652:	2000      	movs	r0, #0
  403654:	e007      	b.n	403666 <__sfputs_r+0x22>
  403656:	463a      	mov	r2, r7
  403658:	f814 1b01 	ldrb.w	r1, [r4], #1
  40365c:	4630      	mov	r0, r6
  40365e:	f7ff ffdb 	bl	403618 <__sfputc_r>
  403662:	1c43      	adds	r3, r0, #1
  403664:	d1f3      	bne.n	40364e <__sfputs_r+0xa>
  403666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00403668 <_vfiprintf_r>:
  403668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40366c:	b09d      	sub	sp, #116	; 0x74
  40366e:	460c      	mov	r4, r1
  403670:	4617      	mov	r7, r2
  403672:	9303      	str	r3, [sp, #12]
  403674:	4606      	mov	r6, r0
  403676:	b118      	cbz	r0, 403680 <_vfiprintf_r+0x18>
  403678:	6983      	ldr	r3, [r0, #24]
  40367a:	b90b      	cbnz	r3, 403680 <_vfiprintf_r+0x18>
  40367c:	f7ff fedc 	bl	403438 <__sinit>
  403680:	4b7c      	ldr	r3, [pc, #496]	; (403874 <_vfiprintf_r+0x20c>)
  403682:	429c      	cmp	r4, r3
  403684:	d157      	bne.n	403736 <_vfiprintf_r+0xce>
  403686:	6874      	ldr	r4, [r6, #4]
  403688:	89a3      	ldrh	r3, [r4, #12]
  40368a:	0718      	lsls	r0, r3, #28
  40368c:	d55d      	bpl.n	40374a <_vfiprintf_r+0xe2>
  40368e:	6923      	ldr	r3, [r4, #16]
  403690:	2b00      	cmp	r3, #0
  403692:	d05a      	beq.n	40374a <_vfiprintf_r+0xe2>
  403694:	2300      	movs	r3, #0
  403696:	9309      	str	r3, [sp, #36]	; 0x24
  403698:	2320      	movs	r3, #32
  40369a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40369e:	2330      	movs	r3, #48	; 0x30
  4036a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4036a4:	f04f 0b01 	mov.w	fp, #1
  4036a8:	46b8      	mov	r8, r7
  4036aa:	4645      	mov	r5, r8
  4036ac:	f815 3b01 	ldrb.w	r3, [r5], #1
  4036b0:	2b00      	cmp	r3, #0
  4036b2:	d155      	bne.n	403760 <_vfiprintf_r+0xf8>
  4036b4:	ebb8 0a07 	subs.w	sl, r8, r7
  4036b8:	d00b      	beq.n	4036d2 <_vfiprintf_r+0x6a>
  4036ba:	4653      	mov	r3, sl
  4036bc:	463a      	mov	r2, r7
  4036be:	4621      	mov	r1, r4
  4036c0:	4630      	mov	r0, r6
  4036c2:	f7ff ffbf 	bl	403644 <__sfputs_r>
  4036c6:	3001      	adds	r0, #1
  4036c8:	f000 80c4 	beq.w	403854 <_vfiprintf_r+0x1ec>
  4036cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4036ce:	4453      	add	r3, sl
  4036d0:	9309      	str	r3, [sp, #36]	; 0x24
  4036d2:	f898 3000 	ldrb.w	r3, [r8]
  4036d6:	2b00      	cmp	r3, #0
  4036d8:	f000 80bc 	beq.w	403854 <_vfiprintf_r+0x1ec>
  4036dc:	2300      	movs	r3, #0
  4036de:	f04f 32ff 	mov.w	r2, #4294967295
  4036e2:	9304      	str	r3, [sp, #16]
  4036e4:	9307      	str	r3, [sp, #28]
  4036e6:	9205      	str	r2, [sp, #20]
  4036e8:	9306      	str	r3, [sp, #24]
  4036ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4036ee:	931a      	str	r3, [sp, #104]	; 0x68
  4036f0:	2205      	movs	r2, #5
  4036f2:	7829      	ldrb	r1, [r5, #0]
  4036f4:	4860      	ldr	r0, [pc, #384]	; (403878 <_vfiprintf_r+0x210>)
  4036f6:	f000 fb03 	bl	403d00 <memchr>
  4036fa:	f105 0801 	add.w	r8, r5, #1
  4036fe:	9b04      	ldr	r3, [sp, #16]
  403700:	2800      	cmp	r0, #0
  403702:	d131      	bne.n	403768 <_vfiprintf_r+0x100>
  403704:	06d9      	lsls	r1, r3, #27
  403706:	bf44      	itt	mi
  403708:	2220      	movmi	r2, #32
  40370a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40370e:	071a      	lsls	r2, r3, #28
  403710:	bf44      	itt	mi
  403712:	222b      	movmi	r2, #43	; 0x2b
  403714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403718:	782a      	ldrb	r2, [r5, #0]
  40371a:	2a2a      	cmp	r2, #42	; 0x2a
  40371c:	d02c      	beq.n	403778 <_vfiprintf_r+0x110>
  40371e:	9a07      	ldr	r2, [sp, #28]
  403720:	2100      	movs	r1, #0
  403722:	200a      	movs	r0, #10
  403724:	46a8      	mov	r8, r5
  403726:	3501      	adds	r5, #1
  403728:	f898 3000 	ldrb.w	r3, [r8]
  40372c:	3b30      	subs	r3, #48	; 0x30
  40372e:	2b09      	cmp	r3, #9
  403730:	d96d      	bls.n	40380e <_vfiprintf_r+0x1a6>
  403732:	b371      	cbz	r1, 403792 <_vfiprintf_r+0x12a>
  403734:	e026      	b.n	403784 <_vfiprintf_r+0x11c>
  403736:	4b51      	ldr	r3, [pc, #324]	; (40387c <_vfiprintf_r+0x214>)
  403738:	429c      	cmp	r4, r3
  40373a:	d101      	bne.n	403740 <_vfiprintf_r+0xd8>
  40373c:	68b4      	ldr	r4, [r6, #8]
  40373e:	e7a3      	b.n	403688 <_vfiprintf_r+0x20>
  403740:	4b4f      	ldr	r3, [pc, #316]	; (403880 <_vfiprintf_r+0x218>)
  403742:	429c      	cmp	r4, r3
  403744:	bf08      	it	eq
  403746:	68f4      	ldreq	r4, [r6, #12]
  403748:	e79e      	b.n	403688 <_vfiprintf_r+0x20>
  40374a:	4621      	mov	r1, r4
  40374c:	4630      	mov	r0, r6
  40374e:	f7ff fd13 	bl	403178 <__swsetup_r>
  403752:	2800      	cmp	r0, #0
  403754:	d09e      	beq.n	403694 <_vfiprintf_r+0x2c>
  403756:	f04f 30ff 	mov.w	r0, #4294967295
  40375a:	b01d      	add	sp, #116	; 0x74
  40375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403760:	2b25      	cmp	r3, #37	; 0x25
  403762:	d0a7      	beq.n	4036b4 <_vfiprintf_r+0x4c>
  403764:	46a8      	mov	r8, r5
  403766:	e7a0      	b.n	4036aa <_vfiprintf_r+0x42>
  403768:	4a43      	ldr	r2, [pc, #268]	; (403878 <_vfiprintf_r+0x210>)
  40376a:	1a80      	subs	r0, r0, r2
  40376c:	fa0b f000 	lsl.w	r0, fp, r0
  403770:	4318      	orrs	r0, r3
  403772:	9004      	str	r0, [sp, #16]
  403774:	4645      	mov	r5, r8
  403776:	e7bb      	b.n	4036f0 <_vfiprintf_r+0x88>
  403778:	9a03      	ldr	r2, [sp, #12]
  40377a:	1d11      	adds	r1, r2, #4
  40377c:	6812      	ldr	r2, [r2, #0]
  40377e:	9103      	str	r1, [sp, #12]
  403780:	2a00      	cmp	r2, #0
  403782:	db01      	blt.n	403788 <_vfiprintf_r+0x120>
  403784:	9207      	str	r2, [sp, #28]
  403786:	e004      	b.n	403792 <_vfiprintf_r+0x12a>
  403788:	4252      	negs	r2, r2
  40378a:	f043 0302 	orr.w	r3, r3, #2
  40378e:	9207      	str	r2, [sp, #28]
  403790:	9304      	str	r3, [sp, #16]
  403792:	f898 3000 	ldrb.w	r3, [r8]
  403796:	2b2e      	cmp	r3, #46	; 0x2e
  403798:	d110      	bne.n	4037bc <_vfiprintf_r+0x154>
  40379a:	f898 3001 	ldrb.w	r3, [r8, #1]
  40379e:	2b2a      	cmp	r3, #42	; 0x2a
  4037a0:	f108 0101 	add.w	r1, r8, #1
  4037a4:	d137      	bne.n	403816 <_vfiprintf_r+0x1ae>
  4037a6:	9b03      	ldr	r3, [sp, #12]
  4037a8:	1d1a      	adds	r2, r3, #4
  4037aa:	681b      	ldr	r3, [r3, #0]
  4037ac:	9203      	str	r2, [sp, #12]
  4037ae:	2b00      	cmp	r3, #0
  4037b0:	bfb8      	it	lt
  4037b2:	f04f 33ff 	movlt.w	r3, #4294967295
  4037b6:	f108 0802 	add.w	r8, r8, #2
  4037ba:	9305      	str	r3, [sp, #20]
  4037bc:	4d31      	ldr	r5, [pc, #196]	; (403884 <_vfiprintf_r+0x21c>)
  4037be:	f898 1000 	ldrb.w	r1, [r8]
  4037c2:	2203      	movs	r2, #3
  4037c4:	4628      	mov	r0, r5
  4037c6:	f000 fa9b 	bl	403d00 <memchr>
  4037ca:	b140      	cbz	r0, 4037de <_vfiprintf_r+0x176>
  4037cc:	2340      	movs	r3, #64	; 0x40
  4037ce:	1b40      	subs	r0, r0, r5
  4037d0:	fa03 f000 	lsl.w	r0, r3, r0
  4037d4:	9b04      	ldr	r3, [sp, #16]
  4037d6:	4303      	orrs	r3, r0
  4037d8:	9304      	str	r3, [sp, #16]
  4037da:	f108 0801 	add.w	r8, r8, #1
  4037de:	f898 1000 	ldrb.w	r1, [r8]
  4037e2:	4829      	ldr	r0, [pc, #164]	; (403888 <_vfiprintf_r+0x220>)
  4037e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4037e8:	2206      	movs	r2, #6
  4037ea:	f108 0701 	add.w	r7, r8, #1
  4037ee:	f000 fa87 	bl	403d00 <memchr>
  4037f2:	2800      	cmp	r0, #0
  4037f4:	d034      	beq.n	403860 <_vfiprintf_r+0x1f8>
  4037f6:	4b25      	ldr	r3, [pc, #148]	; (40388c <_vfiprintf_r+0x224>)
  4037f8:	bb03      	cbnz	r3, 40383c <_vfiprintf_r+0x1d4>
  4037fa:	9b03      	ldr	r3, [sp, #12]
  4037fc:	3307      	adds	r3, #7
  4037fe:	f023 0307 	bic.w	r3, r3, #7
  403802:	3308      	adds	r3, #8
  403804:	9303      	str	r3, [sp, #12]
  403806:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403808:	444b      	add	r3, r9
  40380a:	9309      	str	r3, [sp, #36]	; 0x24
  40380c:	e74c      	b.n	4036a8 <_vfiprintf_r+0x40>
  40380e:	fb00 3202 	mla	r2, r0, r2, r3
  403812:	2101      	movs	r1, #1
  403814:	e786      	b.n	403724 <_vfiprintf_r+0xbc>
  403816:	2300      	movs	r3, #0
  403818:	9305      	str	r3, [sp, #20]
  40381a:	4618      	mov	r0, r3
  40381c:	250a      	movs	r5, #10
  40381e:	4688      	mov	r8, r1
  403820:	3101      	adds	r1, #1
  403822:	f898 2000 	ldrb.w	r2, [r8]
  403826:	3a30      	subs	r2, #48	; 0x30
  403828:	2a09      	cmp	r2, #9
  40382a:	d903      	bls.n	403834 <_vfiprintf_r+0x1cc>
  40382c:	2b00      	cmp	r3, #0
  40382e:	d0c5      	beq.n	4037bc <_vfiprintf_r+0x154>
  403830:	9005      	str	r0, [sp, #20]
  403832:	e7c3      	b.n	4037bc <_vfiprintf_r+0x154>
  403834:	fb05 2000 	mla	r0, r5, r0, r2
  403838:	2301      	movs	r3, #1
  40383a:	e7f0      	b.n	40381e <_vfiprintf_r+0x1b6>
  40383c:	ab03      	add	r3, sp, #12
  40383e:	9300      	str	r3, [sp, #0]
  403840:	4622      	mov	r2, r4
  403842:	4b13      	ldr	r3, [pc, #76]	; (403890 <_vfiprintf_r+0x228>)
  403844:	a904      	add	r1, sp, #16
  403846:	4630      	mov	r0, r6
  403848:	f3af 8000 	nop.w
  40384c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403850:	4681      	mov	r9, r0
  403852:	d1d8      	bne.n	403806 <_vfiprintf_r+0x19e>
  403854:	89a3      	ldrh	r3, [r4, #12]
  403856:	065b      	lsls	r3, r3, #25
  403858:	f53f af7d 	bmi.w	403756 <_vfiprintf_r+0xee>
  40385c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40385e:	e77c      	b.n	40375a <_vfiprintf_r+0xf2>
  403860:	ab03      	add	r3, sp, #12
  403862:	9300      	str	r3, [sp, #0]
  403864:	4622      	mov	r2, r4
  403866:	4b0a      	ldr	r3, [pc, #40]	; (403890 <_vfiprintf_r+0x228>)
  403868:	a904      	add	r1, sp, #16
  40386a:	4630      	mov	r0, r6
  40386c:	f000 f888 	bl	403980 <_printf_i>
  403870:	e7ec      	b.n	40384c <_vfiprintf_r+0x1e4>
  403872:	bf00      	nop
  403874:	00404c1c 	.word	0x00404c1c
  403878:	00404c5c 	.word	0x00404c5c
  40387c:	00404c3c 	.word	0x00404c3c
  403880:	00404bfc 	.word	0x00404bfc
  403884:	00404c62 	.word	0x00404c62
  403888:	00404c66 	.word	0x00404c66
  40388c:	00000000 	.word	0x00000000
  403890:	00403645 	.word	0x00403645

00403894 <_printf_common>:
  403894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403898:	4691      	mov	r9, r2
  40389a:	461f      	mov	r7, r3
  40389c:	688a      	ldr	r2, [r1, #8]
  40389e:	690b      	ldr	r3, [r1, #16]
  4038a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4038a4:	4293      	cmp	r3, r2
  4038a6:	bfb8      	it	lt
  4038a8:	4613      	movlt	r3, r2
  4038aa:	f8c9 3000 	str.w	r3, [r9]
  4038ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4038b2:	4606      	mov	r6, r0
  4038b4:	460c      	mov	r4, r1
  4038b6:	b112      	cbz	r2, 4038be <_printf_common+0x2a>
  4038b8:	3301      	adds	r3, #1
  4038ba:	f8c9 3000 	str.w	r3, [r9]
  4038be:	6823      	ldr	r3, [r4, #0]
  4038c0:	0699      	lsls	r1, r3, #26
  4038c2:	bf42      	ittt	mi
  4038c4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4038c8:	3302      	addmi	r3, #2
  4038ca:	f8c9 3000 	strmi.w	r3, [r9]
  4038ce:	6825      	ldr	r5, [r4, #0]
  4038d0:	f015 0506 	ands.w	r5, r5, #6
  4038d4:	d107      	bne.n	4038e6 <_printf_common+0x52>
  4038d6:	f104 0a19 	add.w	sl, r4, #25
  4038da:	68e3      	ldr	r3, [r4, #12]
  4038dc:	f8d9 2000 	ldr.w	r2, [r9]
  4038e0:	1a9b      	subs	r3, r3, r2
  4038e2:	429d      	cmp	r5, r3
  4038e4:	db29      	blt.n	40393a <_printf_common+0xa6>
  4038e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4038ea:	6822      	ldr	r2, [r4, #0]
  4038ec:	3300      	adds	r3, #0
  4038ee:	bf18      	it	ne
  4038f0:	2301      	movne	r3, #1
  4038f2:	0692      	lsls	r2, r2, #26
  4038f4:	d42e      	bmi.n	403954 <_printf_common+0xc0>
  4038f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4038fa:	4639      	mov	r1, r7
  4038fc:	4630      	mov	r0, r6
  4038fe:	47c0      	blx	r8
  403900:	3001      	adds	r0, #1
  403902:	d021      	beq.n	403948 <_printf_common+0xb4>
  403904:	6823      	ldr	r3, [r4, #0]
  403906:	68e5      	ldr	r5, [r4, #12]
  403908:	f8d9 2000 	ldr.w	r2, [r9]
  40390c:	f003 0306 	and.w	r3, r3, #6
  403910:	2b04      	cmp	r3, #4
  403912:	bf08      	it	eq
  403914:	1aad      	subeq	r5, r5, r2
  403916:	68a3      	ldr	r3, [r4, #8]
  403918:	6922      	ldr	r2, [r4, #16]
  40391a:	bf0c      	ite	eq
  40391c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403920:	2500      	movne	r5, #0
  403922:	4293      	cmp	r3, r2
  403924:	bfc4      	itt	gt
  403926:	1a9b      	subgt	r3, r3, r2
  403928:	18ed      	addgt	r5, r5, r3
  40392a:	f04f 0900 	mov.w	r9, #0
  40392e:	341a      	adds	r4, #26
  403930:	454d      	cmp	r5, r9
  403932:	d11b      	bne.n	40396c <_printf_common+0xd8>
  403934:	2000      	movs	r0, #0
  403936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40393a:	2301      	movs	r3, #1
  40393c:	4652      	mov	r2, sl
  40393e:	4639      	mov	r1, r7
  403940:	4630      	mov	r0, r6
  403942:	47c0      	blx	r8
  403944:	3001      	adds	r0, #1
  403946:	d103      	bne.n	403950 <_printf_common+0xbc>
  403948:	f04f 30ff 	mov.w	r0, #4294967295
  40394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403950:	3501      	adds	r5, #1
  403952:	e7c2      	b.n	4038da <_printf_common+0x46>
  403954:	18e1      	adds	r1, r4, r3
  403956:	1c5a      	adds	r2, r3, #1
  403958:	2030      	movs	r0, #48	; 0x30
  40395a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40395e:	4422      	add	r2, r4
  403960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403968:	3302      	adds	r3, #2
  40396a:	e7c4      	b.n	4038f6 <_printf_common+0x62>
  40396c:	2301      	movs	r3, #1
  40396e:	4622      	mov	r2, r4
  403970:	4639      	mov	r1, r7
  403972:	4630      	mov	r0, r6
  403974:	47c0      	blx	r8
  403976:	3001      	adds	r0, #1
  403978:	d0e6      	beq.n	403948 <_printf_common+0xb4>
  40397a:	f109 0901 	add.w	r9, r9, #1
  40397e:	e7d7      	b.n	403930 <_printf_common+0x9c>

00403980 <_printf_i>:
  403980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403984:	4617      	mov	r7, r2
  403986:	7e0a      	ldrb	r2, [r1, #24]
  403988:	b085      	sub	sp, #20
  40398a:	2a6e      	cmp	r2, #110	; 0x6e
  40398c:	4698      	mov	r8, r3
  40398e:	4606      	mov	r6, r0
  403990:	460c      	mov	r4, r1
  403992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403994:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403998:	f000 80bc 	beq.w	403b14 <_printf_i+0x194>
  40399c:	d81a      	bhi.n	4039d4 <_printf_i+0x54>
  40399e:	2a63      	cmp	r2, #99	; 0x63
  4039a0:	d02e      	beq.n	403a00 <_printf_i+0x80>
  4039a2:	d80a      	bhi.n	4039ba <_printf_i+0x3a>
  4039a4:	2a00      	cmp	r2, #0
  4039a6:	f000 80c8 	beq.w	403b3a <_printf_i+0x1ba>
  4039aa:	2a58      	cmp	r2, #88	; 0x58
  4039ac:	f000 808a 	beq.w	403ac4 <_printf_i+0x144>
  4039b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4039b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4039b8:	e02a      	b.n	403a10 <_printf_i+0x90>
  4039ba:	2a64      	cmp	r2, #100	; 0x64
  4039bc:	d001      	beq.n	4039c2 <_printf_i+0x42>
  4039be:	2a69      	cmp	r2, #105	; 0x69
  4039c0:	d1f6      	bne.n	4039b0 <_printf_i+0x30>
  4039c2:	6821      	ldr	r1, [r4, #0]
  4039c4:	681a      	ldr	r2, [r3, #0]
  4039c6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4039ca:	d023      	beq.n	403a14 <_printf_i+0x94>
  4039cc:	1d11      	adds	r1, r2, #4
  4039ce:	6019      	str	r1, [r3, #0]
  4039d0:	6813      	ldr	r3, [r2, #0]
  4039d2:	e027      	b.n	403a24 <_printf_i+0xa4>
  4039d4:	2a73      	cmp	r2, #115	; 0x73
  4039d6:	f000 80b4 	beq.w	403b42 <_printf_i+0x1c2>
  4039da:	d808      	bhi.n	4039ee <_printf_i+0x6e>
  4039dc:	2a6f      	cmp	r2, #111	; 0x6f
  4039de:	d02a      	beq.n	403a36 <_printf_i+0xb6>
  4039e0:	2a70      	cmp	r2, #112	; 0x70
  4039e2:	d1e5      	bne.n	4039b0 <_printf_i+0x30>
  4039e4:	680a      	ldr	r2, [r1, #0]
  4039e6:	f042 0220 	orr.w	r2, r2, #32
  4039ea:	600a      	str	r2, [r1, #0]
  4039ec:	e003      	b.n	4039f6 <_printf_i+0x76>
  4039ee:	2a75      	cmp	r2, #117	; 0x75
  4039f0:	d021      	beq.n	403a36 <_printf_i+0xb6>
  4039f2:	2a78      	cmp	r2, #120	; 0x78
  4039f4:	d1dc      	bne.n	4039b0 <_printf_i+0x30>
  4039f6:	2278      	movs	r2, #120	; 0x78
  4039f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4039fc:	496e      	ldr	r1, [pc, #440]	; (403bb8 <_printf_i+0x238>)
  4039fe:	e064      	b.n	403aca <_printf_i+0x14a>
  403a00:	681a      	ldr	r2, [r3, #0]
  403a02:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403a06:	1d11      	adds	r1, r2, #4
  403a08:	6019      	str	r1, [r3, #0]
  403a0a:	6813      	ldr	r3, [r2, #0]
  403a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403a10:	2301      	movs	r3, #1
  403a12:	e0a3      	b.n	403b5c <_printf_i+0x1dc>
  403a14:	f011 0f40 	tst.w	r1, #64	; 0x40
  403a18:	f102 0104 	add.w	r1, r2, #4
  403a1c:	6019      	str	r1, [r3, #0]
  403a1e:	d0d7      	beq.n	4039d0 <_printf_i+0x50>
  403a20:	f9b2 3000 	ldrsh.w	r3, [r2]
  403a24:	2b00      	cmp	r3, #0
  403a26:	da03      	bge.n	403a30 <_printf_i+0xb0>
  403a28:	222d      	movs	r2, #45	; 0x2d
  403a2a:	425b      	negs	r3, r3
  403a2c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403a30:	4962      	ldr	r1, [pc, #392]	; (403bbc <_printf_i+0x23c>)
  403a32:	220a      	movs	r2, #10
  403a34:	e017      	b.n	403a66 <_printf_i+0xe6>
  403a36:	6820      	ldr	r0, [r4, #0]
  403a38:	6819      	ldr	r1, [r3, #0]
  403a3a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403a3e:	d003      	beq.n	403a48 <_printf_i+0xc8>
  403a40:	1d08      	adds	r0, r1, #4
  403a42:	6018      	str	r0, [r3, #0]
  403a44:	680b      	ldr	r3, [r1, #0]
  403a46:	e006      	b.n	403a56 <_printf_i+0xd6>
  403a48:	f010 0f40 	tst.w	r0, #64	; 0x40
  403a4c:	f101 0004 	add.w	r0, r1, #4
  403a50:	6018      	str	r0, [r3, #0]
  403a52:	d0f7      	beq.n	403a44 <_printf_i+0xc4>
  403a54:	880b      	ldrh	r3, [r1, #0]
  403a56:	4959      	ldr	r1, [pc, #356]	; (403bbc <_printf_i+0x23c>)
  403a58:	2a6f      	cmp	r2, #111	; 0x6f
  403a5a:	bf14      	ite	ne
  403a5c:	220a      	movne	r2, #10
  403a5e:	2208      	moveq	r2, #8
  403a60:	2000      	movs	r0, #0
  403a62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403a66:	6865      	ldr	r5, [r4, #4]
  403a68:	60a5      	str	r5, [r4, #8]
  403a6a:	2d00      	cmp	r5, #0
  403a6c:	f2c0 809c 	blt.w	403ba8 <_printf_i+0x228>
  403a70:	6820      	ldr	r0, [r4, #0]
  403a72:	f020 0004 	bic.w	r0, r0, #4
  403a76:	6020      	str	r0, [r4, #0]
  403a78:	2b00      	cmp	r3, #0
  403a7a:	d13f      	bne.n	403afc <_printf_i+0x17c>
  403a7c:	2d00      	cmp	r5, #0
  403a7e:	f040 8095 	bne.w	403bac <_printf_i+0x22c>
  403a82:	4675      	mov	r5, lr
  403a84:	2a08      	cmp	r2, #8
  403a86:	d10b      	bne.n	403aa0 <_printf_i+0x120>
  403a88:	6823      	ldr	r3, [r4, #0]
  403a8a:	07da      	lsls	r2, r3, #31
  403a8c:	d508      	bpl.n	403aa0 <_printf_i+0x120>
  403a8e:	6923      	ldr	r3, [r4, #16]
  403a90:	6862      	ldr	r2, [r4, #4]
  403a92:	429a      	cmp	r2, r3
  403a94:	bfde      	ittt	le
  403a96:	2330      	movle	r3, #48	; 0x30
  403a98:	f805 3c01 	strble.w	r3, [r5, #-1]
  403a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
  403aa0:	ebae 0305 	sub.w	r3, lr, r5
  403aa4:	6123      	str	r3, [r4, #16]
  403aa6:	f8cd 8000 	str.w	r8, [sp]
  403aaa:	463b      	mov	r3, r7
  403aac:	aa03      	add	r2, sp, #12
  403aae:	4621      	mov	r1, r4
  403ab0:	4630      	mov	r0, r6
  403ab2:	f7ff feef 	bl	403894 <_printf_common>
  403ab6:	3001      	adds	r0, #1
  403ab8:	d155      	bne.n	403b66 <_printf_i+0x1e6>
  403aba:	f04f 30ff 	mov.w	r0, #4294967295
  403abe:	b005      	add	sp, #20
  403ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403ac4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403ac8:	493c      	ldr	r1, [pc, #240]	; (403bbc <_printf_i+0x23c>)
  403aca:	6822      	ldr	r2, [r4, #0]
  403acc:	6818      	ldr	r0, [r3, #0]
  403ace:	f012 0f80 	tst.w	r2, #128	; 0x80
  403ad2:	f100 0504 	add.w	r5, r0, #4
  403ad6:	601d      	str	r5, [r3, #0]
  403ad8:	d001      	beq.n	403ade <_printf_i+0x15e>
  403ada:	6803      	ldr	r3, [r0, #0]
  403adc:	e002      	b.n	403ae4 <_printf_i+0x164>
  403ade:	0655      	lsls	r5, r2, #25
  403ae0:	d5fb      	bpl.n	403ada <_printf_i+0x15a>
  403ae2:	8803      	ldrh	r3, [r0, #0]
  403ae4:	07d0      	lsls	r0, r2, #31
  403ae6:	bf44      	itt	mi
  403ae8:	f042 0220 	orrmi.w	r2, r2, #32
  403aec:	6022      	strmi	r2, [r4, #0]
  403aee:	b91b      	cbnz	r3, 403af8 <_printf_i+0x178>
  403af0:	6822      	ldr	r2, [r4, #0]
  403af2:	f022 0220 	bic.w	r2, r2, #32
  403af6:	6022      	str	r2, [r4, #0]
  403af8:	2210      	movs	r2, #16
  403afa:	e7b1      	b.n	403a60 <_printf_i+0xe0>
  403afc:	4675      	mov	r5, lr
  403afe:	fbb3 f0f2 	udiv	r0, r3, r2
  403b02:	fb02 3310 	mls	r3, r2, r0, r3
  403b06:	5ccb      	ldrb	r3, [r1, r3]
  403b08:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403b0c:	4603      	mov	r3, r0
  403b0e:	2800      	cmp	r0, #0
  403b10:	d1f5      	bne.n	403afe <_printf_i+0x17e>
  403b12:	e7b7      	b.n	403a84 <_printf_i+0x104>
  403b14:	6808      	ldr	r0, [r1, #0]
  403b16:	681a      	ldr	r2, [r3, #0]
  403b18:	6949      	ldr	r1, [r1, #20]
  403b1a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b1e:	d004      	beq.n	403b2a <_printf_i+0x1aa>
  403b20:	1d10      	adds	r0, r2, #4
  403b22:	6018      	str	r0, [r3, #0]
  403b24:	6813      	ldr	r3, [r2, #0]
  403b26:	6019      	str	r1, [r3, #0]
  403b28:	e007      	b.n	403b3a <_printf_i+0x1ba>
  403b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
  403b2e:	f102 0004 	add.w	r0, r2, #4
  403b32:	6018      	str	r0, [r3, #0]
  403b34:	6813      	ldr	r3, [r2, #0]
  403b36:	d0f6      	beq.n	403b26 <_printf_i+0x1a6>
  403b38:	8019      	strh	r1, [r3, #0]
  403b3a:	2300      	movs	r3, #0
  403b3c:	6123      	str	r3, [r4, #16]
  403b3e:	4675      	mov	r5, lr
  403b40:	e7b1      	b.n	403aa6 <_printf_i+0x126>
  403b42:	681a      	ldr	r2, [r3, #0]
  403b44:	1d11      	adds	r1, r2, #4
  403b46:	6019      	str	r1, [r3, #0]
  403b48:	6815      	ldr	r5, [r2, #0]
  403b4a:	6862      	ldr	r2, [r4, #4]
  403b4c:	2100      	movs	r1, #0
  403b4e:	4628      	mov	r0, r5
  403b50:	f000 f8d6 	bl	403d00 <memchr>
  403b54:	b108      	cbz	r0, 403b5a <_printf_i+0x1da>
  403b56:	1b40      	subs	r0, r0, r5
  403b58:	6060      	str	r0, [r4, #4]
  403b5a:	6863      	ldr	r3, [r4, #4]
  403b5c:	6123      	str	r3, [r4, #16]
  403b5e:	2300      	movs	r3, #0
  403b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403b64:	e79f      	b.n	403aa6 <_printf_i+0x126>
  403b66:	6923      	ldr	r3, [r4, #16]
  403b68:	462a      	mov	r2, r5
  403b6a:	4639      	mov	r1, r7
  403b6c:	4630      	mov	r0, r6
  403b6e:	47c0      	blx	r8
  403b70:	3001      	adds	r0, #1
  403b72:	d0a2      	beq.n	403aba <_printf_i+0x13a>
  403b74:	6823      	ldr	r3, [r4, #0]
  403b76:	079b      	lsls	r3, r3, #30
  403b78:	d507      	bpl.n	403b8a <_printf_i+0x20a>
  403b7a:	2500      	movs	r5, #0
  403b7c:	f104 0919 	add.w	r9, r4, #25
  403b80:	68e3      	ldr	r3, [r4, #12]
  403b82:	9a03      	ldr	r2, [sp, #12]
  403b84:	1a9b      	subs	r3, r3, r2
  403b86:	429d      	cmp	r5, r3
  403b88:	db05      	blt.n	403b96 <_printf_i+0x216>
  403b8a:	68e0      	ldr	r0, [r4, #12]
  403b8c:	9b03      	ldr	r3, [sp, #12]
  403b8e:	4298      	cmp	r0, r3
  403b90:	bfb8      	it	lt
  403b92:	4618      	movlt	r0, r3
  403b94:	e793      	b.n	403abe <_printf_i+0x13e>
  403b96:	2301      	movs	r3, #1
  403b98:	464a      	mov	r2, r9
  403b9a:	4639      	mov	r1, r7
  403b9c:	4630      	mov	r0, r6
  403b9e:	47c0      	blx	r8
  403ba0:	3001      	adds	r0, #1
  403ba2:	d08a      	beq.n	403aba <_printf_i+0x13a>
  403ba4:	3501      	adds	r5, #1
  403ba6:	e7eb      	b.n	403b80 <_printf_i+0x200>
  403ba8:	2b00      	cmp	r3, #0
  403baa:	d1a7      	bne.n	403afc <_printf_i+0x17c>
  403bac:	780b      	ldrb	r3, [r1, #0]
  403bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403bb6:	e765      	b.n	403a84 <_printf_i+0x104>
  403bb8:	00404c7e 	.word	0x00404c7e
  403bbc:	00404c6d 	.word	0x00404c6d

00403bc0 <__sread>:
  403bc0:	b510      	push	{r4, lr}
  403bc2:	460c      	mov	r4, r1
  403bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403bc8:	f000 f8ea 	bl	403da0 <_read_r>
  403bcc:	2800      	cmp	r0, #0
  403bce:	bfab      	itete	ge
  403bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  403bd2:	89a3      	ldrhlt	r3, [r4, #12]
  403bd4:	181b      	addge	r3, r3, r0
  403bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  403bda:	bfac      	ite	ge
  403bdc:	6563      	strge	r3, [r4, #84]	; 0x54
  403bde:	81a3      	strhlt	r3, [r4, #12]
  403be0:	bd10      	pop	{r4, pc}

00403be2 <__swrite>:
  403be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403be6:	461f      	mov	r7, r3
  403be8:	898b      	ldrh	r3, [r1, #12]
  403bea:	05db      	lsls	r3, r3, #23
  403bec:	4605      	mov	r5, r0
  403bee:	460c      	mov	r4, r1
  403bf0:	4616      	mov	r6, r2
  403bf2:	d505      	bpl.n	403c00 <__swrite+0x1e>
  403bf4:	2302      	movs	r3, #2
  403bf6:	2200      	movs	r2, #0
  403bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403bfc:	f000 f868 	bl	403cd0 <_lseek_r>
  403c00:	89a3      	ldrh	r3, [r4, #12]
  403c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403c0a:	81a3      	strh	r3, [r4, #12]
  403c0c:	4632      	mov	r2, r6
  403c0e:	463b      	mov	r3, r7
  403c10:	4628      	mov	r0, r5
  403c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403c16:	f000 b817 	b.w	403c48 <_write_r>

00403c1a <__sseek>:
  403c1a:	b510      	push	{r4, lr}
  403c1c:	460c      	mov	r4, r1
  403c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c22:	f000 f855 	bl	403cd0 <_lseek_r>
  403c26:	1c43      	adds	r3, r0, #1
  403c28:	89a3      	ldrh	r3, [r4, #12]
  403c2a:	bf15      	itete	ne
  403c2c:	6560      	strne	r0, [r4, #84]	; 0x54
  403c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403c36:	81a3      	strheq	r3, [r4, #12]
  403c38:	bf18      	it	ne
  403c3a:	81a3      	strhne	r3, [r4, #12]
  403c3c:	bd10      	pop	{r4, pc}

00403c3e <__sclose>:
  403c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c42:	f000 b813 	b.w	403c6c <_close_r>
	...

00403c48 <_write_r>:
  403c48:	b538      	push	{r3, r4, r5, lr}
  403c4a:	4c07      	ldr	r4, [pc, #28]	; (403c68 <_write_r+0x20>)
  403c4c:	4605      	mov	r5, r0
  403c4e:	4608      	mov	r0, r1
  403c50:	4611      	mov	r1, r2
  403c52:	2200      	movs	r2, #0
  403c54:	6022      	str	r2, [r4, #0]
  403c56:	461a      	mov	r2, r3
  403c58:	f7fe fb84 	bl	402364 <_write>
  403c5c:	1c43      	adds	r3, r0, #1
  403c5e:	d102      	bne.n	403c66 <_write_r+0x1e>
  403c60:	6823      	ldr	r3, [r4, #0]
  403c62:	b103      	cbz	r3, 403c66 <_write_r+0x1e>
  403c64:	602b      	str	r3, [r5, #0]
  403c66:	bd38      	pop	{r3, r4, r5, pc}
  403c68:	20401448 	.word	0x20401448

00403c6c <_close_r>:
  403c6c:	b538      	push	{r3, r4, r5, lr}
  403c6e:	4c06      	ldr	r4, [pc, #24]	; (403c88 <_close_r+0x1c>)
  403c70:	2300      	movs	r3, #0
  403c72:	4605      	mov	r5, r0
  403c74:	4608      	mov	r0, r1
  403c76:	6023      	str	r3, [r4, #0]
  403c78:	f7fd fcda 	bl	401630 <_close>
  403c7c:	1c43      	adds	r3, r0, #1
  403c7e:	d102      	bne.n	403c86 <_close_r+0x1a>
  403c80:	6823      	ldr	r3, [r4, #0]
  403c82:	b103      	cbz	r3, 403c86 <_close_r+0x1a>
  403c84:	602b      	str	r3, [r5, #0]
  403c86:	bd38      	pop	{r3, r4, r5, pc}
  403c88:	20401448 	.word	0x20401448

00403c8c <_fstat_r>:
  403c8c:	b538      	push	{r3, r4, r5, lr}
  403c8e:	4c07      	ldr	r4, [pc, #28]	; (403cac <_fstat_r+0x20>)
  403c90:	2300      	movs	r3, #0
  403c92:	4605      	mov	r5, r0
  403c94:	4608      	mov	r0, r1
  403c96:	4611      	mov	r1, r2
  403c98:	6023      	str	r3, [r4, #0]
  403c9a:	f7fd fccc 	bl	401636 <_fstat>
  403c9e:	1c43      	adds	r3, r0, #1
  403ca0:	d102      	bne.n	403ca8 <_fstat_r+0x1c>
  403ca2:	6823      	ldr	r3, [r4, #0]
  403ca4:	b103      	cbz	r3, 403ca8 <_fstat_r+0x1c>
  403ca6:	602b      	str	r3, [r5, #0]
  403ca8:	bd38      	pop	{r3, r4, r5, pc}
  403caa:	bf00      	nop
  403cac:	20401448 	.word	0x20401448

00403cb0 <_isatty_r>:
  403cb0:	b538      	push	{r3, r4, r5, lr}
  403cb2:	4c06      	ldr	r4, [pc, #24]	; (403ccc <_isatty_r+0x1c>)
  403cb4:	2300      	movs	r3, #0
  403cb6:	4605      	mov	r5, r0
  403cb8:	4608      	mov	r0, r1
  403cba:	6023      	str	r3, [r4, #0]
  403cbc:	f7fd fcc0 	bl	401640 <_isatty>
  403cc0:	1c43      	adds	r3, r0, #1
  403cc2:	d102      	bne.n	403cca <_isatty_r+0x1a>
  403cc4:	6823      	ldr	r3, [r4, #0]
  403cc6:	b103      	cbz	r3, 403cca <_isatty_r+0x1a>
  403cc8:	602b      	str	r3, [r5, #0]
  403cca:	bd38      	pop	{r3, r4, r5, pc}
  403ccc:	20401448 	.word	0x20401448

00403cd0 <_lseek_r>:
  403cd0:	b538      	push	{r3, r4, r5, lr}
  403cd2:	4c07      	ldr	r4, [pc, #28]	; (403cf0 <_lseek_r+0x20>)
  403cd4:	4605      	mov	r5, r0
  403cd6:	4608      	mov	r0, r1
  403cd8:	4611      	mov	r1, r2
  403cda:	2200      	movs	r2, #0
  403cdc:	6022      	str	r2, [r4, #0]
  403cde:	461a      	mov	r2, r3
  403ce0:	f7fd fcb0 	bl	401644 <_lseek>
  403ce4:	1c43      	adds	r3, r0, #1
  403ce6:	d102      	bne.n	403cee <_lseek_r+0x1e>
  403ce8:	6823      	ldr	r3, [r4, #0]
  403cea:	b103      	cbz	r3, 403cee <_lseek_r+0x1e>
  403cec:	602b      	str	r3, [r5, #0]
  403cee:	bd38      	pop	{r3, r4, r5, pc}
  403cf0:	20401448 	.word	0x20401448
	...

00403d00 <memchr>:
  403d00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d04:	2a10      	cmp	r2, #16
  403d06:	db2b      	blt.n	403d60 <memchr+0x60>
  403d08:	f010 0f07 	tst.w	r0, #7
  403d0c:	d008      	beq.n	403d20 <memchr+0x20>
  403d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d12:	3a01      	subs	r2, #1
  403d14:	428b      	cmp	r3, r1
  403d16:	d02d      	beq.n	403d74 <memchr+0x74>
  403d18:	f010 0f07 	tst.w	r0, #7
  403d1c:	b342      	cbz	r2, 403d70 <memchr+0x70>
  403d1e:	d1f6      	bne.n	403d0e <memchr+0xe>
  403d20:	b4f0      	push	{r4, r5, r6, r7}
  403d22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403d26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403d2a:	f022 0407 	bic.w	r4, r2, #7
  403d2e:	f07f 0700 	mvns.w	r7, #0
  403d32:	2300      	movs	r3, #0
  403d34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403d38:	3c08      	subs	r4, #8
  403d3a:	ea85 0501 	eor.w	r5, r5, r1
  403d3e:	ea86 0601 	eor.w	r6, r6, r1
  403d42:	fa85 f547 	uadd8	r5, r5, r7
  403d46:	faa3 f587 	sel	r5, r3, r7
  403d4a:	fa86 f647 	uadd8	r6, r6, r7
  403d4e:	faa5 f687 	sel	r6, r5, r7
  403d52:	b98e      	cbnz	r6, 403d78 <memchr+0x78>
  403d54:	d1ee      	bne.n	403d34 <memchr+0x34>
  403d56:	bcf0      	pop	{r4, r5, r6, r7}
  403d58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d5c:	f002 0207 	and.w	r2, r2, #7
  403d60:	b132      	cbz	r2, 403d70 <memchr+0x70>
  403d62:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d66:	3a01      	subs	r2, #1
  403d68:	ea83 0301 	eor.w	r3, r3, r1
  403d6c:	b113      	cbz	r3, 403d74 <memchr+0x74>
  403d6e:	d1f8      	bne.n	403d62 <memchr+0x62>
  403d70:	2000      	movs	r0, #0
  403d72:	4770      	bx	lr
  403d74:	3801      	subs	r0, #1
  403d76:	4770      	bx	lr
  403d78:	2d00      	cmp	r5, #0
  403d7a:	bf06      	itte	eq
  403d7c:	4635      	moveq	r5, r6
  403d7e:	3803      	subeq	r0, #3
  403d80:	3807      	subne	r0, #7
  403d82:	f015 0f01 	tst.w	r5, #1
  403d86:	d107      	bne.n	403d98 <memchr+0x98>
  403d88:	3001      	adds	r0, #1
  403d8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403d8e:	bf02      	ittt	eq
  403d90:	3001      	addeq	r0, #1
  403d92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403d96:	3001      	addeq	r0, #1
  403d98:	bcf0      	pop	{r4, r5, r6, r7}
  403d9a:	3801      	subs	r0, #1
  403d9c:	4770      	bx	lr
  403d9e:	bf00      	nop

00403da0 <_read_r>:
  403da0:	b538      	push	{r3, r4, r5, lr}
  403da2:	4c07      	ldr	r4, [pc, #28]	; (403dc0 <_read_r+0x20>)
  403da4:	4605      	mov	r5, r0
  403da6:	4608      	mov	r0, r1
  403da8:	4611      	mov	r1, r2
  403daa:	2200      	movs	r2, #0
  403dac:	6022      	str	r2, [r4, #0]
  403dae:	461a      	mov	r2, r3
  403db0:	f7fe fac6 	bl	402340 <_read>
  403db4:	1c43      	adds	r3, r0, #1
  403db6:	d102      	bne.n	403dbe <_read_r+0x1e>
  403db8:	6823      	ldr	r3, [r4, #0]
  403dba:	b103      	cbz	r3, 403dbe <_read_r+0x1e>
  403dbc:	602b      	str	r3, [r5, #0]
  403dbe:	bd38      	pop	{r3, r4, r5, pc}
  403dc0:	20401448 	.word	0x20401448
  403dc4:	746e6f63 	.word	0x746e6f63
  403dc8:	006c6f72 	.word	0x006c6f72
  403dcc:	75706e69 	.word	0x75706e69
  403dd0:	726f4e74 	.word	0x726f4e74
  403dd4:	006c616d 	.word	0x006c616d
  403dd8:	65747441 	.word	0x65747441
  403ddc:	6574706d 	.word	0x6574706d
  403de0:	6f742064 	.word	0x6f742064
  403de4:	61657220 	.word	0x61657220
  403de8:	20612064 	.word	0x20612064
  403dec:	6b636170 	.word	0x6b636170
  403df0:	6f207465 	.word	0x6f207465
  403df4:	2061206e 	.word	0x2061206e
  403df8:	6e616863 	.word	0x6e616863
  403dfc:	206c656e 	.word	0x206c656e
  403e00:	74616874 	.word	0x74616874
  403e04:	73616820 	.word	0x73616820
  403e08:	746f6e20 	.word	0x746f6e20
  403e0c:	65656220 	.word	0x65656220
  403e10:	6e69206e 	.word	0x6e69206e
  403e14:	61697469 	.word	0x61697469
  403e18:	657a696c 	.word	0x657a696c
  403e1c:	68742064 	.word	0x68742064
  403e20:	67756f72 	.word	0x67756f72
  403e24:	6e612068 	.word	0x6e612068
  403e28:	76646120 	.word	0x76646120
  403e2c:	69747265 	.word	0x69747265
  403e30:	656d6573 	.word	0x656d6573
  403e34:	7920746e 	.word	0x7920746e
  403e38:	0d217465 	.word	0x0d217465
  403e3c:	00000000 	.word	0x00000000
  403e40:	50544853 	.word	0x50544853
  403e44:	76644120 	.word	0x76644120
  403e48:	69747265 	.word	0x69747265
  403e4c:	656d6573 	.word	0x656d6573
  403e50:	6f20746e 	.word	0x6f20746e
  403e54:	75707475 	.word	0x75707475
  403e58:	000d3a74 	.word	0x000d3a74
  403e5c:	44495547 	.word	0x44495547
  403e60:	25203d20 	.word	0x25203d20
  403e64:	000a0d75 	.word	0x000a0d75
  403e68:	4378614d 	.word	0x4378614d
  403e6c:	6f677261 	.word	0x6f677261
  403e70:	73756c50 	.word	0x73756c50
  403e74:	64616548 	.word	0x64616548
  403e78:	72577265 	.word	0x72577265
  403e7c:	20657469 	.word	0x20657469
  403e80:	7525203d 	.word	0x7525203d
  403e84:	00000a0d 	.word	0x00000a0d
  403e88:	4378614d 	.word	0x4378614d
  403e8c:	6f677261 	.word	0x6f677261
  403e90:	73756c50 	.word	0x73756c50
  403e94:	64616548 	.word	0x64616548
  403e98:	65527265 	.word	0x65527265
  403e9c:	3d206461 	.word	0x3d206461
  403ea0:	0d752520 	.word	0x0d752520
  403ea4:	0000000a 	.word	0x0000000a
  403ea8:	5478614d 	.word	0x5478614d
  403eac:	736e6172 	.word	0x736e6172
  403eb0:	57726566 	.word	0x57726566
  403eb4:	65746972 	.word	0x65746972
  403eb8:	25203d20 	.word	0x25203d20
  403ebc:	000a0d75 	.word	0x000a0d75
  403ec0:	5478614d 	.word	0x5478614d
  403ec4:	736e6172 	.word	0x736e6172
  403ec8:	52726566 	.word	0x52726566
  403ecc:	20646165 	.word	0x20646165
  403ed0:	7525203d 	.word	0x7525203d
  403ed4:	00000a0d 	.word	0x00000a0d
  403ed8:	6d726f4e 	.word	0x6d726f4e
  403edc:	68436c61 	.word	0x68436c61
  403ee0:	656e6e61 	.word	0x656e6e61
  403ee4:	203d206c 	.word	0x203d206c
  403ee8:	0a0d7525 	.word	0x0a0d7525
  403eec:	00000000 	.word	0x00000000
  403ef0:	656b6157 	.word	0x656b6157
  403ef4:	6e616843 	.word	0x6e616843
  403ef8:	206c656e 	.word	0x206c656e
  403efc:	7525203d 	.word	0x7525203d
  403f00:	00000a0d 	.word	0x00000a0d
  403f04:	4e707041 	.word	0x4e707041
  403f08:	20656d61 	.word	0x20656d61
  403f0c:	7325203d 	.word	0x7325203d
  403f10:	00000a0d 	.word	0x00000a0d
  403f14:	6e616843 	.word	0x6e616843
  403f18:	4e6c656e 	.word	0x4e6c656e
  403f1c:	20656d61 	.word	0x20656d61
  403f20:	7325203d 	.word	0x7325203d
  403f24:	00000a0d 	.word	0x00000a0d
  403f28:	50544853 	.word	0x50544853
  403f2c:	72655620 	.word	0x72655620
  403f30:	6e6f6973 	.word	0x6e6f6973
  403f34:	25203d20 	.word	0x25203d20
  403f38:	000a0d73 	.word	0x000a0d73
  403f3c:	6e6e6143 	.word	0x6e6e6143
  403f40:	7520746f 	.word	0x7520746f
  403f44:	7265646e 	.word	0x7265646e
  403f48:	6e617473 	.word	0x6e617473
  403f4c:	64612064 	.word	0x64612064
  403f50:	74726576 	.word	0x74726576
  403f54:	6d657369 	.word	0x6d657369
  403f58:	20746e65 	.word	0x20746e65
  403f5c:	6b636170 	.word	0x6b636170
  403f60:	74207465 	.word	0x74207465
  403f64:	76206761 	.word	0x76206761
  403f68:	65756c61 	.word	0x65756c61
  403f6c:	00000000 	.word	0x00000000
  403f70:	50544853 	.word	0x50544853
  403f74:	72726520 	.word	0x72726520
  403f78:	6f20726f 	.word	0x6f20726f
  403f7c:	75707475 	.word	0x75707475
  403f80:	000d3a74 	.word	0x000d3a74
  403f84:	65206f4e 	.word	0x65206f4e
  403f88:	726f7272 	.word	0x726f7272
  403f8c:	0000000d 	.word	0x0000000d
  403f90:	20627548 	.word	0x20627548
  403f94:	6c707061 	.word	0x6c707061
  403f98:	74616369 	.word	0x74616369
  403f9c:	206e6f69 	.word	0x206e6f69
  403fa0:	65747461 	.word	0x65747461
  403fa4:	6574706d 	.word	0x6574706d
  403fa8:	6f742064 	.word	0x6f742064
  403fac:	63786520 	.word	0x63786520
  403fb0:	20646565 	.word	0x20646565
  403fb4:	6978616d 	.word	0x6978616d
  403fb8:	206d756d 	.word	0x206d756d
  403fbc:	64616572 	.word	0x64616572
  403fc0:	72616320 	.word	0x72616320
  403fc4:	6c206f67 	.word	0x6c206f67
  403fc8:	74676e65 	.word	0x74676e65
  403fcc:	00000d68 	.word	0x00000d68
  403fd0:	74736f48 	.word	0x74736f48
  403fd4:	69727720 	.word	0x69727720
  403fd8:	77206574 	.word	0x77206574
  403fdc:	74207361 	.word	0x74207361
  403fe0:	73206f6f 	.word	0x73206f6f
  403fe4:	74726f68 	.word	0x74726f68
  403fe8:	656e2820 	.word	0x656e2820
  403fec:	61206465 	.word	0x61206465
  403ff0:	656c2074 	.word	0x656c2074
  403ff4:	20747361 	.word	0x20747361
  403ff8:	2d342061 	.word	0x2d342061
  403ffc:	65747962 	.word	0x65747962
  404000:	61656820 	.word	0x61656820
  404004:	29726564 	.word	0x29726564
  404008:	0000000d 	.word	0x0000000d
  40400c:	74736f48 	.word	0x74736f48
  404010:	6f727720 	.word	0x6f727720
  404014:	61206574 	.word	0x61206574
  404018:	61656820 	.word	0x61656820
  40401c:	20726564 	.word	0x20726564
  404020:	68746977 	.word	0x68746977
  404024:	6e656c20 	.word	0x6e656c20
  404028:	20687467 	.word	0x20687467
  40402c:	61657267 	.word	0x61657267
  404030:	20726574 	.word	0x20726574
  404034:	6e616874 	.word	0x6e616874
  404038:	78616d20 	.word	0x78616d20
  40403c:	6d756d69 	.word	0x6d756d69
  404040:	69727720 	.word	0x69727720
  404044:	63206574 	.word	0x63206574
  404048:	6f677261 	.word	0x6f677261
  40404c:	6e656c20 	.word	0x6e656c20
  404050:	0d687467 	.word	0x0d687467
  404054:	00000000 	.word	0x00000000
  404058:	74736f48 	.word	0x74736f48
  40405c:	6f727720 	.word	0x6f727720
  404060:	61206574 	.word	0x61206574
  404064:	61656820 	.word	0x61656820
  404068:	20726564 	.word	0x20726564
  40406c:	68746977 	.word	0x68746977
  404070:	6e656c20 	.word	0x6e656c20
  404074:	20687467 	.word	0x20687467
  404078:	7373656c 	.word	0x7373656c
  40407c:	61687420 	.word	0x61687420
  404080:	726f206e 	.word	0x726f206e
  404084:	75716520 	.word	0x75716520
  404088:	74206c61 	.word	0x74206c61
  40408c:	6568206f 	.word	0x6568206f
  404090:	72656461 	.word	0x72656461
  404094:	6e656c20 	.word	0x6e656c20
  404098:	20687467 	.word	0x20687467
  40409c:	74696528 	.word	0x74696528
  4040a0:	20726568 	.word	0x20726568
  4040a4:	61766e69 	.word	0x61766e69
  4040a8:	2064696c 	.word	0x2064696c
  4040ac:	6e20726f 	.word	0x6e20726f
  4040b0:	6170206f 	.word	0x6170206f
  4040b4:	616f6c79 	.word	0x616f6c79
  4040b8:	202e2964 	.word	0x202e2964
  4040bc:	65746f4e 	.word	0x65746f4e
  4040c0:	61687420 	.word	0x61687420
  4040c4:	20612074 	.word	0x20612074
  4040c8:	676e656c 	.word	0x676e656c
  4040cc:	6f206874 	.word	0x6f206874
  4040d0:	20302066 	.word	0x20302066
  4040d4:	70207369 	.word	0x70207369
  4040d8:	696d7265 	.word	0x696d7265
  4040dc:	64657474 	.word	0x64657474
  4040e0:	6e69202c 	.word	0x6e69202c
  4040e4:	61636964 	.word	0x61636964
  4040e8:	676e6974 	.word	0x676e6974
  4040ec:	bdbfef20 	.word	0xbdbfef20
  4040f0:	63206f6e 	.word	0x63206f6e
  4040f4:	6f677261 	.word	0x6f677261
  4040f8:	0dbdbfef 	.word	0x0dbdbfef
  4040fc:	00000000 	.word	0x00000000
  404100:	74736f48 	.word	0x74736f48
  404104:	6f727720 	.word	0x6f727720
  404108:	62206574 	.word	0x62206574
  40410c:	6e696765 	.word	0x6e696765
  404110:	676e696e 	.word	0x676e696e
  404114:	20666f20 	.word	0x20666f20
  404118:	67617266 	.word	0x67617266
  40411c:	746e656d 	.word	0x746e656d
  404120:	63206465 	.word	0x63206465
  404124:	6f677261 	.word	0x6f677261
  404128:	72742820 	.word	0x72742820
  40412c:	66736e61 	.word	0x66736e61
  404130:	6c207265 	.word	0x6c207265
  404134:	74676e65 	.word	0x74676e65
  404138:	61772068 	.word	0x61772068
  40413c:	656c2073 	.word	0x656c2073
  404140:	74207373 	.word	0x74207373
  404144:	206e6168 	.word	0x206e6168
  404148:	6c6c7566 	.word	0x6c6c7566
  40414c:	72616320 	.word	0x72616320
  404150:	6c206f67 	.word	0x6c206f67
  404154:	74676e65 	.word	0x74676e65
  404158:	202c2968 	.word	0x202c2968
  40415c:	67617266 	.word	0x67617266
  404160:	746e656d 	.word	0x746e656d
  404164:	6f697461 	.word	0x6f697461
  404168:	6f6e206e 	.word	0x6f6e206e
  40416c:	75732074 	.word	0x75732074
  404170:	726f7070 	.word	0x726f7070
  404174:	0d646574 	.word	0x0d646574
  404178:	00000000 	.word	0x00000000
  40417c:	74736f48 	.word	0x74736f48
  404180:	6f727720 	.word	0x6f727720
  404184:	63206574 	.word	0x63206574
  404188:	69746e6f 	.word	0x69746e6f
  40418c:	7461756e 	.word	0x7461756e
  404190:	206e6f69 	.word	0x206e6f69
  404194:	6620666f 	.word	0x6620666f
  404198:	6d676172 	.word	0x6d676172
  40419c:	65746e65 	.word	0x65746e65
  4041a0:	61632064 	.word	0x61632064
  4041a4:	206f6772 	.word	0x206f6772
  4041a8:	6e6f6328 	.word	0x6e6f6328
  4041ac:	756e6974 	.word	0x756e6974
  4041b0:	6f697461 	.word	0x6f697461
  4041b4:	6962206e 	.word	0x6962206e
  4041b8:	65732074 	.word	0x65732074
  4041bc:	2c29746e 	.word	0x2c29746e
  4041c0:	61726620 	.word	0x61726620
  4041c4:	6e656d67 	.word	0x6e656d67
  4041c8:	69746174 	.word	0x69746174
  4041cc:	6e206e6f 	.word	0x6e206e6f
  4041d0:	7320746f 	.word	0x7320746f
  4041d4:	6f707075 	.word	0x6f707075
  4041d8:	64657472 	.word	0x64657472
  4041dc:	0000000d 	.word	0x0000000d
  4041e0:	65726e55 	.word	0x65726e55
  4041e4:	6e676f63 	.word	0x6e676f63
  4041e8:	64657a69 	.word	0x64657a69
  4041ec:	6d6f6320 	.word	0x6d6f6320
  4041f0:	646e616d 	.word	0x646e616d
  4041f4:	206e6f20 	.word	0x206e6f20
  4041f8:	746e6f63 	.word	0x746e6f63
  4041fc:	206c6f72 	.word	0x206c6f72
  404200:	6e616863 	.word	0x6e616863
  404204:	0d6c656e 	.word	0x0d6c656e
  404208:	00000000 	.word	0x00000000
  40420c:	65726e55 	.word	0x65726e55
  404210:	6e676f63 	.word	0x6e676f63
  404214:	64657a69 	.word	0x64657a69
  404218:	72617020 	.word	0x72617020
  40421c:	74656d61 	.word	0x74656d61
  404220:	74207265 	.word	0x74207265
  404224:	6567206f 	.word	0x6567206f
  404228:	64612d74 	.word	0x64612d74
  40422c:	74726576 	.word	0x74726576
  404230:	6d657369 	.word	0x6d657369
  404234:	20746e65 	.word	0x20746e65
  404238:	6d6d6f63 	.word	0x6d6d6f63
  40423c:	0d646e61 	.word	0x0d646e61
  404240:	00000000 	.word	0x00000000
  404244:	74736f48 	.word	0x74736f48
  404248:	6f727720 	.word	0x6f727720
  40424c:	74206574 	.word	0x74206574
  404250:	6e75206f 	.word	0x6e75206f
  404254:	6f636572 	.word	0x6f636572
  404258:	7a696e67 	.word	0x7a696e67
  40425c:	63206465 	.word	0x63206465
  404260:	6e6e6168 	.word	0x6e6e6168
  404264:	000d6c65 	.word	0x000d6c65
  404268:	65766441 	.word	0x65766441
  40426c:	73697472 	.word	0x73697472
  404270:	6e656d65 	.word	0x6e656d65
  404274:	65722074 	.word	0x65722074
  404278:	73657571 	.word	0x73657571
  40427c:	65722074 	.word	0x65722074
  404280:	76696563 	.word	0x76696563
  404284:	77206465 	.word	0x77206465
  404288:	656c6968 	.word	0x656c6968
  40428c:	76644120 	.word	0x76644120
  404290:	69747265 	.word	0x69747265
  404294:	656d6573 	.word	0x656d6573
  404298:	5220746e 	.word	0x5220746e
  40429c:	6f707365 	.word	0x6f707365
  4042a0:	2065736e 	.word	0x2065736e
  4042a4:	20736177 	.word	0x20736177
  4042a8:	646e6570 	.word	0x646e6570
  4042ac:	0d676e69 	.word	0x0d676e69
  4042b0:	00000000 	.word	0x00000000
  4042b4:	74736f48 	.word	0x74736f48
  4042b8:	72657020 	.word	0x72657020
  4042bc:	6d726f66 	.word	0x6d726f66
  4042c0:	61206465 	.word	0x61206465
  4042c4:	69727720 	.word	0x69727720
  4042c8:	6f206574 	.word	0x6f206574
  4042cc:	61726570 	.word	0x61726570
  4042d0:	6e6f6974 	.word	0x6e6f6974
  4042d4:	66656220 	.word	0x66656220
  4042d8:	2065726f 	.word	0x2065726f
  4042dc:	20656874 	.word	0x20656874
  4042e0:	20627568 	.word	0x20627568
  4042e4:	20646168 	.word	0x20646168
  4042e8:	696e6966 	.word	0x696e6966
  4042ec:	64656873 	.word	0x64656873
  4042f0:	6e657320 	.word	0x6e657320
  4042f4:	676e6964 	.word	0x676e6964
  4042f8:	73746920 	.word	0x73746920
  4042fc:	76646120 	.word	0x76646120
  404300:	69747265 	.word	0x69747265
  404304:	656d6573 	.word	0x656d6573
  404308:	7220746e 	.word	0x7220746e
  40430c:	6f707365 	.word	0x6f707365
  404310:	0d65736e 	.word	0x0d65736e
  404314:	00000000 	.word	0x00000000
  404318:	6f727245 	.word	0x6f727245
  40431c:	696c2072 	.word	0x696c2072
  404320:	74207473 	.word	0x74207473
  404324:	6c206f6f 	.word	0x6c206f6f
  404328:	20676e6f 	.word	0x20676e6f
  40432c:	73206f74 	.word	0x73206f74
  404330:	2c646e65 	.word	0x2c646e65
  404334:	75727420 	.word	0x75727420
  404338:	7461636e 	.word	0x7461636e
  40433c:	000d6465 	.word	0x000d6465
  404340:	6e6b6e55 	.word	0x6e6b6e55
  404344:	206e776f 	.word	0x206e776f
  404348:	6f727265 	.word	0x6f727265
  40434c:	00000d72 	.word	0x00000d72
  404350:	6d6d6f43 	.word	0x6d6d6f43
  404354:	20646e61 	.word	0x20646e61
  404358:	6e616863 	.word	0x6e616863
  40435c:	206c656e 	.word	0x206c656e
  404360:	6d6d6f63 	.word	0x6d6d6f63
  404364:	20646e61 	.word	0x20646e61
  404368:	65707974 	.word	0x65707974
  40436c:	73617720 	.word	0x73617720
  404370:	72206120 	.word	0x72206120
  404374:	72657365 	.word	0x72657365
  404378:	20646576 	.word	0x20646576
  40437c:	21746962 	.word	0x21746962
  404380:	0000000d 	.word	0x0000000d
  404384:	322d4853 	.word	0x322d4853
  404388:	6e6f4320 	.word	0x6e6f4320
  40438c:	6c6f7274 	.word	0x6c6f7274
  404390:	61684320 	.word	0x61684320
  404394:	6c656e6e 	.word	0x6c656e6e
  404398:	74754f20 	.word	0x74754f20
  40439c:	3a747570 	.word	0x3a747570
  4043a0:	0000000d 	.word	0x0000000d
  4043a4:	6f706552 	.word	0x6f706552
  4043a8:	49207472 	.word	0x49207472
  4043ac:	203d2044 	.word	0x203d2044
  4043b0:	43467830 	.word	0x43467830
  4043b4:	65472720 	.word	0x65472720
  4043b8:	65462074 	.word	0x65462074
  4043bc:	72757461 	.word	0x72757461
  4043c0:	65522065 	.word	0x65522065
  4043c4:	6e6f7073 	.word	0x6e6f7073
  4043c8:	0d276573 	.word	0x0d276573
  4043cc:	00000000 	.word	0x00000000
  4043d0:	74616546 	.word	0x74616546
  4043d4:	20657275 	.word	0x20657275
  4043d8:	6f706552 	.word	0x6f706552
  4043dc:	49207472 	.word	0x49207472
  4043e0:	203d2044 	.word	0x203d2044
  4043e4:	0a0d7525 	.word	0x0a0d7525
  4043e8:	00000000 	.word	0x00000000
  4043ec:	74616546 	.word	0x74616546
  4043f0:	20657275 	.word	0x20657275
  4043f4:	67616c66 	.word	0x67616c66
  4043f8:	203d2073 	.word	0x203d2073
  4043fc:	0a0d7525 	.word	0x0a0d7525
  404400:	00000000 	.word	0x00000000
  404404:	6e616843 	.word	0x6e616843
  404408:	73206567 	.word	0x73206567
  40440c:	69736e65 	.word	0x69736e65
  404410:	69766974 	.word	0x69766974
  404414:	3d207974 	.word	0x3d207974
  404418:	0d752520 	.word	0x0d752520
  40441c:	0000000a 	.word	0x0000000a
  404420:	6f706552 	.word	0x6f706552
  404424:	69207472 	.word	0x69207472
  404428:	7265746e 	.word	0x7265746e
  40442c:	206c6176 	.word	0x206c6176
  404430:	7525203d 	.word	0x7525203d
  404434:	00000a0d 	.word	0x00000a0d
  404438:	63746142 	.word	0x63746142
  40443c:	6e692068 	.word	0x6e692068
  404440:	76726574 	.word	0x76726574
  404444:	3d206c61 	.word	0x3d206c61
  404448:	0d752520 	.word	0x0d752520
  40444c:	0000000a 	.word	0x0000000a
  404450:	736e6553 	.word	0x736e6553
  404454:	732d726f 	.word	0x732d726f
  404458:	69636570 	.word	0x69636570
  40445c:	20636966 	.word	0x20636966
  404460:	666e6f63 	.word	0x666e6f63
  404464:	72756769 	.word	0x72756769
  404468:	6f697461 	.word	0x6f697461
  40446c:	6f77206e 	.word	0x6f77206e
  404470:	3d206472 	.word	0x3d206472
  404474:	0d752520 	.word	0x0d752520
  404478:	0000000a 	.word	0x0000000a
  40447c:	6f706552 	.word	0x6f706552
  404480:	49207472 	.word	0x49207472
  404484:	203d2044 	.word	0x203d2044
  404488:	38467830 	.word	0x38467830
  40448c:	72502720 	.word	0x72502720
  404490:	6375646f 	.word	0x6375646f
  404494:	44492074 	.word	0x44492074
  404498:	73655220 	.word	0x73655220
  40449c:	736e6f70 	.word	0x736e6f70
  4044a0:	000d2765 	.word	0x000d2765
  4044a4:	65736552 	.word	0x65736552
  4044a8:	61432074 	.word	0x61432074
  4044ac:	20657375 	.word	0x20657375
  4044b0:	7525203d 	.word	0x7525203d
  4044b4:	00000a0d 	.word	0x00000a0d
  4044b8:	56205753 	.word	0x56205753
  4044bc:	69737265 	.word	0x69737265
  4044c0:	4d206e6f 	.word	0x4d206e6f
  4044c4:	726f6a61 	.word	0x726f6a61
  4044c8:	25203d20 	.word	0x25203d20
  4044cc:	000a0d75 	.word	0x000a0d75
  4044d0:	56205753 	.word	0x56205753
  4044d4:	69737265 	.word	0x69737265
  4044d8:	4d206e6f 	.word	0x4d206e6f
  4044dc:	726f6e69 	.word	0x726f6e69
  4044e0:	25203d20 	.word	0x25203d20
  4044e4:	000a0d75 	.word	0x000a0d75
  4044e8:	50205753 	.word	0x50205753
  4044ec:	20747261 	.word	0x20747261
  4044f0:	626d754e 	.word	0x626d754e
  4044f4:	3d207265 	.word	0x3d207265
  4044f8:	0d752520 	.word	0x0d752520
  4044fc:	0000000a 	.word	0x0000000a
  404500:	42205753 	.word	0x42205753
  404504:	646c6975 	.word	0x646c6975
  404508:	6d754e20 	.word	0x6d754e20
  40450c:	20726562 	.word	0x20726562
  404510:	7525203d 	.word	0x7525203d
  404514:	00000a0d 	.word	0x00000a0d
  404518:	56205753 	.word	0x56205753
  40451c:	69737265 	.word	0x69737265
  404520:	50206e6f 	.word	0x50206e6f
  404524:	68637461 	.word	0x68637461
  404528:	25203d20 	.word	0x25203d20
  40452c:	000a0d75 	.word	0x000a0d75
  404530:	6f706552 	.word	0x6f706552
  404534:	49207472 	.word	0x49207472
  404538:	203d2044 	.word	0x203d2044
  40453c:	35467830 	.word	0x35467830
  404540:	52462720 	.word	0x52462720
  404544:	72572053 	.word	0x72572053
  404548:	20657469 	.word	0x20657469
  40454c:	70736552 	.word	0x70736552
  404550:	65736e6f 	.word	0x65736e6f
  404554:	00000d27 	.word	0x00000d27
  404558:	74617453 	.word	0x74617453
  40455c:	452f7375 	.word	0x452f7375
  404560:	726f7272 	.word	0x726f7272
  404564:	25203d20 	.word	0x25203d20
  404568:	000a0d75 	.word	0x000a0d75
  40456c:	64726f57 	.word	0x64726f57
  404570:	66664f20 	.word	0x66664f20
  404574:	20746573 	.word	0x20746573
  404578:	7525203d 	.word	0x7525203d
  40457c:	00000a0d 	.word	0x00000a0d
  404580:	6f706552 	.word	0x6f706552
  404584:	49207472 	.word	0x49207472
  404588:	203d2044 	.word	0x203d2044
  40458c:	33467830 	.word	0x33467830
  404590:	52462720 	.word	0x52462720
  404594:	65522053 	.word	0x65522053
  404598:	52206461 	.word	0x52206461
  40459c:	6f707365 	.word	0x6f707365
  4045a0:	2765736e 	.word	0x2765736e
  4045a4:	0000000d 	.word	0x0000000d
  4045a8:	61746144 	.word	0x61746144
  4045ac:	6e654c20 	.word	0x6e654c20
  4045b0:	20687467 	.word	0x20687467
  4045b4:	7525203d 	.word	0x7525203d
  4045b8:	00000a0d 	.word	0x00000a0d
  4045bc:	74617453 	.word	0x74617453
  4045c0:	3d207375 	.word	0x3d207375
  4045c4:	0d752520 	.word	0x0d752520
  4045c8:	0000000a 	.word	0x0000000a
  4045cc:	61746144 	.word	0x61746144
  4045d0:	203d2030 	.word	0x203d2030
  4045d4:	0a0d7525 	.word	0x0a0d7525
  4045d8:	00000000 	.word	0x00000000
  4045dc:	20535246 	.word	0x20535246
  4045e0:	65707954 	.word	0x65707954
  4045e4:	25203d20 	.word	0x25203d20
  4045e8:	000a0d75 	.word	0x000a0d75
  4045ec:	6f706552 	.word	0x6f706552
  4045f0:	49207472 	.word	0x49207472
  4045f4:	203d2044 	.word	0x203d2044
  4045f8:	31467830 	.word	0x31467830
  4045fc:	6f432720 	.word	0x6f432720
  404600:	6e616d6d 	.word	0x6e616d6d
  404604:	65522064 	.word	0x65522064
  404608:	6e6f7073 	.word	0x6e6f7073
  40460c:	0d276573 	.word	0x0d276573
  404610:	00000000 	.word	0x00000000
  404614:	6d6d6f43 	.word	0x6d6d6f43
  404618:	20646e61 	.word	0x20646e61
  40461c:	7525203d 	.word	0x7525203d
  404620:	00000a0d 	.word	0x00000a0d
  404624:	6d6d6f43 	.word	0x6d6d6f43
  404628:	20646e61 	.word	0x20646e61
  40462c:	75716553 	.word	0x75716553
  404630:	65636e65 	.word	0x65636e65
  404634:	6d754e20 	.word	0x6d754e20
  404638:	20726562 	.word	0x20726562
  40463c:	7525203d 	.word	0x7525203d
  404640:	00000a0d 	.word	0x00000a0d
  404644:	70736552 	.word	0x70736552
  404648:	65736e6f 	.word	0x65736e6f
  40464c:	71655320 	.word	0x71655320
  404650:	636e6575 	.word	0x636e6575
  404654:	754e2065 	.word	0x754e2065
  404658:	7265626d 	.word	0x7265626d
  40465c:	25203d20 	.word	0x25203d20
  404660:	000a0d75 	.word	0x000a0d75
  404664:	56203052 	.word	0x56203052
  404668:	65756c61 	.word	0x65756c61
  40466c:	25203d20 	.word	0x25203d20
  404670:	000a0d75 	.word	0x000a0d75
  404674:	56203152 	.word	0x56203152
  404678:	65756c61 	.word	0x65756c61
  40467c:	25203d20 	.word	0x25203d20
  404680:	000a0d75 	.word	0x000a0d75
  404684:	56203252 	.word	0x56203252
  404688:	65756c61 	.word	0x65756c61
  40468c:	25203d20 	.word	0x25203d20
  404690:	000a0d75 	.word	0x000a0d75
  404694:	56203352 	.word	0x56203352
  404698:	65756c61 	.word	0x65756c61
  40469c:	25203d20 	.word	0x25203d20
  4046a0:	000a0d75 	.word	0x000a0d75
  4046a4:	56203452 	.word	0x56203452
  4046a8:	65756c61 	.word	0x65756c61
  4046ac:	25203d20 	.word	0x25203d20
  4046b0:	000a0d75 	.word	0x000a0d75
  4046b4:	56203552 	.word	0x56203552
  4046b8:	65756c61 	.word	0x65756c61
  4046bc:	25203d20 	.word	0x25203d20
  4046c0:	000a0d75 	.word	0x000a0d75
  4046c4:	56203652 	.word	0x56203652
  4046c8:	65756c61 	.word	0x65756c61
  4046cc:	25203d20 	.word	0x25203d20
  4046d0:	000a0d75 	.word	0x000a0d75
  4046d4:	56203752 	.word	0x56203752
  4046d8:	65756c61 	.word	0x65756c61
  4046dc:	25203d20 	.word	0x25203d20
  4046e0:	000a0d75 	.word	0x000a0d75
  4046e4:	56203852 	.word	0x56203852
  4046e8:	65756c61 	.word	0x65756c61
  4046ec:	25203d20 	.word	0x25203d20
  4046f0:	000a0d75 	.word	0x000a0d75
  4046f4:	56203952 	.word	0x56203952
  4046f8:	65756c61 	.word	0x65756c61
  4046fc:	25203d20 	.word	0x25203d20
  404700:	000a0d75 	.word	0x000a0d75
  404704:	20303152 	.word	0x20303152
  404708:	756c6156 	.word	0x756c6156
  40470c:	203d2065 	.word	0x203d2065
  404710:	0a0d7525 	.word	0x0a0d7525
  404714:	00000000 	.word	0x00000000
  404718:	65636552 	.word	0x65636552
  40471c:	64657669 	.word	0x64657669
  404720:	70657220 	.word	0x70657220
  404724:	2074726f 	.word	0x2074726f
  404728:	6f204449 	.word	0x6f204449
  40472c:	20726576 	.word	0x20726576
  404730:	20324853 	.word	0x20324853
  404734:	746e6f63 	.word	0x746e6f63
  404738:	206c6f72 	.word	0x206c6f72
  40473c:	6e616863 	.word	0x6e616863
  404740:	206c656e 	.word	0x206c656e
  404744:	74616874 	.word	0x74616874
  404748:	73617720 	.word	0x73617720
  40474c:	746f6e20 	.word	0x746f6e20
  404750:	63657220 	.word	0x63657220
  404754:	696e676f 	.word	0x696e676f
  404758:	0064657a 	.word	0x0064657a
  40475c:	322d4853 	.word	0x322d4853
  404760:	706e6920 	.word	0x706e6920
  404764:	6f4e7475 	.word	0x6f4e7475
  404768:	6c616d72 	.word	0x6c616d72
  40476c:	61684320 	.word	0x61684320
  404770:	6c656e6e 	.word	0x6c656e6e
  404774:	74754f20 	.word	0x74754f20
  404778:	3a747570 	.word	0x3a747570
  40477c:	0000000d 	.word	0x0000000d
  404780:	65736142 	.word	0x65736142
  404784:	6c654420 	.word	0x6c654420
  404788:	3d206174 	.word	0x3d206174
  40478c:	0d752520 	.word	0x0d752520
  404790:	0000000a 	.word	0x0000000a
  404794:	6f706552 	.word	0x6f706552
  404798:	49207472 	.word	0x49207472
  40479c:	203d2044 	.word	0x203d2044
  4047a0:	35307830 	.word	0x35307830
  4047a4:	6f522720 	.word	0x6f522720
  4047a8:	69746174 	.word	0x69746174
  4047ac:	56206e6f 	.word	0x56206e6f
  4047b0:	6f746365 	.word	0x6f746365
  4047b4:	000d2772 	.word	0x000d2772
  4047b8:	616c6544 	.word	0x616c6544
  4047bc:	203d2079 	.word	0x203d2079
  4047c0:	0a0d7525 	.word	0x0a0d7525
  4047c4:	00000000 	.word	0x00000000
  4047c8:	74696e55 	.word	0x74696e55
  4047cc:	61755120 	.word	0x61755120
  4047d0:	6e726574 	.word	0x6e726574
  4047d4:	206e6f69 	.word	0x206e6f69
  4047d8:	203d2069 	.word	0x203d2069
  4047dc:	0a0d6625 	.word	0x0a0d6625
  4047e0:	00000000 	.word	0x00000000
  4047e4:	74696e55 	.word	0x74696e55
  4047e8:	61755120 	.word	0x61755120
  4047ec:	6e726574 	.word	0x6e726574
  4047f0:	206e6f69 	.word	0x206e6f69
  4047f4:	203d206a 	.word	0x203d206a
  4047f8:	0a0d6625 	.word	0x0a0d6625
  4047fc:	00000000 	.word	0x00000000
  404800:	74696e55 	.word	0x74696e55
  404804:	61755120 	.word	0x61755120
  404808:	6e726574 	.word	0x6e726574
  40480c:	206e6f69 	.word	0x206e6f69
  404810:	203d206b 	.word	0x203d206b
  404814:	0a0d6625 	.word	0x0a0d6625
  404818:	00000000 	.word	0x00000000
  40481c:	74696e55 	.word	0x74696e55
  404820:	61755120 	.word	0x61755120
  404824:	6e726574 	.word	0x6e726574
  404828:	206e6f69 	.word	0x206e6f69
  40482c:	6c616572 	.word	0x6c616572
  404830:	25203d20 	.word	0x25203d20
  404834:	000a0d66 	.word	0x000a0d66
  404838:	75636341 	.word	0x75636341
  40483c:	79636172 	.word	0x79636172
  404840:	74736520 	.word	0x74736520
  404844:	74616d69 	.word	0x74616d69
  404848:	203d2065 	.word	0x203d2065
  40484c:	0a0d6625 	.word	0x0a0d6625
  404850:	00000000 	.word	0x00000000
  404854:	252c6625 	.word	0x252c6625
  404858:	66252c66 	.word	0x66252c66
  40485c:	0d66252c 	.word	0x0d66252c
  404860:	0000000a 	.word	0x0000000a
  404864:	65636552 	.word	0x65636552
  404868:	64657669 	.word	0x64657669
  40486c:	70657220 	.word	0x70657220
  404870:	2074726f 	.word	0x2074726f
  404874:	6f204449 	.word	0x6f204449
  404878:	20726576 	.word	0x20726576
  40487c:	20324853 	.word	0x20324853
  404880:	75706e69 	.word	0x75706e69
  404884:	726f4e74 	.word	0x726f4e74
  404888:	206c616d 	.word	0x206c616d
  40488c:	6e616863 	.word	0x6e616863
  404890:	206c656e 	.word	0x206c656e
  404894:	74616874 	.word	0x74616874
  404898:	73617720 	.word	0x73617720
  40489c:	746f6e20 	.word	0x746f6e20
  4048a0:	63657220 	.word	0x63657220
  4048a4:	696e676f 	.word	0x696e676f
  4048a8:	0064657a 	.word	0x0064657a
  4048ac:	6c696146 	.word	0x6c696146
  4048b0:	74206465 	.word	0x74206465
  4048b4:	6966206f 	.word	0x6966206f
  4048b8:	7420646e 	.word	0x7420646e
  4048bc:	53206568 	.word	0x53206568
  4048c0:	20322d48 	.word	0x20322d48
  4048c4:	746e6f63 	.word	0x746e6f63
  4048c8:	206c6f72 	.word	0x206c6f72
  4048cc:	6e616863 	.word	0x6e616863
  4048d0:	206c656e 	.word	0x206c656e
  4048d4:	626d756e 	.word	0x626d756e
  4048d8:	20217265 	.word	0x20217265
  4048dc:	6b694c28 	.word	0x6b694c28
  4048e0:	20796c65 	.word	0x20796c65
  4048e4:	53206f6e 	.word	0x53206f6e
  4048e8:	20505448 	.word	0x20505448
  4048ec:	65766461 	.word	0x65766461
  4048f0:	73697472 	.word	0x73697472
  4048f4:	6e656d65 	.word	0x6e656d65
  4048f8:	61702074 	.word	0x61702074
  4048fc:	74656b63 	.word	0x74656b63
  404900:	61657220 	.word	0x61657220
  404904:	49202964 	.word	0x49202964
  404908:	68742073 	.word	0x68742073
  40490c:	4e422065 	.word	0x4e422065
  404910:	3538304f 	.word	0x3538304f
  404914:	6e6f6320 	.word	0x6e6f6320
  404918:	7463656e 	.word	0x7463656e
  40491c:	0d3f6465 	.word	0x0d3f6465
  404920:	00000000 	.word	0x00000000
  404924:	63637553 	.word	0x63637553
  404928:	66737365 	.word	0x66737365
  40492c:	796c6c75 	.word	0x796c6c75
  404930:	6e657320 	.word	0x6e657320
  404934:	65532074 	.word	0x65532074
  404938:	65462074 	.word	0x65462074
  40493c:	72757461 	.word	0x72757461
  404940:	6f432065 	.word	0x6f432065
  404944:	6e616d6d 	.word	0x6e616d6d
  404948:	6f742064 	.word	0x6f742064
  40494c:	4f4e4220 	.word	0x4f4e4220
  404950:	0d353830 	.word	0x0d353830
  404954:	00000000 	.word	0x00000000
  404958:	6e616843 	.word	0x6e616843
  40495c:	676e6967 	.word	0x676e6967
  404960:	6e695020 	.word	0x6e695020
  404964:	00000000 	.word	0x00000000
  404968:	682f2e2e 	.word	0x682f2e2e
  40496c:	732f6c61 	.word	0x732f6c61
  404970:	682f6372 	.word	0x682f6372
  404974:	615f6c61 	.word	0x615f6c61
  404978:	735f6364 	.word	0x735f6364
  40497c:	2e636e79 	.word	0x2e636e79
  404980:	00000063 	.word	0x00000063
  404984:	682f2e2e 	.word	0x682f2e2e
  404988:	732f6c61 	.word	0x732f6c61
  40498c:	682f6372 	.word	0x682f6372
  404990:	695f6c61 	.word	0x695f6c61
  404994:	6d5f6332 	.word	0x6d5f6332
  404998:	6e79735f 	.word	0x6e79735f
  40499c:	00632e63 	.word	0x00632e63
  4049a0:	682f2e2e 	.word	0x682f2e2e
  4049a4:	732f6c61 	.word	0x732f6c61
  4049a8:	682f6372 	.word	0x682f6372
  4049ac:	695f6c61 	.word	0x695f6c61
  4049b0:	00632e6f 	.word	0x00632e6f
  4049b4:	682f2e2e 	.word	0x682f2e2e
  4049b8:	732f6c61 	.word	0x732f6c61
  4049bc:	682f6372 	.word	0x682f6372
  4049c0:	705f6c61 	.word	0x705f6c61
  4049c4:	632e6d77 	.word	0x632e6d77
  4049c8:	00000000 	.word	0x00000000
  4049cc:	682f2e2e 	.word	0x682f2e2e
  4049d0:	732f6c61 	.word	0x732f6c61
  4049d4:	682f6372 	.word	0x682f6372
  4049d8:	735f6c61 	.word	0x735f6c61
  4049dc:	6d5f6970 	.word	0x6d5f6970
  4049e0:	6e79735f 	.word	0x6e79735f
  4049e4:	00632e63 	.word	0x00632e63
  4049e8:	682f2e2e 	.word	0x682f2e2e
  4049ec:	732f6c61 	.word	0x732f6c61
  4049f0:	682f6372 	.word	0x682f6372
  4049f4:	755f6c61 	.word	0x755f6c61
  4049f8:	74726173 	.word	0x74726173
  4049fc:	6e79735f 	.word	0x6e79735f
  404a00:	00632e63 	.word	0x00632e63

00404a04 <_afecs>:
  404a04:	00000000 2f843100 03000000 ffffffff     .....1./........
  404a14:	0000ffff 00000000 00000000 00000000     ................
  404a24:	0000010c 00000000 00000000 00000000     ................
  404a34:	00000000 00000200 00000200 00000200     ................
  404a44:	00000200 00000200 00000200 00000200     ................
  404a54:	00000200 00000200 00000200 00000200     ................
  404a64:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  404a74:	5f6c7068 63656661 0000632e              hpl_afec.c..

00404a80 <_ext_irq>:
  404a80:	00000000 00000020 00000020 00000020     .... ... ... ...
	...
  404a98:	00000020 00000001 00000002 00000002      ...............
  404aa8:	00000002 00000000 00000000 00000002     ................

00404ab8 <_pio_irq_n>:
  404ab8:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  404ac8:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  404ad8:	00000000                                ....

00404adc <_pwms>:
  404adc:	40020000 0000001f 00010001 00000001     ...@............
  404aec:	00000001 000000ff 00000000 00000004     ................
	...
  404b08:	00000004 00404b18 00000000 204000b4     .....K@.......@ 

00404b18 <_ch_cfg0>:
  404b18:	00000000 00000208 00000400 00000200     ................
  404b28:	00000001 00000208 00000400 00000200     ................
  404b38:	00000002 00000208 00000400 00000200     ................
  404b48:	00000003 00000208 00000400 00000200     ................
  404b58:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  404b68:	632e6d77 00000000                       wm.c....

00404b70 <spi_regs>:
  404b70:	00000000 80000000 00000001 0496fa02     ................
  404b80:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  404b90:	735f6c70 632e6970 00000000              pl_spi.c....

00404b9c <_i2cm_sync_cfgs>:
  404b9c:	40018000 00000020 00000000 00000000     ...@ ...........
  404bac:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  404bbc:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  404bcc:	00000000                                ....

00404bd0 <_usarts>:
  404bd0:	00000001 001008c0 000100f4 682f2e2e     ............../h
  404be0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  404bf0:	632e7472 00000000                       rt.c....

00404bf8 <_global_impure_ptr>:
  404bf8:	20400004                                ..@ 

00404bfc <__sf_fake_stderr>:
	...

00404c1c <__sf_fake_stdin>:
	...

00404c3c <__sf_fake_stdout>:
	...
  404c5c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  404c6c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  404c7c:	31300046 35343332 39383736 64636261     F.0123456789abcd
  404c8c:	00006665                                ef..

00404c90 <_init>:
  404c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c92:	bf00      	nop
  404c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404c96:	bc08      	pop	{r3}
  404c98:	469e      	mov	lr, r3
  404c9a:	4770      	bx	lr

00404c9c <__init_array_start>:
  404c9c:	0040018d 	.word	0x0040018d

00404ca0 <_fini>:
  404ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ca2:	bf00      	nop
  404ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404ca6:	bc08      	pop	{r3}
  404ca8:	469e      	mov	lr, r3
  404caa:	4770      	bx	lr

00404cac <__fini_array_start>:
  404cac:	00400169 	.word	0x00400169
