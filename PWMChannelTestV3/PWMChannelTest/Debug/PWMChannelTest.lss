
PWMChannelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eac  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  00010eac  2**0
                  CONTENTS
  2 .bss          000000a8  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000200  204000a8  204000a8  00020000  2**0
                  ALLOC
  4 .stack        00000400  204002a8  204002a8  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010eac  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010eda  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c30b  00000000  00000000  00010f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cda  00000000  00000000  0001d23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003e46  00000000  00000000  0001ef18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000568  00000000  00000000  00022d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000490  00000000  00000000  000232c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003ce03  00000000  00000000  00023756  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ccbf  00000000  00000000  00060559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0014abef  00000000  00000000  0006d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c68  00000000  00000000  001b7e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 06 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 5d 08 40 00 e1 01 40 00     ..@...@.].@...@.
  4000bc:	99 0a 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400000 	.word	0x20400000
  400184:	00000000 	.word	0x00000000
  400188:	00400eac 	.word	0x00400eac

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00400eac 	.word	0x00400eac
  4001c8:	20400004 	.word	0x20400004
  4001cc:	00400eac 	.word	0x00400eac
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	0040036d 	.word	0x0040036d

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	00400eac 	.word	0x00400eac
  400230:	20400000 	.word	0x20400000
  400234:	20400000 	.word	0x20400000
  400238:	204000a8 	.word	0x204000a8
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00400cdd 	.word	0x00400cdd
  400248:	00400c79 	.word	0x00400c79

0040024c <IO1_LIGHT_SENS_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void IO1_LIGHT_SENS_init(void)
{
  40024c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40024e:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400250:	4b11      	ldr	r3, [pc, #68]	; (400298 <IO1_LIGHT_SENS_init+0x4c>)
  400252:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400254:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400258:	d103      	bne.n	400262 <IO1_LIGHT_SENS_init+0x16>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40025a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40025e:	4b0e      	ldr	r3, [pc, #56]	; (400298 <IO1_LIGHT_SENS_init+0x4c>)
  400260:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_AFEC0);
#ifdef IO1_LIGHT_SENS_CH_MAX
	adc_async_init(&IO1_LIGHT_SENS,
  400262:	4e0e      	ldr	r6, [pc, #56]	; (40029c <IO1_LIGHT_SENS_init+0x50>)
  400264:	4d0e      	ldr	r5, [pc, #56]	; (4002a0 <IO1_LIGHT_SENS_init+0x54>)
  400266:	2400      	movs	r4, #0
  400268:	9402      	str	r4, [sp, #8]
  40026a:	4b0e      	ldr	r3, [pc, #56]	; (4002a4 <IO1_LIGHT_SENS_init+0x58>)
  40026c:	9301      	str	r3, [sp, #4]
  40026e:	2301      	movs	r3, #1
  400270:	9300      	str	r3, [sp, #0]
  400272:	4623      	mov	r3, r4
  400274:	4632      	mov	r2, r6
  400276:	490c      	ldr	r1, [pc, #48]	; (4002a8 <IO1_LIGHT_SENS_init+0x5c>)
  400278:	4628      	mov	r0, r5
  40027a:	4f0c      	ldr	r7, [pc, #48]	; (4002ac <IO1_LIGHT_SENS_init+0x60>)
  40027c:	47b8      	blx	r7
	               IO1_LIGHT_SENS_CH_MAX,
	               IO1_LIGHT_SENS_CH_AMOUNT,
	               &IO1_LIGHT_SENS_ch[0],
	               (void *)NULL);
#endif
	adc_async_register_channel_buffer(
  40027e:	2310      	movs	r3, #16
  400280:	1d32      	adds	r2, r6, #4
  400282:	4621      	mov	r1, r4
  400284:	4628      	mov	r0, r5
  400286:	4c0a      	ldr	r4, [pc, #40]	; (4002b0 <IO1_LIGHT_SENS_init+0x64>)
  400288:	47a0      	blx	r4
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  40028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40028e:	4b09      	ldr	r3, [pc, #36]	; (4002b4 <IO1_LIGHT_SENS_init+0x68>)
  400290:	601a      	str	r2, [r3, #0]
	    &IO1_LIGHT_SENS, CONF_IO1_LIGHT_SENS_CHANNEL_0, IO1_LIGHT_SENS_ch0_buf, IO1_LIGHT_SENS_CH0_BUF_SIZE);

	gpio_set_pin_function(PD30, GPIO_PIN_FUNCTION_OFF);
}
  400292:	b005      	add	sp, #20
  400294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400296:	bf00      	nop
  400298:	400e0600 	.word	0x400e0600
  40029c:	2040001c 	.word	0x2040001c
  4002a0:	20400048 	.word	0x20400048
  4002a4:	20400090 	.word	0x20400090
  4002a8:	4003c000 	.word	0x4003c000
  4002ac:	00400409 	.word	0x00400409
  4002b0:	004004b1 	.word	0x004004b1
  4002b4:	400e1400 	.word	0x400e1400

004002b8 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b8:	4b18      	ldr	r3, [pc, #96]	; (40031c <PWM_0_PORT_init+0x64>)
  4002ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002c0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4002c8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002ce:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002d0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4002d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002d6:	f022 0204 	bic.w	r2, r2, #4
  4002da:	671a      	str	r2, [r3, #112]	; 0x70
  4002dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002de:	f022 0204 	bic.w	r2, r2, #4
  4002e2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002e4:	2204      	movs	r2, #4
  4002e6:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4002ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4002f2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002f6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  4002fa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400300:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400308:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40030a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40030c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400310:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400316:	605a      	str	r2, [r3, #4]
  400318:	4770      	bx	lr
  40031a:	bf00      	nop
  40031c:	400e1400 	.word	0x400e1400

00400320 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400320:	4b04      	ldr	r3, [pc, #16]	; (400334 <PWM_0_CLOCK_init+0x14>)
  400322:	699b      	ldr	r3, [r3, #24]
  400324:	2b00      	cmp	r3, #0
  400326:	db03      	blt.n	400330 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400328:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40032c:	4b01      	ldr	r3, [pc, #4]	; (400334 <PWM_0_CLOCK_init+0x14>)
  40032e:	611a      	str	r2, [r3, #16]
  400330:	4770      	bx	lr
  400332:	bf00      	nop
  400334:	400e0600 	.word	0x400e0600

00400338 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400338:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40033a:	4b06      	ldr	r3, [pc, #24]	; (400354 <PWM_0_init+0x1c>)
  40033c:	4798      	blx	r3
	PWM_0_PORT_init();
  40033e:	4b06      	ldr	r3, [pc, #24]	; (400358 <PWM_0_init+0x20>)
  400340:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400342:	4b06      	ldr	r3, [pc, #24]	; (40035c <PWM_0_init+0x24>)
  400344:	4798      	blx	r3
  400346:	4602      	mov	r2, r0
  400348:	4905      	ldr	r1, [pc, #20]	; (400360 <PWM_0_init+0x28>)
  40034a:	4806      	ldr	r0, [pc, #24]	; (400364 <PWM_0_init+0x2c>)
  40034c:	4b06      	ldr	r3, [pc, #24]	; (400368 <PWM_0_init+0x30>)
  40034e:	4798      	blx	r3
  400350:	bd08      	pop	{r3, pc}
  400352:	bf00      	nop
  400354:	00400321 	.word	0x00400321
  400358:	004002b9 	.word	0x004002b9
  40035c:	00400c59 	.word	0x00400c59
  400360:	40020000 	.word	0x40020000
  400364:	20400074 	.word	0x20400074
  400368:	004005b9 	.word	0x004005b9

0040036c <system_init>:
}

void system_init(void)
{
  40036c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40036e:	4b06      	ldr	r3, [pc, #24]	; (400388 <system_init+0x1c>)
  400370:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400372:	4a06      	ldr	r2, [pc, #24]	; (40038c <system_init+0x20>)
  400374:	6853      	ldr	r3, [r2, #4]
  400376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40037a:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	IO1_LIGHT_SENS_init();
  40037c:	4b04      	ldr	r3, [pc, #16]	; (400390 <system_init+0x24>)
  40037e:	4798      	blx	r3

	PWM_0_init();
  400380:	4b04      	ldr	r3, [pc, #16]	; (400394 <system_init+0x28>)
  400382:	4798      	blx	r3
  400384:	bd08      	pop	{r3, pc}
  400386:	bf00      	nop
  400388:	00400941 	.word	0x00400941
  40038c:	400e1850 	.word	0x400e1850
  400390:	0040024d 	.word	0x0040024d
  400394:	00400339 	.word	0x00400339

00400398 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400398:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  40039a:	6983      	ldr	r3, [r0, #24]
  40039c:	b103      	cbz	r3, 4003a0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  40039e:	4798      	blx	r3
  4003a0:	bd08      	pop	{r3, pc}

004003a2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4003a2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4003a4:	69c3      	ldr	r3, [r0, #28]
  4003a6:	b103      	cbz	r3, 4003aa <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}

004003ac <adc_async_channel_conversion_done>:
{
  4003ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4003b0:	4605      	mov	r5, r0
  4003b2:	4688      	mov	r8, r1
  4003b4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4003b6:	6a03      	ldr	r3, [r0, #32]
  4003b8:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4003ba:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4003bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4003c0:	00de      	lsls	r6, r3, #3
  4003c2:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4003c4:	f104 0a04 	add.w	sl, r4, #4
  4003c8:	b2d1      	uxtb	r1, r2
  4003ca:	4650      	mov	r0, sl
  4003cc:	4b0c      	ldr	r3, [pc, #48]	; (400400 <adc_async_channel_conversion_done+0x54>)
  4003ce:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  4003d0:	4628      	mov	r0, r5
  4003d2:	4b0c      	ldr	r3, [pc, #48]	; (400404 <adc_async_channel_conversion_done+0x58>)
  4003d4:	4798      	blx	r3
  4003d6:	2801      	cmp	r0, #1
  4003d8:	d907      	bls.n	4003ea <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  4003da:	ea4f 2119 	mov.w	r1, r9, lsr #8
  4003de:	4650      	mov	r0, sl
  4003e0:	4b07      	ldr	r3, [pc, #28]	; (400400 <adc_async_channel_conversion_done+0x54>)
  4003e2:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  4003e4:	8aa3      	ldrh	r3, [r4, #20]
  4003e6:	3301      	adds	r3, #1
  4003e8:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  4003ea:	8aa3      	ldrh	r3, [r4, #20]
  4003ec:	3301      	adds	r3, #1
  4003ee:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  4003f0:	59bb      	ldr	r3, [r7, r6]
  4003f2:	b113      	cbz	r3, 4003fa <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  4003f4:	4641      	mov	r1, r8
  4003f6:	4628      	mov	r0, r5
  4003f8:	4798      	blx	r3
  4003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003fe:	bf00      	nop
  400400:	00400685 	.word	0x00400685
  400404:	00400925 	.word	0x00400925

00400408 <adc_async_init>:
{
  400408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40040c:	4616      	mov	r6, r2
  40040e:	461c      	mov	r4, r3
  400410:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400414:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400416:	4607      	mov	r7, r0
  400418:	4689      	mov	r9, r1
  40041a:	2800      	cmp	r0, #0
  40041c:	bf18      	it	ne
  40041e:	2900      	cmpne	r1, #0
  400420:	d00b      	beq.n	40043a <adc_async_init+0x32>
  400422:	1c13      	adds	r3, r2, #0
  400424:	bf18      	it	ne
  400426:	2301      	movne	r3, #1
  400428:	f1b8 0f00 	cmp.w	r8, #0
  40042c:	d017      	beq.n	40045e <adc_async_init+0x56>
  40042e:	b1b3      	cbz	r3, 40045e <adc_async_init+0x56>
  400430:	b10d      	cbz	r5, 400436 <adc_async_init+0x2e>
  400432:	2001      	movs	r0, #1
  400434:	e002      	b.n	40043c <adc_async_init+0x34>
  400436:	2000      	movs	r0, #0
  400438:	e000      	b.n	40043c <adc_async_init+0x34>
  40043a:	2000      	movs	r0, #0
  40043c:	f8df b068 	ldr.w	fp, [pc, #104]	; 4004a8 <adc_async_init+0xa0>
  400440:	223f      	movs	r2, #63	; 0x3f
  400442:	4659      	mov	r1, fp
  400444:	f8df a064 	ldr.w	sl, [pc, #100]	; 4004ac <adc_async_init+0xa4>
  400448:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  40044a:	1c60      	adds	r0, r4, #1
  40044c:	2240      	movs	r2, #64	; 0x40
  40044e:	4659      	mov	r1, fp
  400450:	4580      	cmp	r8, r0
  400452:	bfcc      	ite	gt
  400454:	2000      	movgt	r0, #0
  400456:	2001      	movle	r0, #1
  400458:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  40045a:	2300      	movs	r3, #0
  40045c:	e005      	b.n	40046a <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40045e:	2000      	movs	r0, #0
  400460:	e7ec      	b.n	40043c <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400462:	22ff      	movs	r2, #255	; 0xff
  400464:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400466:	3301      	adds	r3, #1
  400468:	b2db      	uxtb	r3, r3
  40046a:	42a3      	cmp	r3, r4
  40046c:	d9f9      	bls.n	400462 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  40046e:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400470:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400474:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400478:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  40047a:	4649      	mov	r1, r9
  40047c:	4638      	mov	r0, r7
  40047e:	4b06      	ldr	r3, [pc, #24]	; (400498 <adc_async_init+0x90>)
  400480:	4798      	blx	r3
	if (init_status) {
  400482:	4603      	mov	r3, r0
  400484:	b928      	cbnz	r0, 400492 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400486:	4a05      	ldr	r2, [pc, #20]	; (40049c <adc_async_init+0x94>)
  400488:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  40048a:	4a05      	ldr	r2, [pc, #20]	; (4004a0 <adc_async_init+0x98>)
  40048c:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  40048e:	4a05      	ldr	r2, [pc, #20]	; (4004a4 <adc_async_init+0x9c>)
  400490:	607a      	str	r2, [r7, #4]
}
  400492:	4618      	mov	r0, r3
  400494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400498:	00400871 	.word	0x00400871
  40049c:	004003ad 	.word	0x004003ad
  4004a0:	00400399 	.word	0x00400399
  4004a4:	004003a3 	.word	0x004003a3
  4004a8:	00400d24 	.word	0x00400d24
  4004ac:	00400639 	.word	0x00400639

004004b0 <adc_async_register_channel_buffer>:
{
  4004b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004b4:	460e      	mov	r6, r1
  4004b6:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4004b8:	4605      	mov	r5, r0
  4004ba:	4690      	mov	r8, r2
  4004bc:	2800      	cmp	r0, #0
  4004be:	bf18      	it	ne
  4004c0:	2a00      	cmpne	r2, #0
  4004c2:	d002      	beq.n	4004ca <adc_async_register_channel_buffer+0x1a>
  4004c4:	b9c3      	cbnz	r3, 4004f8 <adc_async_register_channel_buffer+0x48>
  4004c6:	2000      	movs	r0, #0
  4004c8:	e000      	b.n	4004cc <adc_async_register_channel_buffer+0x1c>
  4004ca:	2000      	movs	r0, #0
  4004cc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400564 <adc_async_register_channel_buffer+0xb4>
  4004d0:	2266      	movs	r2, #102	; 0x66
  4004d2:	4649      	mov	r1, r9
  4004d4:	4c21      	ldr	r4, [pc, #132]	; (40055c <adc_async_register_channel_buffer+0xac>)
  4004d6:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  4004d8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  4004dc:	2267      	movs	r2, #103	; 0x67
  4004de:	4649      	mov	r1, r9
  4004e0:	42b0      	cmp	r0, r6
  4004e2:	bf34      	ite	cc
  4004e4:	2000      	movcc	r0, #0
  4004e6:	2001      	movcs	r0, #1
  4004e8:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  4004ea:	6a29      	ldr	r1, [r5, #32]
  4004ec:	5d8b      	ldrb	r3, [r1, r6]
  4004ee:	2bff      	cmp	r3, #255	; 0xff
  4004f0:	d12b      	bne.n	40054a <adc_async_register_channel_buffer+0x9a>
  4004f2:	2400      	movs	r4, #0
  4004f4:	4623      	mov	r3, r4
  4004f6:	e003      	b.n	400500 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4004f8:	2001      	movs	r0, #1
  4004fa:	e7e7      	b.n	4004cc <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  4004fc:	3301      	adds	r3, #1
  4004fe:	b2db      	uxtb	r3, r3
  400500:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400504:	4293      	cmp	r3, r2
  400506:	d805      	bhi.n	400514 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400508:	5cca      	ldrb	r2, [r1, r3]
  40050a:	2aff      	cmp	r2, #255	; 0xff
  40050c:	d0f6      	beq.n	4004fc <adc_async_register_channel_buffer+0x4c>
			index++;
  40050e:	3401      	adds	r4, #1
  400510:	b2e4      	uxtb	r4, r4
  400512:	e7f3      	b.n	4004fc <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400514:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400518:	429c      	cmp	r4, r3
  40051a:	d819      	bhi.n	400550 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  40051c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40051e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400522:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400526:	4448      	add	r0, r9
  400528:	463a      	mov	r2, r7
  40052a:	4641      	mov	r1, r8
  40052c:	3004      	adds	r0, #4
  40052e:	4b0c      	ldr	r3, [pc, #48]	; (400560 <adc_async_register_channel_buffer+0xb0>)
  400530:	4798      	blx	r3
  400532:	4602      	mov	r2, r0
  400534:	b978      	cbnz	r0, 400556 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400536:	6a2b      	ldr	r3, [r5, #32]
  400538:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40053a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40053c:	4499      	add	r9, r3
  40053e:	2300      	movs	r3, #0
  400540:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400544:	4610      	mov	r0, r2
  400546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  40054a:	f06f 020c 	mvn.w	r2, #12
  40054e:	e7f9      	b.n	400544 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400550:	f06f 021b 	mvn.w	r2, #27
  400554:	e7f6      	b.n	400544 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400556:	f06f 020c 	mvn.w	r2, #12
  40055a:	e7f3      	b.n	400544 <adc_async_register_channel_buffer+0x94>
  40055c:	00400639 	.word	0x00400639
  400560:	00400641 	.word	0x00400641
  400564:	00400d24 	.word	0x00400d24

00400568 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400568:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40056c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40056e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400570:	f3bf 8f5f 	dmb	sy
  400574:	4770      	bx	lr

00400576 <atomic_leave_critical>:
  400576:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40057a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40057c:	f383 8810 	msr	PRIMASK, r3
  400580:	4770      	bx	lr
	...

00400584 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400584:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400586:	4b04      	ldr	r3, [pc, #16]	; (400598 <delay_ms+0x14>)
  400588:	681c      	ldr	r4, [r3, #0]
  40058a:	4b04      	ldr	r3, [pc, #16]	; (40059c <delay_ms+0x18>)
  40058c:	4798      	blx	r3
  40058e:	4601      	mov	r1, r0
  400590:	4620      	mov	r0, r4
  400592:	4b03      	ldr	r3, [pc, #12]	; (4005a0 <delay_ms+0x1c>)
  400594:	4798      	blx	r3
  400596:	bd10      	pop	{r4, pc}
  400598:	20400030 	.word	0x20400030
  40059c:	00400929 	.word	0x00400929
  4005a0:	0040093b 	.word	0x0040093b

004005a4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4005a4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4005a6:	6943      	ldr	r3, [r0, #20]
  4005a8:	b103      	cbz	r3, 4005ac <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4005aa:	4798      	blx	r3
  4005ac:	bd08      	pop	{r3, pc}

004005ae <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4005ae:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4005b0:	6983      	ldr	r3, [r0, #24]
  4005b2:	b103      	cbz	r3, 4005b6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4005b4:	4798      	blx	r3
  4005b6:	bd08      	pop	{r3, pc}

004005b8 <pwm_init>:
{
  4005b8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4005ba:	4604      	mov	r4, r0
  4005bc:	460d      	mov	r5, r1
  4005be:	2800      	cmp	r0, #0
  4005c0:	bf18      	it	ne
  4005c2:	2900      	cmpne	r1, #0
  4005c4:	bf14      	ite	ne
  4005c6:	2001      	movne	r0, #1
  4005c8:	2000      	moveq	r0, #0
  4005ca:	2233      	movs	r2, #51	; 0x33
  4005cc:	4906      	ldr	r1, [pc, #24]	; (4005e8 <pwm_init+0x30>)
  4005ce:	4b07      	ldr	r3, [pc, #28]	; (4005ec <pwm_init+0x34>)
  4005d0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4005d2:	4629      	mov	r1, r5
  4005d4:	4620      	mov	r0, r4
  4005d6:	4b06      	ldr	r3, [pc, #24]	; (4005f0 <pwm_init+0x38>)
  4005d8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4005da:	4b06      	ldr	r3, [pc, #24]	; (4005f4 <pwm_init+0x3c>)
  4005dc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4005de:	4b06      	ldr	r3, [pc, #24]	; (4005f8 <pwm_init+0x40>)
  4005e0:	6063      	str	r3, [r4, #4]
}
  4005e2:	2000      	movs	r0, #0
  4005e4:	bd38      	pop	{r3, r4, r5, pc}
  4005e6:	bf00      	nop
  4005e8:	00400d40 	.word	0x00400d40
  4005ec:	00400639 	.word	0x00400639
  4005f0:	00400aad 	.word	0x00400aad
  4005f4:	004005a5 	.word	0x004005a5
  4005f8:	004005af 	.word	0x004005af

004005fc <pwm_enable>:
{
  4005fc:	b510      	push	{r4, lr}
	ASSERT(descr);
  4005fe:	4604      	mov	r4, r0
  400600:	224a      	movs	r2, #74	; 0x4a
  400602:	4909      	ldr	r1, [pc, #36]	; (400628 <pwm_enable+0x2c>)
  400604:	3000      	adds	r0, #0
  400606:	bf18      	it	ne
  400608:	2001      	movne	r0, #1
  40060a:	4b08      	ldr	r3, [pc, #32]	; (40062c <pwm_enable+0x30>)
  40060c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  40060e:	4620      	mov	r0, r4
  400610:	4b07      	ldr	r3, [pc, #28]	; (400630 <pwm_enable+0x34>)
  400612:	4798      	blx	r3
  400614:	b920      	cbnz	r0, 400620 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400616:	4620      	mov	r0, r4
  400618:	4b06      	ldr	r3, [pc, #24]	; (400634 <pwm_enable+0x38>)
  40061a:	4798      	blx	r3
	return ERR_NONE;
  40061c:	2000      	movs	r0, #0
  40061e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400620:	f06f 0010 	mvn.w	r0, #16
}
  400624:	bd10      	pop	{r4, pc}
  400626:	bf00      	nop
  400628:	00400d40 	.word	0x00400d40
  40062c:	00400639 	.word	0x00400639
  400630:	00400c29 	.word	0x00400c29
  400634:	00400be5 	.word	0x00400be5

00400638 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400638:	b900      	cbnz	r0, 40063c <assert+0x4>
		__asm("BKPT #0");
  40063a:	be00      	bkpt	0x0000
  40063c:	4770      	bx	lr
	...

00400640 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400640:	b570      	push	{r4, r5, r6, lr}
  400642:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  400644:	4604      	mov	r4, r0
  400646:	460e      	mov	r6, r1
  400648:	2800      	cmp	r0, #0
  40064a:	bf18      	it	ne
  40064c:	2900      	cmpne	r1, #0
  40064e:	d002      	beq.n	400656 <ringbuffer_init+0x16>
  400650:	b97a      	cbnz	r2, 400672 <ringbuffer_init+0x32>
  400652:	2000      	movs	r0, #0
  400654:	e000      	b.n	400658 <ringbuffer_init+0x18>
  400656:	2000      	movs	r0, #0
  400658:	2228      	movs	r2, #40	; 0x28
  40065a:	4908      	ldr	r1, [pc, #32]	; (40067c <ringbuffer_init+0x3c>)
  40065c:	4b08      	ldr	r3, [pc, #32]	; (400680 <ringbuffer_init+0x40>)
  40065e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400660:	1e6b      	subs	r3, r5, #1
  400662:	421d      	tst	r5, r3
  400664:	d107      	bne.n	400676 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400666:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400668:	2000      	movs	r0, #0
  40066a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  40066c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  40066e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400670:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  400672:	2001      	movs	r0, #1
  400674:	e7f0      	b.n	400658 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  400676:	f06f 000c 	mvn.w	r0, #12
}
  40067a:	bd70      	pop	{r4, r5, r6, pc}
  40067c:	00400d58 	.word	0x00400d58
  400680:	00400639 	.word	0x00400639

00400684 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  400684:	b538      	push	{r3, r4, r5, lr}
  400686:	460d      	mov	r5, r1
	ASSERT(rb);
  400688:	4604      	mov	r4, r0
  40068a:	2251      	movs	r2, #81	; 0x51
  40068c:	490b      	ldr	r1, [pc, #44]	; (4006bc <ringbuffer_put+0x38>)
  40068e:	3000      	adds	r0, #0
  400690:	bf18      	it	ne
  400692:	2001      	movne	r0, #1
  400694:	4b0a      	ldr	r3, [pc, #40]	; (4006c0 <ringbuffer_put+0x3c>)
  400696:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  400698:	6822      	ldr	r2, [r4, #0]
  40069a:	68e3      	ldr	r3, [r4, #12]
  40069c:	6861      	ldr	r1, [r4, #4]
  40069e:	400b      	ands	r3, r1
  4006a0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4006a2:	68e3      	ldr	r3, [r4, #12]
  4006a4:	68a2      	ldr	r2, [r4, #8]
  4006a6:	1a9a      	subs	r2, r3, r2
  4006a8:	6861      	ldr	r1, [r4, #4]
  4006aa:	428a      	cmp	r2, r1
  4006ac:	d901      	bls.n	4006b2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  4006ae:	1a59      	subs	r1, r3, r1
  4006b0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  4006b2:	3301      	adds	r3, #1
  4006b4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  4006b6:	2000      	movs	r0, #0
  4006b8:	bd38      	pop	{r3, r4, r5, pc}
  4006ba:	bf00      	nop
  4006bc:	00400d58 	.word	0x00400d58
  4006c0:	00400639 	.word	0x00400639

004006c4 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  4006c4:	6943      	ldr	r3, [r0, #20]
  4006c6:	4a07      	ldr	r2, [pc, #28]	; (4006e4 <_afec_get_irq_num+0x20>)
  4006c8:	4293      	cmp	r3, r2
  4006ca:	d005      	beq.n	4006d8 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  4006cc:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  4006d0:	4293      	cmp	r3, r2
  4006d2:	d103      	bne.n	4006dc <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  4006d4:	2028      	movs	r0, #40	; 0x28
  4006d6:	4770      	bx	lr
		return AFEC0_IRQn;
  4006d8:	201d      	movs	r0, #29
  4006da:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  4006dc:	f04f 30ff 	mov.w	r0, #4294967295
}
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop
  4006e4:	4003c000 	.word	0x4003c000

004006e8 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  4006e8:	4b03      	ldr	r3, [pc, #12]	; (4006f8 <_afec_init_irq_param+0x10>)
  4006ea:	4298      	cmp	r0, r3
  4006ec:	d000      	beq.n	4006f0 <_afec_init_irq_param+0x8>
  4006ee:	4770      	bx	lr
		_afec0_dev = dev;
  4006f0:	4b02      	ldr	r3, [pc, #8]	; (4006fc <_afec_init_irq_param+0x14>)
  4006f2:	6019      	str	r1, [r3, #0]
	}
}
  4006f4:	e7fb      	b.n	4006ee <_afec_init_irq_param+0x6>
  4006f6:	bf00      	nop
  4006f8:	4003c000 	.word	0x4003c000
  4006fc:	20400034 	.word	0x20400034

00400700 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400700:	2364      	movs	r3, #100	; 0x64
  400702:	4a1d      	ldr	r2, [pc, #116]	; (400778 <_afec_init+0x78>)
  400704:	fb03 2301 	mla	r3, r3, r1, r2
  400708:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  40070a:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  40070c:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  40070e:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400710:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400712:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400714:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400716:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400718:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  40071a:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  40071c:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  40071e:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400720:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400722:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400724:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400726:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  40072a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  40072c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400732:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400738:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  40073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  40073e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400742:	2200      	movs	r2, #0
  400744:	2a0b      	cmp	r2, #11
  400746:	d814      	bhi.n	400772 <_afec_init+0x72>
{
  400748:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  40074a:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  40074c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400750:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400754:	4413      	add	r3, r2
  400756:	330c      	adds	r3, #12
  400758:	4c07      	ldr	r4, [pc, #28]	; (400778 <_afec_init+0x78>)
  40075a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40075e:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400760:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400762:	3201      	adds	r2, #1
  400764:	b2d2      	uxtb	r2, r2
  400766:	2a0b      	cmp	r2, #11
  400768:	d9ef      	bls.n	40074a <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40076a:	2000      	movs	r0, #0
  40076c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400770:	4770      	bx	lr
  400772:	2000      	movs	r0, #0
  400774:	4770      	bx	lr
  400776:	bf00      	nop
  400778:	00400d7c 	.word	0x00400d7c

0040077c <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  40077c:	b530      	push	{r4, r5, lr}
  40077e:	b083      	sub	sp, #12
  400780:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  400782:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  400784:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  400786:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  400788:	400b      	ands	r3, r1
  40078a:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  40078c:	9b01      	ldr	r3, [sp, #4]
  40078e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400792:	d10e      	bne.n	4007b2 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  400794:	9b01      	ldr	r3, [sp, #4]
  400796:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40079a:	d10e      	bne.n	4007ba <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  40079c:	9b01      	ldr	r3, [sp, #4]
  40079e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4007a2:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  4007a4:	9c01      	ldr	r4, [sp, #4]
  4007a6:	fab4 f484 	clz	r4, r4
  4007aa:	f1c4 0420 	rsb	r4, r4, #32
  4007ae:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4007b0:	e01f      	b.n	4007f2 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  4007b2:	6803      	ldr	r3, [r0, #0]
  4007b4:	2100      	movs	r1, #0
  4007b6:	4798      	blx	r3
  4007b8:	e7ec      	b.n	400794 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  4007ba:	686b      	ldr	r3, [r5, #4]
  4007bc:	2100      	movs	r1, #0
  4007be:	4628      	mov	r0, r5
  4007c0:	4798      	blx	r3
  4007c2:	e7eb      	b.n	40079c <_afec_interrupt_handler+0x20>
		cnt--;
  4007c4:	3c01      	subs	r4, #1
  4007c6:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  4007c8:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  4007ca:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  4007cc:	68ab      	ldr	r3, [r5, #8]
  4007ce:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  4007d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4007d2:	b292      	uxth	r2, r2
  4007d4:	4621      	mov	r1, r4
  4007d6:	4628      	mov	r0, r5
  4007d8:	4798      	blx	r3
		status &= ~(1 << cnt);
  4007da:	2301      	movs	r3, #1
  4007dc:	40a3      	lsls	r3, r4
  4007de:	9c01      	ldr	r4, [sp, #4]
  4007e0:	ea24 0403 	bic.w	r4, r4, r3
  4007e4:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4007e6:	9c01      	ldr	r4, [sp, #4]
  4007e8:	fab4 f484 	clz	r4, r4
  4007ec:	f1c4 0420 	rsb	r4, r4, #32
  4007f0:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4007f2:	2c00      	cmp	r4, #0
  4007f4:	d1e6      	bne.n	4007c4 <_afec_interrupt_handler+0x48>
	}
}
  4007f6:	b003      	add	sp, #12
  4007f8:	bd30      	pop	{r4, r5, pc}
	...

004007fc <_afec_get_hardware_index>:
{
  4007fc:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4007fe:	4b09      	ldr	r3, [pc, #36]	; (400824 <_afec_get_hardware_index+0x28>)
  400800:	4298      	cmp	r0, r3
  400802:	d00a      	beq.n	40081a <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400804:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400808:	4298      	cmp	r0, r3
  40080a:	d008      	beq.n	40081e <_afec_get_hardware_index+0x22>
	ASSERT(false);
  40080c:	22a5      	movs	r2, #165	; 0xa5
  40080e:	4906      	ldr	r1, [pc, #24]	; (400828 <_afec_get_hardware_index+0x2c>)
  400810:	2000      	movs	r0, #0
  400812:	4b06      	ldr	r3, [pc, #24]	; (40082c <_afec_get_hardware_index+0x30>)
  400814:	4798      	blx	r3
	return 0;
  400816:	2000      	movs	r0, #0
  400818:	bd08      	pop	{r3, pc}
		return 0;
  40081a:	2000      	movs	r0, #0
  40081c:	bd08      	pop	{r3, pc}
		return 1;
  40081e:	2001      	movs	r0, #1
}
  400820:	bd08      	pop	{r3, pc}
  400822:	bf00      	nop
  400824:	4003c000 	.word	0x4003c000
  400828:	00400de0 	.word	0x00400de0
  40082c:	00400639 	.word	0x00400639

00400830 <_afec_get_regs>:
{
  400830:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400832:	4b08      	ldr	r3, [pc, #32]	; (400854 <_afec_get_regs+0x24>)
  400834:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400836:	2300      	movs	r3, #0
  400838:	b113      	cbz	r3, 400840 <_afec_get_regs+0x10>
	return 0;
  40083a:	2300      	movs	r3, #0
}
  40083c:	4618      	mov	r0, r3
  40083e:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  400840:	2264      	movs	r2, #100	; 0x64
  400842:	fb02 f203 	mul.w	r2, r2, r3
  400846:	4904      	ldr	r1, [pc, #16]	; (400858 <_afec_get_regs+0x28>)
  400848:	5c8a      	ldrb	r2, [r1, r2]
  40084a:	4290      	cmp	r0, r2
  40084c:	d0f6      	beq.n	40083c <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40084e:	3301      	adds	r3, #1
  400850:	b2db      	uxtb	r3, r3
  400852:	e7f1      	b.n	400838 <_afec_get_regs+0x8>
  400854:	004007fd 	.word	0x004007fd
  400858:	00400d7c 	.word	0x00400d7c

0040085c <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  40085c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  40085e:	4b02      	ldr	r3, [pc, #8]	; (400868 <AFEC0_Handler+0xc>)
  400860:	6818      	ldr	r0, [r3, #0]
  400862:	4b02      	ldr	r3, [pc, #8]	; (40086c <AFEC0_Handler+0x10>)
  400864:	4798      	blx	r3
  400866:	bd08      	pop	{r3, pc}
  400868:	20400034 	.word	0x20400034
  40086c:	0040077d 	.word	0x0040077d

00400870 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  400870:	b570      	push	{r4, r5, r6, lr}
  400872:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  400874:	4605      	mov	r5, r0
  400876:	f240 1235 	movw	r2, #309	; 0x135
  40087a:	4923      	ldr	r1, [pc, #140]	; (400908 <_adc_async_init+0x98>)
  40087c:	3000      	adds	r0, #0
  40087e:	bf18      	it	ne
  400880:	2001      	movne	r0, #1
  400882:	4b22      	ldr	r3, [pc, #136]	; (40090c <_adc_async_init+0x9c>)
  400884:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400886:	4620      	mov	r0, r4
  400888:	4b21      	ldr	r3, [pc, #132]	; (400910 <_adc_async_init+0xa0>)
  40088a:	4798      	blx	r3
  40088c:	4601      	mov	r1, r0
  40088e:	4620      	mov	r0, r4
  400890:	4b20      	ldr	r3, [pc, #128]	; (400914 <_adc_async_init+0xa4>)
  400892:	4798      	blx	r3
	if (init_status) {
  400894:	4606      	mov	r6, r0
  400896:	b108      	cbz	r0, 40089c <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  400898:	4630      	mov	r0, r6
  40089a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  40089c:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  40089e:	4629      	mov	r1, r5
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b1d      	ldr	r3, [pc, #116]	; (400918 <_adc_async_init+0xa8>)
  4008a4:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  4008a6:	4628      	mov	r0, r5
  4008a8:	4b1c      	ldr	r3, [pc, #112]	; (40091c <_adc_async_init+0xac>)
  4008aa:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4008ac:	2800      	cmp	r0, #0
  4008ae:	db0d      	blt.n	4008cc <_adc_async_init+0x5c>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008b0:	0943      	lsrs	r3, r0, #5
  4008b2:	f000 001f 	and.w	r0, r0, #31
  4008b6:	2201      	movs	r2, #1
  4008b8:	fa02 f000 	lsl.w	r0, r2, r0
  4008bc:	3320      	adds	r3, #32
  4008be:	4a18      	ldr	r2, [pc, #96]	; (400920 <_adc_async_init+0xb0>)
  4008c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4008c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008c8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4008cc:	4628      	mov	r0, r5
  4008ce:	4b13      	ldr	r3, [pc, #76]	; (40091c <_adc_async_init+0xac>)
  4008d0:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4008d2:	2800      	cmp	r0, #0
  4008d4:	db09      	blt.n	4008ea <_adc_async_init+0x7a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008d6:	0943      	lsrs	r3, r0, #5
  4008d8:	f000 001f 	and.w	r0, r0, #31
  4008dc:	2201      	movs	r2, #1
  4008de:	fa02 f000 	lsl.w	r0, r2, r0
  4008e2:	3360      	adds	r3, #96	; 0x60
  4008e4:	4a0e      	ldr	r2, [pc, #56]	; (400920 <_adc_async_init+0xb0>)
  4008e6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  4008ea:	4628      	mov	r0, r5
  4008ec:	4b0b      	ldr	r3, [pc, #44]	; (40091c <_adc_async_init+0xac>)
  4008ee:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4008f0:	2800      	cmp	r0, #0
  4008f2:	dbd1      	blt.n	400898 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008f4:	0942      	lsrs	r2, r0, #5
  4008f6:	f000 001f 	and.w	r0, r0, #31
  4008fa:	2301      	movs	r3, #1
  4008fc:	fa03 f000 	lsl.w	r0, r3, r0
  400900:	4b07      	ldr	r3, [pc, #28]	; (400920 <_adc_async_init+0xb0>)
  400902:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  400906:	e7c7      	b.n	400898 <_adc_async_init+0x28>
  400908:	00400de0 	.word	0x00400de0
  40090c:	00400639 	.word	0x00400639
  400910:	00400831 	.word	0x00400831
  400914:	00400701 	.word	0x00400701
  400918:	004006e9 	.word	0x004006e9
  40091c:	004006c5 	.word	0x004006c5
  400920:	e000e100 	.word	0xe000e100

00400924 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  400924:	2002      	movs	r0, #2
  400926:	4770      	bx	lr

00400928 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) * 1000);
  400928:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40092c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400934:	fb03 f000 	mul.w	r0, r3, r0
  400938:	4770      	bx	lr

0040093a <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  40093a:	3901      	subs	r1, #1
  40093c:	d8fd      	bhi.n	40093a <_delay_cycles>
  40093e:	4770      	bx	lr

00400940 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400940:	b500      	push	{lr}
  400942:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400944:	a801      	add	r0, sp, #4
  400946:	4b0e      	ldr	r3, [pc, #56]	; (400980 <_init_chip+0x40>)
  400948:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40094a:	4a0e      	ldr	r2, [pc, #56]	; (400984 <_init_chip+0x44>)
  40094c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40095c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400960:	a801      	add	r0, sp, #4
  400962:	4b09      	ldr	r3, [pc, #36]	; (400988 <_init_chip+0x48>)
  400964:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400966:	4a09      	ldr	r2, [pc, #36]	; (40098c <_init_chip+0x4c>)
  400968:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40096a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40096e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  400972:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400974:	4b06      	ldr	r3, [pc, #24]	; (400990 <_init_chip+0x50>)
  400976:	4798      	blx	r3
}
  400978:	b003      	add	sp, #12
  40097a:	f85d fb04 	ldr.w	pc, [sp], #4
  40097e:	bf00      	nop
  400980:	00400569 	.word	0x00400569
  400984:	e000ed00 	.word	0xe000ed00
  400988:	00400577 	.word	0x00400577
  40098c:	400e0c00 	.word	0x400e0c00
  400990:	00400a31 	.word	0x00400a31

00400994 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400994:	490e      	ldr	r1, [pc, #56]	; (4009d0 <_pmc_init_sources+0x3c>)
  400996:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400998:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40099c:	4b0d      	ldr	r3, [pc, #52]	; (4009d4 <_pmc_init_sources+0x40>)
  40099e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4009a0:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4009a2:	4b0b      	ldr	r3, [pc, #44]	; (4009d0 <_pmc_init_sources+0x3c>)
  4009a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4009a6:	f013 0f01 	tst.w	r3, #1
  4009aa:	d0fa      	beq.n	4009a2 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4009ac:	4b08      	ldr	r3, [pc, #32]	; (4009d0 <_pmc_init_sources+0x3c>)
  4009ae:	6a19      	ldr	r1, [r3, #32]
  4009b0:	4a09      	ldr	r2, [pc, #36]	; (4009d8 <_pmc_init_sources+0x44>)
  4009b2:	430a      	orrs	r2, r1
  4009b4:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4009b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4009b8:	4a08      	ldr	r2, [pc, #32]	; (4009dc <_pmc_init_sources+0x48>)
  4009ba:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4009bc:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4009be:	4a08      	ldr	r2, [pc, #32]	; (4009e0 <_pmc_init_sources+0x4c>)
  4009c0:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4009c2:	4b03      	ldr	r3, [pc, #12]	; (4009d0 <_pmc_init_sources+0x3c>)
  4009c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4009c6:	f013 0f02 	tst.w	r3, #2
  4009ca:	d0fa      	beq.n	4009c2 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4009cc:	4770      	bx	lr
  4009ce:	bf00      	nop
  4009d0:	400e0600 	.word	0x400e0600
  4009d4:	00373e01 	.word	0x00373e01
  4009d8:	01370000 	.word	0x01370000
  4009dc:	f800ffff 	.word	0xf800ffff
  4009e0:	20183f01 	.word	0x20183f01

004009e4 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009e4:	4a11      	ldr	r2, [pc, #68]	; (400a2c <_pmc_init_master_clock+0x48>)
  4009e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4009e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009ec:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009ee:	4b0f      	ldr	r3, [pc, #60]	; (400a2c <_pmc_init_master_clock+0x48>)
  4009f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009f2:	f013 0f08 	tst.w	r3, #8
  4009f6:	d0fa      	beq.n	4009ee <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009f8:	4a0c      	ldr	r2, [pc, #48]	; (400a2c <_pmc_init_master_clock+0x48>)
  4009fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4009fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400a04:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400a06:	4b09      	ldr	r3, [pc, #36]	; (400a2c <_pmc_init_master_clock+0x48>)
  400a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400a0a:	f013 0f08 	tst.w	r3, #8
  400a0e:	d0fa      	beq.n	400a06 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400a10:	4a06      	ldr	r2, [pc, #24]	; (400a2c <_pmc_init_master_clock+0x48>)
  400a12:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400a14:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400a18:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400a1c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400a1e:	4b03      	ldr	r3, [pc, #12]	; (400a2c <_pmc_init_master_clock+0x48>)
  400a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400a22:	f013 0f08 	tst.w	r3, #8
  400a26:	d0fa      	beq.n	400a1e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop
  400a2c:	400e0600 	.word	0x400e0600

00400a30 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400a30:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400a32:	4b02      	ldr	r3, [pc, #8]	; (400a3c <_pmc_init+0xc>)
  400a34:	4798      	blx	r3
	_pmc_init_master_clock();
  400a36:	4b02      	ldr	r3, [pc, #8]	; (400a40 <_pmc_init+0x10>)
  400a38:	4798      	blx	r3
  400a3a:	bd08      	pop	{r3, pc}
  400a3c:	00400995 	.word	0x00400995
  400a40:	004009e5 	.word	0x004009e5

00400a44 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400a44:	2300      	movs	r3, #0
  400a46:	b10b      	cbz	r3, 400a4c <_pwm_get_cfg+0x8>
		if (_pwms[i].hw == hw) {
			return (_pwms + i);
		}
	}

	return NULL;
  400a48:	2000      	movs	r0, #0
}
  400a4a:	4770      	bx	lr
		if (_pwms[i].hw == hw) {
  400a4c:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  400a50:	008a      	lsls	r2, r1, #2
  400a52:	4906      	ldr	r1, [pc, #24]	; (400a6c <_pwm_get_cfg+0x28>)
  400a54:	588a      	ldr	r2, [r1, r2]
  400a56:	4282      	cmp	r2, r0
  400a58:	d002      	beq.n	400a60 <_pwm_get_cfg+0x1c>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400a5a:	3301      	adds	r3, #1
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	e7f2      	b.n	400a46 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  400a60:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  400a64:	009a      	lsls	r2, r3, #2
  400a66:	4608      	mov	r0, r1
  400a68:	4410      	add	r0, r2
  400a6a:	4770      	bx	lr
  400a6c:	00400df8 	.word	0x00400df8

00400a70 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  400a70:	4b03      	ldr	r3, [pc, #12]	; (400a80 <_pwm_init_irq_param+0x10>)
  400a72:	4298      	cmp	r0, r3
  400a74:	d000      	beq.n	400a78 <_pwm_init_irq_param+0x8>
  400a76:	4770      	bx	lr
		_pwm0_dev = dev;
  400a78:	4b02      	ldr	r3, [pc, #8]	; (400a84 <_pwm_init_irq_param+0x14>)
  400a7a:	6019      	str	r1, [r3, #0]
	}
}
  400a7c:	e7fb      	b.n	400a76 <_pwm_init_irq_param+0x6>
  400a7e:	bf00      	nop
  400a80:	40020000 	.word	0x40020000
  400a84:	20400038 	.word	0x20400038

00400a88 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  400a88:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  400a8a:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  400a8c:	69db      	ldr	r3, [r3, #28]
  400a8e:	b113      	cbz	r3, 400a96 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  400a90:	6803      	ldr	r3, [r0, #0]
  400a92:	b103      	cbz	r3, 400a96 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  400a94:	4798      	blx	r3
  400a96:	bd08      	pop	{r3, pc}

00400a98 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  400a98:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  400a9a:	4b02      	ldr	r3, [pc, #8]	; (400aa4 <PWM0_Handler+0xc>)
  400a9c:	6818      	ldr	r0, [r3, #0]
  400a9e:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <PWM0_Handler+0x10>)
  400aa0:	4798      	blx	r3
  400aa2:	bd08      	pop	{r3, pc}
  400aa4:	20400038 	.word	0x20400038
  400aa8:	00400a89 	.word	0x00400a89

00400aac <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  400aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aae:	4606      	mov	r6, r0
	ASSERT(hw);
  400ab0:	460c      	mov	r4, r1
  400ab2:	1c08      	adds	r0, r1, #0
  400ab4:	bf18      	it	ne
  400ab6:	2001      	movne	r0, #1
  400ab8:	f240 1271 	movw	r2, #369	; 0x171
  400abc:	4944      	ldr	r1, [pc, #272]	; (400bd0 <_pwm_init+0x124>)
  400abe:	4b45      	ldr	r3, [pc, #276]	; (400bd4 <_pwm_init+0x128>)
  400ac0:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  400ac2:	4620      	mov	r0, r4
  400ac4:	4b44      	ldr	r3, [pc, #272]	; (400bd8 <_pwm_init+0x12c>)
  400ac6:	4798      	blx	r3
  400ac8:	4605      	mov	r5, r0

	device->hw = hw;
  400aca:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  400acc:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  400ace:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  400ad0:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  400ad2:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  400ad4:	6903      	ldr	r3, [r0, #16]
  400ad6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  400ada:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  400adc:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  400ade:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  400ae0:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  400ae2:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  400ae4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  400ae8:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  400aea:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  400aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  400aee:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  400af2:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  400af4:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  400af8:	2300      	movs	r3, #0
  400afa:	e019      	b.n	400b30 <_pwm_init+0x84>
		ch = cfg->ch + i;
  400afc:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  400afe:	0118      	lsls	r0, r3, #4
  400b00:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  400b04:	5c3a      	ldrb	r2, [r7, r0]
  400b06:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  400b0a:	3210      	adds	r2, #16
  400b0c:	0152      	lsls	r2, r2, #5
  400b0e:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  400b10:	5c3a      	ldrb	r2, [r7, r0]
  400b12:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  400b16:	3210      	adds	r2, #16
  400b18:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  400b1c:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  400b1e:	5c3a      	ldrb	r2, [r7, r0]
  400b20:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  400b24:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  400b28:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  400b2c:	3301      	adds	r3, #1
  400b2e:	b25b      	sxtb	r3, r3
  400b30:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  400b32:	4293      	cmp	r3, r2
  400b34:	d3e2      	bcc.n	400afc <_pwm_init+0x50>
  400b36:	2300      	movs	r3, #0
  400b38:	e014      	b.n	400b64 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  400b3a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  400b3c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  400b40:	0082      	lsls	r2, r0, #2
  400b42:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  400b46:	5c88      	ldrb	r0, [r1, r2]
  400b48:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  400b4c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  400b50:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  400b54:	5c8a      	ldrb	r2, [r1, r2]
  400b56:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  400b5a:	3213      	adds	r2, #19
  400b5c:	0112      	lsls	r2, r2, #4
  400b5e:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  400b60:	3301      	adds	r3, #1
  400b62:	b25b      	sxtb	r3, r3
  400b64:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  400b66:	4293      	cmp	r3, r2
  400b68:	d3e7      	bcc.n	400b3a <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  400b6a:	4631      	mov	r1, r6
  400b6c:	4620      	mov	r0, r4
  400b6e:	4b1b      	ldr	r3, [pc, #108]	; (400bdc <_pwm_init+0x130>)
  400b70:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400b72:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400b76:	2b00      	cmp	r3, #0
  400b78:	db0d      	blt.n	400b96 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b7a:	095a      	lsrs	r2, r3, #5
  400b7c:	f003 031f 	and.w	r3, r3, #31
  400b80:	2101      	movs	r1, #1
  400b82:	fa01 f303 	lsl.w	r3, r1, r3
  400b86:	3220      	adds	r2, #32
  400b88:	4915      	ldr	r1, [pc, #84]	; (400be0 <_pwm_init+0x134>)
  400b8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b92:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400b96:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400b9a:	2b00      	cmp	r3, #0
  400b9c:	db09      	blt.n	400bb2 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b9e:	095a      	lsrs	r2, r3, #5
  400ba0:	f003 031f 	and.w	r3, r3, #31
  400ba4:	2101      	movs	r1, #1
  400ba6:	fa01 f303 	lsl.w	r3, r1, r3
  400baa:	3260      	adds	r2, #96	; 0x60
  400bac:	490c      	ldr	r1, [pc, #48]	; (400be0 <_pwm_init+0x134>)
  400bae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400bb2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	db08      	blt.n	400bcc <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400bba:	0959      	lsrs	r1, r3, #5
  400bbc:	f003 031f 	and.w	r3, r3, #31
  400bc0:	2201      	movs	r2, #1
  400bc2:	fa02 f303 	lsl.w	r3, r2, r3
  400bc6:	4a06      	ldr	r2, [pc, #24]	; (400be0 <_pwm_init+0x134>)
  400bc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  400bcc:	2000      	movs	r0, #0
  400bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bd0:	00400e74 	.word	0x00400e74
  400bd4:	00400639 	.word	0x00400639
  400bd8:	00400a45 	.word	0x00400a45
  400bdc:	00400a71 	.word	0x00400a71
  400be0:	e000e100 	.word	0xe000e100

00400be4 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  400be4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  400be6:	4604      	mov	r4, r0
  400be8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  400bec:	490b      	ldr	r1, [pc, #44]	; (400c1c <_pwm_enable+0x38>)
  400bee:	3000      	adds	r0, #0
  400bf0:	bf18      	it	ne
  400bf2:	2001      	movne	r0, #1
  400bf4:	4b0a      	ldr	r3, [pc, #40]	; (400c20 <_pwm_enable+0x3c>)
  400bf6:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  400bf8:	6920      	ldr	r0, [r4, #16]
  400bfa:	4b0a      	ldr	r3, [pc, #40]	; (400c24 <_pwm_enable+0x40>)
  400bfc:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  400bfe:	2300      	movs	r3, #0
  400c00:	e008      	b.n	400c14 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  400c02:	6921      	ldr	r1, [r4, #16]
  400c04:	6b05      	ldr	r5, [r0, #48]	; 0x30
  400c06:	011a      	lsls	r2, r3, #4
  400c08:	5cad      	ldrb	r5, [r5, r2]
  400c0a:	2201      	movs	r2, #1
  400c0c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  400c0e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  400c10:	3301      	adds	r3, #1
  400c12:	b25b      	sxtb	r3, r3
  400c14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  400c16:	4293      	cmp	r3, r2
  400c18:	d3f3      	bcc.n	400c02 <_pwm_enable+0x1e>
	}
}
  400c1a:	bd38      	pop	{r3, r4, r5, pc}
  400c1c:	00400e74 	.word	0x00400e74
  400c20:	00400639 	.word	0x00400639
  400c24:	00400a45 	.word	0x00400a45

00400c28 <_pwm_is_enabled>:
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
	}
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  400c28:	b510      	push	{r4, lr}
	ASSERT(device);
  400c2a:	4604      	mov	r4, r0
  400c2c:	f240 12d1 	movw	r2, #465	; 0x1d1
  400c30:	4907      	ldr	r1, [pc, #28]	; (400c50 <_pwm_is_enabled+0x28>)
  400c32:	3000      	adds	r0, #0
  400c34:	bf18      	it	ne
  400c36:	2001      	movne	r0, #1
  400c38:	4b06      	ldr	r3, [pc, #24]	; (400c54 <_pwm_is_enabled+0x2c>)
  400c3a:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  400c3c:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  400c3e:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  400c40:	f013 0f0f 	tst.w	r3, #15
  400c44:	d001      	beq.n	400c4a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  400c46:	2001      	movs	r0, #1
	}
}
  400c48:	bd10      	pop	{r4, pc}
		return false;
  400c4a:	2000      	movs	r0, #0
  400c4c:	bd10      	pop	{r4, pc}
  400c4e:	bf00      	nop
  400c50:	00400e74 	.word	0x00400e74
  400c54:	00400639 	.word	0x00400639

00400c58 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  400c58:	2000      	movs	r0, #0
  400c5a:	4770      	bx	lr

00400c5c <set_pwm_channel>:
//struct _pwm_device *const device
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t period, uint32_t duty_cycle){
  400c5c:	b410      	push	{r4}
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  400c5e:	6904      	ldr	r4, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400c60:	0149      	lsls	r1, r1, #5
  400c62:	440c      	add	r4, r1
  400c64:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, period);
  400c68:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  400c6a:	4419      	add	r1, r3
  400c6c:	f8c1 2210 	str.w	r2, [r1, #528]	; 0x210
}
  400c70:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c74:	4770      	bx	lr
	...

00400c78 <main>:

int main(void)
{
  400c78:	b508      	push	{r3, lr}
	atmel_start_init();
  400c7a:	4b13      	ldr	r3, [pc, #76]	; (400cc8 <main+0x50>)
  400c7c:	4798      	blx	r3

	pwm_enable(&PWM_0);
  400c7e:	4c13      	ldr	r4, [pc, #76]	; (400ccc <main+0x54>)
  400c80:	4620      	mov	r0, r4
  400c82:	4b13      	ldr	r3, [pc, #76]	; (400cd0 <main+0x58>)
  400c84:	4798      	blx	r3
	
	set_pwm_channel(&(PWM_0.device), 2, PWM_PERIOD, 5000);
  400c86:	f241 3388 	movw	r3, #5000	; 0x1388
  400c8a:	f242 7210 	movw	r2, #10000	; 0x2710
  400c8e:	2102      	movs	r1, #2
  400c90:	4620      	mov	r0, r4
  400c92:	4d10      	ldr	r5, [pc, #64]	; (400cd4 <main+0x5c>)
  400c94:	47a8      	blx	r5
	set_pwm_channel(&(PWM_0.device), 0, PWM_PERIOD, 2500);
  400c96:	f640 13c4 	movw	r3, #2500	; 0x9c4
  400c9a:	f242 7210 	movw	r2, #10000	; 0x2710
  400c9e:	2100      	movs	r1, #0
  400ca0:	4620      	mov	r0, r4
  400ca2:	47a8      	blx	r5
	set_pwm_channel(&(PWM_0.device), 1, PWM_PERIOD, 1000);
  400ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400ca8:	f242 7210 	movw	r2, #10000	; 0x2710
  400cac:	2101      	movs	r1, #1
  400cae:	4620      	mov	r0, r4
  400cb0:	47a8      	blx	r5
	set_pwm_channel(&(PWM_0.device), 3, PWM_PERIOD, 800);
  400cb2:	f44f 7348 	mov.w	r3, #800	; 0x320
  400cb6:	f242 7210 	movw	r2, #10000	; 0x2710
  400cba:	2103      	movs	r1, #3
  400cbc:	4620      	mov	r0, r4
  400cbe:	47a8      	blx	r5



	while (1) {

		delay_ms(100);
  400cc0:	2064      	movs	r0, #100	; 0x64
  400cc2:	4b05      	ldr	r3, [pc, #20]	; (400cd8 <main+0x60>)
  400cc4:	4798      	blx	r3
  400cc6:	e7fb      	b.n	400cc0 <main+0x48>
  400cc8:	004001d5 	.word	0x004001d5
  400ccc:	20400074 	.word	0x20400074
  400cd0:	004005fd 	.word	0x004005fd
  400cd4:	00400c5d 	.word	0x00400c5d
  400cd8:	00400585 	.word	0x00400585

00400cdc <__libc_init_array>:
  400cdc:	b570      	push	{r4, r5, r6, lr}
  400cde:	4e0d      	ldr	r6, [pc, #52]	; (400d14 <__libc_init_array+0x38>)
  400ce0:	4c0d      	ldr	r4, [pc, #52]	; (400d18 <__libc_init_array+0x3c>)
  400ce2:	1ba4      	subs	r4, r4, r6
  400ce4:	10a4      	asrs	r4, r4, #2
  400ce6:	2500      	movs	r5, #0
  400ce8:	42a5      	cmp	r5, r4
  400cea:	d109      	bne.n	400d00 <__libc_init_array+0x24>
  400cec:	4e0b      	ldr	r6, [pc, #44]	; (400d1c <__libc_init_array+0x40>)
  400cee:	4c0c      	ldr	r4, [pc, #48]	; (400d20 <__libc_init_array+0x44>)
  400cf0:	f000 f8cc 	bl	400e8c <_init>
  400cf4:	1ba4      	subs	r4, r4, r6
  400cf6:	10a4      	asrs	r4, r4, #2
  400cf8:	2500      	movs	r5, #0
  400cfa:	42a5      	cmp	r5, r4
  400cfc:	d105      	bne.n	400d0a <__libc_init_array+0x2e>
  400cfe:	bd70      	pop	{r4, r5, r6, pc}
  400d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400d04:	4798      	blx	r3
  400d06:	3501      	adds	r5, #1
  400d08:	e7ee      	b.n	400ce8 <__libc_init_array+0xc>
  400d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400d0e:	4798      	blx	r3
  400d10:	3501      	adds	r5, #1
  400d12:	e7f2      	b.n	400cfa <__libc_init_array+0x1e>
  400d14:	00400e98 	.word	0x00400e98
  400d18:	00400e98 	.word	0x00400e98
  400d1c:	00400e98 	.word	0x00400e98
  400d20:	00400e9c 	.word	0x00400e9c
  400d24:	682f2e2e 	.word	0x682f2e2e
  400d28:	732f6c61 	.word	0x732f6c61
  400d2c:	682f6372 	.word	0x682f6372
  400d30:	615f6c61 	.word	0x615f6c61
  400d34:	615f6364 	.word	0x615f6364
  400d38:	636e7973 	.word	0x636e7973
  400d3c:	0000632e 	.word	0x0000632e
  400d40:	682f2e2e 	.word	0x682f2e2e
  400d44:	732f6c61 	.word	0x732f6c61
  400d48:	682f6372 	.word	0x682f6372
  400d4c:	705f6c61 	.word	0x705f6c61
  400d50:	632e6d77 	.word	0x632e6d77
  400d54:	00000000 	.word	0x00000000
  400d58:	682f2e2e 	.word	0x682f2e2e
  400d5c:	752f6c61 	.word	0x752f6c61
  400d60:	736c6974 	.word	0x736c6974
  400d64:	6372732f 	.word	0x6372732f
  400d68:	6974752f 	.word	0x6974752f
  400d6c:	725f736c 	.word	0x725f736c
  400d70:	62676e69 	.word	0x62676e69
  400d74:	65666675 	.word	0x65666675
  400d78:	00632e72 	.word	0x00632e72

00400d7c <_afecs>:
  400d7c:	00000000 12843100 03000000 ffffffff     .....1..........
  400d8c:	0000ffff 00000000 00000000 00000000     ................
  400d9c:	0000010c 00000000 00000000 00000000     ................
  400dac:	00000000 00000200 00000200 00000200     ................
  400dbc:	00000200 00000200 00000200 00000200     ................
  400dcc:	00000200 00000200 00000200 00000200     ................
  400ddc:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  400dec:	5f6c7068 63656661 0000632e              hpl_afec.c..

00400df8 <_pwms>:
  400df8:	40020000 0000001f 00010001 00000001     ...@............
  400e08:	00000001 000000ff 00000000 00000004     ................
	...
  400e24:	00000004 00400e34 00000000 2040003c     ....4.@.....<.@ 

00400e34 <_ch_cfg0>:
  400e34:	00000000 00000200 00000400 00000200     ................
  400e44:	00000001 00000200 00000400 00000200     ................
  400e54:	00000002 00000200 00000400 00000200     ................
  400e64:	00000003 00000200 00000400 00000200     ................
  400e74:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  400e84:	632e6d77 00000000                       wm.c....

00400e8c <_init>:
  400e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e8e:	bf00      	nop
  400e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400e92:	bc08      	pop	{r3}
  400e94:	469e      	mov	lr, r3
  400e96:	4770      	bx	lr

00400e98 <__init_array_start>:
  400e98:	0040018d 	.word	0x0040018d

00400e9c <_fini>:
  400e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e9e:	bf00      	nop
  400ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400ea2:	bc08      	pop	{r3}
  400ea4:	469e      	mov	lr, r3
  400ea6:	4770      	bx	lr

00400ea8 <__fini_array_start>:
  400ea8:	00400169 	.word	0x00400169
