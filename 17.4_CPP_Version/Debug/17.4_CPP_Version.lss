
17.4_CPP_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ac  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000088c  20400000  004024ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018c  2040088c  00402d38  0002088c  2**2
                  ALLOC
  3 .heap         00000200  20400a18  00402ec4  0002088c  2**0
                  ALLOC
  4 .stack        00000400  20400c18  004030c4  0002088c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ba  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a590  00000000  00000000  00020913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000366b  00000000  00000000  0003aea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000afd1  00000000  00000000  0003e50e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b88  00000000  00000000  000494df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ad8  00000000  00000000  0004a067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f84a  00000000  00000000  0004ab3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014aa6  00000000  00000000  0005a389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001257c4  00000000  00000000  0006ee2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f84  00000000  00000000  001945f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 10 40 20 d5 01 40 00 d1 01 40 00 d1 01 40 00     ..@ ..@...@...@.
  400010:	d1 01 40 00 d1 01 40 00 d1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  40003c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40004c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40005c:	d1 01 40 00 d1 01 40 00 00 00 00 00 c1 0f 40 00     ..@...@.......@.
  40006c:	b5 0f 40 00 00 00 00 00 d1 01 40 00 d1 01 40 00     ..@.......@...@.
  40007c:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  40008c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40009c:	a1 15 40 00 d1 01 40 00 d1 01 40 00 b5 15 40 00     ..@...@...@...@.
  4000ac:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  4000bc:	25 11 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     %.@...@...@...@.
	...
  4000e0:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  4000f0:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400100:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400110:	d1 01 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400130:	39 11 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     9.@...@.......@.
  400140:	d1 01 40 00 d1 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400150:	d1 01 40 00 d1 01 40 00                             ..@...@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	2040088c 	.word	0x2040088c
  400174:	00000000 	.word	0x00000000
  400178:	004024ac 	.word	0x004024ac

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	004024ac 	.word	0x004024ac
  4001b8:	20400890 	.word	0x20400890
  4001bc:	004024ac 	.word	0x004024ac
  4001c0:	00000000 	.word	0x00000000

004001c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001c4:	b508      	push	{r3, lr}
	system_init();
  4001c6:	4b01      	ldr	r3, [pc, #4]	; (4001cc <atmel_start_init+0x8>)
  4001c8:	4798      	blx	r3
  4001ca:	bd08      	pop	{r3, pc}
  4001cc:	004005e9 	.word	0x004005e9

004001d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001d0:	e7fe      	b.n	4001d0 <Dummy_Handler>
	...

004001d4 <Reset_Handler>:
{
  4001d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001d6:	4b10      	ldr	r3, [pc, #64]	; (400218 <Reset_Handler+0x44>)
  4001d8:	4a10      	ldr	r2, [pc, #64]	; (40021c <Reset_Handler+0x48>)
  4001da:	429a      	cmp	r2, r3
  4001dc:	d009      	beq.n	4001f2 <Reset_Handler+0x1e>
  4001de:	4b0e      	ldr	r3, [pc, #56]	; (400218 <Reset_Handler+0x44>)
  4001e0:	4a0e      	ldr	r2, [pc, #56]	; (40021c <Reset_Handler+0x48>)
  4001e2:	e003      	b.n	4001ec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001e4:	6811      	ldr	r1, [r2, #0]
  4001e6:	6019      	str	r1, [r3, #0]
  4001e8:	3304      	adds	r3, #4
  4001ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001ec:	490c      	ldr	r1, [pc, #48]	; (400220 <Reset_Handler+0x4c>)
  4001ee:	428b      	cmp	r3, r1
  4001f0:	d3f8      	bcc.n	4001e4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4001f2:	4b0c      	ldr	r3, [pc, #48]	; (400224 <Reset_Handler+0x50>)
  4001f4:	e002      	b.n	4001fc <Reset_Handler+0x28>
                *pDest++ = 0;
  4001f6:	2200      	movs	r2, #0
  4001f8:	601a      	str	r2, [r3, #0]
  4001fa:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4001fc:	4a0a      	ldr	r2, [pc, #40]	; (400228 <Reset_Handler+0x54>)
  4001fe:	4293      	cmp	r3, r2
  400200:	d3f9      	bcc.n	4001f6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400202:	4a0a      	ldr	r2, [pc, #40]	; (40022c <Reset_Handler+0x58>)
  400204:	4b0a      	ldr	r3, [pc, #40]	; (400230 <Reset_Handler+0x5c>)
  400206:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40020a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40020c:	4b09      	ldr	r3, [pc, #36]	; (400234 <Reset_Handler+0x60>)
  40020e:	4798      	blx	r3
        main();
  400210:	4b09      	ldr	r3, [pc, #36]	; (400238 <Reset_Handler+0x64>)
  400212:	4798      	blx	r3
  400214:	e7fe      	b.n	400214 <Reset_Handler+0x40>
  400216:	bf00      	nop
  400218:	20400000 	.word	0x20400000
  40021c:	004024ac 	.word	0x004024ac
  400220:	2040088c 	.word	0x2040088c
  400224:	2040088c 	.word	0x2040088c
  400228:	20400a18 	.word	0x20400a18
  40022c:	e000ed00 	.word	0xe000ed00
  400230:	00400000 	.word	0x00400000
  400234:	004017fd 	.word	0x004017fd
  400238:	004017e5 	.word	0x004017e5

0040023c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40023c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40023e:	4b08      	ldr	r3, [pc, #32]	; (400260 <TIMER_0_init+0x24>)
  400240:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400242:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400246:	d103      	bne.n	400250 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	4b04      	ldr	r3, [pc, #16]	; (400260 <TIMER_0_init+0x24>)
  40024e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400250:	4b04      	ldr	r3, [pc, #16]	; (400264 <TIMER_0_init+0x28>)
  400252:	4798      	blx	r3
  400254:	4602      	mov	r2, r0
  400256:	4904      	ldr	r1, [pc, #16]	; (400268 <TIMER_0_init+0x2c>)
  400258:	4804      	ldr	r0, [pc, #16]	; (40026c <TIMER_0_init+0x30>)
  40025a:	4b05      	ldr	r3, [pc, #20]	; (400270 <TIMER_0_init+0x34>)
  40025c:	4798      	blx	r3
  40025e:	bd08      	pop	{r3, pc}
  400260:	400e0600 	.word	0x400e0600
  400264:	0040159d 	.word	0x0040159d
  400268:	4000c000 	.word	0x4000c000
  40026c:	204009d4 	.word	0x204009d4
  400270:	00400b75 	.word	0x00400b75

00400274 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
  400274:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <TIMER_1_init+0x24>)
  400278:	699b      	ldr	r3, [r3, #24]
  40027a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40027e:	d103      	bne.n	400288 <TIMER_1_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400280:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400284:	4b04      	ldr	r3, [pc, #16]	; (400298 <TIMER_1_init+0x24>)
  400286:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	TIMER_1_PORT_init();
	timer_init(&TIMER_1, TC1, _tc_get_timer());
  400288:	4b04      	ldr	r3, [pc, #16]	; (40029c <TIMER_1_init+0x28>)
  40028a:	4798      	blx	r3
  40028c:	4602      	mov	r2, r0
  40028e:	4904      	ldr	r1, [pc, #16]	; (4002a0 <TIMER_1_init+0x2c>)
  400290:	4804      	ldr	r0, [pc, #16]	; (4002a4 <TIMER_1_init+0x30>)
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <TIMER_1_init+0x34>)
  400294:	4798      	blx	r3
  400296:	bd08      	pop	{r3, pc}
  400298:	400e0600 	.word	0x400e0600
  40029c:	0040159d 	.word	0x0040159d
  4002a0:	40010000 	.word	0x40010000
  4002a4:	20400964 	.word	0x20400964
  4002a8:	00400b75 	.word	0x00400b75

004002ac <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4002ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4002b0:	4b05      	ldr	r3, [pc, #20]	; (4002c8 <ADC_0_PORT_init+0x1c>)
  4002b2:	601a      	str	r2, [r3, #0]
  4002b4:	2204      	movs	r2, #4
  4002b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002ba:	601a      	str	r2, [r3, #0]
  4002bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4002c0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  4002c4:	601a      	str	r2, [r3, #0]
  4002c6:	4770      	bx	lr
  4002c8:	400e1400 	.word	0x400e1400

004002cc <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002cc:	4b04      	ldr	r3, [pc, #16]	; (4002e0 <ADC_0_CLOCK_init+0x14>)
  4002ce:	699b      	ldr	r3, [r3, #24]
  4002d0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4002d4:	d103      	bne.n	4002de <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4002da:	4b01      	ldr	r3, [pc, #4]	; (4002e0 <ADC_0_CLOCK_init+0x14>)
  4002dc:	611a      	str	r2, [r3, #16]
  4002de:	4770      	bx	lr
  4002e0:	400e0600 	.word	0x400e0600

004002e4 <ADC_0_init>:
{
  4002e4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  4002e6:	4b05      	ldr	r3, [pc, #20]	; (4002fc <ADC_0_init+0x18>)
  4002e8:	4798      	blx	r3
	ADC_0_PORT_init();
  4002ea:	4b05      	ldr	r3, [pc, #20]	; (400300 <ADC_0_init+0x1c>)
  4002ec:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  4002ee:	2200      	movs	r2, #0
  4002f0:	4904      	ldr	r1, [pc, #16]	; (400304 <ADC_0_init+0x20>)
  4002f2:	4805      	ldr	r0, [pc, #20]	; (400308 <ADC_0_init+0x24>)
  4002f4:	4b05      	ldr	r3, [pc, #20]	; (40030c <ADC_0_init+0x28>)
  4002f6:	4798      	blx	r3
  4002f8:	bd08      	pop	{r3, pc}
  4002fa:	bf00      	nop
  4002fc:	004002cd 	.word	0x004002cd
  400300:	004002ad 	.word	0x004002ad
  400304:	4003c000 	.word	0x4003c000
  400308:	2040095c 	.word	0x2040095c
  40030c:	004007c5 	.word	0x004007c5

00400310 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400310:	4b03      	ldr	r3, [pc, #12]	; (400320 <EXTERNAL_IRQ_1_init+0x10>)
  400312:	2202      	movs	r2, #2
  400314:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400316:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40031c:	601a      	str	r2, [r3, #0]
  40031e:	4770      	bx	lr
  400320:	400e1000 	.word	0x400e1000

00400324 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400324:	4b12      	ldr	r3, [pc, #72]	; (400370 <EXTERNAL_IRQ_0_init+0x4c>)
  400326:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40032a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40032c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40032e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400332:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400334:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400338:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40033a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40033c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400340:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400342:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400346:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400348:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40034a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40034e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400354:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400356:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40035c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40035e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400362:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400364:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40036a:	601a      	str	r2, [r3, #0]
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop
  400370:	400e0e00 	.word	0x400e0e00

00400374 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400374:	4b17      	ldr	r3, [pc, #92]	; (4003d4 <PWM_0_PORT_init+0x60>)
  400376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40037c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40037e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400384:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400386:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40038a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40038c:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400392:	f022 0204 	bic.w	r2, r2, #4
  400396:	671a      	str	r2, [r3, #112]	; 0x70
  400398:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40039a:	f022 0204 	bic.w	r2, r2, #4
  40039e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003a0:	2204      	movs	r2, #4
  4003a2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4003aa:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003b2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4003b8:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4003c0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003c8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4003ce:	605a      	str	r2, [r3, #4]
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop
  4003d4:	400e1400 	.word	0x400e1400

004003d8 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003d8:	4b04      	ldr	r3, [pc, #16]	; (4003ec <PWM_0_CLOCK_init+0x14>)
  4003da:	699b      	ldr	r3, [r3, #24]
  4003dc:	2b00      	cmp	r3, #0
  4003de:	db03      	blt.n	4003e8 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003e4:	4b01      	ldr	r3, [pc, #4]	; (4003ec <PWM_0_CLOCK_init+0x14>)
  4003e6:	611a      	str	r2, [r3, #16]
  4003e8:	4770      	bx	lr
  4003ea:	bf00      	nop
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <PWM_0_init>:
{
  4003f0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4003f2:	4b06      	ldr	r3, [pc, #24]	; (40040c <PWM_0_init+0x1c>)
  4003f4:	4798      	blx	r3
	PWM_0_PORT_init();
  4003f6:	4b06      	ldr	r3, [pc, #24]	; (400410 <PWM_0_init+0x20>)
  4003f8:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4003fa:	4b06      	ldr	r3, [pc, #24]	; (400414 <PWM_0_init+0x24>)
  4003fc:	4798      	blx	r3
  4003fe:	4602      	mov	r2, r0
  400400:	4905      	ldr	r1, [pc, #20]	; (400418 <PWM_0_init+0x28>)
  400402:	4806      	ldr	r0, [pc, #24]	; (40041c <PWM_0_init+0x2c>)
  400404:	4b06      	ldr	r3, [pc, #24]	; (400420 <PWM_0_init+0x30>)
  400406:	4798      	blx	r3
  400408:	bd08      	pop	{r3, pc}
  40040a:	bf00      	nop
  40040c:	004003d9 	.word	0x004003d9
  400410:	00400375 	.word	0x00400375
  400414:	00401285 	.word	0x00401285
  400418:	40020000 	.word	0x40020000
  40041c:	20400940 	.word	0x20400940
  400420:	00400951 	.word	0x00400951

00400424 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400424:	4b06      	ldr	r3, [pc, #24]	; (400440 <PWM_1_PORT_init+0x1c>)
  400426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40042c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40042e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400434:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40043a:	605a      	str	r2, [r3, #4]
  40043c:	4770      	bx	lr
  40043e:	bf00      	nop
  400440:	400e0e00 	.word	0x400e0e00

00400444 <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400444:	4b05      	ldr	r3, [pc, #20]	; (40045c <PWM_1_CLOCK_init+0x18>)
  400446:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40044a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40044e:	d104      	bne.n	40045a <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400454:	4b01      	ldr	r3, [pc, #4]	; (40045c <PWM_1_CLOCK_init+0x18>)
  400456:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40045a:	4770      	bx	lr
  40045c:	400e0600 	.word	0x400e0600

00400460 <PWM_1_init>:
{
  400460:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400462:	4b06      	ldr	r3, [pc, #24]	; (40047c <PWM_1_init+0x1c>)
  400464:	4798      	blx	r3
	PWM_1_PORT_init();
  400466:	4b06      	ldr	r3, [pc, #24]	; (400480 <PWM_1_init+0x20>)
  400468:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  40046a:	4b06      	ldr	r3, [pc, #24]	; (400484 <PWM_1_init+0x24>)
  40046c:	4798      	blx	r3
  40046e:	4602      	mov	r2, r0
  400470:	4905      	ldr	r1, [pc, #20]	; (400488 <PWM_1_init+0x28>)
  400472:	4806      	ldr	r0, [pc, #24]	; (40048c <PWM_1_init+0x2c>)
  400474:	4b06      	ldr	r3, [pc, #24]	; (400490 <PWM_1_init+0x30>)
  400476:	4798      	blx	r3
  400478:	bd08      	pop	{r3, pc}
  40047a:	bf00      	nop
  40047c:	00400445 	.word	0x00400445
  400480:	00400425 	.word	0x00400425
  400484:	00401285 	.word	0x00401285
  400488:	4005c000 	.word	0x4005c000
  40048c:	20400998 	.word	0x20400998
  400490:	00400951 	.word	0x00400951

00400494 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400494:	4b11      	ldr	r3, [pc, #68]	; (4004dc <SPI_0_PORT_init+0x48>)
  400496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400498:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40049c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40049e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004a0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  4004a4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4004aa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4004b2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004ba:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004c0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4004c8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004cc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4004d0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004d6:	605a      	str	r2, [r3, #4]
  4004d8:	4770      	bx	lr
  4004da:	bf00      	nop
  4004dc:	400e1400 	.word	0x400e1400

004004e0 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004e0:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <SPI_0_CLOCK_init+0x14>)
  4004e2:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4004e4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4004e8:	d103      	bne.n	4004f2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004ee:	4b01      	ldr	r3, [pc, #4]	; (4004f4 <SPI_0_CLOCK_init+0x14>)
  4004f0:	611a      	str	r2, [r3, #16]
  4004f2:	4770      	bx	lr
  4004f4:	400e0600 	.word	0x400e0600

004004f8 <SPI_0_init>:
{
  4004f8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4004fa:	4b08      	ldr	r3, [pc, #32]	; (40051c <SPI_0_init+0x24>)
  4004fc:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4004fe:	4b08      	ldr	r3, [pc, #32]	; (400520 <SPI_0_init+0x28>)
  400500:	4798      	blx	r3
  400502:	4c08      	ldr	r4, [pc, #32]	; (400524 <SPI_0_init+0x2c>)
  400504:	4601      	mov	r1, r0
  400506:	4620      	mov	r0, r4
  400508:	4b07      	ldr	r3, [pc, #28]	; (400528 <SPI_0_init+0x30>)
  40050a:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  40050c:	4907      	ldr	r1, [pc, #28]	; (40052c <SPI_0_init+0x34>)
  40050e:	4620      	mov	r0, r4
  400510:	4b07      	ldr	r3, [pc, #28]	; (400530 <SPI_0_init+0x38>)
  400512:	4798      	blx	r3
	SPI_0_PORT_init();
  400514:	4b07      	ldr	r3, [pc, #28]	; (400534 <SPI_0_init+0x3c>)
  400516:	4798      	blx	r3
  400518:	bd10      	pop	{r4, pc}
  40051a:	bf00      	nop
  40051c:	004004e1 	.word	0x004004e1
  400520:	00401449 	.word	0x00401449
  400524:	20400980 	.word	0x20400980
  400528:	00400995 	.word	0x00400995
  40052c:	40008000 	.word	0x40008000
  400530:	004009b5 	.word	0x004009b5
  400534:	00400495 	.word	0x00400495

00400538 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400538:	4b0a      	ldr	r3, [pc, #40]	; (400564 <I2C_0_PORT_init+0x2c>)
  40053a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40053c:	f022 0210 	bic.w	r2, r2, #16
  400540:	671a      	str	r2, [r3, #112]	; 0x70
  400542:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400544:	f022 0210 	bic.w	r2, r2, #16
  400548:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40054a:	2210      	movs	r2, #16
  40054c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40054e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400550:	f022 0208 	bic.w	r2, r2, #8
  400554:	671a      	str	r2, [r3, #112]	; 0x70
  400556:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400558:	f022 0208 	bic.w	r2, r2, #8
  40055c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40055e:	2208      	movs	r2, #8
  400560:	605a      	str	r2, [r3, #4]
  400562:	4770      	bx	lr
  400564:	400e0e00 	.word	0x400e0e00

00400568 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400568:	4b04      	ldr	r3, [pc, #16]	; (40057c <I2C_0_CLOCK_init+0x14>)
  40056a:	699b      	ldr	r3, [r3, #24]
  40056c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400570:	d103      	bne.n	40057a <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400572:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400576:	4b01      	ldr	r3, [pc, #4]	; (40057c <I2C_0_CLOCK_init+0x14>)
  400578:	611a      	str	r2, [r3, #16]
  40057a:	4770      	bx	lr
  40057c:	400e0600 	.word	0x400e0600

00400580 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400580:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <I2C_0_init+0x14>)
  400584:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400586:	4904      	ldr	r1, [pc, #16]	; (400598 <I2C_0_init+0x18>)
  400588:	4804      	ldr	r0, [pc, #16]	; (40059c <I2C_0_init+0x1c>)
  40058a:	4b05      	ldr	r3, [pc, #20]	; (4005a0 <I2C_0_init+0x20>)
  40058c:	4798      	blx	r3

	I2C_0_PORT_init();
  40058e:	4b05      	ldr	r3, [pc, #20]	; (4005a4 <I2C_0_init+0x24>)
  400590:	4798      	blx	r3
  400592:	bd08      	pop	{r3, pc}
  400594:	00400569 	.word	0x00400569
  400598:	40018000 	.word	0x40018000
  40059c:	204009b4 	.word	0x204009b4
  4005a0:	004008fd 	.word	0x004008fd
  4005a4:	00400539 	.word	0x00400539

004005a8 <delay_driver_init>:
}

void delay_driver_init(void)
{
  4005a8:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4005aa:	4802      	ldr	r0, [pc, #8]	; (4005b4 <delay_driver_init+0xc>)
  4005ac:	4b02      	ldr	r3, [pc, #8]	; (4005b8 <delay_driver_init+0x10>)
  4005ae:	4798      	blx	r3
  4005b0:	bd08      	pop	{r3, pc}
  4005b2:	bf00      	nop
  4005b4:	e000e010 	.word	0xe000e010
  4005b8:	00400811 	.word	0x00400811

004005bc <WDT_0_init>:
}

void WDT_0_init(void)
{
  4005bc:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  4005be:	2248      	movs	r2, #72	; 0x48
  4005c0:	4904      	ldr	r1, [pc, #16]	; (4005d4 <WDT_0_init+0x18>)
  4005c2:	2001      	movs	r0, #1
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <WDT_0_init+0x1c>)
  4005c6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  4005c8:	4804      	ldr	r0, [pc, #16]	; (4005dc <WDT_0_init+0x20>)
  4005ca:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <WDT_0_init+0x24>)
  4005cc:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  4005ce:	4b05      	ldr	r3, [pc, #20]	; (4005e4 <WDT_0_init+0x28>)
  4005d0:	4798      	blx	r3
  4005d2:	bd08      	pop	{r3, pc}
  4005d4:	00402184 	.word	0x00402184
  4005d8:	00400bb1 	.word	0x00400bb1
  4005dc:	20400960 	.word	0x20400960
  4005e0:	400e1850 	.word	0x400e1850
  4005e4:	004017b1 	.word	0x004017b1

004005e8 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  4005e8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4005ea:	4b67      	ldr	r3, [pc, #412]	; (400788 <system_init+0x1a0>)
  4005ec:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005ee:	4b67      	ldr	r3, [pc, #412]	; (40078c <system_init+0x1a4>)
  4005f0:	699b      	ldr	r3, [r3, #24]
  4005f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4005f6:	d103      	bne.n	400600 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005fc:	4b63      	ldr	r3, [pc, #396]	; (40078c <system_init+0x1a4>)
  4005fe:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400600:	4b62      	ldr	r3, [pc, #392]	; (40078c <system_init+0x1a4>)
  400602:	699b      	ldr	r3, [r3, #24]
  400604:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400608:	d103      	bne.n	400612 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40060a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40060e:	4b5f      	ldr	r3, [pc, #380]	; (40078c <system_init+0x1a4>)
  400610:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400612:	4b5e      	ldr	r3, [pc, #376]	; (40078c <system_init+0x1a4>)
  400614:	699b      	ldr	r3, [r3, #24]
  400616:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40061a:	d103      	bne.n	400624 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40061c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400620:	4b5a      	ldr	r3, [pc, #360]	; (40078c <system_init+0x1a4>)
  400622:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  400624:	4b5a      	ldr	r3, [pc, #360]	; (400790 <system_init+0x1a8>)
  400626:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40062a:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40062c:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40062e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400632:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400638:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40063c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400640:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400646:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400648:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40064a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40064e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400650:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  400654:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400656:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400658:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40065c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40065e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400662:	2008      	movs	r0, #8
  400664:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400666:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400668:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40066a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40066e:	2404      	movs	r4, #4
  400670:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400672:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400674:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400676:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400678:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40067a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40067c:	2010      	movs	r0, #16
  40067e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400680:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400682:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400684:	2020      	movs	r0, #32
  400686:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400688:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40068a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40068c:	2040      	movs	r0, #64	; 0x40
  40068e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400690:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400692:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400694:	2080      	movs	r0, #128	; 0x80
  400696:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400698:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40069a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40069c:	f44f 7080 	mov.w	r0, #256	; 0x100
  4006a0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006a2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006a4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006a6:	f44f 7000 	mov.w	r0, #512	; 0x200
  4006aa:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006ac:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006ae:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4006b4:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006b6:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006b8:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4006be:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006c0:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006c2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006c6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  4006cc:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006ce:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006d0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006d4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4006da:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006dc:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006de:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4006e8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006ea:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006ec:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006f0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4006f6:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006f8:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006fa:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006fe:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400700:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  400704:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400706:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400708:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40070c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40070e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  400712:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400714:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400716:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40071a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40071c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  400720:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400722:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400724:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400728:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40072a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  40072e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400730:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400732:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400734:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  400738:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40073a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40073c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40073e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  400742:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400744:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400746:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400748:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40074a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40074c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40074e:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400750:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400752:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400754:	4b0f      	ldr	r3, [pc, #60]	; (400794 <system_init+0x1ac>)
  400756:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  400758:	4b0f      	ldr	r3, [pc, #60]	; (400798 <system_init+0x1b0>)
  40075a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  40075c:	4b0f      	ldr	r3, [pc, #60]	; (40079c <system_init+0x1b4>)
  40075e:	4798      	blx	r3

	PWM_0_init();
  400760:	4b0f      	ldr	r3, [pc, #60]	; (4007a0 <system_init+0x1b8>)
  400762:	4798      	blx	r3

	PWM_1_init();
  400764:	4b0f      	ldr	r3, [pc, #60]	; (4007a4 <system_init+0x1bc>)
  400766:	4798      	blx	r3

	SPI_0_init();
  400768:	4b0f      	ldr	r3, [pc, #60]	; (4007a8 <system_init+0x1c0>)
  40076a:	4798      	blx	r3
	TIMER_0_init();
  40076c:	4b0f      	ldr	r3, [pc, #60]	; (4007ac <system_init+0x1c4>)
  40076e:	4798      	blx	r3
	TIMER_1_init();
  400770:	4b0f      	ldr	r3, [pc, #60]	; (4007b0 <system_init+0x1c8>)
  400772:	4798      	blx	r3

	I2C_0_init();
  400774:	4b0f      	ldr	r3, [pc, #60]	; (4007b4 <system_init+0x1cc>)
  400776:	4798      	blx	r3

	delay_driver_init();
  400778:	4b0f      	ldr	r3, [pc, #60]	; (4007b8 <system_init+0x1d0>)
  40077a:	4798      	blx	r3

	WDT_0_init();
  40077c:	4b0f      	ldr	r3, [pc, #60]	; (4007bc <system_init+0x1d4>)
  40077e:	4798      	blx	r3

	ext_irq_init();
  400780:	4b0f      	ldr	r3, [pc, #60]	; (4007c0 <system_init+0x1d8>)
  400782:	4798      	blx	r3
  400784:	bd10      	pop	{r4, pc}
  400786:	bf00      	nop
  400788:	00400d45 	.word	0x00400d45
  40078c:	400e0600 	.word	0x400e0600
  400790:	400e0e00 	.word	0x400e0e00
  400794:	004002e5 	.word	0x004002e5
  400798:	00400311 	.word	0x00400311
  40079c:	00400325 	.word	0x00400325
  4007a0:	004003f1 	.word	0x004003f1
  4007a4:	00400461 	.word	0x00400461
  4007a8:	004004f9 	.word	0x004004f9
  4007ac:	0040023d 	.word	0x0040023d
  4007b0:	00400275 	.word	0x00400275
  4007b4:	00400581 	.word	0x00400581
  4007b8:	004005a9 	.word	0x004005a9
  4007bc:	004005bd 	.word	0x004005bd
  4007c0:	00400869 	.word	0x00400869

004007c4 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  4007c4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4007c6:	4604      	mov	r4, r0
  4007c8:	460d      	mov	r5, r1
  4007ca:	2800      	cmp	r0, #0
  4007cc:	bf18      	it	ne
  4007ce:	2900      	cmpne	r1, #0
  4007d0:	bf14      	ite	ne
  4007d2:	2001      	movne	r0, #1
  4007d4:	2000      	moveq	r0, #0
  4007d6:	2239      	movs	r2, #57	; 0x39
  4007d8:	4903      	ldr	r1, [pc, #12]	; (4007e8 <adc_sync_init+0x24>)
  4007da:	4b04      	ldr	r3, [pc, #16]	; (4007ec <adc_sync_init+0x28>)
  4007dc:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  4007de:	4629      	mov	r1, r5
  4007e0:	4620      	mov	r0, r4
  4007e2:	4b03      	ldr	r3, [pc, #12]	; (4007f0 <adc_sync_init+0x2c>)
  4007e4:	4798      	blx	r3
}
  4007e6:	bd38      	pop	{r3, r4, r5, pc}
  4007e8:	004021a0 	.word	0x004021a0
  4007ec:	00400bb1 	.word	0x00400bb1
  4007f0:	00400d0d 	.word	0x00400d0d

004007f4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4007f4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4007f8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4007fa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4007fc:	f3bf 8f5f 	dmb	sy
  400800:	4770      	bx	lr

00400802 <atomic_leave_critical>:
  400802:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400806:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400808:	f383 8810 	msr	PRIMASK, r3
  40080c:	4770      	bx	lr
	...

00400810 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400810:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400812:	4b02      	ldr	r3, [pc, #8]	; (40081c <delay_init+0xc>)
  400814:	6018      	str	r0, [r3, #0]
  400816:	4b02      	ldr	r3, [pc, #8]	; (400820 <delay_init+0x10>)
  400818:	4798      	blx	r3
  40081a:	bd08      	pop	{r3, pc}
  40081c:	204008a8 	.word	0x204008a8
  400820:	00401461 	.word	0x00401461

00400824 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400824:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400826:	2506      	movs	r5, #6
  400828:	2400      	movs	r4, #0

	while (upper >= lower) {
  40082a:	e007      	b.n	40083c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  40082c:	4a0d      	ldr	r2, [pc, #52]	; (400864 <process_ext_irq+0x40>)
  40082e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400832:	b1b3      	cbz	r3, 400862 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400834:	4798      	blx	r3
  400836:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400838:	3a01      	subs	r2, #1
  40083a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40083c:	42ac      	cmp	r4, r5
  40083e:	d810      	bhi.n	400862 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400840:	192b      	adds	r3, r5, r4
  400842:	105b      	asrs	r3, r3, #1
  400844:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400846:	2a05      	cmp	r2, #5
  400848:	d80b      	bhi.n	400862 <process_ext_irq+0x3e>
  40084a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40084c:	4905      	ldr	r1, [pc, #20]	; (400864 <process_ext_irq+0x40>)
  40084e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400852:	6849      	ldr	r1, [r1, #4]
  400854:	4281      	cmp	r1, r0
  400856:	d0e9      	beq.n	40082c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400858:	4281      	cmp	r1, r0
  40085a:	d2ed      	bcs.n	400838 <process_ext_irq+0x14>
			lower = middle + 1;
  40085c:	3201      	adds	r2, #1
  40085e:	b2d4      	uxtb	r4, r2
  400860:	e7ec      	b.n	40083c <process_ext_irq+0x18>
  400862:	bd38      	pop	{r3, r4, r5, pc}
  400864:	204008ac 	.word	0x204008ac

00400868 <ext_irq_init>:
{
  400868:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40086a:	2300      	movs	r3, #0
  40086c:	e00a      	b.n	400884 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40086e:	4a08      	ldr	r2, [pc, #32]	; (400890 <ext_irq_init+0x28>)
  400870:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400874:	f04f 30ff 	mov.w	r0, #4294967295
  400878:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40087a:	2100      	movs	r1, #0
  40087c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400880:	3301      	adds	r3, #1
  400882:	b29b      	uxth	r3, r3
  400884:	2b05      	cmp	r3, #5
  400886:	d9f2      	bls.n	40086e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400888:	4802      	ldr	r0, [pc, #8]	; (400894 <ext_irq_init+0x2c>)
  40088a:	4b03      	ldr	r3, [pc, #12]	; (400898 <ext_irq_init+0x30>)
  40088c:	4798      	blx	r3
}
  40088e:	bd08      	pop	{r3, pc}
  400890:	204008ac 	.word	0x204008ac
  400894:	00400825 	.word	0x00400825
  400898:	00400fcd 	.word	0x00400fcd

0040089c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  40089c:	b510      	push	{r4, lr}
  40089e:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  4008a0:	8903      	ldrh	r3, [r0, #8]
  4008a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  4008a6:	4614      	mov	r4, r2
  4008a8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  4008aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4008ae:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  4008b2:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4008b4:	a901      	add	r1, sp, #4
  4008b6:	3814      	subs	r0, #20
  4008b8:	4b03      	ldr	r3, [pc, #12]	; (4008c8 <i2c_m_sync_write+0x2c>)
  4008ba:	4798      	blx	r3

	if (ret) {
  4008bc:	b910      	cbnz	r0, 4008c4 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  4008be:	4620      	mov	r0, r4
  4008c0:	b004      	add	sp, #16
  4008c2:	bd10      	pop	{r4, pc}
		return ret;
  4008c4:	4604      	mov	r4, r0
  4008c6:	e7fa      	b.n	4008be <i2c_m_sync_write+0x22>
  4008c8:	00401649 	.word	0x00401649

004008cc <i2c_m_sync_read>:
{
  4008cc:	b510      	push	{r4, lr}
  4008ce:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  4008d0:	8903      	ldrh	r3, [r0, #8]
  4008d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  4008d6:	4614      	mov	r4, r2
  4008d8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  4008da:	f248 0301 	movw	r3, #32769	; 0x8001
  4008de:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  4008e2:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4008e4:	a901      	add	r1, sp, #4
  4008e6:	3814      	subs	r0, #20
  4008e8:	4b03      	ldr	r3, [pc, #12]	; (4008f8 <i2c_m_sync_read+0x2c>)
  4008ea:	4798      	blx	r3
	if (ret) {
  4008ec:	b910      	cbnz	r0, 4008f4 <i2c_m_sync_read+0x28>
}
  4008ee:	4620      	mov	r0, r4
  4008f0:	b004      	add	sp, #16
  4008f2:	bd10      	pop	{r4, pc}
		return ret;
  4008f4:	4604      	mov	r4, r0
  4008f6:	e7fa      	b.n	4008ee <i2c_m_sync_read+0x22>
  4008f8:	00401649 	.word	0x00401649

004008fc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4008fc:	b538      	push	{r3, r4, r5, lr}
  4008fe:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400900:	4604      	mov	r4, r0
  400902:	225e      	movs	r2, #94	; 0x5e
  400904:	4908      	ldr	r1, [pc, #32]	; (400928 <i2c_m_sync_init+0x2c>)
  400906:	3000      	adds	r0, #0
  400908:	bf18      	it	ne
  40090a:	2001      	movne	r0, #1
  40090c:	4b07      	ldr	r3, [pc, #28]	; (40092c <i2c_m_sync_init+0x30>)
  40090e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400910:	4629      	mov	r1, r5
  400912:	4620      	mov	r0, r4
  400914:	4b06      	ldr	r3, [pc, #24]	; (400930 <i2c_m_sync_init+0x34>)
  400916:	4798      	blx	r3
	if (init_status) {
  400918:	4603      	mov	r3, r0
  40091a:	b918      	cbnz	r0, 400924 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  40091c:	4a05      	ldr	r2, [pc, #20]	; (400934 <i2c_m_sync_init+0x38>)
  40091e:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400920:	4a05      	ldr	r2, [pc, #20]	; (400938 <i2c_m_sync_init+0x3c>)
  400922:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400924:	4618      	mov	r0, r3
  400926:	bd38      	pop	{r3, r4, r5, pc}
  400928:	004021bc 	.word	0x004021bc
  40092c:	00400bb1 	.word	0x00400bb1
  400930:	00401601 	.word	0x00401601
  400934:	004008cd 	.word	0x004008cd
  400938:	0040089d 	.word	0x0040089d

0040093c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  40093c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40093e:	6943      	ldr	r3, [r0, #20]
  400940:	b103      	cbz	r3, 400944 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400942:	4798      	blx	r3
  400944:	bd08      	pop	{r3, pc}

00400946 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400946:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400948:	6983      	ldr	r3, [r0, #24]
  40094a:	b103      	cbz	r3, 40094e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  40094c:	4798      	blx	r3
  40094e:	bd08      	pop	{r3, pc}

00400950 <pwm_init>:
{
  400950:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400952:	4604      	mov	r4, r0
  400954:	460d      	mov	r5, r1
  400956:	2800      	cmp	r0, #0
  400958:	bf18      	it	ne
  40095a:	2900      	cmpne	r1, #0
  40095c:	bf14      	ite	ne
  40095e:	2001      	movne	r0, #1
  400960:	2000      	moveq	r0, #0
  400962:	2233      	movs	r2, #51	; 0x33
  400964:	4906      	ldr	r1, [pc, #24]	; (400980 <pwm_init+0x30>)
  400966:	4b07      	ldr	r3, [pc, #28]	; (400984 <pwm_init+0x34>)
  400968:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40096a:	4629      	mov	r1, r5
  40096c:	4620      	mov	r0, r4
  40096e:	4b06      	ldr	r3, [pc, #24]	; (400988 <pwm_init+0x38>)
  400970:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400972:	4b06      	ldr	r3, [pc, #24]	; (40098c <pwm_init+0x3c>)
  400974:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400976:	4b06      	ldr	r3, [pc, #24]	; (400990 <pwm_init+0x40>)
  400978:	6063      	str	r3, [r4, #4]
}
  40097a:	2000      	movs	r0, #0
  40097c:	bd38      	pop	{r3, r4, r5, pc}
  40097e:	bf00      	nop
  400980:	004021d8 	.word	0x004021d8
  400984:	00400bb1 	.word	0x00400bb1
  400988:	0040114d 	.word	0x0040114d
  40098c:	0040093d 	.word	0x0040093d
  400990:	00400947 	.word	0x00400947

00400994 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400994:	b538      	push	{r3, r4, r5, lr}
  400996:	460d      	mov	r5, r1
	ASSERT(spi);
  400998:	4604      	mov	r4, r0
  40099a:	2239      	movs	r2, #57	; 0x39
  40099c:	4903      	ldr	r1, [pc, #12]	; (4009ac <spi_m_sync_set_func_ptr+0x18>)
  40099e:	3000      	adds	r0, #0
  4009a0:	bf18      	it	ne
  4009a2:	2001      	movne	r0, #1
  4009a4:	4b02      	ldr	r3, [pc, #8]	; (4009b0 <spi_m_sync_set_func_ptr+0x1c>)
  4009a6:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  4009a8:	6025      	str	r5, [r4, #0]
  4009aa:	bd38      	pop	{r3, r4, r5, pc}
  4009ac:	004021f0 	.word	0x004021f0
  4009b0:	00400bb1 	.word	0x00400bb1

004009b4 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4009b4:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  4009b6:	4604      	mov	r4, r0
  4009b8:	460d      	mov	r5, r1
  4009ba:	2800      	cmp	r0, #0
  4009bc:	bf18      	it	ne
  4009be:	2900      	cmpne	r1, #0
  4009c0:	bf14      	ite	ne
  4009c2:	2001      	movne	r0, #1
  4009c4:	2000      	moveq	r0, #0
  4009c6:	2240      	movs	r2, #64	; 0x40
  4009c8:	4909      	ldr	r1, [pc, #36]	; (4009f0 <spi_m_sync_init+0x3c>)
  4009ca:	4b0a      	ldr	r3, [pc, #40]	; (4009f4 <spi_m_sync_init+0x40>)
  4009cc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4009ce:	4620      	mov	r0, r4
  4009d0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4009d4:	4629      	mov	r1, r5
  4009d6:	4b08      	ldr	r3, [pc, #32]	; (4009f8 <spi_m_sync_init+0x44>)
  4009d8:	4798      	blx	r3

	if (rc < 0) {
  4009da:	2800      	cmp	r0, #0
  4009dc:	db07      	blt.n	4009ee <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  4009de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009e2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4009e4:	4b05      	ldr	r3, [pc, #20]	; (4009fc <spi_m_sync_init+0x48>)
  4009e6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4009e8:	4b05      	ldr	r3, [pc, #20]	; (400a00 <spi_m_sync_init+0x4c>)
  4009ea:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4009ec:	2000      	movs	r0, #0
}
  4009ee:	bd38      	pop	{r3, r4, r5, pc}
  4009f0:	004021f0 	.word	0x004021f0
  4009f4:	00400bb1 	.word	0x00400bb1
  4009f8:	004012a1 	.word	0x004012a1
  4009fc:	00400a81 	.word	0x00400a81
  400a00:	00400a45 	.word	0x00400a45

00400a04 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400a04:	b530      	push	{r4, r5, lr}
  400a06:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400a08:	4605      	mov	r5, r0
  400a0a:	460c      	mov	r4, r1
  400a0c:	2800      	cmp	r0, #0
  400a0e:	bf18      	it	ne
  400a10:	2900      	cmpne	r1, #0
  400a12:	bf14      	ite	ne
  400a14:	2001      	movne	r0, #1
  400a16:	2000      	moveq	r0, #0
  400a18:	22b3      	movs	r2, #179	; 0xb3
  400a1a:	4907      	ldr	r1, [pc, #28]	; (400a38 <spi_m_sync_transfer+0x34>)
  400a1c:	4b07      	ldr	r3, [pc, #28]	; (400a3c <spi_m_sync_transfer+0x38>)
  400a1e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400a20:	6823      	ldr	r3, [r4, #0]
  400a22:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400a24:	6863      	ldr	r3, [r4, #4]
  400a26:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400a28:	68a3      	ldr	r3, [r4, #8]
  400a2a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400a2c:	a901      	add	r1, sp, #4
  400a2e:	1d28      	adds	r0, r5, #4
  400a30:	4b03      	ldr	r3, [pc, #12]	; (400a40 <spi_m_sync_transfer+0x3c>)
  400a32:	4798      	blx	r3
}
  400a34:	b005      	add	sp, #20
  400a36:	bd30      	pop	{r4, r5, pc}
  400a38:	004021f0 	.word	0x004021f0
  400a3c:	00400bb1 	.word	0x00400bb1
  400a40:	00401349 	.word	0x00401349

00400a44 <_spi_m_sync_io_write>:
{
  400a44:	b570      	push	{r4, r5, r6, lr}
  400a46:	b084      	sub	sp, #16
  400a48:	460e      	mov	r6, r1
  400a4a:	4615      	mov	r5, r2
	ASSERT(io);
  400a4c:	4604      	mov	r4, r0
  400a4e:	22a3      	movs	r2, #163	; 0xa3
  400a50:	4908      	ldr	r1, [pc, #32]	; (400a74 <_spi_m_sync_io_write+0x30>)
  400a52:	3000      	adds	r0, #0
  400a54:	bf18      	it	ne
  400a56:	2001      	movne	r0, #1
  400a58:	4b07      	ldr	r3, [pc, #28]	; (400a78 <_spi_m_sync_io_write+0x34>)
  400a5a:	4798      	blx	r3
	xfer.rxbuf = 0;
  400a5c:	2300      	movs	r3, #0
  400a5e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400a60:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400a62:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400a64:	a901      	add	r1, sp, #4
  400a66:	f1a4 000c 	sub.w	r0, r4, #12
  400a6a:	4b04      	ldr	r3, [pc, #16]	; (400a7c <_spi_m_sync_io_write+0x38>)
  400a6c:	4798      	blx	r3
}
  400a6e:	b004      	add	sp, #16
  400a70:	bd70      	pop	{r4, r5, r6, pc}
  400a72:	bf00      	nop
  400a74:	004021f0 	.word	0x004021f0
  400a78:	00400bb1 	.word	0x00400bb1
  400a7c:	00400a05 	.word	0x00400a05

00400a80 <_spi_m_sync_io_read>:
{
  400a80:	b570      	push	{r4, r5, r6, lr}
  400a82:	b084      	sub	sp, #16
  400a84:	460e      	mov	r6, r1
  400a86:	4615      	mov	r5, r2
	ASSERT(io);
  400a88:	4604      	mov	r4, r0
  400a8a:	2287      	movs	r2, #135	; 0x87
  400a8c:	4908      	ldr	r1, [pc, #32]	; (400ab0 <_spi_m_sync_io_read+0x30>)
  400a8e:	3000      	adds	r0, #0
  400a90:	bf18      	it	ne
  400a92:	2001      	movne	r0, #1
  400a94:	4b07      	ldr	r3, [pc, #28]	; (400ab4 <_spi_m_sync_io_read+0x34>)
  400a96:	4798      	blx	r3
	xfer.rxbuf = buf;
  400a98:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400a9a:	2300      	movs	r3, #0
  400a9c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400a9e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400aa0:	a901      	add	r1, sp, #4
  400aa2:	f1a4 000c 	sub.w	r0, r4, #12
  400aa6:	4b04      	ldr	r3, [pc, #16]	; (400ab8 <_spi_m_sync_io_read+0x38>)
  400aa8:	4798      	blx	r3
}
  400aaa:	b004      	add	sp, #16
  400aac:	bd70      	pop	{r4, r5, r6, pc}
  400aae:	bf00      	nop
  400ab0:	004021f0 	.word	0x004021f0
  400ab4:	00400bb1 	.word	0x00400bb1
  400ab8:	00400a05 	.word	0x00400a05

00400abc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400abe:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400ac0:	b117      	cbz	r7, 400ac8 <timer_add_timer_task+0xc>
  400ac2:	463c      	mov	r4, r7
  400ac4:	2600      	movs	r6, #0
  400ac6:	e00b      	b.n	400ae0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400ac8:	4b0e      	ldr	r3, [pc, #56]	; (400b04 <timer_add_timer_task+0x48>)
  400aca:	4798      	blx	r3
		return;
  400acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400ace:	68a5      	ldr	r5, [r4, #8]
  400ad0:	442b      	add	r3, r5
  400ad2:	1a9b      	subs	r3, r3, r2
  400ad4:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400ad6:	688d      	ldr	r5, [r1, #8]
  400ad8:	42ab      	cmp	r3, r5
  400ada:	d209      	bcs.n	400af0 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400adc:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400ade:	6824      	ldr	r4, [r4, #0]
  400ae0:	b134      	cbz	r4, 400af0 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400ae2:	6863      	ldr	r3, [r4, #4]
  400ae4:	4293      	cmp	r3, r2
  400ae6:	d8f2      	bhi.n	400ace <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400ae8:	68a5      	ldr	r5, [r4, #8]
  400aea:	1a9b      	subs	r3, r3, r2
  400aec:	442b      	add	r3, r5
  400aee:	e7f2      	b.n	400ad6 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400af0:	42bc      	cmp	r4, r7
  400af2:	d003      	beq.n	400afc <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400af4:	4630      	mov	r0, r6
  400af6:	4b04      	ldr	r3, [pc, #16]	; (400b08 <timer_add_timer_task+0x4c>)
  400af8:	4798      	blx	r3
  400afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400afc:	4b01      	ldr	r3, [pc, #4]	; (400b04 <timer_add_timer_task+0x48>)
  400afe:	4798      	blx	r3
  400b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b02:	bf00      	nop
  400b04:	00400bcd 	.word	0x00400bcd
  400b08:	00400bf9 	.word	0x00400bf9

00400b0c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b0e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400b10:	6906      	ldr	r6, [r0, #16]
  400b12:	3601      	adds	r6, #1
  400b14:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400b16:	7e03      	ldrb	r3, [r0, #24]
  400b18:	f013 0f01 	tst.w	r3, #1
  400b1c:	d105      	bne.n	400b2a <timer_process_counted+0x1e>
  400b1e:	7e03      	ldrb	r3, [r0, #24]
  400b20:	f013 0f02 	tst.w	r3, #2
  400b24:	d101      	bne.n	400b2a <timer_process_counted+0x1e>
  400b26:	4605      	mov	r5, r0
  400b28:	e009      	b.n	400b3e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400b2a:	7e03      	ldrb	r3, [r0, #24]
  400b2c:	f043 0302 	orr.w	r3, r3, #2
  400b30:	7603      	strb	r3, [r0, #24]
		return;
  400b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b34:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400b36:	68e3      	ldr	r3, [r4, #12]
  400b38:	4620      	mov	r0, r4
  400b3a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400b3c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400b3e:	b19c      	cbz	r4, 400b68 <timer_process_counted+0x5c>
  400b40:	6863      	ldr	r3, [r4, #4]
  400b42:	1af3      	subs	r3, r6, r3
  400b44:	68a2      	ldr	r2, [r4, #8]
  400b46:	4293      	cmp	r3, r2
  400b48:	d30e      	bcc.n	400b68 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400b4a:	f105 0714 	add.w	r7, r5, #20
  400b4e:	4638      	mov	r0, r7
  400b50:	4b06      	ldr	r3, [pc, #24]	; (400b6c <timer_process_counted+0x60>)
  400b52:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400b54:	7c23      	ldrb	r3, [r4, #16]
  400b56:	2b01      	cmp	r3, #1
  400b58:	d1ec      	bne.n	400b34 <timer_process_counted+0x28>
			tmp->time_label = time;
  400b5a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400b5c:	4632      	mov	r2, r6
  400b5e:	4621      	mov	r1, r4
  400b60:	4638      	mov	r0, r7
  400b62:	4b03      	ldr	r3, [pc, #12]	; (400b70 <timer_process_counted+0x64>)
  400b64:	4798      	blx	r3
  400b66:	e7e5      	b.n	400b34 <timer_process_counted+0x28>
  400b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b6a:	bf00      	nop
  400b6c:	00400c01 	.word	0x00400c01
  400b70:	00400abd 	.word	0x00400abd

00400b74 <timer_init>:
{
  400b74:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b76:	4604      	mov	r4, r0
  400b78:	460d      	mov	r5, r1
  400b7a:	2800      	cmp	r0, #0
  400b7c:	bf18      	it	ne
  400b7e:	2900      	cmpne	r1, #0
  400b80:	bf14      	ite	ne
  400b82:	2001      	movne	r0, #1
  400b84:	2000      	moveq	r0, #0
  400b86:	223b      	movs	r2, #59	; 0x3b
  400b88:	4905      	ldr	r1, [pc, #20]	; (400ba0 <timer_init+0x2c>)
  400b8a:	4b06      	ldr	r3, [pc, #24]	; (400ba4 <timer_init+0x30>)
  400b8c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400b8e:	4629      	mov	r1, r5
  400b90:	4620      	mov	r0, r4
  400b92:	4b05      	ldr	r3, [pc, #20]	; (400ba8 <timer_init+0x34>)
  400b94:	4798      	blx	r3
	descr->time                           = 0;
  400b96:	2000      	movs	r0, #0
  400b98:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400b9a:	4b04      	ldr	r3, [pc, #16]	; (400bac <timer_init+0x38>)
  400b9c:	6023      	str	r3, [r4, #0]
}
  400b9e:	bd38      	pop	{r3, r4, r5, pc}
  400ba0:	0040220c 	.word	0x0040220c
  400ba4:	00400bb1 	.word	0x00400bb1
  400ba8:	004014e1 	.word	0x004014e1
  400bac:	00400b0d 	.word	0x00400b0d

00400bb0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400bb0:	b900      	cbnz	r0, 400bb4 <assert+0x4>
		__asm("BKPT #0");
  400bb2:	be00      	bkpt	0x0000
  400bb4:	4770      	bx	lr

00400bb6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400bb6:	6803      	ldr	r3, [r0, #0]
  400bb8:	b11b      	cbz	r3, 400bc2 <is_list_element+0xc>
		if (it == element) {
  400bba:	428b      	cmp	r3, r1
  400bbc:	d003      	beq.n	400bc6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400bbe:	681b      	ldr	r3, [r3, #0]
  400bc0:	e7fa      	b.n	400bb8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
			return true;
  400bc6:	2001      	movs	r0, #1
}
  400bc8:	4770      	bx	lr
	...

00400bcc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400bcc:	b538      	push	{r3, r4, r5, lr}
  400bce:	4604      	mov	r4, r0
  400bd0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400bd2:	4b06      	ldr	r3, [pc, #24]	; (400bec <list_insert_as_head+0x20>)
  400bd4:	4798      	blx	r3
  400bd6:	f080 0001 	eor.w	r0, r0, #1
  400bda:	2239      	movs	r2, #57	; 0x39
  400bdc:	4904      	ldr	r1, [pc, #16]	; (400bf0 <list_insert_as_head+0x24>)
  400bde:	b2c0      	uxtb	r0, r0
  400be0:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <list_insert_as_head+0x28>)
  400be2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400be4:	6823      	ldr	r3, [r4, #0]
  400be6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400be8:	6025      	str	r5, [r4, #0]
  400bea:	bd38      	pop	{r3, r4, r5, pc}
  400bec:	00400bb7 	.word	0x00400bb7
  400bf0:	00402224 	.word	0x00402224
  400bf4:	00400bb1 	.word	0x00400bb1

00400bf8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400bf8:	6803      	ldr	r3, [r0, #0]
  400bfa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400bfc:	6001      	str	r1, [r0, #0]
  400bfe:	4770      	bx	lr

00400c00 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400c00:	6803      	ldr	r3, [r0, #0]
  400c02:	b11b      	cbz	r3, 400c0c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400c04:	681a      	ldr	r2, [r3, #0]
  400c06:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400c08:	4618      	mov	r0, r3
  400c0a:	4770      	bx	lr
	}

	return NULL;
  400c0c:	2000      	movs	r0, #0
}
  400c0e:	4770      	bx	lr

00400c10 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400c10:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400c12:	4a06      	ldr	r2, [pc, #24]	; (400c2c <_sbrk+0x1c>)
  400c14:	6812      	ldr	r2, [r2, #0]
  400c16:	b122      	cbz	r2, 400c22 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400c18:	4a04      	ldr	r2, [pc, #16]	; (400c2c <_sbrk+0x1c>)
  400c1a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400c1c:	4403      	add	r3, r0
  400c1e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400c20:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c22:	4903      	ldr	r1, [pc, #12]	; (400c30 <_sbrk+0x20>)
  400c24:	4a01      	ldr	r2, [pc, #4]	; (400c2c <_sbrk+0x1c>)
  400c26:	6011      	str	r1, [r2, #0]
  400c28:	e7f6      	b.n	400c18 <_sbrk+0x8>
  400c2a:	bf00      	nop
  400c2c:	204008dc 	.word	0x204008dc
  400c30:	20401018 	.word	0x20401018

00400c34 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400c34:	2364      	movs	r3, #100	; 0x64
  400c36:	4a1c      	ldr	r2, [pc, #112]	; (400ca8 <_afec_init+0x74>)
  400c38:	fb03 2301 	mla	r3, r3, r1, r2
  400c3c:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400c3e:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400c40:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400c42:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400c44:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400c46:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400c48:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400c4a:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400c4c:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400c4e:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400c50:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400c52:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400c54:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400c56:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400c58:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400c5a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400c60:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400c66:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400c6c:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400c72:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400c76:	2200      	movs	r2, #0
  400c78:	2a0b      	cmp	r2, #11
  400c7a:	d813      	bhi.n	400ca4 <_afec_init+0x70>
{
  400c7c:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400c7e:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400c80:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400c84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400c88:	4413      	add	r3, r2
  400c8a:	330c      	adds	r3, #12
  400c8c:	4c06      	ldr	r4, [pc, #24]	; (400ca8 <_afec_init+0x74>)
  400c8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400c92:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400c94:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400c96:	3201      	adds	r2, #1
  400c98:	b2d2      	uxtb	r2, r2
  400c9a:	2a0b      	cmp	r2, #11
  400c9c:	d9ef      	bls.n	400c7e <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400c9e:	2000      	movs	r0, #0
  400ca0:	bc10      	pop	{r4}
  400ca2:	4770      	bx	lr
  400ca4:	2000      	movs	r0, #0
  400ca6:	4770      	bx	lr
  400ca8:	00402244 	.word	0x00402244

00400cac <_afec_get_hardware_index>:
{
  400cac:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400cae:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <_afec_get_hardware_index+0x28>)
  400cb0:	4298      	cmp	r0, r3
  400cb2:	d00a      	beq.n	400cca <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400cb4:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400cb8:	4298      	cmp	r0, r3
  400cba:	d008      	beq.n	400cce <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400cbc:	22a3      	movs	r2, #163	; 0xa3
  400cbe:	4906      	ldr	r1, [pc, #24]	; (400cd8 <_afec_get_hardware_index+0x2c>)
  400cc0:	2000      	movs	r0, #0
  400cc2:	4b06      	ldr	r3, [pc, #24]	; (400cdc <_afec_get_hardware_index+0x30>)
  400cc4:	4798      	blx	r3
	return 0;
  400cc6:	2000      	movs	r0, #0
  400cc8:	bd08      	pop	{r3, pc}
		return 0;
  400cca:	2000      	movs	r0, #0
  400ccc:	bd08      	pop	{r3, pc}
		return 1;
  400cce:	2001      	movs	r0, #1
}
  400cd0:	bd08      	pop	{r3, pc}
  400cd2:	bf00      	nop
  400cd4:	4003c000 	.word	0x4003c000
  400cd8:	004022a8 	.word	0x004022a8
  400cdc:	00400bb1 	.word	0x00400bb1

00400ce0 <_afec_get_regs>:
{
  400ce0:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400ce2:	4b08      	ldr	r3, [pc, #32]	; (400d04 <_afec_get_regs+0x24>)
  400ce4:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400ce6:	2300      	movs	r3, #0
  400ce8:	b113      	cbz	r3, 400cf0 <_afec_get_regs+0x10>
	return 0;
  400cea:	2300      	movs	r3, #0
}
  400cec:	4618      	mov	r0, r3
  400cee:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  400cf0:	2264      	movs	r2, #100	; 0x64
  400cf2:	fb02 f203 	mul.w	r2, r2, r3
  400cf6:	4904      	ldr	r1, [pc, #16]	; (400d08 <_afec_get_regs+0x28>)
  400cf8:	5c8a      	ldrb	r2, [r1, r2]
  400cfa:	4290      	cmp	r0, r2
  400cfc:	d0f6      	beq.n	400cec <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400cfe:	3301      	adds	r3, #1
  400d00:	b2db      	uxtb	r3, r3
  400d02:	e7f1      	b.n	400ce8 <_afec_get_regs+0x8>
  400d04:	00400cad 	.word	0x00400cad
  400d08:	00402244 	.word	0x00402244

00400d0c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400d0c:	b538      	push	{r3, r4, r5, lr}
  400d0e:	460c      	mov	r4, r1
	ASSERT(device);
  400d10:	4605      	mov	r5, r0
  400d12:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400d16:	4907      	ldr	r1, [pc, #28]	; (400d34 <_adc_sync_init+0x28>)
  400d18:	3000      	adds	r0, #0
  400d1a:	bf18      	it	ne
  400d1c:	2001      	movne	r0, #1
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <_adc_sync_init+0x2c>)
  400d20:	4798      	blx	r3

	device->hw = hw;
  400d22:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400d24:	4620      	mov	r0, r4
  400d26:	4b05      	ldr	r3, [pc, #20]	; (400d3c <_adc_sync_init+0x30>)
  400d28:	4798      	blx	r3
  400d2a:	4601      	mov	r1, r0
  400d2c:	4620      	mov	r0, r4
  400d2e:	4b04      	ldr	r3, [pc, #16]	; (400d40 <_adc_sync_init+0x34>)
  400d30:	4798      	blx	r3
}
  400d32:	bd38      	pop	{r3, r4, r5, pc}
  400d34:	004022a8 	.word	0x004022a8
  400d38:	00400bb1 	.word	0x00400bb1
  400d3c:	00400ce1 	.word	0x00400ce1
  400d40:	00400c35 	.word	0x00400c35

00400d44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400d44:	b500      	push	{lr}
  400d46:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400d48:	a801      	add	r0, sp, #4
  400d4a:	4b0e      	ldr	r3, [pc, #56]	; (400d84 <_init_chip+0x40>)
  400d4c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400d4e:	4a0e      	ldr	r2, [pc, #56]	; (400d88 <_init_chip+0x44>)
  400d50:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d60:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400d64:	a801      	add	r0, sp, #4
  400d66:	4b09      	ldr	r3, [pc, #36]	; (400d8c <_init_chip+0x48>)
  400d68:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400d6a:	4a09      	ldr	r2, [pc, #36]	; (400d90 <_init_chip+0x4c>)
  400d6c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400d6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400d72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400d76:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400d78:	4b06      	ldr	r3, [pc, #24]	; (400d94 <_init_chip+0x50>)
  400d7a:	4798      	blx	r3
}
  400d7c:	b003      	add	sp, #12
  400d7e:	f85d fb04 	ldr.w	pc, [sp], #4
  400d82:	bf00      	nop
  400d84:	004007f5 	.word	0x004007f5
  400d88:	e000ed00 	.word	0xe000ed00
  400d8c:	00400803 	.word	0x00400803
  400d90:	400e0c00 	.word	0x400e0c00
  400d94:	004010a9 	.word	0x004010a9

00400d98 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400d98:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400d9a:	2500      	movs	r5, #0
  400d9c:	428d      	cmp	r5, r1
  400d9e:	d210      	bcs.n	400dc2 <_ffs+0x2a>
  400da0:	2201      	movs	r2, #1
  400da2:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400da4:	2b1f      	cmp	r3, #31
  400da6:	d80a      	bhi.n	400dbe <_ffs+0x26>
			if (v[i] & bit) {
  400da8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400dac:	4222      	tst	r2, r4
  400dae:	d102      	bne.n	400db6 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400db0:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400db2:	3301      	adds	r3, #1
  400db4:	e7f6      	b.n	400da4 <_ffs+0xc>
				return i * 32 + j;
  400db6:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400dba:	bc30      	pop	{r4, r5}
  400dbc:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400dbe:	3501      	adds	r5, #1
  400dc0:	e7ec      	b.n	400d9c <_ffs+0x4>
	return -1;
  400dc2:	f04f 30ff 	mov.w	r0, #4294967295
  400dc6:	e7f8      	b.n	400dba <_ffs+0x22>

00400dc8 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400dc8:	b510      	push	{r4, lr}
  400dca:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400dcc:	2300      	movs	r3, #0
  400dce:	9301      	str	r3, [sp, #4]
  400dd0:	9302      	str	r3, [sp, #8]
  400dd2:	9303      	str	r3, [sp, #12]
  400dd4:	9304      	str	r3, [sp, #16]
  400dd6:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400dd8:	4b21      	ldr	r3, [pc, #132]	; (400e60 <_ext_irq_handler+0x98>)
  400dda:	6818      	ldr	r0, [r3, #0]
  400ddc:	22f8      	movs	r2, #248	; 0xf8
  400dde:	4921      	ldr	r1, [pc, #132]	; (400e64 <_ext_irq_handler+0x9c>)
  400de0:	3000      	adds	r0, #0
  400de2:	bf18      	it	ne
  400de4:	2001      	movne	r0, #1
  400de6:	4b20      	ldr	r3, [pc, #128]	; (400e68 <_ext_irq_handler+0xa0>)
  400de8:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400dea:	4b20      	ldr	r3, [pc, #128]	; (400e6c <_ext_irq_handler+0xa4>)
  400dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400df0:	4013      	ands	r3, r2
  400df2:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400df4:	491e      	ldr	r1, [pc, #120]	; (400e70 <_ext_irq_handler+0xa8>)
  400df6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400df8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400dfa:	400a      	ands	r2, r1
  400dfc:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  400dfe:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400e00:	e025      	b.n	400e4e <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400e02:	4b17      	ldr	r3, [pc, #92]	; (400e60 <_ext_irq_handler+0x98>)
  400e04:	681b      	ldr	r3, [r3, #0]
  400e06:	4620      	mov	r0, r4
  400e08:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400e0a:	1163      	asrs	r3, r4, #5
  400e0c:	f004 041f 	and.w	r4, r4, #31
  400e10:	2201      	movs	r2, #1
  400e12:	fa02 f404 	lsl.w	r4, r2, r4
  400e16:	aa06      	add	r2, sp, #24
  400e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400e1c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400e20:	ea22 0204 	bic.w	r2, r2, r4
  400e24:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400e28:	2105      	movs	r1, #5
  400e2a:	a801      	add	r0, sp, #4
  400e2c:	4b11      	ldr	r3, [pc, #68]	; (400e74 <_ext_irq_handler+0xac>)
  400e2e:	4798      	blx	r3
  400e30:	4604      	mov	r4, r0
		while (-1 != pos) {
  400e32:	f1b4 3fff 	cmp.w	r4, #4294967295
  400e36:	d1e4      	bne.n	400e02 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400e38:	4a0c      	ldr	r2, [pc, #48]	; (400e6c <_ext_irq_handler+0xa4>)
  400e3a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e3c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400e3e:	400b      	ands	r3, r1
  400e40:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400e42:	490b      	ldr	r1, [pc, #44]	; (400e70 <_ext_irq_handler+0xa8>)
  400e44:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e46:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400e48:	4002      	ands	r2, r0
  400e4a:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  400e4c:	4313      	orrs	r3, r2
	while (flag_total) {
  400e4e:	b12b      	cbz	r3, 400e5c <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400e50:	2105      	movs	r1, #5
  400e52:	a801      	add	r0, sp, #4
  400e54:	4b07      	ldr	r3, [pc, #28]	; (400e74 <_ext_irq_handler+0xac>)
  400e56:	4798      	blx	r3
  400e58:	4604      	mov	r4, r0
		while (-1 != pos) {
  400e5a:	e7ea      	b.n	400e32 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400e5c:	b006      	add	sp, #24
  400e5e:	bd10      	pop	{r4, pc}
  400e60:	204008e0 	.word	0x204008e0
  400e64:	004022fc 	.word	0x004022fc
  400e68:	00400bb1 	.word	0x00400bb1
  400e6c:	400e0e00 	.word	0x400e0e00
  400e70:	400e1000 	.word	0x400e1000
  400e74:	00400d99 	.word	0x00400d99

00400e78 <_pio_get_hardware_index>:
{
  400e78:	b510      	push	{r4, lr}
	ASSERT(hw);
  400e7a:	4604      	mov	r4, r0
  400e7c:	22d2      	movs	r2, #210	; 0xd2
  400e7e:	4905      	ldr	r1, [pc, #20]	; (400e94 <_pio_get_hardware_index+0x1c>)
  400e80:	3000      	adds	r0, #0
  400e82:	bf18      	it	ne
  400e84:	2001      	movne	r0, #1
  400e86:	4b04      	ldr	r3, [pc, #16]	; (400e98 <_pio_get_hardware_index+0x20>)
  400e88:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400e8a:	4804      	ldr	r0, [pc, #16]	; (400e9c <_pio_get_hardware_index+0x24>)
  400e8c:	4420      	add	r0, r4
}
  400e8e:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400e92:	bd10      	pop	{r4, pc}
  400e94:	004022fc 	.word	0x004022fc
  400e98:	00400bb1 	.word	0x00400bb1
  400e9c:	bff1f200 	.word	0xbff1f200

00400ea0 <_pio_get_index>:
{
  400ea0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400ea2:	4604      	mov	r4, r0
  400ea4:	22e0      	movs	r2, #224	; 0xe0
  400ea6:	490d      	ldr	r1, [pc, #52]	; (400edc <_pio_get_index+0x3c>)
  400ea8:	3000      	adds	r0, #0
  400eaa:	bf18      	it	ne
  400eac:	2001      	movne	r0, #1
  400eae:	4b0c      	ldr	r3, [pc, #48]	; (400ee0 <_pio_get_index+0x40>)
  400eb0:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400eb2:	4620      	mov	r0, r4
  400eb4:	4b0b      	ldr	r3, [pc, #44]	; (400ee4 <_pio_get_index+0x44>)
  400eb6:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400eb8:	2300      	movs	r3, #0
  400eba:	2b01      	cmp	r3, #1
  400ebc:	d80b      	bhi.n	400ed6 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400ebe:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400ec2:	008a      	lsls	r2, r1, #2
  400ec4:	4908      	ldr	r1, [pc, #32]	; (400ee8 <_pio_get_index+0x48>)
  400ec6:	5c8a      	ldrb	r2, [r1, r2]
  400ec8:	4290      	cmp	r0, r2
  400eca:	d002      	beq.n	400ed2 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400ecc:	3301      	adds	r3, #1
  400ece:	b2db      	uxtb	r3, r3
  400ed0:	e7f3      	b.n	400eba <_pio_get_index+0x1a>
			return i;
  400ed2:	b258      	sxtb	r0, r3
  400ed4:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400ed6:	f04f 30ff 	mov.w	r0, #4294967295
}
  400eda:	bd10      	pop	{r4, pc}
  400edc:	004022fc 	.word	0x004022fc
  400ee0:	00400bb1 	.word	0x00400bb1
  400ee4:	00400e79 	.word	0x00400e79
  400ee8:	004022c0 	.word	0x004022c0

00400eec <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400eec:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400eee:	4604      	mov	r4, r0
  400ef0:	f240 1259 	movw	r2, #345	; 0x159
  400ef4:	4929      	ldr	r1, [pc, #164]	; (400f9c <_pio_init+0xb0>)
  400ef6:	3000      	adds	r0, #0
  400ef8:	bf18      	it	ne
  400efa:	2001      	movne	r0, #1
  400efc:	4b28      	ldr	r3, [pc, #160]	; (400fa0 <_pio_init+0xb4>)
  400efe:	4798      	blx	r3

	i = _pio_get_index(hw);
  400f00:	4620      	mov	r0, r4
  400f02:	4b28      	ldr	r3, [pc, #160]	; (400fa4 <_pio_init+0xb8>)
  400f04:	4798      	blx	r3
	if (i < 0) {
  400f06:	2800      	cmp	r0, #0
  400f08:	db43      	blt.n	400f92 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400f0a:	4d27      	ldr	r5, [pc, #156]	; (400fa8 <_pio_init+0xbc>)
  400f0c:	00c2      	lsls	r2, r0, #3
  400f0e:	1a11      	subs	r1, r2, r0
  400f10:	008b      	lsls	r3, r1, #2
  400f12:	442b      	add	r3, r5
  400f14:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400f16:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400f1a:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400f1c:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400f20:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400f22:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400f26:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400f28:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400f2c:	1a10      	subs	r0, r2, r0
  400f2e:	0083      	lsls	r3, r0, #2
  400f30:	442b      	add	r3, r5
  400f32:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400f34:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400f38:	4620      	mov	r0, r4
  400f3a:	4b1c      	ldr	r3, [pc, #112]	; (400fac <_pio_init+0xc0>)
  400f3c:	4798      	blx	r3
  400f3e:	4428      	add	r0, r5
  400f40:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400f44:	2b00      	cmp	r3, #0
  400f46:	db0c      	blt.n	400f62 <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f48:	095a      	lsrs	r2, r3, #5
  400f4a:	f003 001f 	and.w	r0, r3, #31
  400f4e:	2101      	movs	r1, #1
  400f50:	4081      	lsls	r1, r0
  400f52:	3220      	adds	r2, #32
  400f54:	4816      	ldr	r0, [pc, #88]	; (400fb0 <_pio_init+0xc4>)
  400f56:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f5e:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400f62:	2b00      	cmp	r3, #0
  400f64:	db08      	blt.n	400f78 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f66:	095a      	lsrs	r2, r3, #5
  400f68:	f003 001f 	and.w	r0, r3, #31
  400f6c:	2101      	movs	r1, #1
  400f6e:	4081      	lsls	r1, r0
  400f70:	3260      	adds	r2, #96	; 0x60
  400f72:	480f      	ldr	r0, [pc, #60]	; (400fb0 <_pio_init+0xc4>)
  400f74:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  400f78:	2b00      	cmp	r3, #0
  400f7a:	db0d      	blt.n	400f98 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f7c:	0959      	lsrs	r1, r3, #5
  400f7e:	f003 031f 	and.w	r3, r3, #31
  400f82:	2201      	movs	r2, #1
  400f84:	fa02 f303 	lsl.w	r3, r2, r3
  400f88:	4a09      	ldr	r2, [pc, #36]	; (400fb0 <_pio_init+0xc4>)
  400f8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  400f8e:	2000      	movs	r0, #0
  400f90:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  400f92:	f06f 0010 	mvn.w	r0, #16
  400f96:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  400f98:	2000      	movs	r0, #0
}
  400f9a:	bd38      	pop	{r3, r4, r5, pc}
  400f9c:	004022fc 	.word	0x004022fc
  400fa0:	00400bb1 	.word	0x00400bb1
  400fa4:	00400ea1 	.word	0x00400ea1
  400fa8:	004022c0 	.word	0x004022c0
  400fac:	00400e79 	.word	0x00400e79
  400fb0:	e000e100 	.word	0xe000e100

00400fb4 <PIOB_Handler>:
{
  400fb4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400fb6:	4b01      	ldr	r3, [pc, #4]	; (400fbc <PIOB_Handler+0x8>)
  400fb8:	4798      	blx	r3
  400fba:	bd08      	pop	{r3, pc}
  400fbc:	00400dc9 	.word	0x00400dc9

00400fc0 <PIOA_Handler>:
{
  400fc0:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400fc2:	4b01      	ldr	r3, [pc, #4]	; (400fc8 <PIOA_Handler+0x8>)
  400fc4:	4798      	blx	r3
  400fc6:	bd08      	pop	{r3, pc}
  400fc8:	00400dc9 	.word	0x00400dc9

00400fcc <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  400fcc:	b538      	push	{r3, r4, r5, lr}
  400fce:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  400fd0:	4804      	ldr	r0, [pc, #16]	; (400fe4 <_ext_irq_init+0x18>)
  400fd2:	4c05      	ldr	r4, [pc, #20]	; (400fe8 <_ext_irq_init+0x1c>)
  400fd4:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  400fd6:	4805      	ldr	r0, [pc, #20]	; (400fec <_ext_irq_init+0x20>)
  400fd8:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  400fda:	4b05      	ldr	r3, [pc, #20]	; (400ff0 <_ext_irq_init+0x24>)
  400fdc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  400fde:	2000      	movs	r0, #0
  400fe0:	bd38      	pop	{r3, r4, r5, pc}
  400fe2:	bf00      	nop
  400fe4:	400e0e00 	.word	0x400e0e00
  400fe8:	00400eed 	.word	0x00400eed
  400fec:	400e1000 	.word	0x400e1000
  400ff0:	204008e0 	.word	0x204008e0

00400ff4 <_pmc_init_sources>:
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  400ff4:	4a14      	ldr	r2, [pc, #80]	; (401048 <_pmc_init_sources+0x54>)
  400ff6:	6a11      	ldr	r1, [r2, #32]
  400ff8:	4b14      	ldr	r3, [pc, #80]	; (40104c <_pmc_init_sources+0x58>)
  400ffa:	430b      	orrs	r3, r1
  400ffc:	6213      	str	r3, [r2, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  400ffe:	4b12      	ldr	r3, [pc, #72]	; (401048 <_pmc_init_sources+0x54>)
  401000:	6e9b      	ldr	r3, [r3, #104]	; 0x68

#if (CONF_CLK_MAINCK_ENABLE == 1)
#if (CONF_OSC12M_ENABLE && (CONF_CLK_GEN_MAINCK_SRC == CLK_SRC_OPTION_OSC12M))
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	hri_pmc_set_CKGR_MOR_reg(PMC, (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN));
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  401002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401006:	d0fa      	beq.n	400ffe <_pmc_init_sources+0xa>
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401008:	490f      	ldr	r1, [pc, #60]	; (401048 <_pmc_init_sources+0x54>)
  40100a:	6a0a      	ldr	r2, [r1, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Change Fast RC oscillator frequency */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCRCF_Msk;
  40100c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCF(CONF_OSC12M_SELECTOR);
  401010:	4b0f      	ldr	r3, [pc, #60]	; (401050 <_pmc_init_sources+0x5c>)
  401012:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401014:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  401016:	4b0c      	ldr	r3, [pc, #48]	; (401048 <_pmc_init_sources+0x54>)
  401018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  40101a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40101e:	d0fa      	beq.n	401016 <_pmc_init_sources+0x22>
	return ((Pmc *)hw)->CKGR_MOR;
  401020:	4b09      	ldr	r3, [pc, #36]	; (401048 <_pmc_init_sources+0x54>)
  401022:	6a1a      	ldr	r2, [r3, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Switch to Fast RC */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCSEL;
  401024:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
	data |= CKGR_MOR_KEY_PASSWD;
  401028:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
	((Pmc *)hw)->CKGR_MOR = data;
  40102c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40102e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401030:	4a08      	ldr	r2, [pc, #32]	; (401054 <_pmc_init_sources+0x60>)
  401032:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401034:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401036:	4a08      	ldr	r2, [pc, #32]	; (401058 <_pmc_init_sources+0x64>)
  401038:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40103a:	4b03      	ldr	r3, [pc, #12]	; (401048 <_pmc_init_sources+0x54>)
  40103c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40103e:	f013 0f02 	tst.w	r3, #2
  401042:	d0fa      	beq.n	40103a <_pmc_init_sources+0x46>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401044:	4770      	bx	lr
  401046:	bf00      	nop
  401048:	400e0600 	.word	0x400e0600
  40104c:	00370008 	.word	0x00370008
  401050:	00370020 	.word	0x00370020
  401054:	f800ffff 	.word	0xf800ffff
  401058:	20183f01 	.word	0x20183f01

0040105c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40105c:	4a11      	ldr	r2, [pc, #68]	; (4010a4 <_pmc_init_master_clock+0x48>)
  40105e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401064:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401066:	4b0f      	ldr	r3, [pc, #60]	; (4010a4 <_pmc_init_master_clock+0x48>)
  401068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40106a:	f013 0f08 	tst.w	r3, #8
  40106e:	d0fa      	beq.n	401066 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401070:	4a0c      	ldr	r2, [pc, #48]	; (4010a4 <_pmc_init_master_clock+0x48>)
  401072:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  40107c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40107e:	4b09      	ldr	r3, [pc, #36]	; (4010a4 <_pmc_init_master_clock+0x48>)
  401080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401082:	f013 0f08 	tst.w	r3, #8
  401086:	d0fa      	beq.n	40107e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401088:	4a06      	ldr	r2, [pc, #24]	; (4010a4 <_pmc_init_master_clock+0x48>)
  40108a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40108c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401090:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401094:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401096:	4b03      	ldr	r3, [pc, #12]	; (4010a4 <_pmc_init_master_clock+0x48>)
  401098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40109a:	f013 0f08 	tst.w	r3, #8
  40109e:	d0fa      	beq.n	401096 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	400e0600 	.word	0x400e0600

004010a8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4010a8:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4010aa:	4b02      	ldr	r3, [pc, #8]	; (4010b4 <_pmc_init+0xc>)
  4010ac:	4798      	blx	r3
	_pmc_init_master_clock();
  4010ae:	4b02      	ldr	r3, [pc, #8]	; (4010b8 <_pmc_init+0x10>)
  4010b0:	4798      	blx	r3
  4010b2:	bd08      	pop	{r3, pc}
  4010b4:	00400ff5 	.word	0x00400ff5
  4010b8:	0040105d 	.word	0x0040105d

004010bc <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4010bc:	2300      	movs	r3, #0
  4010be:	2b01      	cmp	r3, #1
  4010c0:	d80f      	bhi.n	4010e2 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4010c2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4010c6:	008a      	lsls	r2, r1, #2
  4010c8:	4907      	ldr	r1, [pc, #28]	; (4010e8 <_pwm_get_cfg+0x2c>)
  4010ca:	588a      	ldr	r2, [r1, r2]
  4010cc:	4282      	cmp	r2, r0
  4010ce:	d002      	beq.n	4010d6 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4010d0:	3301      	adds	r3, #1
  4010d2:	b2db      	uxtb	r3, r3
  4010d4:	e7f3      	b.n	4010be <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4010d6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4010da:	009a      	lsls	r2, r3, #2
  4010dc:	4608      	mov	r0, r1
  4010de:	4410      	add	r0, r2
  4010e0:	4770      	bx	lr
		}
	}

	return NULL;
  4010e2:	2000      	movs	r0, #0
}
  4010e4:	4770      	bx	lr
  4010e6:	bf00      	nop
  4010e8:	00402318 	.word	0x00402318

004010ec <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4010ec:	4b06      	ldr	r3, [pc, #24]	; (401108 <_pwm_init_irq_param+0x1c>)
  4010ee:	4298      	cmp	r0, r3
  4010f0:	d003      	beq.n	4010fa <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4010f2:	4b06      	ldr	r3, [pc, #24]	; (40110c <_pwm_init_irq_param+0x20>)
  4010f4:	4298      	cmp	r0, r3
  4010f6:	d003      	beq.n	401100 <_pwm_init_irq_param+0x14>
  4010f8:	4770      	bx	lr
		_pwm0_dev = dev;
  4010fa:	4b05      	ldr	r3, [pc, #20]	; (401110 <_pwm_init_irq_param+0x24>)
  4010fc:	6019      	str	r1, [r3, #0]
  4010fe:	e7f8      	b.n	4010f2 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401100:	4b03      	ldr	r3, [pc, #12]	; (401110 <_pwm_init_irq_param+0x24>)
  401102:	6059      	str	r1, [r3, #4]
	}
}
  401104:	e7f8      	b.n	4010f8 <_pwm_init_irq_param+0xc>
  401106:	bf00      	nop
  401108:	40020000 	.word	0x40020000
  40110c:	4005c000 	.word	0x4005c000
  401110:	204008e4 	.word	0x204008e4

00401114 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401114:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401116:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401118:	69db      	ldr	r3, [r3, #28]
  40111a:	b113      	cbz	r3, 401122 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  40111c:	6803      	ldr	r3, [r0, #0]
  40111e:	b103      	cbz	r3, 401122 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401120:	4798      	blx	r3
  401122:	bd08      	pop	{r3, pc}

00401124 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401124:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401126:	4b02      	ldr	r3, [pc, #8]	; (401130 <PWM0_Handler+0xc>)
  401128:	6818      	ldr	r0, [r3, #0]
  40112a:	4b02      	ldr	r3, [pc, #8]	; (401134 <PWM0_Handler+0x10>)
  40112c:	4798      	blx	r3
  40112e:	bd08      	pop	{r3, pc}
  401130:	204008e4 	.word	0x204008e4
  401134:	00401115 	.word	0x00401115

00401138 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401138:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40113a:	4b02      	ldr	r3, [pc, #8]	; (401144 <PWM1_Handler+0xc>)
  40113c:	6858      	ldr	r0, [r3, #4]
  40113e:	4b02      	ldr	r3, [pc, #8]	; (401148 <PWM1_Handler+0x10>)
  401140:	4798      	blx	r3
  401142:	bd08      	pop	{r3, pc}
  401144:	204008e4 	.word	0x204008e4
  401148:	00401115 	.word	0x00401115

0040114c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40114e:	4606      	mov	r6, r0
	ASSERT(hw);
  401150:	460c      	mov	r4, r1
  401152:	1c08      	adds	r0, r1, #0
  401154:	bf18      	it	ne
  401156:	2001      	movne	r0, #1
  401158:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  40115c:	4944      	ldr	r1, [pc, #272]	; (401270 <_pwm_init+0x124>)
  40115e:	4b45      	ldr	r3, [pc, #276]	; (401274 <_pwm_init+0x128>)
  401160:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401162:	4620      	mov	r0, r4
  401164:	4b44      	ldr	r3, [pc, #272]	; (401278 <_pwm_init+0x12c>)
  401166:	4798      	blx	r3
  401168:	4605      	mov	r5, r0

	device->hw = hw;
  40116a:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40116c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40116e:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401170:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401172:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401174:	6903      	ldr	r3, [r0, #16]
  401176:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40117a:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40117c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40117e:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401180:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401182:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401184:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401188:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40118a:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  40118c:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  40118e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401192:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401194:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401198:	2300      	movs	r3, #0
  40119a:	e019      	b.n	4011d0 <_pwm_init+0x84>
		ch = cfg->ch + i;
  40119c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40119e:	0118      	lsls	r0, r3, #4
  4011a0:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  4011a4:	5c3a      	ldrb	r2, [r7, r0]
  4011a6:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4011aa:	3210      	adds	r2, #16
  4011ac:	0152      	lsls	r2, r2, #5
  4011ae:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4011b0:	5c3a      	ldrb	r2, [r7, r0]
  4011b2:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4011b6:	3210      	adds	r2, #16
  4011b8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4011bc:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4011be:	5c3a      	ldrb	r2, [r7, r0]
  4011c0:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4011c4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4011c8:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4011cc:	3301      	adds	r3, #1
  4011ce:	b25b      	sxtb	r3, r3
  4011d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4011d2:	4293      	cmp	r3, r2
  4011d4:	d3e2      	bcc.n	40119c <_pwm_init+0x50>
  4011d6:	2300      	movs	r3, #0
  4011d8:	e014      	b.n	401204 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4011da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4011dc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4011e0:	0082      	lsls	r2, r0, #2
  4011e2:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4011e6:	5c88      	ldrb	r0, [r1, r2]
  4011e8:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4011ec:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4011f0:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4011f4:	5c8a      	ldrb	r2, [r1, r2]
  4011f6:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4011fa:	3213      	adds	r2, #19
  4011fc:	0112      	lsls	r2, r2, #4
  4011fe:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401200:	3301      	adds	r3, #1
  401202:	b25b      	sxtb	r3, r3
  401204:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401206:	4293      	cmp	r3, r2
  401208:	d3e7      	bcc.n	4011da <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  40120a:	4631      	mov	r1, r6
  40120c:	4620      	mov	r0, r4
  40120e:	4b1b      	ldr	r3, [pc, #108]	; (40127c <_pwm_init+0x130>)
  401210:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401212:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401216:	2b00      	cmp	r3, #0
  401218:	db0d      	blt.n	401236 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40121a:	095a      	lsrs	r2, r3, #5
  40121c:	f003 031f 	and.w	r3, r3, #31
  401220:	2101      	movs	r1, #1
  401222:	fa01 f303 	lsl.w	r3, r1, r3
  401226:	3220      	adds	r2, #32
  401228:	4915      	ldr	r1, [pc, #84]	; (401280 <_pwm_init+0x134>)
  40122a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40122e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401232:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401236:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40123a:	2b00      	cmp	r3, #0
  40123c:	db09      	blt.n	401252 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40123e:	095a      	lsrs	r2, r3, #5
  401240:	f003 031f 	and.w	r3, r3, #31
  401244:	2101      	movs	r1, #1
  401246:	fa01 f303 	lsl.w	r3, r1, r3
  40124a:	3260      	adds	r2, #96	; 0x60
  40124c:	490c      	ldr	r1, [pc, #48]	; (401280 <_pwm_init+0x134>)
  40124e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401252:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401256:	2b00      	cmp	r3, #0
  401258:	db08      	blt.n	40126c <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40125a:	0959      	lsrs	r1, r3, #5
  40125c:	f003 031f 	and.w	r3, r3, #31
  401260:	2201      	movs	r2, #1
  401262:	fa02 f303 	lsl.w	r3, r2, r3
  401266:	4a06      	ldr	r2, [pc, #24]	; (401280 <_pwm_init+0x134>)
  401268:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  40126c:	2000      	movs	r0, #0
  40126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401270:	004023e0 	.word	0x004023e0
  401274:	00400bb1 	.word	0x00400bb1
  401278:	004010bd 	.word	0x004010bd
  40127c:	004010ed 	.word	0x004010ed
  401280:	e000e100 	.word	0xe000e100

00401284 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401284:	2000      	movs	r0, #0
  401286:	4770      	bx	lr

00401288 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  401288:	4b04      	ldr	r3, [pc, #16]	; (40129c <_spi_get_hardware_index+0x14>)
  40128a:	4403      	add	r3, r0
  40128c:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  401290:	2b05      	cmp	r3, #5
  401292:	d001      	beq.n	401298 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401294:	2000      	movs	r0, #0
	}
}
  401296:	4770      	bx	lr
		return 1;
  401298:	2001      	movs	r0, #1
  40129a:	4770      	bx	lr
  40129c:	bfff8000 	.word	0xbfff8000

004012a0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  4012a0:	b570      	push	{r4, r5, r6, lr}
  4012a2:	4606      	mov	r6, r0
  4012a4:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4012a6:	4608      	mov	r0, r1
  4012a8:	4b20      	ldr	r3, [pc, #128]	; (40132c <_spi_m_sync_init+0x8c>)
  4012aa:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4012ac:	2300      	movs	r3, #0
  4012ae:	b33b      	cbz	r3, 401300 <_spi_m_sync_init+0x60>
	return NULL;
  4012b0:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  4012b2:	f240 122f 	movw	r2, #303	; 0x12f
  4012b6:	491e      	ldr	r1, [pc, #120]	; (401330 <_spi_m_sync_init+0x90>)
  4012b8:	2e00      	cmp	r6, #0
  4012ba:	bf18      	it	ne
  4012bc:	2c00      	cmpne	r4, #0
  4012be:	bf14      	ite	ne
  4012c0:	2001      	movne	r0, #1
  4012c2:	2000      	moveq	r0, #0
  4012c4:	4b1b      	ldr	r3, [pc, #108]	; (401334 <_spi_m_sync_init+0x94>)
  4012c6:	4798      	blx	r3

	if (regs == NULL) {
  4012c8:	b355      	cbz	r5, 401320 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4012ca:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4012cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012d0:	d129      	bne.n	401326 <_spi_m_sync_init+0x86>
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4012d2:	2380      	movs	r3, #128	; 0x80
  4012d4:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4012d6:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4012d8:	686a      	ldr	r2, [r5, #4]
  4012da:	4b17      	ldr	r3, [pc, #92]	; (401338 <_spi_m_sync_init+0x98>)
  4012dc:	4013      	ands	r3, r2
  4012de:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4012e0:	68ab      	ldr	r3, [r5, #8]
  4012e2:	4a16      	ldr	r2, [pc, #88]	; (40133c <_spi_m_sync_init+0x9c>)
  4012e4:	401a      	ands	r2, r3
  4012e6:	4b16      	ldr	r3, [pc, #88]	; (401340 <_spi_m_sync_init+0xa0>)
  4012e8:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  4012ea:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4012ec:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4012ee:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  4012f0:	8a2b      	ldrh	r3, [r5, #16]
  4012f2:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4012f4:	68eb      	ldr	r3, [r5, #12]
  4012f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4012fa:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4012fc:	2000      	movs	r0, #0
  4012fe:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401300:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401304:	008a      	lsls	r2, r1, #2
  401306:	490f      	ldr	r1, [pc, #60]	; (401344 <_spi_m_sync_init+0xa4>)
  401308:	5c8a      	ldrb	r2, [r1, r2]
  40130a:	4290      	cmp	r0, r2
  40130c:	d002      	beq.n	401314 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  40130e:	3301      	adds	r3, #1
  401310:	b2db      	uxtb	r3, r3
  401312:	e7cc      	b.n	4012ae <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401314:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401318:	00ab      	lsls	r3, r5, #2
  40131a:	460d      	mov	r5, r1
  40131c:	441d      	add	r5, r3
  40131e:	e7c8      	b.n	4012b2 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401320:	f06f 000c 	mvn.w	r0, #12
  401324:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  401326:	f06f 0010 	mvn.w	r0, #16
}
  40132a:	bd70      	pop	{r4, r5, r6, pc}
  40132c:	00401289 	.word	0x00401289
  401330:	0040240c 	.word	0x0040240c
  401334:	00400bb1 	.word	0x00400bb1
  401338:	feffff7c 	.word	0xfeffff7c
  40133c:	fff1ff6f 	.word	0xfff1ff6f
  401340:	000e0010 	.word	0x000e0010
  401344:	004023f8 	.word	0x004023f8

00401348 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40134c:	b086      	sub	sp, #24
  40134e:	4607      	mov	r7, r0
  401350:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401352:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401354:	680b      	ldr	r3, [r1, #0]
  401356:	9301      	str	r3, [sp, #4]
  401358:	684b      	ldr	r3, [r1, #4]
  40135a:	9302      	str	r3, [sp, #8]
  40135c:	2300      	movs	r3, #0
  40135e:	9303      	str	r3, [sp, #12]
  401360:	9304      	str	r3, [sp, #16]
  401362:	7903      	ldrb	r3, [r0, #4]
  401364:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401368:	1c26      	adds	r6, r4, #0
  40136a:	bf18      	it	ne
  40136c:	2601      	movne	r6, #1
  40136e:	f44f 720b 	mov.w	r2, #556	; 0x22c
  401372:	4933      	ldr	r1, [pc, #204]	; (401440 <_spi_m_sync_trans+0xf8>)
  401374:	2800      	cmp	r0, #0
  401376:	bf0c      	ite	eq
  401378:	2000      	moveq	r0, #0
  40137a:	f006 0001 	andne.w	r0, r6, #1
  40137e:	4b31      	ldr	r3, [pc, #196]	; (401444 <_spi_m_sync_trans+0xfc>)
  401380:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401382:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401384:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401388:	d122      	bne.n	4013d0 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  40138a:	f06f 0013 	mvn.w	r0, #19
  40138e:	e053      	b.n	401438 <_spi_m_sync_trans+0xf0>
		return false;
  401390:	2300      	movs	r3, #0
  401392:	e035      	b.n	401400 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401394:	7850      	ldrb	r0, [r2, #1]
  401396:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  40139a:	3202      	adds	r2, #2
  40139c:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  40139e:	3301      	adds	r3, #1
  4013a0:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4013a2:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  4013a4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  4013a8:	f240 221d 	movw	r2, #541	; 0x21d
  4013ac:	4924      	ldr	r1, [pc, #144]	; (401440 <_spi_m_sync_trans+0xf8>)
  4013ae:	4630      	mov	r0, r6
  4013b0:	4b24      	ldr	r3, [pc, #144]	; (401444 <_spi_m_sync_trans+0xfc>)
  4013b2:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  4013b4:	f018 0f08 	tst.w	r8, #8
  4013b8:	d038      	beq.n	40142c <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  4013ba:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  4013be:	2800      	cmp	r0, #0
  4013c0:	db36      	blt.n	401430 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4013c2:	9803      	ldr	r0, [sp, #12]
  4013c4:	68ab      	ldr	r3, [r5, #8]
  4013c6:	4298      	cmp	r0, r3
  4013c8:	d302      	bcc.n	4013d0 <_spi_m_sync_trans+0x88>
  4013ca:	9a04      	ldr	r2, [sp, #16]
  4013cc:	4293      	cmp	r3, r2
  4013ce:	d92f      	bls.n	401430 <_spi_m_sync_trans+0xe8>
  4013d0:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  4013d2:	f013 0f01 	tst.w	r3, #1
  4013d6:	d0db      	beq.n	401390 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4013d8:	68a3      	ldr	r3, [r4, #8]
  4013da:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  4013dc:	9a02      	ldr	r2, [sp, #8]
  4013de:	b15a      	cbz	r2, 4013f8 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  4013e0:	1c51      	adds	r1, r2, #1
  4013e2:	9102      	str	r1, [sp, #8]
  4013e4:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  4013e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
  4013ea:	2a01      	cmp	r2, #1
  4013ec:	d904      	bls.n	4013f8 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  4013ee:	460a      	mov	r2, r1
  4013f0:	3101      	adds	r1, #1
  4013f2:	9102      	str	r1, [sp, #8]
  4013f4:	0a1b      	lsrs	r3, r3, #8
  4013f6:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  4013f8:	9b04      	ldr	r3, [sp, #16]
  4013fa:	3301      	adds	r3, #1
  4013fc:	9304      	str	r3, [sp, #16]
	return true;
  4013fe:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401400:	2b00      	cmp	r3, #0
  401402:	d1cf      	bne.n	4013a4 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401404:	9b03      	ldr	r3, [sp, #12]
  401406:	9a04      	ldr	r2, [sp, #16]
  401408:	429a      	cmp	r2, r3
  40140a:	d3cb      	bcc.n	4013a4 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  40140c:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  40140e:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401410:	f012 0f02 	tst.w	r2, #2
  401414:	d0c6      	beq.n	4013a4 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401416:	9a01      	ldr	r2, [sp, #4]
  401418:	2a00      	cmp	r2, #0
  40141a:	d0c0      	beq.n	40139e <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  40141c:	1c51      	adds	r1, r2, #1
  40141e:	9101      	str	r1, [sp, #4]
  401420:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401422:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401426:	2801      	cmp	r0, #1
  401428:	d8b4      	bhi.n	401394 <_spi_m_sync_trans+0x4c>
  40142a:	e7b8      	b.n	40139e <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  40142c:	2000      	movs	r0, #0
  40142e:	e7c6      	b.n	4013be <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401430:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401432:	f413 7f00 	tst.w	r3, #512	; 0x200
  401436:	d0fb      	beq.n	401430 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401438:	b006      	add	sp, #24
  40143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40143e:	bf00      	nop
  401440:	0040240c 	.word	0x0040240c
  401444:	00400bb1 	.word	0x00400bb1

00401448 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401448:	2000      	movs	r0, #0
  40144a:	4770      	bx	lr

0040144c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40144c:	4b03      	ldr	r3, [pc, #12]	; (40145c <_system_time_init+0x10>)
  40144e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401452:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401454:	2205      	movs	r2, #5
  401456:	601a      	str	r2, [r3, #0]
  401458:	4770      	bx	lr
  40145a:	bf00      	nop
  40145c:	e000e010 	.word	0xe000e010

00401460 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401460:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401462:	4b01      	ldr	r3, [pc, #4]	; (401468 <_delay_init+0x8>)
  401464:	4798      	blx	r3
  401466:	bd08      	pop	{r3, pc}
  401468:	0040144d 	.word	0x0040144d

0040146c <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40146c:	2300      	movs	r3, #0
  40146e:	2b01      	cmp	r3, #1
  401470:	d814      	bhi.n	40149c <get_cfg+0x30>
{
  401472:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401474:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401478:	008a      	lsls	r2, r1, #2
  40147a:	4909      	ldr	r1, [pc, #36]	; (4014a0 <get_cfg+0x34>)
  40147c:	588a      	ldr	r2, [r1, r2]
  40147e:	4282      	cmp	r2, r0
  401480:	d006      	beq.n	401490 <get_cfg+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401482:	3301      	adds	r3, #1
  401484:	b2db      	uxtb	r3, r3
  401486:	2b01      	cmp	r3, #1
  401488:	d9f4      	bls.n	401474 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40148a:	2000      	movs	r0, #0
}
  40148c:	bc10      	pop	{r4}
  40148e:	4770      	bx	lr
			return &(_tcs[i]);
  401490:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401494:	00a3      	lsls	r3, r4, #2
  401496:	4608      	mov	r0, r1
  401498:	4418      	add	r0, r3
  40149a:	e7f7      	b.n	40148c <get_cfg+0x20>
	return NULL;
  40149c:	2000      	movs	r0, #0
  40149e:	4770      	bx	lr
  4014a0:	20400000 	.word	0x20400000

004014a4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4014a4:	4b06      	ldr	r3, [pc, #24]	; (4014c0 <_tc_init_irq_param+0x1c>)
  4014a6:	4298      	cmp	r0, r3
  4014a8:	d003      	beq.n	4014b2 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
  4014aa:	4b06      	ldr	r3, [pc, #24]	; (4014c4 <_tc_init_irq_param+0x20>)
  4014ac:	4298      	cmp	r0, r3
  4014ae:	d003      	beq.n	4014b8 <_tc_init_irq_param+0x14>
  4014b0:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4014b2:	4b05      	ldr	r3, [pc, #20]	; (4014c8 <_tc_init_irq_param+0x24>)
  4014b4:	6019      	str	r1, [r3, #0]
  4014b6:	e7f8      	b.n	4014aa <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
  4014b8:	4b03      	ldr	r3, [pc, #12]	; (4014c8 <_tc_init_irq_param+0x24>)
  4014ba:	6059      	str	r1, [r3, #4]
	}
}
  4014bc:	e7f8      	b.n	4014b0 <_tc_init_irq_param+0xc>
  4014be:	bf00      	nop
  4014c0:	4000c000 	.word	0x4000c000
  4014c4:	40010000 	.word	0x40010000
  4014c8:	20400904 	.word	0x20400904

004014cc <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4014cc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4014ce:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4014d0:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4014d2:	f013 0f10 	tst.w	r3, #16
  4014d6:	d100      	bne.n	4014da <tc_interrupt_handler+0xe>
  4014d8:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4014da:	6803      	ldr	r3, [r0, #0]
  4014dc:	4798      	blx	r3
	}
}
  4014de:	e7fb      	b.n	4014d8 <tc_interrupt_handler+0xc>

004014e0 <_timer_init>:
{
  4014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014e2:	4607      	mov	r7, r0
  4014e4:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  4014e6:	4608      	mov	r0, r1
  4014e8:	4b27      	ldr	r3, [pc, #156]	; (401588 <_timer_init+0xa8>)
  4014ea:	4798      	blx	r3
  4014ec:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  4014ee:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  4014f0:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  4014f2:	2296      	movs	r2, #150	; 0x96
  4014f4:	4925      	ldr	r1, [pc, #148]	; (40158c <_timer_init+0xac>)
  4014f6:	2001      	movs	r0, #1
  4014f8:	4b25      	ldr	r3, [pc, #148]	; (401590 <_timer_init+0xb0>)
  4014fa:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  4014fc:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401500:	d001      	beq.n	401506 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401502:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401506:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  401508:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40150a:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  40150c:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40150e:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401510:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401512:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  401514:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401516:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401518:	2310      	movs	r3, #16
  40151a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  40151c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40151e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  401522:	4639      	mov	r1, r7
  401524:	4620      	mov	r0, r4
  401526:	4b1b      	ldr	r3, [pc, #108]	; (401594 <_timer_init+0xb4>)
  401528:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  40152a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40152e:	2b00      	cmp	r3, #0
  401530:	db0d      	blt.n	40154e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401532:	095a      	lsrs	r2, r3, #5
  401534:	f003 031f 	and.w	r3, r3, #31
  401538:	2101      	movs	r1, #1
  40153a:	fa01 f303 	lsl.w	r3, r1, r3
  40153e:	3220      	adds	r2, #32
  401540:	4915      	ldr	r1, [pc, #84]	; (401598 <_timer_init+0xb8>)
  401542:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40154a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40154e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401552:	2b00      	cmp	r3, #0
  401554:	db09      	blt.n	40156a <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401556:	095a      	lsrs	r2, r3, #5
  401558:	f003 031f 	and.w	r3, r3, #31
  40155c:	2101      	movs	r1, #1
  40155e:	fa01 f303 	lsl.w	r3, r1, r3
  401562:	3260      	adds	r2, #96	; 0x60
  401564:	490c      	ldr	r1, [pc, #48]	; (401598 <_timer_init+0xb8>)
  401566:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40156a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40156e:	2b00      	cmp	r3, #0
  401570:	db08      	blt.n	401584 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401572:	0959      	lsrs	r1, r3, #5
  401574:	f003 031f 	and.w	r3, r3, #31
  401578:	2201      	movs	r2, #1
  40157a:	fa02 f303 	lsl.w	r3, r2, r3
  40157e:	4a06      	ldr	r2, [pc, #24]	; (401598 <_timer_init+0xb8>)
  401580:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401584:	2000      	movs	r0, #0
  401586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401588:	0040146d 	.word	0x0040146d
  40158c:	00402424 	.word	0x00402424
  401590:	00400bb1 	.word	0x00400bb1
  401594:	004014a5 	.word	0x004014a5
  401598:	e000e100 	.word	0xe000e100

0040159c <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40159c:	2000      	movs	r0, #0
  40159e:	4770      	bx	lr

004015a0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4015a0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4015a2:	4b02      	ldr	r3, [pc, #8]	; (4015ac <TC0_Handler+0xc>)
  4015a4:	6818      	ldr	r0, [r3, #0]
  4015a6:	4b02      	ldr	r3, [pc, #8]	; (4015b0 <TC0_Handler+0x10>)
  4015a8:	4798      	blx	r3
  4015aa:	bd08      	pop	{r3, pc}
  4015ac:	20400904 	.word	0x20400904
  4015b0:	004014cd 	.word	0x004014cd

004015b4 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
  4015b4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
  4015b6:	4b02      	ldr	r3, [pc, #8]	; (4015c0 <TC3_Handler+0xc>)
  4015b8:	6858      	ldr	r0, [r3, #4]
  4015ba:	4b02      	ldr	r3, [pc, #8]	; (4015c4 <TC3_Handler+0x10>)
  4015bc:	4798      	blx	r3
  4015be:	bd08      	pop	{r3, pc}
  4015c0:	20400904 	.word	0x20400904
  4015c4:	004014cd 	.word	0x004014cd

004015c8 <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4015c8:	2300      	movs	r3, #0
  4015ca:	b13b      	cbz	r3, 4015dc <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  4015cc:	2000      	movs	r0, #0
  4015ce:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  4015d0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  4015d4:	00e3      	lsls	r3, r4, #3
  4015d6:	4608      	mov	r0, r1
  4015d8:	4418      	add	r0, r3
  4015da:	e00c      	b.n	4015f6 <_get_i2cm_sync_cfg+0x2e>
{
  4015dc:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  4015de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4015e2:	00ca      	lsls	r2, r1, #3
  4015e4:	4905      	ldr	r1, [pc, #20]	; (4015fc <_get_i2cm_sync_cfg+0x34>)
  4015e6:	588a      	ldr	r2, [r1, r2]
  4015e8:	4282      	cmp	r2, r0
  4015ea:	d0f1      	beq.n	4015d0 <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4015ec:	3301      	adds	r3, #1
  4015ee:	b2db      	uxtb	r3, r3
  4015f0:	2b00      	cmp	r3, #0
  4015f2:	d0f4      	beq.n	4015de <_get_i2cm_sync_cfg+0x16>
	return NULL;
  4015f4:	2000      	movs	r0, #0
}
  4015f6:	bc10      	pop	{r4}
  4015f8:	4770      	bx	lr
  4015fa:	bf00      	nop
  4015fc:	00402438 	.word	0x00402438

00401600 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  401600:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401602:	4604      	mov	r4, r0
  401604:	460d      	mov	r5, r1
  401606:	2800      	cmp	r0, #0
  401608:	bf18      	it	ne
  40160a:	2900      	cmpne	r1, #0
  40160c:	bf14      	ite	ne
  40160e:	2001      	movne	r0, #1
  401610:	2000      	moveq	r0, #0
  401612:	2278      	movs	r2, #120	; 0x78
  401614:	4909      	ldr	r1, [pc, #36]	; (40163c <_i2c_m_sync_init+0x3c>)
  401616:	4b0a      	ldr	r3, [pc, #40]	; (401640 <_i2c_m_sync_init+0x40>)
  401618:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  40161a:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  40161c:	4628      	mov	r0, r5
  40161e:	4b09      	ldr	r3, [pc, #36]	; (401644 <_i2c_m_sync_init+0x44>)
  401620:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  401622:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  401624:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  401626:	6923      	ldr	r3, [r4, #16]
  401628:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  40162a:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  40162c:	6923      	ldr	r3, [r4, #16]
  40162e:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  401630:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  401632:	6923      	ldr	r3, [r4, #16]
  401634:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  401636:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  401638:	2000      	movs	r0, #0
  40163a:	bd38      	pop	{r3, r4, r5, pc}
  40163c:	00402450 	.word	0x00402450
  401640:	00400bb1 	.word	0x00400bb1
  401644:	004015c9 	.word	0x004015c9

00401648 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  401648:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  40164a:	4604      	mov	r4, r0
  40164c:	460d      	mov	r5, r1
  40164e:	2800      	cmp	r0, #0
  401650:	bf18      	it	ne
  401652:	2900      	cmpne	r1, #0
  401654:	bf14      	ite	ne
  401656:	2001      	movne	r0, #1
  401658:	2000      	moveq	r0, #0
  40165a:	22ba      	movs	r2, #186	; 0xba
  40165c:	4952      	ldr	r1, [pc, #328]	; (4017a8 <_i2c_m_sync_transfer+0x160>)
  40165e:	4b53      	ldr	r3, [pc, #332]	; (4017ac <_i2c_m_sync_transfer+0x164>)
  401660:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  401662:	8863      	ldrh	r3, [r4, #2]
  401664:	f413 7f80 	tst.w	r3, #256	; 0x100
  401668:	f040 809a 	bne.w	4017a0 <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  40166c:	886b      	ldrh	r3, [r5, #2]
  40166e:	f013 0f01 	tst.w	r3, #1
  401672:	d118      	bne.n	4016a6 <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401674:	886b      	ldrh	r3, [r5, #2]
  401676:	b29b      	uxth	r3, r3
  401678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40167c:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  40167e:	882b      	ldrh	r3, [r5, #0]
  401680:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401684:	d05f      	beq.n	401746 <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  401686:	6922      	ldr	r2, [r4, #16]
  401688:	0a1b      	lsrs	r3, r3, #8
  40168a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40168e:	041b      	lsls	r3, r3, #16
  401690:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  401698:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  40169a:	6923      	ldr	r3, [r4, #16]
  40169c:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  40169e:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  4016a0:	2000      	movs	r0, #0
  4016a2:	4601      	mov	r1, r0
  4016a4:	e05c      	b.n	401760 <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  4016a6:	886b      	ldrh	r3, [r5, #2]
  4016a8:	b29b      	uxth	r3, r3
  4016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4016ae:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  4016b0:	882b      	ldrh	r3, [r5, #0]
  4016b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4016b6:	d022      	beq.n	4016fe <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  4016b8:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  4016ba:	0a1b      	lsrs	r3, r3, #8
  4016bc:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  4016c0:	041b      	lsls	r3, r3, #16
  4016c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4016c6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  4016ca:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  4016cc:	6923      	ldr	r3, [r4, #16]
  4016ce:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  4016d0:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4016d2:	6923      	ldr	r3, [r4, #16]
  4016d4:	686a      	ldr	r2, [r5, #4]
  4016d6:	2a01      	cmp	r2, #1
  4016d8:	d019      	beq.n	40170e <_i2c_m_sync_transfer+0xc6>
  4016da:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  4016dc:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  4016de:	2100      	movs	r1, #0
  4016e0:	686b      	ldr	r3, [r5, #4]
  4016e2:	4299      	cmp	r1, r3
  4016e4:	d222      	bcs.n	40172c <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  4016e6:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  4016e8:	6a1a      	ldr	r2, [r3, #32]
  4016ea:	f012 0f02 	tst.w	r2, #2
  4016ee:	d110      	bne.n	401712 <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  4016f0:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  4016f2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4016f6:	d0f6      	beq.n	4016e6 <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  4016f8:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  4016fc:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  4016fe:	6922      	ldr	r2, [r4, #16]
  401700:	041b      	lsls	r3, r3, #16
  401702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  40170a:	6053      	str	r3, [r2, #4]
  40170c:	e7e1      	b.n	4016d2 <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  40170e:	2203      	movs	r2, #3
  401710:	e7e4      	b.n	4016dc <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  401712:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  401714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401716:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  401718:	686b      	ldr	r3, [r5, #4]
  40171a:	3b02      	subs	r3, #2
  40171c:	4299      	cmp	r1, r3
  40171e:	d001      	beq.n	401724 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  401720:	3101      	adds	r1, #1
  401722:	e7dd      	b.n	4016e0 <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401724:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401726:	2202      	movs	r2, #2
  401728:	601a      	str	r2, [r3, #0]
  40172a:	e7f9      	b.n	401720 <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  40172c:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  40172e:	6a1b      	ldr	r3, [r3, #32]
  401730:	f013 0f01 	tst.w	r3, #1
  401734:	d0fa      	beq.n	40172c <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401736:	8863      	ldrh	r3, [r4, #2]
  401738:	b29b      	uxth	r3, r3
  40173a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40173e:	b29b      	uxth	r3, r3
  401740:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  401742:	2000      	movs	r0, #0
  401744:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  401746:	6922      	ldr	r2, [r4, #16]
  401748:	041b      	lsls	r3, r3, #16
  40174a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  40174e:	6053      	str	r3, [r2, #4]
  401750:	e7a6      	b.n	4016a0 <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  401752:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  401756:	b978      	cbnz	r0, 401778 <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  401758:	68ab      	ldr	r3, [r5, #8]
  40175a:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  40175c:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  40175e:	3101      	adds	r1, #1
  401760:	686b      	ldr	r3, [r5, #4]
  401762:	4299      	cmp	r1, r3
  401764:	d208      	bcs.n	401778 <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  401766:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  401768:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  40176a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40176e:	d1f0      	bne.n	401752 <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  401770:	f013 0f04 	tst.w	r3, #4
  401774:	d0f7      	beq.n	401766 <_i2c_m_sync_transfer+0x11e>
  401776:	e7ee      	b.n	401756 <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  401778:	886b      	ldrh	r3, [r5, #2]
  40177a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40177e:	d106      	bne.n	40178e <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401780:	8863      	ldrh	r3, [r4, #2]
  401782:	b29b      	uxth	r3, r3
  401784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401788:	b29b      	uxth	r3, r3
  40178a:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  40178c:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  40178e:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401790:	2202      	movs	r2, #2
  401792:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401794:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401796:	6a1b      	ldr	r3, [r3, #32]
  401798:	f013 0f01 	tst.w	r3, #1
  40179c:	d0fa      	beq.n	401794 <_i2c_m_sync_transfer+0x14c>
  40179e:	e7ef      	b.n	401780 <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  4017a0:	f06f 0005 	mvn.w	r0, #5
}
  4017a4:	bd38      	pop	{r3, r4, r5, pc}
  4017a6:	bf00      	nop
  4017a8:	00402450 	.word	0x00402450
  4017ac:	00400bb1 	.word	0x00400bb1

004017b0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
  4017b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
  4017b2:	4604      	mov	r4, r0
  4017b4:	b168      	cbz	r0, 4017d2 <_wdt_init+0x22>
  4017b6:	6803      	ldr	r3, [r0, #0]
  4017b8:	b14b      	cbz	r3, 4017ce <_wdt_init+0x1e>
  4017ba:	2001      	movs	r0, #1
  4017bc:	2233      	movs	r2, #51	; 0x33
  4017be:	4906      	ldr	r1, [pc, #24]	; (4017d8 <_wdt_init+0x28>)
  4017c0:	4b06      	ldr	r3, [pc, #24]	; (4017dc <_wdt_init+0x2c>)
  4017c2:	4798      	blx	r3

	hri_wdt_write_MR_reg(dev->hw, (hri_wdt_mr_reg_t)WDT_CONFIGURATION);
  4017c4:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_wdt_write_MR_reg(const void *const hw, hri_wdt_mr_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR = data;
  4017c6:	4a06      	ldr	r2, [pc, #24]	; (4017e0 <_wdt_init+0x30>)
  4017c8:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
  4017ca:	2000      	movs	r0, #0
  4017cc:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
  4017ce:	2000      	movs	r0, #0
  4017d0:	e7f4      	b.n	4017bc <_wdt_init+0xc>
  4017d2:	2000      	movs	r0, #0
  4017d4:	e7f2      	b.n	4017bc <_wdt_init+0xc>
  4017d6:	bf00      	nop
  4017d8:	0040246c 	.word	0x0040246c
  4017dc:	00400bb1 	.word	0x00400bb1
  4017e0:	3fffafff 	.word	0x3fffafff

004017e4 <main>:
//temp definitions
#define MOTOR_FWD 2480
#define MOTOR_REV 2422

int main(void)
{
  4017e4:	b508      	push	{r3, lr}
	atmel_start_init();
  4017e6:	4b03      	ldr	r3, [pc, #12]	; (4017f4 <main+0x10>)
  4017e8:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4017ea:	2280      	movs	r2, #128	; 0x80
  4017ec:	4b02      	ldr	r3, [pc, #8]	; (4017f8 <main+0x14>)
  4017ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
		
	}
	*/
	
  4017f0:	2000      	movs	r0, #0
  4017f2:	bd08      	pop	{r3, pc}
  4017f4:	004001c5 	.word	0x004001c5
  4017f8:	400e1400 	.word	0x400e1400

004017fc <__libc_init_array>:
  4017fc:	b570      	push	{r4, r5, r6, lr}
  4017fe:	4e0f      	ldr	r6, [pc, #60]	; (40183c <__libc_init_array+0x40>)
  401800:	4d0f      	ldr	r5, [pc, #60]	; (401840 <__libc_init_array+0x44>)
  401802:	1b76      	subs	r6, r6, r5
  401804:	10b6      	asrs	r6, r6, #2
  401806:	bf18      	it	ne
  401808:	2400      	movne	r4, #0
  40180a:	d005      	beq.n	401818 <__libc_init_array+0x1c>
  40180c:	3401      	adds	r4, #1
  40180e:	f855 3b04 	ldr.w	r3, [r5], #4
  401812:	4798      	blx	r3
  401814:	42a6      	cmp	r6, r4
  401816:	d1f9      	bne.n	40180c <__libc_init_array+0x10>
  401818:	4e0a      	ldr	r6, [pc, #40]	; (401844 <__libc_init_array+0x48>)
  40181a:	4d0b      	ldr	r5, [pc, #44]	; (401848 <__libc_init_array+0x4c>)
  40181c:	1b76      	subs	r6, r6, r5
  40181e:	f000 fe33 	bl	402488 <_init>
  401822:	10b6      	asrs	r6, r6, #2
  401824:	bf18      	it	ne
  401826:	2400      	movne	r4, #0
  401828:	d006      	beq.n	401838 <__libc_init_array+0x3c>
  40182a:	3401      	adds	r4, #1
  40182c:	f855 3b04 	ldr.w	r3, [r5], #4
  401830:	4798      	blx	r3
  401832:	42a6      	cmp	r6, r4
  401834:	d1f9      	bne.n	40182a <__libc_init_array+0x2e>
  401836:	bd70      	pop	{r4, r5, r6, pc}
  401838:	bd70      	pop	{r4, r5, r6, pc}
  40183a:	bf00      	nop
  40183c:	00402494 	.word	0x00402494
  401840:	00402494 	.word	0x00402494
  401844:	0040249c 	.word	0x0040249c
  401848:	00402494 	.word	0x00402494

0040184c <malloc>:
  40184c:	4b02      	ldr	r3, [pc, #8]	; (401858 <malloc+0xc>)
  40184e:	4601      	mov	r1, r0
  401850:	6818      	ldr	r0, [r3, #0]
  401852:	f000 b803 	b.w	40185c <_malloc_r>
  401856:	bf00      	nop
  401858:	20400048 	.word	0x20400048

0040185c <_malloc_r>:
  40185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401860:	f101 060b 	add.w	r6, r1, #11
  401864:	2e16      	cmp	r6, #22
  401866:	b083      	sub	sp, #12
  401868:	4605      	mov	r5, r0
  40186a:	f240 809e 	bls.w	4019aa <_malloc_r+0x14e>
  40186e:	f036 0607 	bics.w	r6, r6, #7
  401872:	f100 80bd 	bmi.w	4019f0 <_malloc_r+0x194>
  401876:	42b1      	cmp	r1, r6
  401878:	f200 80ba 	bhi.w	4019f0 <_malloc_r+0x194>
  40187c:	f000 fa9e 	bl	401dbc <__malloc_lock>
  401880:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401884:	f0c0 8293 	bcc.w	401dae <_malloc_r+0x552>
  401888:	0a73      	lsrs	r3, r6, #9
  40188a:	f000 80b8 	beq.w	4019fe <_malloc_r+0x1a2>
  40188e:	2b04      	cmp	r3, #4
  401890:	f200 8179 	bhi.w	401b86 <_malloc_r+0x32a>
  401894:	09b3      	lsrs	r3, r6, #6
  401896:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40189a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40189e:	00c3      	lsls	r3, r0, #3
  4018a0:	4fbf      	ldr	r7, [pc, #764]	; (401ba0 <_malloc_r+0x344>)
  4018a2:	443b      	add	r3, r7
  4018a4:	f1a3 0108 	sub.w	r1, r3, #8
  4018a8:	685c      	ldr	r4, [r3, #4]
  4018aa:	42a1      	cmp	r1, r4
  4018ac:	d106      	bne.n	4018bc <_malloc_r+0x60>
  4018ae:	e00c      	b.n	4018ca <_malloc_r+0x6e>
  4018b0:	2a00      	cmp	r2, #0
  4018b2:	f280 80aa 	bge.w	401a0a <_malloc_r+0x1ae>
  4018b6:	68e4      	ldr	r4, [r4, #12]
  4018b8:	42a1      	cmp	r1, r4
  4018ba:	d006      	beq.n	4018ca <_malloc_r+0x6e>
  4018bc:	6863      	ldr	r3, [r4, #4]
  4018be:	f023 0303 	bic.w	r3, r3, #3
  4018c2:	1b9a      	subs	r2, r3, r6
  4018c4:	2a0f      	cmp	r2, #15
  4018c6:	ddf3      	ble.n	4018b0 <_malloc_r+0x54>
  4018c8:	4670      	mov	r0, lr
  4018ca:	693c      	ldr	r4, [r7, #16]
  4018cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401bb4 <_malloc_r+0x358>
  4018d0:	4574      	cmp	r4, lr
  4018d2:	f000 81ab 	beq.w	401c2c <_malloc_r+0x3d0>
  4018d6:	6863      	ldr	r3, [r4, #4]
  4018d8:	f023 0303 	bic.w	r3, r3, #3
  4018dc:	1b9a      	subs	r2, r3, r6
  4018de:	2a0f      	cmp	r2, #15
  4018e0:	f300 8190 	bgt.w	401c04 <_malloc_r+0x3a8>
  4018e4:	2a00      	cmp	r2, #0
  4018e6:	f8c7 e014 	str.w	lr, [r7, #20]
  4018ea:	f8c7 e010 	str.w	lr, [r7, #16]
  4018ee:	f280 809d 	bge.w	401a2c <_malloc_r+0x1d0>
  4018f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4018f6:	f080 8161 	bcs.w	401bbc <_malloc_r+0x360>
  4018fa:	08db      	lsrs	r3, r3, #3
  4018fc:	f103 0c01 	add.w	ip, r3, #1
  401900:	1099      	asrs	r1, r3, #2
  401902:	687a      	ldr	r2, [r7, #4]
  401904:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401908:	f8c4 8008 	str.w	r8, [r4, #8]
  40190c:	2301      	movs	r3, #1
  40190e:	408b      	lsls	r3, r1
  401910:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401914:	4313      	orrs	r3, r2
  401916:	3908      	subs	r1, #8
  401918:	60e1      	str	r1, [r4, #12]
  40191a:	607b      	str	r3, [r7, #4]
  40191c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401920:	f8c8 400c 	str.w	r4, [r8, #12]
  401924:	1082      	asrs	r2, r0, #2
  401926:	2401      	movs	r4, #1
  401928:	4094      	lsls	r4, r2
  40192a:	429c      	cmp	r4, r3
  40192c:	f200 808b 	bhi.w	401a46 <_malloc_r+0x1ea>
  401930:	421c      	tst	r4, r3
  401932:	d106      	bne.n	401942 <_malloc_r+0xe6>
  401934:	f020 0003 	bic.w	r0, r0, #3
  401938:	0064      	lsls	r4, r4, #1
  40193a:	421c      	tst	r4, r3
  40193c:	f100 0004 	add.w	r0, r0, #4
  401940:	d0fa      	beq.n	401938 <_malloc_r+0xdc>
  401942:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401946:	46cc      	mov	ip, r9
  401948:	4680      	mov	r8, r0
  40194a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40194e:	459c      	cmp	ip, r3
  401950:	d107      	bne.n	401962 <_malloc_r+0x106>
  401952:	e16d      	b.n	401c30 <_malloc_r+0x3d4>
  401954:	2a00      	cmp	r2, #0
  401956:	f280 817b 	bge.w	401c50 <_malloc_r+0x3f4>
  40195a:	68db      	ldr	r3, [r3, #12]
  40195c:	459c      	cmp	ip, r3
  40195e:	f000 8167 	beq.w	401c30 <_malloc_r+0x3d4>
  401962:	6859      	ldr	r1, [r3, #4]
  401964:	f021 0103 	bic.w	r1, r1, #3
  401968:	1b8a      	subs	r2, r1, r6
  40196a:	2a0f      	cmp	r2, #15
  40196c:	ddf2      	ble.n	401954 <_malloc_r+0xf8>
  40196e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401972:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401976:	9300      	str	r3, [sp, #0]
  401978:	199c      	adds	r4, r3, r6
  40197a:	4628      	mov	r0, r5
  40197c:	f046 0601 	orr.w	r6, r6, #1
  401980:	f042 0501 	orr.w	r5, r2, #1
  401984:	605e      	str	r6, [r3, #4]
  401986:	f8c8 c00c 	str.w	ip, [r8, #12]
  40198a:	f8cc 8008 	str.w	r8, [ip, #8]
  40198e:	617c      	str	r4, [r7, #20]
  401990:	613c      	str	r4, [r7, #16]
  401992:	f8c4 e00c 	str.w	lr, [r4, #12]
  401996:	f8c4 e008 	str.w	lr, [r4, #8]
  40199a:	6065      	str	r5, [r4, #4]
  40199c:	505a      	str	r2, [r3, r1]
  40199e:	f000 fa13 	bl	401dc8 <__malloc_unlock>
  4019a2:	9b00      	ldr	r3, [sp, #0]
  4019a4:	f103 0408 	add.w	r4, r3, #8
  4019a8:	e01e      	b.n	4019e8 <_malloc_r+0x18c>
  4019aa:	2910      	cmp	r1, #16
  4019ac:	d820      	bhi.n	4019f0 <_malloc_r+0x194>
  4019ae:	f000 fa05 	bl	401dbc <__malloc_lock>
  4019b2:	2610      	movs	r6, #16
  4019b4:	2318      	movs	r3, #24
  4019b6:	2002      	movs	r0, #2
  4019b8:	4f79      	ldr	r7, [pc, #484]	; (401ba0 <_malloc_r+0x344>)
  4019ba:	443b      	add	r3, r7
  4019bc:	f1a3 0208 	sub.w	r2, r3, #8
  4019c0:	685c      	ldr	r4, [r3, #4]
  4019c2:	4294      	cmp	r4, r2
  4019c4:	f000 813d 	beq.w	401c42 <_malloc_r+0x3e6>
  4019c8:	6863      	ldr	r3, [r4, #4]
  4019ca:	68e1      	ldr	r1, [r4, #12]
  4019cc:	68a6      	ldr	r6, [r4, #8]
  4019ce:	f023 0303 	bic.w	r3, r3, #3
  4019d2:	4423      	add	r3, r4
  4019d4:	4628      	mov	r0, r5
  4019d6:	685a      	ldr	r2, [r3, #4]
  4019d8:	60f1      	str	r1, [r6, #12]
  4019da:	f042 0201 	orr.w	r2, r2, #1
  4019de:	608e      	str	r6, [r1, #8]
  4019e0:	605a      	str	r2, [r3, #4]
  4019e2:	f000 f9f1 	bl	401dc8 <__malloc_unlock>
  4019e6:	3408      	adds	r4, #8
  4019e8:	4620      	mov	r0, r4
  4019ea:	b003      	add	sp, #12
  4019ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019f0:	2400      	movs	r4, #0
  4019f2:	230c      	movs	r3, #12
  4019f4:	4620      	mov	r0, r4
  4019f6:	602b      	str	r3, [r5, #0]
  4019f8:	b003      	add	sp, #12
  4019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019fe:	2040      	movs	r0, #64	; 0x40
  401a00:	f44f 7300 	mov.w	r3, #512	; 0x200
  401a04:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401a08:	e74a      	b.n	4018a0 <_malloc_r+0x44>
  401a0a:	4423      	add	r3, r4
  401a0c:	68e1      	ldr	r1, [r4, #12]
  401a0e:	685a      	ldr	r2, [r3, #4]
  401a10:	68a6      	ldr	r6, [r4, #8]
  401a12:	f042 0201 	orr.w	r2, r2, #1
  401a16:	60f1      	str	r1, [r6, #12]
  401a18:	4628      	mov	r0, r5
  401a1a:	608e      	str	r6, [r1, #8]
  401a1c:	605a      	str	r2, [r3, #4]
  401a1e:	f000 f9d3 	bl	401dc8 <__malloc_unlock>
  401a22:	3408      	adds	r4, #8
  401a24:	4620      	mov	r0, r4
  401a26:	b003      	add	sp, #12
  401a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a2c:	4423      	add	r3, r4
  401a2e:	4628      	mov	r0, r5
  401a30:	685a      	ldr	r2, [r3, #4]
  401a32:	f042 0201 	orr.w	r2, r2, #1
  401a36:	605a      	str	r2, [r3, #4]
  401a38:	f000 f9c6 	bl	401dc8 <__malloc_unlock>
  401a3c:	3408      	adds	r4, #8
  401a3e:	4620      	mov	r0, r4
  401a40:	b003      	add	sp, #12
  401a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a46:	68bc      	ldr	r4, [r7, #8]
  401a48:	6863      	ldr	r3, [r4, #4]
  401a4a:	f023 0803 	bic.w	r8, r3, #3
  401a4e:	45b0      	cmp	r8, r6
  401a50:	d304      	bcc.n	401a5c <_malloc_r+0x200>
  401a52:	eba8 0306 	sub.w	r3, r8, r6
  401a56:	2b0f      	cmp	r3, #15
  401a58:	f300 8085 	bgt.w	401b66 <_malloc_r+0x30a>
  401a5c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401bb8 <_malloc_r+0x35c>
  401a60:	4b50      	ldr	r3, [pc, #320]	; (401ba4 <_malloc_r+0x348>)
  401a62:	f8d9 2000 	ldr.w	r2, [r9]
  401a66:	681b      	ldr	r3, [r3, #0]
  401a68:	3201      	adds	r2, #1
  401a6a:	4433      	add	r3, r6
  401a6c:	eb04 0a08 	add.w	sl, r4, r8
  401a70:	f000 8155 	beq.w	401d1e <_malloc_r+0x4c2>
  401a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401a78:	330f      	adds	r3, #15
  401a7a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401a7e:	f02b 0b0f 	bic.w	fp, fp, #15
  401a82:	4659      	mov	r1, fp
  401a84:	4628      	mov	r0, r5
  401a86:	f000 f9a5 	bl	401dd4 <_sbrk_r>
  401a8a:	1c41      	adds	r1, r0, #1
  401a8c:	4602      	mov	r2, r0
  401a8e:	f000 80fc 	beq.w	401c8a <_malloc_r+0x42e>
  401a92:	4582      	cmp	sl, r0
  401a94:	f200 80f7 	bhi.w	401c86 <_malloc_r+0x42a>
  401a98:	4b43      	ldr	r3, [pc, #268]	; (401ba8 <_malloc_r+0x34c>)
  401a9a:	6819      	ldr	r1, [r3, #0]
  401a9c:	4459      	add	r1, fp
  401a9e:	6019      	str	r1, [r3, #0]
  401aa0:	f000 814d 	beq.w	401d3e <_malloc_r+0x4e2>
  401aa4:	f8d9 0000 	ldr.w	r0, [r9]
  401aa8:	3001      	adds	r0, #1
  401aaa:	bf1b      	ittet	ne
  401aac:	eba2 0a0a 	subne.w	sl, r2, sl
  401ab0:	4451      	addne	r1, sl
  401ab2:	f8c9 2000 	streq.w	r2, [r9]
  401ab6:	6019      	strne	r1, [r3, #0]
  401ab8:	f012 0107 	ands.w	r1, r2, #7
  401abc:	f000 8115 	beq.w	401cea <_malloc_r+0x48e>
  401ac0:	f1c1 0008 	rsb	r0, r1, #8
  401ac4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401ac8:	4402      	add	r2, r0
  401aca:	3108      	adds	r1, #8
  401acc:	eb02 090b 	add.w	r9, r2, fp
  401ad0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401ad4:	eba1 0909 	sub.w	r9, r1, r9
  401ad8:	4649      	mov	r1, r9
  401ada:	4628      	mov	r0, r5
  401adc:	9301      	str	r3, [sp, #4]
  401ade:	9200      	str	r2, [sp, #0]
  401ae0:	f000 f978 	bl	401dd4 <_sbrk_r>
  401ae4:	1c43      	adds	r3, r0, #1
  401ae6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401aea:	f000 8143 	beq.w	401d74 <_malloc_r+0x518>
  401aee:	1a80      	subs	r0, r0, r2
  401af0:	4448      	add	r0, r9
  401af2:	f040 0001 	orr.w	r0, r0, #1
  401af6:	6819      	ldr	r1, [r3, #0]
  401af8:	60ba      	str	r2, [r7, #8]
  401afa:	4449      	add	r1, r9
  401afc:	42bc      	cmp	r4, r7
  401afe:	6050      	str	r0, [r2, #4]
  401b00:	6019      	str	r1, [r3, #0]
  401b02:	d017      	beq.n	401b34 <_malloc_r+0x2d8>
  401b04:	f1b8 0f0f 	cmp.w	r8, #15
  401b08:	f240 80fb 	bls.w	401d02 <_malloc_r+0x4a6>
  401b0c:	6860      	ldr	r0, [r4, #4]
  401b0e:	f1a8 020c 	sub.w	r2, r8, #12
  401b12:	f022 0207 	bic.w	r2, r2, #7
  401b16:	eb04 0e02 	add.w	lr, r4, r2
  401b1a:	f000 0001 	and.w	r0, r0, #1
  401b1e:	f04f 0c05 	mov.w	ip, #5
  401b22:	4310      	orrs	r0, r2
  401b24:	2a0f      	cmp	r2, #15
  401b26:	6060      	str	r0, [r4, #4]
  401b28:	f8ce c004 	str.w	ip, [lr, #4]
  401b2c:	f8ce c008 	str.w	ip, [lr, #8]
  401b30:	f200 8117 	bhi.w	401d62 <_malloc_r+0x506>
  401b34:	4b1d      	ldr	r3, [pc, #116]	; (401bac <_malloc_r+0x350>)
  401b36:	68bc      	ldr	r4, [r7, #8]
  401b38:	681a      	ldr	r2, [r3, #0]
  401b3a:	4291      	cmp	r1, r2
  401b3c:	bf88      	it	hi
  401b3e:	6019      	strhi	r1, [r3, #0]
  401b40:	4b1b      	ldr	r3, [pc, #108]	; (401bb0 <_malloc_r+0x354>)
  401b42:	681a      	ldr	r2, [r3, #0]
  401b44:	4291      	cmp	r1, r2
  401b46:	6862      	ldr	r2, [r4, #4]
  401b48:	bf88      	it	hi
  401b4a:	6019      	strhi	r1, [r3, #0]
  401b4c:	f022 0203 	bic.w	r2, r2, #3
  401b50:	4296      	cmp	r6, r2
  401b52:	eba2 0306 	sub.w	r3, r2, r6
  401b56:	d801      	bhi.n	401b5c <_malloc_r+0x300>
  401b58:	2b0f      	cmp	r3, #15
  401b5a:	dc04      	bgt.n	401b66 <_malloc_r+0x30a>
  401b5c:	4628      	mov	r0, r5
  401b5e:	f000 f933 	bl	401dc8 <__malloc_unlock>
  401b62:	2400      	movs	r4, #0
  401b64:	e740      	b.n	4019e8 <_malloc_r+0x18c>
  401b66:	19a2      	adds	r2, r4, r6
  401b68:	f043 0301 	orr.w	r3, r3, #1
  401b6c:	f046 0601 	orr.w	r6, r6, #1
  401b70:	6066      	str	r6, [r4, #4]
  401b72:	4628      	mov	r0, r5
  401b74:	60ba      	str	r2, [r7, #8]
  401b76:	6053      	str	r3, [r2, #4]
  401b78:	f000 f926 	bl	401dc8 <__malloc_unlock>
  401b7c:	3408      	adds	r4, #8
  401b7e:	4620      	mov	r0, r4
  401b80:	b003      	add	sp, #12
  401b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b86:	2b14      	cmp	r3, #20
  401b88:	d971      	bls.n	401c6e <_malloc_r+0x412>
  401b8a:	2b54      	cmp	r3, #84	; 0x54
  401b8c:	f200 80a3 	bhi.w	401cd6 <_malloc_r+0x47a>
  401b90:	0b33      	lsrs	r3, r6, #12
  401b92:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401b96:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401b9a:	00c3      	lsls	r3, r0, #3
  401b9c:	e680      	b.n	4018a0 <_malloc_r+0x44>
  401b9e:	bf00      	nop
  401ba0:	20400478 	.word	0x20400478
  401ba4:	2040093c 	.word	0x2040093c
  401ba8:	2040090c 	.word	0x2040090c
  401bac:	20400934 	.word	0x20400934
  401bb0:	20400938 	.word	0x20400938
  401bb4:	20400480 	.word	0x20400480
  401bb8:	20400880 	.word	0x20400880
  401bbc:	0a5a      	lsrs	r2, r3, #9
  401bbe:	2a04      	cmp	r2, #4
  401bc0:	d95b      	bls.n	401c7a <_malloc_r+0x41e>
  401bc2:	2a14      	cmp	r2, #20
  401bc4:	f200 80ae 	bhi.w	401d24 <_malloc_r+0x4c8>
  401bc8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401bcc:	00c9      	lsls	r1, r1, #3
  401bce:	325b      	adds	r2, #91	; 0x5b
  401bd0:	eb07 0c01 	add.w	ip, r7, r1
  401bd4:	5879      	ldr	r1, [r7, r1]
  401bd6:	f1ac 0c08 	sub.w	ip, ip, #8
  401bda:	458c      	cmp	ip, r1
  401bdc:	f000 8088 	beq.w	401cf0 <_malloc_r+0x494>
  401be0:	684a      	ldr	r2, [r1, #4]
  401be2:	f022 0203 	bic.w	r2, r2, #3
  401be6:	4293      	cmp	r3, r2
  401be8:	d273      	bcs.n	401cd2 <_malloc_r+0x476>
  401bea:	6889      	ldr	r1, [r1, #8]
  401bec:	458c      	cmp	ip, r1
  401bee:	d1f7      	bne.n	401be0 <_malloc_r+0x384>
  401bf0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401bf4:	687b      	ldr	r3, [r7, #4]
  401bf6:	60e2      	str	r2, [r4, #12]
  401bf8:	f8c4 c008 	str.w	ip, [r4, #8]
  401bfc:	6094      	str	r4, [r2, #8]
  401bfe:	f8cc 400c 	str.w	r4, [ip, #12]
  401c02:	e68f      	b.n	401924 <_malloc_r+0xc8>
  401c04:	19a1      	adds	r1, r4, r6
  401c06:	f046 0c01 	orr.w	ip, r6, #1
  401c0a:	f042 0601 	orr.w	r6, r2, #1
  401c0e:	f8c4 c004 	str.w	ip, [r4, #4]
  401c12:	4628      	mov	r0, r5
  401c14:	6179      	str	r1, [r7, #20]
  401c16:	6139      	str	r1, [r7, #16]
  401c18:	f8c1 e00c 	str.w	lr, [r1, #12]
  401c1c:	f8c1 e008 	str.w	lr, [r1, #8]
  401c20:	604e      	str	r6, [r1, #4]
  401c22:	50e2      	str	r2, [r4, r3]
  401c24:	f000 f8d0 	bl	401dc8 <__malloc_unlock>
  401c28:	3408      	adds	r4, #8
  401c2a:	e6dd      	b.n	4019e8 <_malloc_r+0x18c>
  401c2c:	687b      	ldr	r3, [r7, #4]
  401c2e:	e679      	b.n	401924 <_malloc_r+0xc8>
  401c30:	f108 0801 	add.w	r8, r8, #1
  401c34:	f018 0f03 	tst.w	r8, #3
  401c38:	f10c 0c08 	add.w	ip, ip, #8
  401c3c:	f47f ae85 	bne.w	40194a <_malloc_r+0xee>
  401c40:	e02d      	b.n	401c9e <_malloc_r+0x442>
  401c42:	68dc      	ldr	r4, [r3, #12]
  401c44:	42a3      	cmp	r3, r4
  401c46:	bf08      	it	eq
  401c48:	3002      	addeq	r0, #2
  401c4a:	f43f ae3e 	beq.w	4018ca <_malloc_r+0x6e>
  401c4e:	e6bb      	b.n	4019c8 <_malloc_r+0x16c>
  401c50:	4419      	add	r1, r3
  401c52:	461c      	mov	r4, r3
  401c54:	684a      	ldr	r2, [r1, #4]
  401c56:	68db      	ldr	r3, [r3, #12]
  401c58:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401c5c:	f042 0201 	orr.w	r2, r2, #1
  401c60:	604a      	str	r2, [r1, #4]
  401c62:	4628      	mov	r0, r5
  401c64:	60f3      	str	r3, [r6, #12]
  401c66:	609e      	str	r6, [r3, #8]
  401c68:	f000 f8ae 	bl	401dc8 <__malloc_unlock>
  401c6c:	e6bc      	b.n	4019e8 <_malloc_r+0x18c>
  401c6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401c72:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401c76:	00c3      	lsls	r3, r0, #3
  401c78:	e612      	b.n	4018a0 <_malloc_r+0x44>
  401c7a:	099a      	lsrs	r2, r3, #6
  401c7c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401c80:	00c9      	lsls	r1, r1, #3
  401c82:	3238      	adds	r2, #56	; 0x38
  401c84:	e7a4      	b.n	401bd0 <_malloc_r+0x374>
  401c86:	42bc      	cmp	r4, r7
  401c88:	d054      	beq.n	401d34 <_malloc_r+0x4d8>
  401c8a:	68bc      	ldr	r4, [r7, #8]
  401c8c:	6862      	ldr	r2, [r4, #4]
  401c8e:	f022 0203 	bic.w	r2, r2, #3
  401c92:	e75d      	b.n	401b50 <_malloc_r+0x2f4>
  401c94:	f859 3908 	ldr.w	r3, [r9], #-8
  401c98:	4599      	cmp	r9, r3
  401c9a:	f040 8086 	bne.w	401daa <_malloc_r+0x54e>
  401c9e:	f010 0f03 	tst.w	r0, #3
  401ca2:	f100 30ff 	add.w	r0, r0, #4294967295
  401ca6:	d1f5      	bne.n	401c94 <_malloc_r+0x438>
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	ea23 0304 	bic.w	r3, r3, r4
  401cae:	607b      	str	r3, [r7, #4]
  401cb0:	0064      	lsls	r4, r4, #1
  401cb2:	429c      	cmp	r4, r3
  401cb4:	f63f aec7 	bhi.w	401a46 <_malloc_r+0x1ea>
  401cb8:	2c00      	cmp	r4, #0
  401cba:	f43f aec4 	beq.w	401a46 <_malloc_r+0x1ea>
  401cbe:	421c      	tst	r4, r3
  401cc0:	4640      	mov	r0, r8
  401cc2:	f47f ae3e 	bne.w	401942 <_malloc_r+0xe6>
  401cc6:	0064      	lsls	r4, r4, #1
  401cc8:	421c      	tst	r4, r3
  401cca:	f100 0004 	add.w	r0, r0, #4
  401cce:	d0fa      	beq.n	401cc6 <_malloc_r+0x46a>
  401cd0:	e637      	b.n	401942 <_malloc_r+0xe6>
  401cd2:	468c      	mov	ip, r1
  401cd4:	e78c      	b.n	401bf0 <_malloc_r+0x394>
  401cd6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401cda:	d815      	bhi.n	401d08 <_malloc_r+0x4ac>
  401cdc:	0bf3      	lsrs	r3, r6, #15
  401cde:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401ce2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401ce6:	00c3      	lsls	r3, r0, #3
  401ce8:	e5da      	b.n	4018a0 <_malloc_r+0x44>
  401cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401cee:	e6ed      	b.n	401acc <_malloc_r+0x270>
  401cf0:	687b      	ldr	r3, [r7, #4]
  401cf2:	1092      	asrs	r2, r2, #2
  401cf4:	2101      	movs	r1, #1
  401cf6:	fa01 f202 	lsl.w	r2, r1, r2
  401cfa:	4313      	orrs	r3, r2
  401cfc:	607b      	str	r3, [r7, #4]
  401cfe:	4662      	mov	r2, ip
  401d00:	e779      	b.n	401bf6 <_malloc_r+0x39a>
  401d02:	2301      	movs	r3, #1
  401d04:	6053      	str	r3, [r2, #4]
  401d06:	e729      	b.n	401b5c <_malloc_r+0x300>
  401d08:	f240 5254 	movw	r2, #1364	; 0x554
  401d0c:	4293      	cmp	r3, r2
  401d0e:	d822      	bhi.n	401d56 <_malloc_r+0x4fa>
  401d10:	0cb3      	lsrs	r3, r6, #18
  401d12:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401d16:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401d1a:	00c3      	lsls	r3, r0, #3
  401d1c:	e5c0      	b.n	4018a0 <_malloc_r+0x44>
  401d1e:	f103 0b10 	add.w	fp, r3, #16
  401d22:	e6ae      	b.n	401a82 <_malloc_r+0x226>
  401d24:	2a54      	cmp	r2, #84	; 0x54
  401d26:	d829      	bhi.n	401d7c <_malloc_r+0x520>
  401d28:	0b1a      	lsrs	r2, r3, #12
  401d2a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401d2e:	00c9      	lsls	r1, r1, #3
  401d30:	326e      	adds	r2, #110	; 0x6e
  401d32:	e74d      	b.n	401bd0 <_malloc_r+0x374>
  401d34:	4b20      	ldr	r3, [pc, #128]	; (401db8 <_malloc_r+0x55c>)
  401d36:	6819      	ldr	r1, [r3, #0]
  401d38:	4459      	add	r1, fp
  401d3a:	6019      	str	r1, [r3, #0]
  401d3c:	e6b2      	b.n	401aa4 <_malloc_r+0x248>
  401d3e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401d42:	2800      	cmp	r0, #0
  401d44:	f47f aeae 	bne.w	401aa4 <_malloc_r+0x248>
  401d48:	eb08 030b 	add.w	r3, r8, fp
  401d4c:	68ba      	ldr	r2, [r7, #8]
  401d4e:	f043 0301 	orr.w	r3, r3, #1
  401d52:	6053      	str	r3, [r2, #4]
  401d54:	e6ee      	b.n	401b34 <_malloc_r+0x2d8>
  401d56:	207f      	movs	r0, #127	; 0x7f
  401d58:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401d5c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  401d60:	e59e      	b.n	4018a0 <_malloc_r+0x44>
  401d62:	f104 0108 	add.w	r1, r4, #8
  401d66:	4628      	mov	r0, r5
  401d68:	9300      	str	r3, [sp, #0]
  401d6a:	f000 f8bf 	bl	401eec <_free_r>
  401d6e:	9b00      	ldr	r3, [sp, #0]
  401d70:	6819      	ldr	r1, [r3, #0]
  401d72:	e6df      	b.n	401b34 <_malloc_r+0x2d8>
  401d74:	2001      	movs	r0, #1
  401d76:	f04f 0900 	mov.w	r9, #0
  401d7a:	e6bc      	b.n	401af6 <_malloc_r+0x29a>
  401d7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401d80:	d805      	bhi.n	401d8e <_malloc_r+0x532>
  401d82:	0bda      	lsrs	r2, r3, #15
  401d84:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401d88:	00c9      	lsls	r1, r1, #3
  401d8a:	3277      	adds	r2, #119	; 0x77
  401d8c:	e720      	b.n	401bd0 <_malloc_r+0x374>
  401d8e:	f240 5154 	movw	r1, #1364	; 0x554
  401d92:	428a      	cmp	r2, r1
  401d94:	d805      	bhi.n	401da2 <_malloc_r+0x546>
  401d96:	0c9a      	lsrs	r2, r3, #18
  401d98:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401d9c:	00c9      	lsls	r1, r1, #3
  401d9e:	327c      	adds	r2, #124	; 0x7c
  401da0:	e716      	b.n	401bd0 <_malloc_r+0x374>
  401da2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  401da6:	227e      	movs	r2, #126	; 0x7e
  401da8:	e712      	b.n	401bd0 <_malloc_r+0x374>
  401daa:	687b      	ldr	r3, [r7, #4]
  401dac:	e780      	b.n	401cb0 <_malloc_r+0x454>
  401dae:	08f0      	lsrs	r0, r6, #3
  401db0:	f106 0308 	add.w	r3, r6, #8
  401db4:	e600      	b.n	4019b8 <_malloc_r+0x15c>
  401db6:	bf00      	nop
  401db8:	2040090c 	.word	0x2040090c

00401dbc <__malloc_lock>:
  401dbc:	4801      	ldr	r0, [pc, #4]	; (401dc4 <__malloc_lock+0x8>)
  401dbe:	f000 b97b 	b.w	4020b8 <__retarget_lock_acquire_recursive>
  401dc2:	bf00      	nop
  401dc4:	20400a00 	.word	0x20400a00

00401dc8 <__malloc_unlock>:
  401dc8:	4801      	ldr	r0, [pc, #4]	; (401dd0 <__malloc_unlock+0x8>)
  401dca:	f000 b977 	b.w	4020bc <__retarget_lock_release_recursive>
  401dce:	bf00      	nop
  401dd0:	20400a00 	.word	0x20400a00

00401dd4 <_sbrk_r>:
  401dd4:	b538      	push	{r3, r4, r5, lr}
  401dd6:	4c07      	ldr	r4, [pc, #28]	; (401df4 <_sbrk_r+0x20>)
  401dd8:	2300      	movs	r3, #0
  401dda:	4605      	mov	r5, r0
  401ddc:	4608      	mov	r0, r1
  401dde:	6023      	str	r3, [r4, #0]
  401de0:	f7fe ff16 	bl	400c10 <_sbrk>
  401de4:	1c43      	adds	r3, r0, #1
  401de6:	d000      	beq.n	401dea <_sbrk_r+0x16>
  401de8:	bd38      	pop	{r3, r4, r5, pc}
  401dea:	6823      	ldr	r3, [r4, #0]
  401dec:	2b00      	cmp	r3, #0
  401dee:	d0fb      	beq.n	401de8 <_sbrk_r+0x14>
  401df0:	602b      	str	r3, [r5, #0]
  401df2:	bd38      	pop	{r3, r4, r5, pc}
  401df4:	20400a14 	.word	0x20400a14

00401df8 <register_fini>:
  401df8:	4b02      	ldr	r3, [pc, #8]	; (401e04 <register_fini+0xc>)
  401dfa:	b113      	cbz	r3, 401e02 <register_fini+0xa>
  401dfc:	4802      	ldr	r0, [pc, #8]	; (401e08 <register_fini+0x10>)
  401dfe:	f000 b805 	b.w	401e0c <atexit>
  401e02:	4770      	bx	lr
  401e04:	00000000 	.word	0x00000000
  401e08:	00401e19 	.word	0x00401e19

00401e0c <atexit>:
  401e0c:	2300      	movs	r3, #0
  401e0e:	4601      	mov	r1, r0
  401e10:	461a      	mov	r2, r3
  401e12:	4618      	mov	r0, r3
  401e14:	f000 b954 	b.w	4020c0 <__register_exitproc>

00401e18 <__libc_fini_array>:
  401e18:	b538      	push	{r3, r4, r5, lr}
  401e1a:	4c0a      	ldr	r4, [pc, #40]	; (401e44 <__libc_fini_array+0x2c>)
  401e1c:	4d0a      	ldr	r5, [pc, #40]	; (401e48 <__libc_fini_array+0x30>)
  401e1e:	1b64      	subs	r4, r4, r5
  401e20:	10a4      	asrs	r4, r4, #2
  401e22:	d00a      	beq.n	401e3a <__libc_fini_array+0x22>
  401e24:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401e28:	3b01      	subs	r3, #1
  401e2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401e2e:	3c01      	subs	r4, #1
  401e30:	f855 3904 	ldr.w	r3, [r5], #-4
  401e34:	4798      	blx	r3
  401e36:	2c00      	cmp	r4, #0
  401e38:	d1f9      	bne.n	401e2e <__libc_fini_array+0x16>
  401e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401e3e:	f000 bb2d 	b.w	40249c <_fini>
  401e42:	bf00      	nop
  401e44:	004024ac 	.word	0x004024ac
  401e48:	004024a8 	.word	0x004024a8

00401e4c <_malloc_trim_r>:
  401e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e4e:	4f24      	ldr	r7, [pc, #144]	; (401ee0 <_malloc_trim_r+0x94>)
  401e50:	460c      	mov	r4, r1
  401e52:	4606      	mov	r6, r0
  401e54:	f7ff ffb2 	bl	401dbc <__malloc_lock>
  401e58:	68bb      	ldr	r3, [r7, #8]
  401e5a:	685d      	ldr	r5, [r3, #4]
  401e5c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401e60:	310f      	adds	r1, #15
  401e62:	f025 0503 	bic.w	r5, r5, #3
  401e66:	4429      	add	r1, r5
  401e68:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401e6c:	f021 010f 	bic.w	r1, r1, #15
  401e70:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401e74:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401e78:	db07      	blt.n	401e8a <_malloc_trim_r+0x3e>
  401e7a:	2100      	movs	r1, #0
  401e7c:	4630      	mov	r0, r6
  401e7e:	f7ff ffa9 	bl	401dd4 <_sbrk_r>
  401e82:	68bb      	ldr	r3, [r7, #8]
  401e84:	442b      	add	r3, r5
  401e86:	4298      	cmp	r0, r3
  401e88:	d004      	beq.n	401e94 <_malloc_trim_r+0x48>
  401e8a:	4630      	mov	r0, r6
  401e8c:	f7ff ff9c 	bl	401dc8 <__malloc_unlock>
  401e90:	2000      	movs	r0, #0
  401e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e94:	4261      	negs	r1, r4
  401e96:	4630      	mov	r0, r6
  401e98:	f7ff ff9c 	bl	401dd4 <_sbrk_r>
  401e9c:	3001      	adds	r0, #1
  401e9e:	d00d      	beq.n	401ebc <_malloc_trim_r+0x70>
  401ea0:	4b10      	ldr	r3, [pc, #64]	; (401ee4 <_malloc_trim_r+0x98>)
  401ea2:	68ba      	ldr	r2, [r7, #8]
  401ea4:	6819      	ldr	r1, [r3, #0]
  401ea6:	1b2d      	subs	r5, r5, r4
  401ea8:	f045 0501 	orr.w	r5, r5, #1
  401eac:	4630      	mov	r0, r6
  401eae:	1b09      	subs	r1, r1, r4
  401eb0:	6055      	str	r5, [r2, #4]
  401eb2:	6019      	str	r1, [r3, #0]
  401eb4:	f7ff ff88 	bl	401dc8 <__malloc_unlock>
  401eb8:	2001      	movs	r0, #1
  401eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ebc:	2100      	movs	r1, #0
  401ebe:	4630      	mov	r0, r6
  401ec0:	f7ff ff88 	bl	401dd4 <_sbrk_r>
  401ec4:	68ba      	ldr	r2, [r7, #8]
  401ec6:	1a83      	subs	r3, r0, r2
  401ec8:	2b0f      	cmp	r3, #15
  401eca:	ddde      	ble.n	401e8a <_malloc_trim_r+0x3e>
  401ecc:	4c06      	ldr	r4, [pc, #24]	; (401ee8 <_malloc_trim_r+0x9c>)
  401ece:	4905      	ldr	r1, [pc, #20]	; (401ee4 <_malloc_trim_r+0x98>)
  401ed0:	6824      	ldr	r4, [r4, #0]
  401ed2:	f043 0301 	orr.w	r3, r3, #1
  401ed6:	1b00      	subs	r0, r0, r4
  401ed8:	6053      	str	r3, [r2, #4]
  401eda:	6008      	str	r0, [r1, #0]
  401edc:	e7d5      	b.n	401e8a <_malloc_trim_r+0x3e>
  401ede:	bf00      	nop
  401ee0:	20400478 	.word	0x20400478
  401ee4:	2040090c 	.word	0x2040090c
  401ee8:	20400880 	.word	0x20400880

00401eec <_free_r>:
  401eec:	2900      	cmp	r1, #0
  401eee:	d044      	beq.n	401f7a <_free_r+0x8e>
  401ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ef4:	460d      	mov	r5, r1
  401ef6:	4680      	mov	r8, r0
  401ef8:	f7ff ff60 	bl	401dbc <__malloc_lock>
  401efc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401f00:	4969      	ldr	r1, [pc, #420]	; (4020a8 <_free_r+0x1bc>)
  401f02:	f027 0301 	bic.w	r3, r7, #1
  401f06:	f1a5 0408 	sub.w	r4, r5, #8
  401f0a:	18e2      	adds	r2, r4, r3
  401f0c:	688e      	ldr	r6, [r1, #8]
  401f0e:	6850      	ldr	r0, [r2, #4]
  401f10:	42b2      	cmp	r2, r6
  401f12:	f020 0003 	bic.w	r0, r0, #3
  401f16:	d05e      	beq.n	401fd6 <_free_r+0xea>
  401f18:	07fe      	lsls	r6, r7, #31
  401f1a:	6050      	str	r0, [r2, #4]
  401f1c:	d40b      	bmi.n	401f36 <_free_r+0x4a>
  401f1e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401f22:	1be4      	subs	r4, r4, r7
  401f24:	f101 0e08 	add.w	lr, r1, #8
  401f28:	68a5      	ldr	r5, [r4, #8]
  401f2a:	4575      	cmp	r5, lr
  401f2c:	443b      	add	r3, r7
  401f2e:	d06d      	beq.n	40200c <_free_r+0x120>
  401f30:	68e7      	ldr	r7, [r4, #12]
  401f32:	60ef      	str	r7, [r5, #12]
  401f34:	60bd      	str	r5, [r7, #8]
  401f36:	1815      	adds	r5, r2, r0
  401f38:	686d      	ldr	r5, [r5, #4]
  401f3a:	07ed      	lsls	r5, r5, #31
  401f3c:	d53e      	bpl.n	401fbc <_free_r+0xd0>
  401f3e:	f043 0201 	orr.w	r2, r3, #1
  401f42:	6062      	str	r2, [r4, #4]
  401f44:	50e3      	str	r3, [r4, r3]
  401f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401f4a:	d217      	bcs.n	401f7c <_free_r+0x90>
  401f4c:	08db      	lsrs	r3, r3, #3
  401f4e:	1c58      	adds	r0, r3, #1
  401f50:	109a      	asrs	r2, r3, #2
  401f52:	684d      	ldr	r5, [r1, #4]
  401f54:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401f58:	60a7      	str	r7, [r4, #8]
  401f5a:	2301      	movs	r3, #1
  401f5c:	4093      	lsls	r3, r2
  401f5e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401f62:	432b      	orrs	r3, r5
  401f64:	3a08      	subs	r2, #8
  401f66:	60e2      	str	r2, [r4, #12]
  401f68:	604b      	str	r3, [r1, #4]
  401f6a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401f6e:	60fc      	str	r4, [r7, #12]
  401f70:	4640      	mov	r0, r8
  401f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401f76:	f7ff bf27 	b.w	401dc8 <__malloc_unlock>
  401f7a:	4770      	bx	lr
  401f7c:	0a5a      	lsrs	r2, r3, #9
  401f7e:	2a04      	cmp	r2, #4
  401f80:	d852      	bhi.n	402028 <_free_r+0x13c>
  401f82:	099a      	lsrs	r2, r3, #6
  401f84:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401f88:	00ff      	lsls	r7, r7, #3
  401f8a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401f8e:	19c8      	adds	r0, r1, r7
  401f90:	59ca      	ldr	r2, [r1, r7]
  401f92:	3808      	subs	r0, #8
  401f94:	4290      	cmp	r0, r2
  401f96:	d04f      	beq.n	402038 <_free_r+0x14c>
  401f98:	6851      	ldr	r1, [r2, #4]
  401f9a:	f021 0103 	bic.w	r1, r1, #3
  401f9e:	428b      	cmp	r3, r1
  401fa0:	d232      	bcs.n	402008 <_free_r+0x11c>
  401fa2:	6892      	ldr	r2, [r2, #8]
  401fa4:	4290      	cmp	r0, r2
  401fa6:	d1f7      	bne.n	401f98 <_free_r+0xac>
  401fa8:	68c3      	ldr	r3, [r0, #12]
  401faa:	60a0      	str	r0, [r4, #8]
  401fac:	60e3      	str	r3, [r4, #12]
  401fae:	609c      	str	r4, [r3, #8]
  401fb0:	60c4      	str	r4, [r0, #12]
  401fb2:	4640      	mov	r0, r8
  401fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401fb8:	f7ff bf06 	b.w	401dc8 <__malloc_unlock>
  401fbc:	6895      	ldr	r5, [r2, #8]
  401fbe:	4f3b      	ldr	r7, [pc, #236]	; (4020ac <_free_r+0x1c0>)
  401fc0:	42bd      	cmp	r5, r7
  401fc2:	4403      	add	r3, r0
  401fc4:	d040      	beq.n	402048 <_free_r+0x15c>
  401fc6:	68d0      	ldr	r0, [r2, #12]
  401fc8:	60e8      	str	r0, [r5, #12]
  401fca:	f043 0201 	orr.w	r2, r3, #1
  401fce:	6085      	str	r5, [r0, #8]
  401fd0:	6062      	str	r2, [r4, #4]
  401fd2:	50e3      	str	r3, [r4, r3]
  401fd4:	e7b7      	b.n	401f46 <_free_r+0x5a>
  401fd6:	07ff      	lsls	r7, r7, #31
  401fd8:	4403      	add	r3, r0
  401fda:	d407      	bmi.n	401fec <_free_r+0x100>
  401fdc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401fe0:	1aa4      	subs	r4, r4, r2
  401fe2:	4413      	add	r3, r2
  401fe4:	68a0      	ldr	r0, [r4, #8]
  401fe6:	68e2      	ldr	r2, [r4, #12]
  401fe8:	60c2      	str	r2, [r0, #12]
  401fea:	6090      	str	r0, [r2, #8]
  401fec:	4a30      	ldr	r2, [pc, #192]	; (4020b0 <_free_r+0x1c4>)
  401fee:	6812      	ldr	r2, [r2, #0]
  401ff0:	f043 0001 	orr.w	r0, r3, #1
  401ff4:	4293      	cmp	r3, r2
  401ff6:	6060      	str	r0, [r4, #4]
  401ff8:	608c      	str	r4, [r1, #8]
  401ffa:	d3b9      	bcc.n	401f70 <_free_r+0x84>
  401ffc:	4b2d      	ldr	r3, [pc, #180]	; (4020b4 <_free_r+0x1c8>)
  401ffe:	4640      	mov	r0, r8
  402000:	6819      	ldr	r1, [r3, #0]
  402002:	f7ff ff23 	bl	401e4c <_malloc_trim_r>
  402006:	e7b3      	b.n	401f70 <_free_r+0x84>
  402008:	4610      	mov	r0, r2
  40200a:	e7cd      	b.n	401fa8 <_free_r+0xbc>
  40200c:	1811      	adds	r1, r2, r0
  40200e:	6849      	ldr	r1, [r1, #4]
  402010:	07c9      	lsls	r1, r1, #31
  402012:	d444      	bmi.n	40209e <_free_r+0x1b2>
  402014:	6891      	ldr	r1, [r2, #8]
  402016:	68d2      	ldr	r2, [r2, #12]
  402018:	60ca      	str	r2, [r1, #12]
  40201a:	4403      	add	r3, r0
  40201c:	f043 0001 	orr.w	r0, r3, #1
  402020:	6091      	str	r1, [r2, #8]
  402022:	6060      	str	r0, [r4, #4]
  402024:	50e3      	str	r3, [r4, r3]
  402026:	e7a3      	b.n	401f70 <_free_r+0x84>
  402028:	2a14      	cmp	r2, #20
  40202a:	d816      	bhi.n	40205a <_free_r+0x16e>
  40202c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402030:	00ff      	lsls	r7, r7, #3
  402032:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402036:	e7aa      	b.n	401f8e <_free_r+0xa2>
  402038:	10aa      	asrs	r2, r5, #2
  40203a:	2301      	movs	r3, #1
  40203c:	684d      	ldr	r5, [r1, #4]
  40203e:	4093      	lsls	r3, r2
  402040:	432b      	orrs	r3, r5
  402042:	604b      	str	r3, [r1, #4]
  402044:	4603      	mov	r3, r0
  402046:	e7b0      	b.n	401faa <_free_r+0xbe>
  402048:	f043 0201 	orr.w	r2, r3, #1
  40204c:	614c      	str	r4, [r1, #20]
  40204e:	610c      	str	r4, [r1, #16]
  402050:	60e5      	str	r5, [r4, #12]
  402052:	60a5      	str	r5, [r4, #8]
  402054:	6062      	str	r2, [r4, #4]
  402056:	50e3      	str	r3, [r4, r3]
  402058:	e78a      	b.n	401f70 <_free_r+0x84>
  40205a:	2a54      	cmp	r2, #84	; 0x54
  40205c:	d806      	bhi.n	40206c <_free_r+0x180>
  40205e:	0b1a      	lsrs	r2, r3, #12
  402060:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402064:	00ff      	lsls	r7, r7, #3
  402066:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40206a:	e790      	b.n	401f8e <_free_r+0xa2>
  40206c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402070:	d806      	bhi.n	402080 <_free_r+0x194>
  402072:	0bda      	lsrs	r2, r3, #15
  402074:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402078:	00ff      	lsls	r7, r7, #3
  40207a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40207e:	e786      	b.n	401f8e <_free_r+0xa2>
  402080:	f240 5054 	movw	r0, #1364	; 0x554
  402084:	4282      	cmp	r2, r0
  402086:	d806      	bhi.n	402096 <_free_r+0x1aa>
  402088:	0c9a      	lsrs	r2, r3, #18
  40208a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40208e:	00ff      	lsls	r7, r7, #3
  402090:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402094:	e77b      	b.n	401f8e <_free_r+0xa2>
  402096:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40209a:	257e      	movs	r5, #126	; 0x7e
  40209c:	e777      	b.n	401f8e <_free_r+0xa2>
  40209e:	f043 0101 	orr.w	r1, r3, #1
  4020a2:	6061      	str	r1, [r4, #4]
  4020a4:	6013      	str	r3, [r2, #0]
  4020a6:	e763      	b.n	401f70 <_free_r+0x84>
  4020a8:	20400478 	.word	0x20400478
  4020ac:	20400480 	.word	0x20400480
  4020b0:	20400884 	.word	0x20400884
  4020b4:	2040093c 	.word	0x2040093c

004020b8 <__retarget_lock_acquire_recursive>:
  4020b8:	4770      	bx	lr
  4020ba:	bf00      	nop

004020bc <__retarget_lock_release_recursive>:
  4020bc:	4770      	bx	lr
  4020be:	bf00      	nop

004020c0 <__register_exitproc>:
  4020c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4020c4:	4d2c      	ldr	r5, [pc, #176]	; (402178 <__register_exitproc+0xb8>)
  4020c6:	4606      	mov	r6, r0
  4020c8:	6828      	ldr	r0, [r5, #0]
  4020ca:	4698      	mov	r8, r3
  4020cc:	460f      	mov	r7, r1
  4020ce:	4691      	mov	r9, r2
  4020d0:	f7ff fff2 	bl	4020b8 <__retarget_lock_acquire_recursive>
  4020d4:	4b29      	ldr	r3, [pc, #164]	; (40217c <__register_exitproc+0xbc>)
  4020d6:	681c      	ldr	r4, [r3, #0]
  4020d8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d03e      	beq.n	40215e <__register_exitproc+0x9e>
  4020e0:	685a      	ldr	r2, [r3, #4]
  4020e2:	2a1f      	cmp	r2, #31
  4020e4:	dc1c      	bgt.n	402120 <__register_exitproc+0x60>
  4020e6:	f102 0e01 	add.w	lr, r2, #1
  4020ea:	b176      	cbz	r6, 40210a <__register_exitproc+0x4a>
  4020ec:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4020f0:	2401      	movs	r4, #1
  4020f2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4020f6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4020fa:	4094      	lsls	r4, r2
  4020fc:	4320      	orrs	r0, r4
  4020fe:	2e02      	cmp	r6, #2
  402100:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402104:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402108:	d023      	beq.n	402152 <__register_exitproc+0x92>
  40210a:	3202      	adds	r2, #2
  40210c:	f8c3 e004 	str.w	lr, [r3, #4]
  402110:	6828      	ldr	r0, [r5, #0]
  402112:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402116:	f7ff ffd1 	bl	4020bc <__retarget_lock_release_recursive>
  40211a:	2000      	movs	r0, #0
  40211c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402120:	4b17      	ldr	r3, [pc, #92]	; (402180 <__register_exitproc+0xc0>)
  402122:	b30b      	cbz	r3, 402168 <__register_exitproc+0xa8>
  402124:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402128:	f7ff fb90 	bl	40184c <malloc>
  40212c:	4603      	mov	r3, r0
  40212e:	b1d8      	cbz	r0, 402168 <__register_exitproc+0xa8>
  402130:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402134:	6002      	str	r2, [r0, #0]
  402136:	2100      	movs	r1, #0
  402138:	6041      	str	r1, [r0, #4]
  40213a:	460a      	mov	r2, r1
  40213c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402140:	f04f 0e01 	mov.w	lr, #1
  402144:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402148:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40214c:	2e00      	cmp	r6, #0
  40214e:	d0dc      	beq.n	40210a <__register_exitproc+0x4a>
  402150:	e7cc      	b.n	4020ec <__register_exitproc+0x2c>
  402152:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402156:	430c      	orrs	r4, r1
  402158:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40215c:	e7d5      	b.n	40210a <__register_exitproc+0x4a>
  40215e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402162:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402166:	e7bb      	b.n	4020e0 <__register_exitproc+0x20>
  402168:	6828      	ldr	r0, [r5, #0]
  40216a:	f7ff ffa7 	bl	4020bc <__retarget_lock_release_recursive>
  40216e:	f04f 30ff 	mov.w	r0, #4294967295
  402172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402176:	bf00      	nop
  402178:	20400888 	.word	0x20400888
  40217c:	00402484 	.word	0x00402484
  402180:	0040184d 	.word	0x0040184d
  402184:	682f2e2e 	.word	0x682f2e2e
  402188:	692f6c61 	.word	0x692f6c61
  40218c:	756c636e 	.word	0x756c636e
  402190:	682f6564 	.word	0x682f6564
  402194:	775f6c61 	.word	0x775f6c61
  402198:	682e7464 	.word	0x682e7464
  40219c:	00000000 	.word	0x00000000
  4021a0:	682f2e2e 	.word	0x682f2e2e
  4021a4:	732f6c61 	.word	0x732f6c61
  4021a8:	682f6372 	.word	0x682f6372
  4021ac:	615f6c61 	.word	0x615f6c61
  4021b0:	735f6364 	.word	0x735f6364
  4021b4:	2e636e79 	.word	0x2e636e79
  4021b8:	00000063 	.word	0x00000063
  4021bc:	682f2e2e 	.word	0x682f2e2e
  4021c0:	732f6c61 	.word	0x732f6c61
  4021c4:	682f6372 	.word	0x682f6372
  4021c8:	695f6c61 	.word	0x695f6c61
  4021cc:	6d5f6332 	.word	0x6d5f6332
  4021d0:	6e79735f 	.word	0x6e79735f
  4021d4:	00632e63 	.word	0x00632e63
  4021d8:	682f2e2e 	.word	0x682f2e2e
  4021dc:	732f6c61 	.word	0x732f6c61
  4021e0:	682f6372 	.word	0x682f6372
  4021e4:	705f6c61 	.word	0x705f6c61
  4021e8:	632e6d77 	.word	0x632e6d77
  4021ec:	00000000 	.word	0x00000000
  4021f0:	682f2e2e 	.word	0x682f2e2e
  4021f4:	732f6c61 	.word	0x732f6c61
  4021f8:	682f6372 	.word	0x682f6372
  4021fc:	735f6c61 	.word	0x735f6c61
  402200:	6d5f6970 	.word	0x6d5f6970
  402204:	6e79735f 	.word	0x6e79735f
  402208:	00632e63 	.word	0x00632e63
  40220c:	682f2e2e 	.word	0x682f2e2e
  402210:	732f6c61 	.word	0x732f6c61
  402214:	682f6372 	.word	0x682f6372
  402218:	745f6c61 	.word	0x745f6c61
  40221c:	72656d69 	.word	0x72656d69
  402220:	0000632e 	.word	0x0000632e
  402224:	682f2e2e 	.word	0x682f2e2e
  402228:	752f6c61 	.word	0x752f6c61
  40222c:	736c6974 	.word	0x736c6974
  402230:	6372732f 	.word	0x6372732f
  402234:	6974752f 	.word	0x6974752f
  402238:	6c5f736c 	.word	0x6c5f736c
  40223c:	2e747369 	.word	0x2e747369
  402240:	00000063 	.word	0x00000063

00402244 <_afecs>:
  402244:	00000000 2f843100 03000000 ffffffff     .....1./........
  402254:	0000ffff 00000000 00000000 00000000     ................
  402264:	0000010c 00000000 00000000 00000000     ................
  402274:	00000000 00000200 00000200 00000200     ................
  402284:	00000200 00000200 00000200 00000200     ................
  402294:	00000200 00000200 00000200 00000200     ................
  4022a4:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  4022b4:	5f6c7068 63656661 0000632e              hpl_afec.c..

004022c0 <_ext_irq>:
  4022c0:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  4022d0:	00000000 03c00000 00008020 00000001     ........ .......
  4022e0:	00000002 000000f2 000000f2 00000000     ................
  4022f0:	000000f0 00000002                       ........

004022f8 <_pio_irq_n>:
  4022f8:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  402308:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

00402318 <_pwms>:
  402318:	40020000 0000001f 00010001 00000001     ...@............
  402328:	00000001 000000ff 00000000 00000004     ................
	...
  402344:	00000004 004023a0 00000000 204008f8     .....#@.......@ 
  402354:	4005c000 0000003c 00010001 00000001     ...@<...........
  402364:	00000001 000000ff 00000000 00000004     ................
	...
  402380:	00000001 00402390 00000000 204008ec     .....#@.......@ 

00402390 <_ch_cfg1>:
  402390:	00000000 00000208 00000400 00000200     ................

004023a0 <_ch_cfg0>:
  4023a0:	00000000 00000208 00000400 00000200     ................
  4023b0:	00000001 00000208 00000400 00000200     ................
  4023c0:	00000002 00000208 00000400 00000200     ................
  4023d0:	00000003 00000208 00000400 00000200     ................
  4023e0:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4023f0:	632e6d77 00000000                       wm.c....

004023f8 <spi_regs>:
  4023f8:	00000000 80000000 00000001 0496fa02     ................
  402408:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  402418:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  402428:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00402438 <_i2cm_sync_cfgs>:
  402438:	40018000 00000020 00000000 00000000     ...@ ...........
  402448:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  402458:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  402468:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  402478:	775f6c70 632e7464 00000000              pl_wdt.c....

00402484 <_global_impure_ptr>:
  402484:	20400050                                P.@ 

00402488 <_init>:
  402488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40248a:	bf00      	nop
  40248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40248e:	bc08      	pop	{r3}
  402490:	469e      	mov	lr, r3
  402492:	4770      	bx	lr

00402494 <__init_array_start>:
  402494:	00401df9 	.word	0x00401df9

00402498 <__frame_dummy_init_array_entry>:
  402498:	0040017d                                }.@.

0040249c <_fini>:
  40249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40249e:	bf00      	nop
  4024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4024a2:	bc08      	pop	{r3}
  4024a4:	469e      	mov	lr, r3
  4024a6:	4770      	bx	lr

004024a8 <__fini_array_start>:
  4024a8:	00400159 	.word	0x00400159
