
Robot_Firmware_v17.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000048  20400000  00402fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000160  20400048  00403018  00020048  2**2
                  ALLOC
  3 .heap         00000200  204001a8  00403178  00020048  2**0
                  ALLOC
  4 .stack        00000400  204003a8  00403378  00020048  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020076  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021878  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000440c  00000000  00000000  00041947  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c6d6  00000000  00000000  00045d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d18  00000000  00000000  00052429  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c50  00000000  00000000  00053141  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003b583  00000000  00000000  00053d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001aacd  00000000  00000000  0008f314  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00123996  00000000  00000000  000a9de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002130  00000000  00000000  001cd778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 07 40 20 5d 02 40 00 59 02 40 00 59 02 40 00     ..@ ].@.Y.@.Y.@.
  400010:	59 02 40 00 59 02 40 00 59 02 40 00 00 00 00 00     Y.@.Y.@.Y.@.....
	...
  40002c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40003c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40004c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40005c:	59 02 40 00 59 02 40 00 00 00 00 00 4d 14 40 00     Y.@.Y.@.....M.@.
  40006c:	41 14 40 00 00 00 00 00 59 02 40 00 59 02 40 00     A.@.....Y.@.Y.@.
  40007c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40008c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40009c:	ad 1b 40 00 59 02 40 00 59 02 40 00 c1 1b 40 00     ..@.Y.@.Y.@...@.
  4000ac:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  4000bc:	11 16 40 00 59 02 40 00 59 02 40 00 59 02 40 00     ..@.Y.@.Y.@.Y.@.
	...
  4000e0:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  4000f0:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400100:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400110:	59 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00     Y.@.............
  400120:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400130:	25 16 40 00 59 02 40 00 00 00 00 00 59 02 40 00     %.@.Y.@.....Y.@.
  400140:	59 02 40 00 59 02 40 00 00 00 00 00 00 00 00 00     Y.@.Y.@.........
  400150:	59 02 40 00 59 02 40 00                             Y.@.Y.@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	20400048 	.word	0x20400048
  400174:	00000000 	.word	0x00000000
  400178:	00402fd0 	.word	0x00402fd0

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	00402fd0 	.word	0x00402fd0
  4001b8:	2040004c 	.word	0x2040004c
  4001bc:	00402fd0 	.word	0x00402fd0
  4001c0:	00000000 	.word	0x00000000

004001c4 <adc_init>:
 *  Author: bensc
 */ 

#include "ADC_driver.h"

void adc_init(){ //initializes the ADCs
  4001c4:	b538      	push	{r3, r4, r5, lr}
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_CURRENT);
  4001c6:	4d06      	ldr	r5, [pc, #24]	; (4001e0 <adc_init+0x1c>)
  4001c8:	2100      	movs	r1, #0
  4001ca:	4628      	mov	r0, r5
  4001cc:	4c05      	ldr	r4, [pc, #20]	; (4001e4 <adc_init+0x20>)
  4001ce:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_VOLTAGE);
  4001d0:	2105      	movs	r1, #5
  4001d2:	4628      	mov	r0, r5
  4001d4:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_CAP_CHARGE);
  4001d6:	2107      	movs	r1, #7
  4001d8:	4628      	mov	r0, r5
  4001da:	47a0      	blx	r4
  4001dc:	bd38      	pop	{r3, r4, r5, pc}
  4001de:	bf00      	nop
  4001e0:	204000e4 	.word	0x204000e4
  4001e4:	0040087d 	.word	0x0040087d

004001e8 <adc_read>:
}

void adc_read(float *adc_value, uint8_t channel){ //reads chosen ADC channel and stores in float
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
  4001ec:	4604      	mov	r4, r0
	uint8_t adc_buff[2];
	adc_sync_read_channel(&ADC_0, channel, &adc_buff[0], 2);
  4001ee:	2302      	movs	r3, #2
  4001f0:	aa01      	add	r2, sp, #4
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <adc_read+0x50>)
  4001f4:	4d11      	ldr	r5, [pc, #68]	; (40023c <adc_read+0x54>)
  4001f6:	47a8      	blx	r5
	*adc_value = (3.3/4095) * (float)(adc_buff[0] + ((adc_buff[1] & 0x0F) << 8)); //converts 12-bit ADC value to Voltage
  4001f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4001fc:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400200:	0200      	lsls	r0, r0, #8
  400202:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  400206:	4418      	add	r0, r3
  400208:	ee07 0a90 	vmov	s15, r0
  40020c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400210:	ee17 0a90 	vmov	r0, s15
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <adc_read+0x58>)
  400216:	4798      	blx	r3
  400218:	a305      	add	r3, pc, #20	; (adr r3, 400230 <adc_read+0x48>)
  40021a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <adc_read+0x5c>)
  400220:	47a8      	blx	r5
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <adc_read+0x60>)
  400224:	4798      	blx	r3
  400226:	6020      	str	r0, [r4, #0]
  400228:	b003      	add	sp, #12
  40022a:	bd30      	pop	{r4, r5, pc}
  40022c:	f3af 8000 	nop.w
  400230:	e734d9b4 	.word	0xe734d9b4
  400234:	3f4a680c 	.word	0x3f4a680c
  400238:	204000e4 	.word	0x204000e4
  40023c:	004008a9 	.word	0x004008a9
  400240:	004026d1 	.word	0x004026d1
  400244:	00402779 	.word	0x00402779
  400248:	00402b9d 	.word	0x00402b9d

0040024c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  40024c:	b508      	push	{r3, lr}
	system_init();
  40024e:	4b01      	ldr	r3, [pc, #4]	; (400254 <atmel_start_init+0x8>)
  400250:	4798      	blx	r3
  400252:	bd08      	pop	{r3, pc}
  400254:	00400671 	.word	0x00400671

00400258 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400258:	e7fe      	b.n	400258 <Dummy_Handler>
	...

0040025c <Reset_Handler>:
{
  40025c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40025e:	4b10      	ldr	r3, [pc, #64]	; (4002a0 <Reset_Handler+0x44>)
  400260:	4a10      	ldr	r2, [pc, #64]	; (4002a4 <Reset_Handler+0x48>)
  400262:	429a      	cmp	r2, r3
  400264:	d009      	beq.n	40027a <Reset_Handler+0x1e>
  400266:	4b0e      	ldr	r3, [pc, #56]	; (4002a0 <Reset_Handler+0x44>)
  400268:	4a0e      	ldr	r2, [pc, #56]	; (4002a4 <Reset_Handler+0x48>)
  40026a:	e003      	b.n	400274 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40026c:	6811      	ldr	r1, [r2, #0]
  40026e:	6019      	str	r1, [r3, #0]
  400270:	3304      	adds	r3, #4
  400272:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400274:	490c      	ldr	r1, [pc, #48]	; (4002a8 <Reset_Handler+0x4c>)
  400276:	428b      	cmp	r3, r1
  400278:	d3f8      	bcc.n	40026c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40027a:	4b0c      	ldr	r3, [pc, #48]	; (4002ac <Reset_Handler+0x50>)
  40027c:	e002      	b.n	400284 <Reset_Handler+0x28>
                *pDest++ = 0;
  40027e:	2200      	movs	r2, #0
  400280:	601a      	str	r2, [r3, #0]
  400282:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400284:	4a0a      	ldr	r2, [pc, #40]	; (4002b0 <Reset_Handler+0x54>)
  400286:	4293      	cmp	r3, r2
  400288:	d3f9      	bcc.n	40027e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40028a:	4a0a      	ldr	r2, [pc, #40]	; (4002b4 <Reset_Handler+0x58>)
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <Reset_Handler+0x5c>)
  40028e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400292:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400294:	4b09      	ldr	r3, [pc, #36]	; (4002bc <Reset_Handler+0x60>)
  400296:	4798      	blx	r3
        main();
  400298:	4b09      	ldr	r3, [pc, #36]	; (4002c0 <Reset_Handler+0x64>)
  40029a:	4798      	blx	r3
  40029c:	e7fe      	b.n	40029c <Reset_Handler+0x40>
  40029e:	bf00      	nop
  4002a0:	20400000 	.word	0x20400000
  4002a4:	00402fd0 	.word	0x00402fd0
  4002a8:	20400048 	.word	0x20400048
  4002ac:	20400048 	.word	0x20400048
  4002b0:	204001a8 	.word	0x204001a8
  4002b4:	e000ed00 	.word	0xe000ed00
  4002b8:	00400000 	.word	0x00400000
  4002bc:	00402c3d 	.word	0x00402c3d
  4002c0:	00401df1 	.word	0x00401df1

004002c4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  4002c4:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002c6:	4b08      	ldr	r3, [pc, #32]	; (4002e8 <TIMER_0_init+0x24>)
  4002c8:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002ca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4002ce:	d103      	bne.n	4002d8 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002d4:	4b04      	ldr	r3, [pc, #16]	; (4002e8 <TIMER_0_init+0x24>)
  4002d6:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  4002d8:	4b04      	ldr	r3, [pc, #16]	; (4002ec <TIMER_0_init+0x28>)
  4002da:	4798      	blx	r3
  4002dc:	4602      	mov	r2, r0
  4002de:	4904      	ldr	r1, [pc, #16]	; (4002f0 <TIMER_0_init+0x2c>)
  4002e0:	4804      	ldr	r0, [pc, #16]	; (4002f4 <TIMER_0_init+0x30>)
  4002e2:	4b05      	ldr	r3, [pc, #20]	; (4002f8 <TIMER_0_init+0x34>)
  4002e4:	4798      	blx	r3
  4002e6:	bd08      	pop	{r3, pc}
  4002e8:	400e0600 	.word	0x400e0600
  4002ec:	00401ba9 	.word	0x00401ba9
  4002f0:	4000c000 	.word	0x4000c000
  4002f4:	2040015c 	.word	0x2040015c
  4002f8:	00400ec9 	.word	0x00400ec9

004002fc <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
  4002fc:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <TIMER_1_init+0x24>)
  400300:	699b      	ldr	r3, [r3, #24]
  400302:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400306:	d103      	bne.n	400310 <TIMER_1_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400308:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40030c:	4b04      	ldr	r3, [pc, #16]	; (400320 <TIMER_1_init+0x24>)
  40030e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	TIMER_1_PORT_init();
	timer_init(&TIMER_1, TC1, _tc_get_timer());
  400310:	4b04      	ldr	r3, [pc, #16]	; (400324 <TIMER_1_init+0x28>)
  400312:	4798      	blx	r3
  400314:	4602      	mov	r2, r0
  400316:	4904      	ldr	r1, [pc, #16]	; (400328 <TIMER_1_init+0x2c>)
  400318:	4804      	ldr	r0, [pc, #16]	; (40032c <TIMER_1_init+0x30>)
  40031a:	4b05      	ldr	r3, [pc, #20]	; (400330 <TIMER_1_init+0x34>)
  40031c:	4798      	blx	r3
  40031e:	bd08      	pop	{r3, pc}
  400320:	400e0600 	.word	0x400e0600
  400324:	00401ba9 	.word	0x00401ba9
  400328:	40010000 	.word	0x40010000
  40032c:	204000ec 	.word	0x204000ec
  400330:	00400ec9 	.word	0x00400ec9

00400334 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400338:	4b05      	ldr	r3, [pc, #20]	; (400350 <ADC_0_PORT_init+0x1c>)
  40033a:	601a      	str	r2, [r3, #0]
  40033c:	2204      	movs	r2, #4
  40033e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400342:	601a      	str	r2, [r3, #0]
  400344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400348:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40034c:	601a      	str	r2, [r3, #0]
  40034e:	4770      	bx	lr
  400350:	400e1400 	.word	0x400e1400

00400354 <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <ADC_0_CLOCK_init+0x14>)
  400356:	699b      	ldr	r3, [r3, #24]
  400358:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40035c:	d103      	bne.n	400366 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40035e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400362:	4b01      	ldr	r3, [pc, #4]	; (400368 <ADC_0_CLOCK_init+0x14>)
  400364:	611a      	str	r2, [r3, #16]
  400366:	4770      	bx	lr
  400368:	400e0600 	.word	0x400e0600

0040036c <ADC_0_init>:
{
  40036c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40036e:	4b05      	ldr	r3, [pc, #20]	; (400384 <ADC_0_init+0x18>)
  400370:	4798      	blx	r3
	ADC_0_PORT_init();
  400372:	4b05      	ldr	r3, [pc, #20]	; (400388 <ADC_0_init+0x1c>)
  400374:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400376:	2200      	movs	r2, #0
  400378:	4904      	ldr	r1, [pc, #16]	; (40038c <ADC_0_init+0x20>)
  40037a:	4805      	ldr	r0, [pc, #20]	; (400390 <ADC_0_init+0x24>)
  40037c:	4b05      	ldr	r3, [pc, #20]	; (400394 <ADC_0_init+0x28>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	00400355 	.word	0x00400355
  400388:	00400335 	.word	0x00400335
  40038c:	4003c000 	.word	0x4003c000
  400390:	204000e4 	.word	0x204000e4
  400394:	0040084d 	.word	0x0040084d

00400398 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400398:	4b03      	ldr	r3, [pc, #12]	; (4003a8 <EXTERNAL_IRQ_1_init+0x10>)
  40039a:	2202      	movs	r2, #2
  40039c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40039e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4003a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003a4:	601a      	str	r2, [r3, #0]
  4003a6:	4770      	bx	lr
  4003a8:	400e1000 	.word	0x400e1000

004003ac <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4003ac:	4b12      	ldr	r3, [pc, #72]	; (4003f8 <EXTERNAL_IRQ_0_init+0x4c>)
  4003ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003b2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003b4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003ba:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003c0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003c2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003c8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003ce:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003d6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4003dc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003de:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003e4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4003ea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003ec:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003f2:	601a      	str	r2, [r3, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	400e0e00 	.word	0x400e0e00

004003fc <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003fc:	4b17      	ldr	r3, [pc, #92]	; (40045c <PWM_0_PORT_init+0x60>)
  4003fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400404:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400406:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40040c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40040e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400412:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400414:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40041a:	f022 0204 	bic.w	r2, r2, #4
  40041e:	671a      	str	r2, [r3, #112]	; 0x70
  400420:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400422:	f022 0204 	bic.w	r2, r2, #4
  400426:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400428:	2204      	movs	r2, #4
  40042a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40042c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40042e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400432:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400434:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40043a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40043c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400440:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400444:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400448:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40044a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40044c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400450:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400456:	605a      	str	r2, [r3, #4]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e1400 	.word	0x400e1400

00400460 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <PWM_0_CLOCK_init+0x14>)
  400462:	699b      	ldr	r3, [r3, #24]
  400464:	2b00      	cmp	r3, #0
  400466:	db03      	blt.n	400470 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40046c:	4b01      	ldr	r3, [pc, #4]	; (400474 <PWM_0_CLOCK_init+0x14>)
  40046e:	611a      	str	r2, [r3, #16]
  400470:	4770      	bx	lr
  400472:	bf00      	nop
  400474:	400e0600 	.word	0x400e0600

00400478 <PWM_0_init>:
{
  400478:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40047a:	4b06      	ldr	r3, [pc, #24]	; (400494 <PWM_0_init+0x1c>)
  40047c:	4798      	blx	r3
	PWM_0_PORT_init();
  40047e:	4b06      	ldr	r3, [pc, #24]	; (400498 <PWM_0_init+0x20>)
  400480:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400482:	4b06      	ldr	r3, [pc, #24]	; (40049c <PWM_0_init+0x24>)
  400484:	4798      	blx	r3
  400486:	4602      	mov	r2, r0
  400488:	4905      	ldr	r1, [pc, #20]	; (4004a0 <PWM_0_init+0x28>)
  40048a:	4806      	ldr	r0, [pc, #24]	; (4004a4 <PWM_0_init+0x2c>)
  40048c:	4b06      	ldr	r3, [pc, #24]	; (4004a8 <PWM_0_init+0x30>)
  40048e:	4798      	blx	r3
  400490:	bd08      	pop	{r3, pc}
  400492:	bf00      	nop
  400494:	00400461 	.word	0x00400461
  400498:	004003fd 	.word	0x004003fd
  40049c:	004017e5 	.word	0x004017e5
  4004a0:	40020000 	.word	0x40020000
  4004a4:	204000c8 	.word	0x204000c8
  4004a8:	00400c15 	.word	0x00400c15

004004ac <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004ac:	4b06      	ldr	r3, [pc, #24]	; (4004c8 <PWM_1_PORT_init+0x1c>)
  4004ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4004b4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4004bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4004c2:	605a      	str	r2, [r3, #4]
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop
  4004c8:	400e0e00 	.word	0x400e0e00

004004cc <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4004cc:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <PWM_1_CLOCK_init+0x18>)
  4004ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4004d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4004d6:	d104      	bne.n	4004e2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4004dc:	4b01      	ldr	r3, [pc, #4]	; (4004e4 <PWM_1_CLOCK_init+0x18>)
  4004de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4004e2:	4770      	bx	lr
  4004e4:	400e0600 	.word	0x400e0600

004004e8 <PWM_1_init>:
{
  4004e8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4004ea:	4b06      	ldr	r3, [pc, #24]	; (400504 <PWM_1_init+0x1c>)
  4004ec:	4798      	blx	r3
	PWM_1_PORT_init();
  4004ee:	4b06      	ldr	r3, [pc, #24]	; (400508 <PWM_1_init+0x20>)
  4004f0:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  4004f2:	4b06      	ldr	r3, [pc, #24]	; (40050c <PWM_1_init+0x24>)
  4004f4:	4798      	blx	r3
  4004f6:	4602      	mov	r2, r0
  4004f8:	4905      	ldr	r1, [pc, #20]	; (400510 <PWM_1_init+0x28>)
  4004fa:	4806      	ldr	r0, [pc, #24]	; (400514 <PWM_1_init+0x2c>)
  4004fc:	4b06      	ldr	r3, [pc, #24]	; (400518 <PWM_1_init+0x30>)
  4004fe:	4798      	blx	r3
  400500:	bd08      	pop	{r3, pc}
  400502:	bf00      	nop
  400504:	004004cd 	.word	0x004004cd
  400508:	004004ad 	.word	0x004004ad
  40050c:	004017e5 	.word	0x004017e5
  400510:	4005c000 	.word	0x4005c000
  400514:	20400120 	.word	0x20400120
  400518:	00400c15 	.word	0x00400c15

0040051c <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40051c:	4b11      	ldr	r3, [pc, #68]	; (400564 <SPI_0_PORT_init+0x48>)
  40051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400524:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400526:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400528:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40052c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40052e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400532:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400536:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40053a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40053c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40053e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400542:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400548:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40054a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40054c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400550:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400552:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400554:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400558:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40055a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40055e:	605a      	str	r2, [r3, #4]
  400560:	4770      	bx	lr
  400562:	bf00      	nop
  400564:	400e1400 	.word	0x400e1400

00400568 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400568:	4b04      	ldr	r3, [pc, #16]	; (40057c <SPI_0_CLOCK_init+0x14>)
  40056a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40056c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400570:	d103      	bne.n	40057a <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400572:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400576:	4b01      	ldr	r3, [pc, #4]	; (40057c <SPI_0_CLOCK_init+0x14>)
  400578:	611a      	str	r2, [r3, #16]
  40057a:	4770      	bx	lr
  40057c:	400e0600 	.word	0x400e0600

00400580 <SPI_0_init>:
{
  400580:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400582:	4b08      	ldr	r3, [pc, #32]	; (4005a4 <SPI_0_init+0x24>)
  400584:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400586:	4b08      	ldr	r3, [pc, #32]	; (4005a8 <SPI_0_init+0x28>)
  400588:	4798      	blx	r3
  40058a:	4c08      	ldr	r4, [pc, #32]	; (4005ac <SPI_0_init+0x2c>)
  40058c:	4601      	mov	r1, r0
  40058e:	4620      	mov	r0, r4
  400590:	4b07      	ldr	r3, [pc, #28]	; (4005b0 <SPI_0_init+0x30>)
  400592:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400594:	4907      	ldr	r1, [pc, #28]	; (4005b4 <SPI_0_init+0x34>)
  400596:	4620      	mov	r0, r4
  400598:	4b07      	ldr	r3, [pc, #28]	; (4005b8 <SPI_0_init+0x38>)
  40059a:	4798      	blx	r3
	SPI_0_PORT_init();
  40059c:	4b07      	ldr	r3, [pc, #28]	; (4005bc <SPI_0_init+0x3c>)
  40059e:	4798      	blx	r3
  4005a0:	bd10      	pop	{r4, pc}
  4005a2:	bf00      	nop
  4005a4:	00400569 	.word	0x00400569
  4005a8:	004019e5 	.word	0x004019e5
  4005ac:	20400108 	.word	0x20400108
  4005b0:	00400c95 	.word	0x00400c95
  4005b4:	40008000 	.word	0x40008000
  4005b8:	00400cb5 	.word	0x00400cb5
  4005bc:	0040051d 	.word	0x0040051d

004005c0 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005c0:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <I2C_0_PORT_init+0x2c>)
  4005c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005c4:	f022 0210 	bic.w	r2, r2, #16
  4005c8:	671a      	str	r2, [r3, #112]	; 0x70
  4005ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005cc:	f022 0210 	bic.w	r2, r2, #16
  4005d0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005d2:	2210      	movs	r2, #16
  4005d4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005d8:	f022 0208 	bic.w	r2, r2, #8
  4005dc:	671a      	str	r2, [r3, #112]	; 0x70
  4005de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005e0:	f022 0208 	bic.w	r2, r2, #8
  4005e4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005e6:	2208      	movs	r2, #8
  4005e8:	605a      	str	r2, [r3, #4]
  4005ea:	4770      	bx	lr
  4005ec:	400e0e00 	.word	0x400e0e00

004005f0 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <I2C_0_CLOCK_init+0x14>)
  4005f2:	699b      	ldr	r3, [r3, #24]
  4005f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4005f8:	d103      	bne.n	400602 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005fe:	4b01      	ldr	r3, [pc, #4]	; (400604 <I2C_0_CLOCK_init+0x14>)
  400600:	611a      	str	r2, [r3, #16]
  400602:	4770      	bx	lr
  400604:	400e0600 	.word	0x400e0600

00400608 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400608:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40060a:	4b04      	ldr	r3, [pc, #16]	; (40061c <I2C_0_init+0x14>)
  40060c:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  40060e:	4904      	ldr	r1, [pc, #16]	; (400620 <I2C_0_init+0x18>)
  400610:	4804      	ldr	r0, [pc, #16]	; (400624 <I2C_0_init+0x1c>)
  400612:	4b05      	ldr	r3, [pc, #20]	; (400628 <I2C_0_init+0x20>)
  400614:	4798      	blx	r3

	I2C_0_PORT_init();
  400616:	4b05      	ldr	r3, [pc, #20]	; (40062c <I2C_0_init+0x24>)
  400618:	4798      	blx	r3
  40061a:	bd08      	pop	{r3, pc}
  40061c:	004005f1 	.word	0x004005f1
  400620:	40018000 	.word	0x40018000
  400624:	2040013c 	.word	0x2040013c
  400628:	00400b61 	.word	0x00400b61
  40062c:	004005c1 	.word	0x004005c1

00400630 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400630:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400632:	4802      	ldr	r0, [pc, #8]	; (40063c <delay_driver_init+0xc>)
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <delay_driver_init+0x10>)
  400636:	4798      	blx	r3
  400638:	bd08      	pop	{r3, pc}
  40063a:	bf00      	nop
  40063c:	e000e010 	.word	0xe000e010
  400640:	00400965 	.word	0x00400965

00400644 <WDT_0_init>:
}

void WDT_0_init(void)
{
  400644:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  400646:	2248      	movs	r2, #72	; 0x48
  400648:	4904      	ldr	r1, [pc, #16]	; (40065c <WDT_0_init+0x18>)
  40064a:	2001      	movs	r0, #1
  40064c:	4b04      	ldr	r3, [pc, #16]	; (400660 <WDT_0_init+0x1c>)
  40064e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  400650:	4804      	ldr	r0, [pc, #16]	; (400664 <WDT_0_init+0x20>)
  400652:	4b05      	ldr	r3, [pc, #20]	; (400668 <WDT_0_init+0x24>)
  400654:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  400656:	4b05      	ldr	r3, [pc, #20]	; (40066c <WDT_0_init+0x28>)
  400658:	4798      	blx	r3
  40065a:	bd08      	pop	{r3, pc}
  40065c:	00402c94 	.word	0x00402c94
  400660:	00400fe9 	.word	0x00400fe9
  400664:	204000e8 	.word	0x204000e8
  400668:	400e1850 	.word	0x400e1850
  40066c:	00401dbd 	.word	0x00401dbd

00400670 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  400670:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400672:	4b67      	ldr	r3, [pc, #412]	; (400810 <system_init+0x1a0>)
  400674:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400676:	4b67      	ldr	r3, [pc, #412]	; (400814 <system_init+0x1a4>)
  400678:	699b      	ldr	r3, [r3, #24]
  40067a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40067e:	d103      	bne.n	400688 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400680:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400684:	4b63      	ldr	r3, [pc, #396]	; (400814 <system_init+0x1a4>)
  400686:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400688:	4b62      	ldr	r3, [pc, #392]	; (400814 <system_init+0x1a4>)
  40068a:	699b      	ldr	r3, [r3, #24]
  40068c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400690:	d103      	bne.n	40069a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400692:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400696:	4b5f      	ldr	r3, [pc, #380]	; (400814 <system_init+0x1a4>)
  400698:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40069a:	4b5e      	ldr	r3, [pc, #376]	; (400814 <system_init+0x1a4>)
  40069c:	699b      	ldr	r3, [r3, #24]
  40069e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4006a2:	d103      	bne.n	4006ac <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4006a8:	4b5a      	ldr	r3, [pc, #360]	; (400814 <system_init+0x1a4>)
  4006aa:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  4006ac:	4b5a      	ldr	r3, [pc, #360]	; (400818 <system_init+0x1a8>)
  4006ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006b2:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006b4:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006b6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006ba:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006c2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006c8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4006ce:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006d0:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006d2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006d6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4006dc:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006de:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006e0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4006ea:	2008      	movs	r0, #8
  4006ec:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4006ee:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006f0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4006f6:	2404      	movs	r4, #4
  4006f8:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4006fa:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006fc:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006fe:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400700:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400702:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400704:	2010      	movs	r0, #16
  400706:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400708:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40070a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40070c:	2020      	movs	r0, #32
  40070e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400710:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400712:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400714:	2040      	movs	r0, #64	; 0x40
  400716:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400718:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40071a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40071c:	2080      	movs	r0, #128	; 0x80
  40071e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400720:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400722:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400724:	f44f 7080 	mov.w	r0, #256	; 0x100
  400728:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40072a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40072c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40072e:	f44f 7000 	mov.w	r0, #512	; 0x200
  400732:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400734:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400736:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400738:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40073c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40073e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400740:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400742:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400746:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400748:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40074a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40074e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  400754:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400756:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400758:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40075c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40075e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400762:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400764:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400766:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40076a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40076c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  400770:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400772:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400774:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400778:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40077a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  40077e:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400780:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400782:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400786:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400788:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  40078c:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40078e:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400790:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400794:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400796:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  40079a:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40079c:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40079e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007a2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4007a8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007aa:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007ac:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007b0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4007b6:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007b8:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ba:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4007c0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007c2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007c4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4007ca:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007cc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ce:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007d0:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007d2:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007d4:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007d6:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007d8:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007da:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4007dc:	4b0f      	ldr	r3, [pc, #60]	; (40081c <system_init+0x1ac>)
  4007de:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  4007e0:	4b0f      	ldr	r3, [pc, #60]	; (400820 <system_init+0x1b0>)
  4007e2:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  4007e4:	4b0f      	ldr	r3, [pc, #60]	; (400824 <system_init+0x1b4>)
  4007e6:	4798      	blx	r3

	PWM_0_init();
  4007e8:	4b0f      	ldr	r3, [pc, #60]	; (400828 <system_init+0x1b8>)
  4007ea:	4798      	blx	r3

	PWM_1_init();
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <system_init+0x1bc>)
  4007ee:	4798      	blx	r3

	SPI_0_init();
  4007f0:	4b0f      	ldr	r3, [pc, #60]	; (400830 <system_init+0x1c0>)
  4007f2:	4798      	blx	r3
	TIMER_0_init();
  4007f4:	4b0f      	ldr	r3, [pc, #60]	; (400834 <system_init+0x1c4>)
  4007f6:	4798      	blx	r3
	TIMER_1_init();
  4007f8:	4b0f      	ldr	r3, [pc, #60]	; (400838 <system_init+0x1c8>)
  4007fa:	4798      	blx	r3

	I2C_0_init();
  4007fc:	4b0f      	ldr	r3, [pc, #60]	; (40083c <system_init+0x1cc>)
  4007fe:	4798      	blx	r3

	delay_driver_init();
  400800:	4b0f      	ldr	r3, [pc, #60]	; (400840 <system_init+0x1d0>)
  400802:	4798      	blx	r3

	WDT_0_init();
  400804:	4b0f      	ldr	r3, [pc, #60]	; (400844 <system_init+0x1d4>)
  400806:	4798      	blx	r3

	ext_irq_init();
  400808:	4b0f      	ldr	r3, [pc, #60]	; (400848 <system_init+0x1d8>)
  40080a:	4798      	blx	r3
  40080c:	bd10      	pop	{r4, pc}
  40080e:	bf00      	nop
  400810:	004011d1 	.word	0x004011d1
  400814:	400e0600 	.word	0x400e0600
  400818:	400e0e00 	.word	0x400e0e00
  40081c:	0040036d 	.word	0x0040036d
  400820:	00400399 	.word	0x00400399
  400824:	004003ad 	.word	0x004003ad
  400828:	00400479 	.word	0x00400479
  40082c:	004004e9 	.word	0x004004e9
  400830:	00400581 	.word	0x00400581
  400834:	004002c5 	.word	0x004002c5
  400838:	004002fd 	.word	0x004002fd
  40083c:	00400609 	.word	0x00400609
  400840:	00400631 	.word	0x00400631
  400844:	00400645 	.word	0x00400645
  400848:	004009fd 	.word	0x004009fd

0040084c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  40084c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40084e:	4604      	mov	r4, r0
  400850:	460d      	mov	r5, r1
  400852:	2800      	cmp	r0, #0
  400854:	bf18      	it	ne
  400856:	2900      	cmpne	r1, #0
  400858:	bf14      	ite	ne
  40085a:	2001      	movne	r0, #1
  40085c:	2000      	moveq	r0, #0
  40085e:	2239      	movs	r2, #57	; 0x39
  400860:	4903      	ldr	r1, [pc, #12]	; (400870 <adc_sync_init+0x24>)
  400862:	4b04      	ldr	r3, [pc, #16]	; (400874 <adc_sync_init+0x28>)
  400864:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400866:	4629      	mov	r1, r5
  400868:	4620      	mov	r0, r4
  40086a:	4b03      	ldr	r3, [pc, #12]	; (400878 <adc_sync_init+0x2c>)
  40086c:	4798      	blx	r3
}
  40086e:	bd38      	pop	{r3, r4, r5, pc}
  400870:	00402cb0 	.word	0x00402cb0
  400874:	00400fe9 	.word	0x00400fe9
  400878:	00401125 	.word	0x00401125

0040087c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  40087c:	b538      	push	{r3, r4, r5, lr}
  40087e:	460d      	mov	r5, r1
	ASSERT(descr);
  400880:	4604      	mov	r4, r0
  400882:	224e      	movs	r2, #78	; 0x4e
  400884:	4905      	ldr	r1, [pc, #20]	; (40089c <adc_sync_enable_channel+0x20>)
  400886:	3000      	adds	r0, #0
  400888:	bf18      	it	ne
  40088a:	2001      	movne	r0, #1
  40088c:	4b04      	ldr	r3, [pc, #16]	; (4008a0 <adc_sync_enable_channel+0x24>)
  40088e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400890:	4629      	mov	r1, r5
  400892:	4620      	mov	r0, r4
  400894:	4b03      	ldr	r3, [pc, #12]	; (4008a4 <adc_sync_enable_channel+0x28>)
  400896:	4798      	blx	r3

	return ERR_NONE;
}
  400898:	2000      	movs	r0, #0
  40089a:	bd38      	pop	{r3, r4, r5, pc}
  40089c:	00402cb0 	.word	0x00402cb0
  4008a0:	00400fe9 	.word	0x00400fe9
  4008a4:	0040115d 	.word	0x0040115d

004008a8 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  4008a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008ac:	460d      	mov	r5, r1
  4008ae:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  4008b0:	4607      	mov	r7, r0
  4008b2:	4690      	mov	r8, r2
  4008b4:	2800      	cmp	r0, #0
  4008b6:	bf18      	it	ne
  4008b8:	2a00      	cmpne	r2, #0
  4008ba:	d002      	beq.n	4008c2 <adc_sync_read_channel+0x1a>
  4008bc:	b9cb      	cbnz	r3, 4008f2 <adc_sync_read_channel+0x4a>
  4008be:	2000      	movs	r0, #0
  4008c0:	e000      	b.n	4008c4 <adc_sync_read_channel+0x1c>
  4008c2:	2000      	movs	r0, #0
  4008c4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400944 <adc_sync_read_channel+0x9c>
  4008c8:	2267      	movs	r2, #103	; 0x67
  4008ca:	4651      	mov	r1, sl
  4008cc:	4e18      	ldr	r6, [pc, #96]	; (400930 <adc_sync_read_channel+0x88>)
  4008ce:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  4008d0:	463c      	mov	r4, r7
  4008d2:	4638      	mov	r0, r7
  4008d4:	4b17      	ldr	r3, [pc, #92]	; (400934 <adc_sync_read_channel+0x8c>)
  4008d6:	4798      	blx	r3
  4008d8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  4008da:	fb99 f0f0 	sdiv	r0, r9, r0
  4008de:	fb07 9010 	mls	r0, r7, r0, r9
  4008e2:	2269      	movs	r2, #105	; 0x69
  4008e4:	4651      	mov	r1, sl
  4008e6:	fab0 f080 	clz	r0, r0
  4008ea:	0940      	lsrs	r0, r0, #5
  4008ec:	47b0      	blx	r6
	uint16_t offset = 0;
  4008ee:	2600      	movs	r6, #0
  4008f0:	e005      	b.n	4008fe <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  4008f2:	2001      	movs	r0, #1
  4008f4:	e7e6      	b.n	4008c4 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  4008f6:	443e      	add	r6, r7
  4008f8:	b2b6      	uxth	r6, r6
	} while (offset < length);
  4008fa:	45b1      	cmp	r9, r6
  4008fc:	d915      	bls.n	40092a <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  4008fe:	4620      	mov	r0, r4
  400900:	4b0d      	ldr	r3, [pc, #52]	; (400938 <adc_sync_read_channel+0x90>)
  400902:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  400904:	4629      	mov	r1, r5
  400906:	4620      	mov	r0, r4
  400908:	4b0c      	ldr	r3, [pc, #48]	; (40093c <adc_sync_read_channel+0x94>)
  40090a:	4798      	blx	r3
  40090c:	2800      	cmp	r0, #0
  40090e:	d0f9      	beq.n	400904 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  400910:	4629      	mov	r1, r5
  400912:	4620      	mov	r0, r4
  400914:	4b0a      	ldr	r3, [pc, #40]	; (400940 <adc_sync_read_channel+0x98>)
  400916:	4798      	blx	r3
		buffer[offset] = result;
  400918:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  40091c:	2f01      	cmp	r7, #1
  40091e:	d9ea      	bls.n	4008f6 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  400920:	1c73      	adds	r3, r6, #1
  400922:	0a00      	lsrs	r0, r0, #8
  400924:	f808 0003 	strb.w	r0, [r8, r3]
  400928:	e7e5      	b.n	4008f6 <adc_sync_read_channel+0x4e>

	return offset;
}
  40092a:	4630      	mov	r0, r6
  40092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400930:	00400fe9 	.word	0x00400fe9
  400934:	00401169 	.word	0x00401169
  400938:	00401181 	.word	0x00401181
  40093c:	0040116d 	.word	0x0040116d
  400940:	00401189 	.word	0x00401189
  400944:	00402cb0 	.word	0x00402cb0

00400948 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400948:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40094c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40094e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400950:	f3bf 8f5f 	dmb	sy
  400954:	4770      	bx	lr

00400956 <atomic_leave_critical>:
  400956:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40095a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40095c:	f383 8810 	msr	PRIMASK, r3
  400960:	4770      	bx	lr
	...

00400964 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400964:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400966:	4b02      	ldr	r3, [pc, #8]	; (400970 <delay_init+0xc>)
  400968:	6018      	str	r0, [r3, #0]
  40096a:	4b02      	ldr	r3, [pc, #8]	; (400974 <delay_init+0x10>)
  40096c:	4798      	blx	r3
  40096e:	bd08      	pop	{r3, pc}
  400970:	20400064 	.word	0x20400064
  400974:	004019fd 	.word	0x004019fd

00400978 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400978:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40097a:	4b04      	ldr	r3, [pc, #16]	; (40098c <delay_us+0x14>)
  40097c:	681c      	ldr	r4, [r3, #0]
  40097e:	4b04      	ldr	r3, [pc, #16]	; (400990 <delay_us+0x18>)
  400980:	4798      	blx	r3
  400982:	4601      	mov	r1, r0
  400984:	4620      	mov	r0, r4
  400986:	4b03      	ldr	r3, [pc, #12]	; (400994 <delay_us+0x1c>)
  400988:	4798      	blx	r3
  40098a:	bd10      	pop	{r4, pc}
  40098c:	20400064 	.word	0x20400064
  400990:	004011b5 	.word	0x004011b5
  400994:	00401a09 	.word	0x00401a09

00400998 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400998:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  40099a:	4b04      	ldr	r3, [pc, #16]	; (4009ac <delay_ms+0x14>)
  40099c:	681c      	ldr	r4, [r3, #0]
  40099e:	4b04      	ldr	r3, [pc, #16]	; (4009b0 <delay_ms+0x18>)
  4009a0:	4798      	blx	r3
  4009a2:	4601      	mov	r1, r0
  4009a4:	4620      	mov	r0, r4
  4009a6:	4b03      	ldr	r3, [pc, #12]	; (4009b4 <delay_ms+0x1c>)
  4009a8:	4798      	blx	r3
  4009aa:	bd10      	pop	{r4, pc}
  4009ac:	20400064 	.word	0x20400064
  4009b0:	004011bf 	.word	0x004011bf
  4009b4:	00401a09 	.word	0x00401a09

004009b8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4009b8:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4009ba:	2506      	movs	r5, #6
  4009bc:	2400      	movs	r4, #0

	while (upper >= lower) {
  4009be:	e007      	b.n	4009d0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4009c0:	4a0d      	ldr	r2, [pc, #52]	; (4009f8 <process_ext_irq+0x40>)
  4009c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4009c6:	b1b3      	cbz	r3, 4009f6 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4009c8:	4798      	blx	r3
  4009ca:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4009cc:	3a01      	subs	r2, #1
  4009ce:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4009d0:	42ac      	cmp	r4, r5
  4009d2:	d810      	bhi.n	4009f6 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4009d4:	192b      	adds	r3, r5, r4
  4009d6:	105b      	asrs	r3, r3, #1
  4009d8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  4009da:	2a05      	cmp	r2, #5
  4009dc:	d80b      	bhi.n	4009f6 <process_ext_irq+0x3e>
  4009de:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  4009e0:	4905      	ldr	r1, [pc, #20]	; (4009f8 <process_ext_irq+0x40>)
  4009e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4009e6:	6849      	ldr	r1, [r1, #4]
  4009e8:	4281      	cmp	r1, r0
  4009ea:	d0e9      	beq.n	4009c0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4009ec:	4281      	cmp	r1, r0
  4009ee:	d2ed      	bcs.n	4009cc <process_ext_irq+0x14>
			lower = middle + 1;
  4009f0:	3201      	adds	r2, #1
  4009f2:	b2d4      	uxtb	r4, r2
  4009f4:	e7ec      	b.n	4009d0 <process_ext_irq+0x18>
  4009f6:	bd38      	pop	{r3, r4, r5, pc}
  4009f8:	20400068 	.word	0x20400068

004009fc <ext_irq_init>:
{
  4009fc:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4009fe:	2300      	movs	r3, #0
  400a00:	e00a      	b.n	400a18 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400a02:	4a08      	ldr	r2, [pc, #32]	; (400a24 <ext_irq_init+0x28>)
  400a04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400a08:	f04f 30ff 	mov.w	r0, #4294967295
  400a0c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400a0e:	2100      	movs	r1, #0
  400a10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a14:	3301      	adds	r3, #1
  400a16:	b29b      	uxth	r3, r3
  400a18:	2b05      	cmp	r3, #5
  400a1a:	d9f2      	bls.n	400a02 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400a1c:	4802      	ldr	r0, [pc, #8]	; (400a28 <ext_irq_init+0x2c>)
  400a1e:	4b03      	ldr	r3, [pc, #12]	; (400a2c <ext_irq_init+0x30>)
  400a20:	4798      	blx	r3
}
  400a22:	bd08      	pop	{r3, pc}
  400a24:	20400068 	.word	0x20400068
  400a28:	004009b9 	.word	0x004009b9
  400a2c:	00401459 	.word	0x00401459

00400a30 <ext_irq_register>:
{
  400a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a32:	b083      	sub	sp, #12
  400a34:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400a36:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a38:	2b05      	cmp	r3, #5
  400a3a:	d80e      	bhi.n	400a5a <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400a3c:	4618      	mov	r0, r3
  400a3e:	4a2e      	ldr	r2, [pc, #184]	; (400af8 <ext_irq_register+0xc8>)
  400a40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400a44:	6852      	ldr	r2, [r2, #4]
  400a46:	42aa      	cmp	r2, r5
  400a48:	d002      	beq.n	400a50 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a4a:	3301      	adds	r3, #1
  400a4c:	b2db      	uxtb	r3, r3
  400a4e:	e7f3      	b.n	400a38 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400a50:	4b29      	ldr	r3, [pc, #164]	; (400af8 <ext_irq_register+0xc8>)
  400a52:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400a56:	2701      	movs	r7, #1
			break;
  400a58:	e000      	b.n	400a5c <ext_irq_register+0x2c>
	bool    found = false;
  400a5a:	2700      	movs	r7, #0
	if (NULL == cb) {
  400a5c:	b159      	cbz	r1, 400a76 <ext_irq_register+0x46>
	if (!found) {
  400a5e:	2f00      	cmp	r7, #0
  400a60:	d13d      	bne.n	400ade <ext_irq_register+0xae>
  400a62:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a64:	2e05      	cmp	r6, #5
  400a66:	d813      	bhi.n	400a90 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400a68:	4b23      	ldr	r3, [pc, #140]	; (400af8 <ext_irq_register+0xc8>)
  400a6a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  400a6e:	b143      	cbz	r3, 400a82 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a70:	3601      	adds	r6, #1
  400a72:	b2f6      	uxtb	r6, r6
  400a74:	e7f6      	b.n	400a64 <ext_irq_register+0x34>
		if (!found) {
  400a76:	2f00      	cmp	r7, #0
  400a78:	d038      	beq.n	400aec <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  400a7a:	4628      	mov	r0, r5
  400a7c:	4b1f      	ldr	r3, [pc, #124]	; (400afc <ext_irq_register+0xcc>)
  400a7e:	4798      	blx	r3
  400a80:	e032      	b.n	400ae8 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  400a82:	4b1d      	ldr	r3, [pc, #116]	; (400af8 <ext_irq_register+0xc8>)
  400a84:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  400a88:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
  400a8c:	6055      	str	r5, [r2, #4]
				found           = true;
  400a8e:	2701      	movs	r7, #1
  400a90:	2300      	movs	r3, #0
  400a92:	e001      	b.n	400a98 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400a94:	3301      	adds	r3, #1
  400a96:	b2db      	uxtb	r3, r3
  400a98:	2b05      	cmp	r3, #5
  400a9a:	bf98      	it	ls
  400a9c:	2e05      	cmpls	r6, #5
  400a9e:	d81e      	bhi.n	400ade <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400aa0:	46b6      	mov	lr, r6
  400aa2:	4a15      	ldr	r2, [pc, #84]	; (400af8 <ext_irq_register+0xc8>)
  400aa4:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400aa8:	6848      	ldr	r0, [r1, #4]
  400aaa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400aae:	6852      	ldr	r2, [r2, #4]
  400ab0:	4290      	cmp	r0, r2
  400ab2:	d2ef      	bcs.n	400a94 <ext_irq_register+0x64>
  400ab4:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ab8:	d0ec      	beq.n	400a94 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400aba:	4c0f      	ldr	r4, [pc, #60]	; (400af8 <ext_irq_register+0xc8>)
  400abc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
  400ac4:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400ac8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400acc:	e894 0003 	ldmia.w	r4, {r0, r1}
  400ad0:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400ad4:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400ad8:	e884 0003 	stmia.w	r4, {r0, r1}
  400adc:	e7da      	b.n	400a94 <ext_irq_register+0x64>
	if (!found) {
  400ade:	b147      	cbz	r7, 400af2 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400ae0:	2101      	movs	r1, #1
  400ae2:	4628      	mov	r0, r5
  400ae4:	4b05      	ldr	r3, [pc, #20]	; (400afc <ext_irq_register+0xcc>)
  400ae6:	4798      	blx	r3
}
  400ae8:	b003      	add	sp, #12
  400aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400aec:	f06f 000c 	mvn.w	r0, #12
  400af0:	e7fa      	b.n	400ae8 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400af2:	f06f 000c 	mvn.w	r0, #12
  400af6:	e7f7      	b.n	400ae8 <ext_irq_register+0xb8>
  400af8:	20400068 	.word	0x20400068
  400afc:	00401481 	.word	0x00401481

00400b00 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400b00:	b510      	push	{r4, lr}
  400b02:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400b04:	8903      	ldrh	r3, [r0, #8]
  400b06:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400b0a:	4614      	mov	r4, r2
  400b0c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  400b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b12:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400b16:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400b18:	a901      	add	r1, sp, #4
  400b1a:	3814      	subs	r0, #20
  400b1c:	4b03      	ldr	r3, [pc, #12]	; (400b2c <i2c_m_sync_write+0x2c>)
  400b1e:	4798      	blx	r3

	if (ret) {
  400b20:	b910      	cbnz	r0, 400b28 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  400b22:	4620      	mov	r0, r4
  400b24:	b004      	add	sp, #16
  400b26:	bd10      	pop	{r4, pc}
		return ret;
  400b28:	4604      	mov	r4, r0
  400b2a:	e7fa      	b.n	400b22 <i2c_m_sync_write+0x22>
  400b2c:	00401c55 	.word	0x00401c55

00400b30 <i2c_m_sync_read>:
{
  400b30:	b510      	push	{r4, lr}
  400b32:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400b34:	8903      	ldrh	r3, [r0, #8]
  400b36:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400b3a:	4614      	mov	r4, r2
  400b3c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400b3e:	f248 0301 	movw	r3, #32769	; 0x8001
  400b42:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  400b46:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400b48:	a901      	add	r1, sp, #4
  400b4a:	3814      	subs	r0, #20
  400b4c:	4b03      	ldr	r3, [pc, #12]	; (400b5c <i2c_m_sync_read+0x2c>)
  400b4e:	4798      	blx	r3
	if (ret) {
  400b50:	b910      	cbnz	r0, 400b58 <i2c_m_sync_read+0x28>
}
  400b52:	4620      	mov	r0, r4
  400b54:	b004      	add	sp, #16
  400b56:	bd10      	pop	{r4, pc}
		return ret;
  400b58:	4604      	mov	r4, r0
  400b5a:	e7fa      	b.n	400b52 <i2c_m_sync_read+0x22>
  400b5c:	00401c55 	.word	0x00401c55

00400b60 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400b60:	b538      	push	{r3, r4, r5, lr}
  400b62:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400b64:	4604      	mov	r4, r0
  400b66:	225e      	movs	r2, #94	; 0x5e
  400b68:	4908      	ldr	r1, [pc, #32]	; (400b8c <i2c_m_sync_init+0x2c>)
  400b6a:	3000      	adds	r0, #0
  400b6c:	bf18      	it	ne
  400b6e:	2001      	movne	r0, #1
  400b70:	4b07      	ldr	r3, [pc, #28]	; (400b90 <i2c_m_sync_init+0x30>)
  400b72:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400b74:	4629      	mov	r1, r5
  400b76:	4620      	mov	r0, r4
  400b78:	4b06      	ldr	r3, [pc, #24]	; (400b94 <i2c_m_sync_init+0x34>)
  400b7a:	4798      	blx	r3
	if (init_status) {
  400b7c:	4603      	mov	r3, r0
  400b7e:	b918      	cbnz	r0, 400b88 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400b80:	4a05      	ldr	r2, [pc, #20]	; (400b98 <i2c_m_sync_init+0x38>)
  400b82:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400b84:	4a05      	ldr	r2, [pc, #20]	; (400b9c <i2c_m_sync_init+0x3c>)
  400b86:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400b88:	4618      	mov	r0, r3
  400b8a:	bd38      	pop	{r3, r4, r5, pc}
  400b8c:	00402ccc 	.word	0x00402ccc
  400b90:	00400fe9 	.word	0x00400fe9
  400b94:	00401c0d 	.word	0x00401c0d
  400b98:	00400b31 	.word	0x00400b31
  400b9c:	00400b01 	.word	0x00400b01

00400ba0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400ba0:	b570      	push	{r4, r5, r6, lr}
  400ba2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400ba4:	4604      	mov	r4, r0
  400ba6:	460d      	mov	r5, r1
  400ba8:	2800      	cmp	r0, #0
  400baa:	bf18      	it	ne
  400bac:	2900      	cmpne	r1, #0
  400bae:	bf14      	ite	ne
  400bb0:	2001      	movne	r0, #1
  400bb2:	2000      	moveq	r0, #0
  400bb4:	2234      	movs	r2, #52	; 0x34
  400bb6:	4904      	ldr	r1, [pc, #16]	; (400bc8 <io_write+0x28>)
  400bb8:	4b04      	ldr	r3, [pc, #16]	; (400bcc <io_write+0x2c>)
  400bba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400bbc:	6823      	ldr	r3, [r4, #0]
  400bbe:	4632      	mov	r2, r6
  400bc0:	4629      	mov	r1, r5
  400bc2:	4620      	mov	r0, r4
  400bc4:	4798      	blx	r3
}
  400bc6:	bd70      	pop	{r4, r5, r6, pc}
  400bc8:	00402ce8 	.word	0x00402ce8
  400bcc:	00400fe9 	.word	0x00400fe9

00400bd0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400bd0:	b570      	push	{r4, r5, r6, lr}
  400bd2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400bd4:	4604      	mov	r4, r0
  400bd6:	460d      	mov	r5, r1
  400bd8:	2800      	cmp	r0, #0
  400bda:	bf18      	it	ne
  400bdc:	2900      	cmpne	r1, #0
  400bde:	bf14      	ite	ne
  400be0:	2001      	movne	r0, #1
  400be2:	2000      	moveq	r0, #0
  400be4:	223d      	movs	r2, #61	; 0x3d
  400be6:	4904      	ldr	r1, [pc, #16]	; (400bf8 <io_read+0x28>)
  400be8:	4b04      	ldr	r3, [pc, #16]	; (400bfc <io_read+0x2c>)
  400bea:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400bec:	6863      	ldr	r3, [r4, #4]
  400bee:	4632      	mov	r2, r6
  400bf0:	4629      	mov	r1, r5
  400bf2:	4620      	mov	r0, r4
  400bf4:	4798      	blx	r3
}
  400bf6:	bd70      	pop	{r4, r5, r6, pc}
  400bf8:	00402ce8 	.word	0x00402ce8
  400bfc:	00400fe9 	.word	0x00400fe9

00400c00 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400c00:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400c02:	6943      	ldr	r3, [r0, #20]
  400c04:	b103      	cbz	r3, 400c08 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400c06:	4798      	blx	r3
  400c08:	bd08      	pop	{r3, pc}

00400c0a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400c0a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400c0c:	6983      	ldr	r3, [r0, #24]
  400c0e:	b103      	cbz	r3, 400c12 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400c10:	4798      	blx	r3
  400c12:	bd08      	pop	{r3, pc}

00400c14 <pwm_init>:
{
  400c14:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c16:	4604      	mov	r4, r0
  400c18:	460d      	mov	r5, r1
  400c1a:	2800      	cmp	r0, #0
  400c1c:	bf18      	it	ne
  400c1e:	2900      	cmpne	r1, #0
  400c20:	bf14      	ite	ne
  400c22:	2001      	movne	r0, #1
  400c24:	2000      	moveq	r0, #0
  400c26:	2233      	movs	r2, #51	; 0x33
  400c28:	4906      	ldr	r1, [pc, #24]	; (400c44 <pwm_init+0x30>)
  400c2a:	4b07      	ldr	r3, [pc, #28]	; (400c48 <pwm_init+0x34>)
  400c2c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400c2e:	4629      	mov	r1, r5
  400c30:	4620      	mov	r0, r4
  400c32:	4b06      	ldr	r3, [pc, #24]	; (400c4c <pwm_init+0x38>)
  400c34:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400c36:	4b06      	ldr	r3, [pc, #24]	; (400c50 <pwm_init+0x3c>)
  400c38:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400c3a:	4b06      	ldr	r3, [pc, #24]	; (400c54 <pwm_init+0x40>)
  400c3c:	6063      	str	r3, [r4, #4]
}
  400c3e:	2000      	movs	r0, #0
  400c40:	bd38      	pop	{r3, r4, r5, pc}
  400c42:	bf00      	nop
  400c44:	00402cfc 	.word	0x00402cfc
  400c48:	00400fe9 	.word	0x00400fe9
  400c4c:	00401639 	.word	0x00401639
  400c50:	00400c01 	.word	0x00400c01
  400c54:	00400c0b 	.word	0x00400c0b

00400c58 <pwm_enable>:
{
  400c58:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c5a:	4604      	mov	r4, r0
  400c5c:	224a      	movs	r2, #74	; 0x4a
  400c5e:	4909      	ldr	r1, [pc, #36]	; (400c84 <pwm_enable+0x2c>)
  400c60:	3000      	adds	r0, #0
  400c62:	bf18      	it	ne
  400c64:	2001      	movne	r0, #1
  400c66:	4b08      	ldr	r3, [pc, #32]	; (400c88 <pwm_enable+0x30>)
  400c68:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400c6a:	4620      	mov	r0, r4
  400c6c:	4b07      	ldr	r3, [pc, #28]	; (400c8c <pwm_enable+0x34>)
  400c6e:	4798      	blx	r3
  400c70:	b920      	cbnz	r0, 400c7c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400c72:	4620      	mov	r0, r4
  400c74:	4b06      	ldr	r3, [pc, #24]	; (400c90 <pwm_enable+0x38>)
  400c76:	4798      	blx	r3
	return ERR_NONE;
  400c78:	2000      	movs	r0, #0
  400c7a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400c7c:	f06f 0010 	mvn.w	r0, #16
}
  400c80:	bd10      	pop	{r4, pc}
  400c82:	bf00      	nop
  400c84:	00402cfc 	.word	0x00402cfc
  400c88:	00400fe9 	.word	0x00400fe9
  400c8c:	004017b5 	.word	0x004017b5
  400c90:	00401771 	.word	0x00401771

00400c94 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400c94:	b538      	push	{r3, r4, r5, lr}
  400c96:	460d      	mov	r5, r1
	ASSERT(spi);
  400c98:	4604      	mov	r4, r0
  400c9a:	2239      	movs	r2, #57	; 0x39
  400c9c:	4903      	ldr	r1, [pc, #12]	; (400cac <spi_m_sync_set_func_ptr+0x18>)
  400c9e:	3000      	adds	r0, #0
  400ca0:	bf18      	it	ne
  400ca2:	2001      	movne	r0, #1
  400ca4:	4b02      	ldr	r3, [pc, #8]	; (400cb0 <spi_m_sync_set_func_ptr+0x1c>)
  400ca6:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400ca8:	6025      	str	r5, [r4, #0]
  400caa:	bd38      	pop	{r3, r4, r5, pc}
  400cac:	00402d14 	.word	0x00402d14
  400cb0:	00400fe9 	.word	0x00400fe9

00400cb4 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400cb4:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400cb6:	4604      	mov	r4, r0
  400cb8:	460d      	mov	r5, r1
  400cba:	2800      	cmp	r0, #0
  400cbc:	bf18      	it	ne
  400cbe:	2900      	cmpne	r1, #0
  400cc0:	bf14      	ite	ne
  400cc2:	2001      	movne	r0, #1
  400cc4:	2000      	moveq	r0, #0
  400cc6:	2240      	movs	r2, #64	; 0x40
  400cc8:	4909      	ldr	r1, [pc, #36]	; (400cf0 <spi_m_sync_init+0x3c>)
  400cca:	4b0a      	ldr	r3, [pc, #40]	; (400cf4 <spi_m_sync_init+0x40>)
  400ccc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400cce:	4620      	mov	r0, r4
  400cd0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400cd4:	4629      	mov	r1, r5
  400cd6:	4b08      	ldr	r3, [pc, #32]	; (400cf8 <spi_m_sync_init+0x44>)
  400cd8:	4798      	blx	r3

	if (rc < 0) {
  400cda:	2800      	cmp	r0, #0
  400cdc:	db07      	blt.n	400cee <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400ce4:	4b05      	ldr	r3, [pc, #20]	; (400cfc <spi_m_sync_init+0x48>)
  400ce6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400ce8:	4b05      	ldr	r3, [pc, #20]	; (400d00 <spi_m_sync_init+0x4c>)
  400cea:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400cec:	2000      	movs	r0, #0
}
  400cee:	bd38      	pop	{r3, r4, r5, pc}
  400cf0:	00402d14 	.word	0x00402d14
  400cf4:	00400fe9 	.word	0x00400fe9
  400cf8:	00401809 	.word	0x00401809
  400cfc:	00400da9 	.word	0x00400da9
  400d00:	00400d6d 	.word	0x00400d6d

00400d04 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400d04:	b510      	push	{r4, lr}
	ASSERT(spi);
  400d06:	4604      	mov	r4, r0
  400d08:	2257      	movs	r2, #87	; 0x57
  400d0a:	4905      	ldr	r1, [pc, #20]	; (400d20 <spi_m_sync_enable+0x1c>)
  400d0c:	3000      	adds	r0, #0
  400d0e:	bf18      	it	ne
  400d10:	2001      	movne	r0, #1
  400d12:	4b04      	ldr	r3, [pc, #16]	; (400d24 <spi_m_sync_enable+0x20>)
  400d14:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400d16:	1d20      	adds	r0, r4, #4
  400d18:	4b03      	ldr	r3, [pc, #12]	; (400d28 <spi_m_sync_enable+0x24>)
  400d1a:	4798      	blx	r3
  400d1c:	bd10      	pop	{r4, pc}
  400d1e:	bf00      	nop
  400d20:	00402d14 	.word	0x00402d14
  400d24:	00400fe9 	.word	0x00400fe9
  400d28:	004018b1 	.word	0x004018b1

00400d2c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400d2c:	b530      	push	{r4, r5, lr}
  400d2e:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400d30:	4605      	mov	r5, r0
  400d32:	460c      	mov	r4, r1
  400d34:	2800      	cmp	r0, #0
  400d36:	bf18      	it	ne
  400d38:	2900      	cmpne	r1, #0
  400d3a:	bf14      	ite	ne
  400d3c:	2001      	movne	r0, #1
  400d3e:	2000      	moveq	r0, #0
  400d40:	22b3      	movs	r2, #179	; 0xb3
  400d42:	4907      	ldr	r1, [pc, #28]	; (400d60 <spi_m_sync_transfer+0x34>)
  400d44:	4b07      	ldr	r3, [pc, #28]	; (400d64 <spi_m_sync_transfer+0x38>)
  400d46:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400d48:	6823      	ldr	r3, [r4, #0]
  400d4a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400d4c:	6863      	ldr	r3, [r4, #4]
  400d4e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400d50:	68a3      	ldr	r3, [r4, #8]
  400d52:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400d54:	a901      	add	r1, sp, #4
  400d56:	1d28      	adds	r0, r5, #4
  400d58:	4b03      	ldr	r3, [pc, #12]	; (400d68 <spi_m_sync_transfer+0x3c>)
  400d5a:	4798      	blx	r3
}
  400d5c:	b005      	add	sp, #20
  400d5e:	bd30      	pop	{r4, r5, pc}
  400d60:	00402d14 	.word	0x00402d14
  400d64:	00400fe9 	.word	0x00400fe9
  400d68:	004018e5 	.word	0x004018e5

00400d6c <_spi_m_sync_io_write>:
{
  400d6c:	b570      	push	{r4, r5, r6, lr}
  400d6e:	b084      	sub	sp, #16
  400d70:	460e      	mov	r6, r1
  400d72:	4615      	mov	r5, r2
	ASSERT(io);
  400d74:	4604      	mov	r4, r0
  400d76:	22a3      	movs	r2, #163	; 0xa3
  400d78:	4908      	ldr	r1, [pc, #32]	; (400d9c <_spi_m_sync_io_write+0x30>)
  400d7a:	3000      	adds	r0, #0
  400d7c:	bf18      	it	ne
  400d7e:	2001      	movne	r0, #1
  400d80:	4b07      	ldr	r3, [pc, #28]	; (400da0 <_spi_m_sync_io_write+0x34>)
  400d82:	4798      	blx	r3
	xfer.rxbuf = 0;
  400d84:	2300      	movs	r3, #0
  400d86:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400d88:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400d8a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400d8c:	a901      	add	r1, sp, #4
  400d8e:	f1a4 000c 	sub.w	r0, r4, #12
  400d92:	4b04      	ldr	r3, [pc, #16]	; (400da4 <_spi_m_sync_io_write+0x38>)
  400d94:	4798      	blx	r3
}
  400d96:	b004      	add	sp, #16
  400d98:	bd70      	pop	{r4, r5, r6, pc}
  400d9a:	bf00      	nop
  400d9c:	00402d14 	.word	0x00402d14
  400da0:	00400fe9 	.word	0x00400fe9
  400da4:	00400d2d 	.word	0x00400d2d

00400da8 <_spi_m_sync_io_read>:
{
  400da8:	b570      	push	{r4, r5, r6, lr}
  400daa:	b084      	sub	sp, #16
  400dac:	460e      	mov	r6, r1
  400dae:	4615      	mov	r5, r2
	ASSERT(io);
  400db0:	4604      	mov	r4, r0
  400db2:	2287      	movs	r2, #135	; 0x87
  400db4:	4908      	ldr	r1, [pc, #32]	; (400dd8 <_spi_m_sync_io_read+0x30>)
  400db6:	3000      	adds	r0, #0
  400db8:	bf18      	it	ne
  400dba:	2001      	movne	r0, #1
  400dbc:	4b07      	ldr	r3, [pc, #28]	; (400ddc <_spi_m_sync_io_read+0x34>)
  400dbe:	4798      	blx	r3
	xfer.rxbuf = buf;
  400dc0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400dc2:	2300      	movs	r3, #0
  400dc4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400dc6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400dc8:	a901      	add	r1, sp, #4
  400dca:	f1a4 000c 	sub.w	r0, r4, #12
  400dce:	4b04      	ldr	r3, [pc, #16]	; (400de0 <_spi_m_sync_io_read+0x38>)
  400dd0:	4798      	blx	r3
}
  400dd2:	b004      	add	sp, #16
  400dd4:	bd70      	pop	{r4, r5, r6, pc}
  400dd6:	bf00      	nop
  400dd8:	00402d14 	.word	0x00402d14
  400ddc:	00400fe9 	.word	0x00400fe9
  400de0:	00400d2d 	.word	0x00400d2d

00400de4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400de4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400de6:	4604      	mov	r4, r0
  400de8:	460d      	mov	r5, r1
  400dea:	2800      	cmp	r0, #0
  400dec:	bf18      	it	ne
  400dee:	2900      	cmpne	r1, #0
  400df0:	bf14      	ite	ne
  400df2:	2001      	movne	r0, #1
  400df4:	2000      	moveq	r0, #0
  400df6:	22bd      	movs	r2, #189	; 0xbd
  400df8:	4903      	ldr	r1, [pc, #12]	; (400e08 <spi_m_sync_get_io_descriptor+0x24>)
  400dfa:	4b04      	ldr	r3, [pc, #16]	; (400e0c <spi_m_sync_get_io_descriptor+0x28>)
  400dfc:	4798      	blx	r3
	*io = &spi->io;
  400dfe:	340c      	adds	r4, #12
  400e00:	602c      	str	r4, [r5, #0]
	return 0;
}
  400e02:	2000      	movs	r0, #0
  400e04:	bd38      	pop	{r3, r4, r5, pc}
  400e06:	bf00      	nop
  400e08:	00402d14 	.word	0x00402d14
  400e0c:	00400fe9 	.word	0x00400fe9

00400e10 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400e12:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400e14:	b117      	cbz	r7, 400e1c <timer_add_timer_task+0xc>
  400e16:	463c      	mov	r4, r7
  400e18:	2600      	movs	r6, #0
  400e1a:	e00b      	b.n	400e34 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400e1c:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <timer_add_timer_task+0x48>)
  400e1e:	4798      	blx	r3
		return;
  400e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400e22:	68a5      	ldr	r5, [r4, #8]
  400e24:	442b      	add	r3, r5
  400e26:	1a9b      	subs	r3, r3, r2
  400e28:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400e2a:	688d      	ldr	r5, [r1, #8]
  400e2c:	42ab      	cmp	r3, r5
  400e2e:	d209      	bcs.n	400e44 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400e30:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400e32:	6824      	ldr	r4, [r4, #0]
  400e34:	b134      	cbz	r4, 400e44 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400e36:	6863      	ldr	r3, [r4, #4]
  400e38:	4293      	cmp	r3, r2
  400e3a:	d8f2      	bhi.n	400e22 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400e3c:	68a5      	ldr	r5, [r4, #8]
  400e3e:	1a9b      	subs	r3, r3, r2
  400e40:	442b      	add	r3, r5
  400e42:	e7f2      	b.n	400e2a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400e44:	42bc      	cmp	r4, r7
  400e46:	d003      	beq.n	400e50 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400e48:	4630      	mov	r0, r6
  400e4a:	4b04      	ldr	r3, [pc, #16]	; (400e5c <timer_add_timer_task+0x4c>)
  400e4c:	4798      	blx	r3
  400e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400e50:	4b01      	ldr	r3, [pc, #4]	; (400e58 <timer_add_timer_task+0x48>)
  400e52:	4798      	blx	r3
  400e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e56:	bf00      	nop
  400e58:	00401005 	.word	0x00401005
  400e5c:	00401031 	.word	0x00401031

00400e60 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e62:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400e64:	6906      	ldr	r6, [r0, #16]
  400e66:	3601      	adds	r6, #1
  400e68:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400e6a:	7e03      	ldrb	r3, [r0, #24]
  400e6c:	f013 0f01 	tst.w	r3, #1
  400e70:	d105      	bne.n	400e7e <timer_process_counted+0x1e>
  400e72:	7e03      	ldrb	r3, [r0, #24]
  400e74:	f013 0f02 	tst.w	r3, #2
  400e78:	d101      	bne.n	400e7e <timer_process_counted+0x1e>
  400e7a:	4605      	mov	r5, r0
  400e7c:	e009      	b.n	400e92 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400e7e:	7e03      	ldrb	r3, [r0, #24]
  400e80:	f043 0302 	orr.w	r3, r3, #2
  400e84:	7603      	strb	r3, [r0, #24]
		return;
  400e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e88:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400e8a:	68e3      	ldr	r3, [r4, #12]
  400e8c:	4620      	mov	r0, r4
  400e8e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400e90:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400e92:	b19c      	cbz	r4, 400ebc <timer_process_counted+0x5c>
  400e94:	6863      	ldr	r3, [r4, #4]
  400e96:	1af3      	subs	r3, r6, r3
  400e98:	68a2      	ldr	r2, [r4, #8]
  400e9a:	4293      	cmp	r3, r2
  400e9c:	d30e      	bcc.n	400ebc <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400e9e:	f105 0714 	add.w	r7, r5, #20
  400ea2:	4638      	mov	r0, r7
  400ea4:	4b06      	ldr	r3, [pc, #24]	; (400ec0 <timer_process_counted+0x60>)
  400ea6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400ea8:	7c23      	ldrb	r3, [r4, #16]
  400eaa:	2b01      	cmp	r3, #1
  400eac:	d1ec      	bne.n	400e88 <timer_process_counted+0x28>
			tmp->time_label = time;
  400eae:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400eb0:	4632      	mov	r2, r6
  400eb2:	4621      	mov	r1, r4
  400eb4:	4638      	mov	r0, r7
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <timer_process_counted+0x64>)
  400eb8:	4798      	blx	r3
  400eba:	e7e5      	b.n	400e88 <timer_process_counted+0x28>
  400ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ebe:	bf00      	nop
  400ec0:	00401039 	.word	0x00401039
  400ec4:	00400e11 	.word	0x00400e11

00400ec8 <timer_init>:
{
  400ec8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400eca:	4604      	mov	r4, r0
  400ecc:	460d      	mov	r5, r1
  400ece:	2800      	cmp	r0, #0
  400ed0:	bf18      	it	ne
  400ed2:	2900      	cmpne	r1, #0
  400ed4:	bf14      	ite	ne
  400ed6:	2001      	movne	r0, #1
  400ed8:	2000      	moveq	r0, #0
  400eda:	223b      	movs	r2, #59	; 0x3b
  400edc:	4905      	ldr	r1, [pc, #20]	; (400ef4 <timer_init+0x2c>)
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <timer_init+0x30>)
  400ee0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400ee2:	4629      	mov	r1, r5
  400ee4:	4620      	mov	r0, r4
  400ee6:	4b05      	ldr	r3, [pc, #20]	; (400efc <timer_init+0x34>)
  400ee8:	4798      	blx	r3
	descr->time                           = 0;
  400eea:	2000      	movs	r0, #0
  400eec:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400eee:	4b04      	ldr	r3, [pc, #16]	; (400f00 <timer_init+0x38>)
  400ef0:	6023      	str	r3, [r4, #0]
}
  400ef2:	bd38      	pop	{r3, r4, r5, pc}
  400ef4:	00402d30 	.word	0x00402d30
  400ef8:	00400fe9 	.word	0x00400fe9
  400efc:	00401ac1 	.word	0x00401ac1
  400f00:	00400e61 	.word	0x00400e61

00400f04 <timer_start>:
{
  400f04:	b510      	push	{r4, lr}
	ASSERT(descr);
  400f06:	4604      	mov	r4, r0
  400f08:	2253      	movs	r2, #83	; 0x53
  400f0a:	4909      	ldr	r1, [pc, #36]	; (400f30 <timer_start+0x2c>)
  400f0c:	3000      	adds	r0, #0
  400f0e:	bf18      	it	ne
  400f10:	2001      	movne	r0, #1
  400f12:	4b08      	ldr	r3, [pc, #32]	; (400f34 <timer_start+0x30>)
  400f14:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400f16:	4620      	mov	r0, r4
  400f18:	4b07      	ldr	r3, [pc, #28]	; (400f38 <timer_start+0x34>)
  400f1a:	4798      	blx	r3
  400f1c:	b920      	cbnz	r0, 400f28 <timer_start+0x24>
	_timer_start(&descr->device);
  400f1e:	4620      	mov	r0, r4
  400f20:	4b06      	ldr	r3, [pc, #24]	; (400f3c <timer_start+0x38>)
  400f22:	4798      	blx	r3
	return ERR_NONE;
  400f24:	2000      	movs	r0, #0
  400f26:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400f28:	f06f 0010 	mvn.w	r0, #16
}
  400f2c:	bd10      	pop	{r4, pc}
  400f2e:	bf00      	nop
  400f30:	00402d30 	.word	0x00402d30
  400f34:	00400fe9 	.word	0x00400fe9
  400f38:	00401b85 	.word	0x00401b85
  400f3c:	00401b7d 	.word	0x00401b7d

00400f40 <timer_add_task>:
{
  400f40:	b570      	push	{r4, r5, r6, lr}
  400f42:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400f44:	4604      	mov	r4, r0
  400f46:	460d      	mov	r5, r1
  400f48:	2800      	cmp	r0, #0
  400f4a:	bf18      	it	ne
  400f4c:	2900      	cmpne	r1, #0
  400f4e:	bf14      	ite	ne
  400f50:	2001      	movne	r0, #1
  400f52:	2000      	moveq	r0, #0
  400f54:	227a      	movs	r2, #122	; 0x7a
  400f56:	491d      	ldr	r1, [pc, #116]	; (400fcc <timer_add_task+0x8c>)
  400f58:	4b1d      	ldr	r3, [pc, #116]	; (400fd0 <timer_add_task+0x90>)
  400f5a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400f5c:	7e23      	ldrb	r3, [r4, #24]
  400f5e:	f043 0301 	orr.w	r3, r3, #1
  400f62:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400f64:	f104 0614 	add.w	r6, r4, #20
  400f68:	4629      	mov	r1, r5
  400f6a:	4630      	mov	r0, r6
  400f6c:	4b19      	ldr	r3, [pc, #100]	; (400fd4 <timer_add_task+0x94>)
  400f6e:	4798      	blx	r3
  400f70:	b988      	cbnz	r0, 400f96 <timer_add_task+0x56>
	task->time_label = descr->time;
  400f72:	6923      	ldr	r3, [r4, #16]
  400f74:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400f76:	6922      	ldr	r2, [r4, #16]
  400f78:	4629      	mov	r1, r5
  400f7a:	4630      	mov	r0, r6
  400f7c:	4b16      	ldr	r3, [pc, #88]	; (400fd8 <timer_add_task+0x98>)
  400f7e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400f80:	7e23      	ldrb	r3, [r4, #24]
  400f82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400f86:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400f88:	7e23      	ldrb	r3, [r4, #24]
  400f8a:	f013 0f02 	tst.w	r3, #2
  400f8e:	d10e      	bne.n	400fae <timer_add_task+0x6e>
	return ERR_NONE;
  400f90:	2000      	movs	r0, #0
}
  400f92:	b002      	add	sp, #8
  400f94:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400f96:	7e23      	ldrb	r3, [r4, #24]
  400f98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400f9c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  400f9e:	227f      	movs	r2, #127	; 0x7f
  400fa0:	490a      	ldr	r1, [pc, #40]	; (400fcc <timer_add_task+0x8c>)
  400fa2:	2000      	movs	r0, #0
  400fa4:	4b0a      	ldr	r3, [pc, #40]	; (400fd0 <timer_add_task+0x90>)
  400fa6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400fa8:	f06f 0011 	mvn.w	r0, #17
  400fac:	e7f1      	b.n	400f92 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  400fae:	a801      	add	r0, sp, #4
  400fb0:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <timer_add_task+0x9c>)
  400fb2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400fb4:	7e23      	ldrb	r3, [r4, #24]
  400fb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400fba:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400fbc:	4620      	mov	r0, r4
  400fbe:	4b08      	ldr	r3, [pc, #32]	; (400fe0 <timer_add_task+0xa0>)
  400fc0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400fc2:	a801      	add	r0, sp, #4
  400fc4:	4b07      	ldr	r3, [pc, #28]	; (400fe4 <timer_add_task+0xa4>)
  400fc6:	4798      	blx	r3
	return ERR_NONE;
  400fc8:	2000      	movs	r0, #0
  400fca:	e7e2      	b.n	400f92 <timer_add_task+0x52>
  400fcc:	00402d30 	.word	0x00402d30
  400fd0:	00400fe9 	.word	0x00400fe9
  400fd4:	00400fef 	.word	0x00400fef
  400fd8:	00400e11 	.word	0x00400e11
  400fdc:	00400949 	.word	0x00400949
  400fe0:	00401b91 	.word	0x00401b91
  400fe4:	00400957 	.word	0x00400957

00400fe8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400fe8:	b900      	cbnz	r0, 400fec <assert+0x4>
		__asm("BKPT #0");
  400fea:	be00      	bkpt	0x0000
  400fec:	4770      	bx	lr

00400fee <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400fee:	6803      	ldr	r3, [r0, #0]
  400ff0:	b11b      	cbz	r3, 400ffa <is_list_element+0xc>
		if (it == element) {
  400ff2:	428b      	cmp	r3, r1
  400ff4:	d003      	beq.n	400ffe <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400ff6:	681b      	ldr	r3, [r3, #0]
  400ff8:	e7fa      	b.n	400ff0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400ffa:	2000      	movs	r0, #0
  400ffc:	4770      	bx	lr
			return true;
  400ffe:	2001      	movs	r0, #1
}
  401000:	4770      	bx	lr
	...

00401004 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401004:	b538      	push	{r3, r4, r5, lr}
  401006:	4604      	mov	r4, r0
  401008:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40100a:	4b06      	ldr	r3, [pc, #24]	; (401024 <list_insert_as_head+0x20>)
  40100c:	4798      	blx	r3
  40100e:	f080 0001 	eor.w	r0, r0, #1
  401012:	2239      	movs	r2, #57	; 0x39
  401014:	4904      	ldr	r1, [pc, #16]	; (401028 <list_insert_as_head+0x24>)
  401016:	b2c0      	uxtb	r0, r0
  401018:	4b04      	ldr	r3, [pc, #16]	; (40102c <list_insert_as_head+0x28>)
  40101a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  40101c:	6823      	ldr	r3, [r4, #0]
  40101e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401020:	6025      	str	r5, [r4, #0]
  401022:	bd38      	pop	{r3, r4, r5, pc}
  401024:	00400fef 	.word	0x00400fef
  401028:	00402d48 	.word	0x00402d48
  40102c:	00400fe9 	.word	0x00400fe9

00401030 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401030:	6803      	ldr	r3, [r0, #0]
  401032:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401034:	6001      	str	r1, [r0, #0]
  401036:	4770      	bx	lr

00401038 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401038:	6803      	ldr	r3, [r0, #0]
  40103a:	b11b      	cbz	r3, 401044 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  40103c:	681a      	ldr	r2, [r3, #0]
  40103e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401040:	4618      	mov	r0, r3
  401042:	4770      	bx	lr
	}

	return NULL;
  401044:	2000      	movs	r0, #0
}
  401046:	4770      	bx	lr

00401048 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401048:	2364      	movs	r3, #100	; 0x64
  40104a:	4a1d      	ldr	r2, [pc, #116]	; (4010c0 <_afec_init+0x78>)
  40104c:	fb03 2301 	mla	r3, r3, r1, r2
  401050:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401052:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401054:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401056:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401058:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  40105a:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  40105c:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  40105e:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401060:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401062:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401064:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401066:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401068:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  40106a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  40106c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  40106e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401074:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  40107a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  40107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401080:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401086:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40108a:	2200      	movs	r2, #0
  40108c:	2a0b      	cmp	r2, #11
  40108e:	d814      	bhi.n	4010ba <_afec_init+0x72>
{
  401090:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401092:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401094:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40109c:	4413      	add	r3, r2
  40109e:	330c      	adds	r3, #12
  4010a0:	4c07      	ldr	r4, [pc, #28]	; (4010c0 <_afec_init+0x78>)
  4010a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4010a6:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4010a8:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4010aa:	3201      	adds	r2, #1
  4010ac:	b2d2      	uxtb	r2, r2
  4010ae:	2a0b      	cmp	r2, #11
  4010b0:	d9ef      	bls.n	401092 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4010b2:	2000      	movs	r0, #0
  4010b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010b8:	4770      	bx	lr
  4010ba:	2000      	movs	r0, #0
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	00402d68 	.word	0x00402d68

004010c4 <_afec_get_hardware_index>:
{
  4010c4:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4010c6:	4b09      	ldr	r3, [pc, #36]	; (4010ec <_afec_get_hardware_index+0x28>)
  4010c8:	4298      	cmp	r0, r3
  4010ca:	d00a      	beq.n	4010e2 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4010cc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4010d0:	4298      	cmp	r0, r3
  4010d2:	d008      	beq.n	4010e6 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4010d4:	22a3      	movs	r2, #163	; 0xa3
  4010d6:	4906      	ldr	r1, [pc, #24]	; (4010f0 <_afec_get_hardware_index+0x2c>)
  4010d8:	2000      	movs	r0, #0
  4010da:	4b06      	ldr	r3, [pc, #24]	; (4010f4 <_afec_get_hardware_index+0x30>)
  4010dc:	4798      	blx	r3
	return 0;
  4010de:	2000      	movs	r0, #0
  4010e0:	bd08      	pop	{r3, pc}
		return 0;
  4010e2:	2000      	movs	r0, #0
  4010e4:	bd08      	pop	{r3, pc}
		return 1;
  4010e6:	2001      	movs	r0, #1
}
  4010e8:	bd08      	pop	{r3, pc}
  4010ea:	bf00      	nop
  4010ec:	4003c000 	.word	0x4003c000
  4010f0:	00402dcc 	.word	0x00402dcc
  4010f4:	00400fe9 	.word	0x00400fe9

004010f8 <_afec_get_regs>:
{
  4010f8:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4010fa:	4b08      	ldr	r3, [pc, #32]	; (40111c <_afec_get_regs+0x24>)
  4010fc:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4010fe:	2300      	movs	r3, #0
  401100:	b113      	cbz	r3, 401108 <_afec_get_regs+0x10>
	return 0;
  401102:	2300      	movs	r3, #0
}
  401104:	4618      	mov	r0, r3
  401106:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  401108:	2264      	movs	r2, #100	; 0x64
  40110a:	fb02 f203 	mul.w	r2, r2, r3
  40110e:	4904      	ldr	r1, [pc, #16]	; (401120 <_afec_get_regs+0x28>)
  401110:	5c8a      	ldrb	r2, [r1, r2]
  401112:	4290      	cmp	r0, r2
  401114:	d0f6      	beq.n	401104 <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401116:	3301      	adds	r3, #1
  401118:	b2db      	uxtb	r3, r3
  40111a:	e7f1      	b.n	401100 <_afec_get_regs+0x8>
  40111c:	004010c5 	.word	0x004010c5
  401120:	00402d68 	.word	0x00402d68

00401124 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  401124:	b538      	push	{r3, r4, r5, lr}
  401126:	460c      	mov	r4, r1
	ASSERT(device);
  401128:	4605      	mov	r5, r0
  40112a:	f44f 728d 	mov.w	r2, #282	; 0x11a
  40112e:	4907      	ldr	r1, [pc, #28]	; (40114c <_adc_sync_init+0x28>)
  401130:	3000      	adds	r0, #0
  401132:	bf18      	it	ne
  401134:	2001      	movne	r0, #1
  401136:	4b06      	ldr	r3, [pc, #24]	; (401150 <_adc_sync_init+0x2c>)
  401138:	4798      	blx	r3

	device->hw = hw;
  40113a:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40113c:	4620      	mov	r0, r4
  40113e:	4b05      	ldr	r3, [pc, #20]	; (401154 <_adc_sync_init+0x30>)
  401140:	4798      	blx	r3
  401142:	4601      	mov	r1, r0
  401144:	4620      	mov	r0, r4
  401146:	4b04      	ldr	r3, [pc, #16]	; (401158 <_adc_sync_init+0x34>)
  401148:	4798      	blx	r3
}
  40114a:	bd38      	pop	{r3, r4, r5, pc}
  40114c:	00402dcc 	.word	0x00402dcc
  401150:	00400fe9 	.word	0x00400fe9
  401154:	004010f9 	.word	0x004010f9
  401158:	00401049 	.word	0x00401049

0040115c <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  40115c:	6802      	ldr	r2, [r0, #0]
  40115e:	2301      	movs	r3, #1
  401160:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401164:	6151      	str	r1, [r2, #20]
  401166:	4770      	bx	lr

00401168 <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  401168:	2002      	movs	r0, #2
  40116a:	4770      	bx	lr

0040116c <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  40116c:	6802      	ldr	r2, [r0, #0]
  40116e:	2301      	movs	r3, #1
  401170:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  401174:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401176:	4219      	tst	r1, r3
}
  401178:	bf14      	ite	ne
  40117a:	2001      	movne	r0, #1
  40117c:	2000      	moveq	r0, #0
  40117e:	4770      	bx	lr

00401180 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401180:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401182:	2202      	movs	r2, #2
  401184:	601a      	str	r2, [r3, #0]
  401186:	4770      	bx	lr

00401188 <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  401188:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  40118a:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  40118c:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  40118e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401190:	b280      	uxth	r0, r0
  401192:	4770      	bx	lr

00401194 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  401194:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401196:	2b00      	cmp	r3, #0
  401198:	db09      	blt.n	4011ae <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40119a:	095b      	lsrs	r3, r3, #5
  40119c:	f000 001f 	and.w	r0, r0, #31
  4011a0:	2201      	movs	r2, #1
  4011a2:	fa02 f000 	lsl.w	r0, r2, r0
  4011a6:	3340      	adds	r3, #64	; 0x40
  4011a8:	4a01      	ldr	r2, [pc, #4]	; (4011b0 <_irq_set+0x1c>)
  4011aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4011ae:	4770      	bx	lr
  4011b0:	e000e100 	.word	0xe000e100

004011b4 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4011b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4011b8:	fb03 f000 	mul.w	r0, r3, r0
  4011bc:	4770      	bx	lr

004011be <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  4011be:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4011c2:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4011ca:	fb03 f000 	mul.w	r0, r3, r0
  4011ce:	4770      	bx	lr

004011d0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4011d0:	b500      	push	{lr}
  4011d2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4011d4:	a801      	add	r0, sp, #4
  4011d6:	4b0e      	ldr	r3, [pc, #56]	; (401210 <_init_chip+0x40>)
  4011d8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4011da:	4a0e      	ldr	r2, [pc, #56]	; (401214 <_init_chip+0x44>)
  4011dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4011e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4011ec:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4011f0:	a801      	add	r0, sp, #4
  4011f2:	4b09      	ldr	r3, [pc, #36]	; (401218 <_init_chip+0x48>)
  4011f4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4011f6:	4a09      	ldr	r2, [pc, #36]	; (40121c <_init_chip+0x4c>)
  4011f8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4011fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4011fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401202:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  401204:	4b06      	ldr	r3, [pc, #24]	; (401220 <_init_chip+0x50>)
  401206:	4798      	blx	r3
}
  401208:	b003      	add	sp, #12
  40120a:	f85d fb04 	ldr.w	pc, [sp], #4
  40120e:	bf00      	nop
  401210:	00400949 	.word	0x00400949
  401214:	e000ed00 	.word	0xe000ed00
  401218:	00400957 	.word	0x00400957
  40121c:	400e0c00 	.word	0x400e0c00
  401220:	00401595 	.word	0x00401595

00401224 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401224:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401226:	2500      	movs	r5, #0
  401228:	428d      	cmp	r5, r1
  40122a:	d210      	bcs.n	40124e <_ffs+0x2a>
  40122c:	2201      	movs	r2, #1
  40122e:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401230:	2b1f      	cmp	r3, #31
  401232:	d80a      	bhi.n	40124a <_ffs+0x26>
			if (v[i] & bit) {
  401234:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401238:	4222      	tst	r2, r4
  40123a:	d102      	bne.n	401242 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  40123c:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40123e:	3301      	adds	r3, #1
  401240:	e7f6      	b.n	401230 <_ffs+0xc>
				return i * 32 + j;
  401242:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401246:	bc30      	pop	{r4, r5}
  401248:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  40124a:	3501      	adds	r5, #1
  40124c:	e7ec      	b.n	401228 <_ffs+0x4>
	return -1;
  40124e:	f04f 30ff 	mov.w	r0, #4294967295
  401252:	e7f8      	b.n	401246 <_ffs+0x22>

00401254 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401254:	b510      	push	{r4, lr}
  401256:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401258:	2300      	movs	r3, #0
  40125a:	9301      	str	r3, [sp, #4]
  40125c:	9302      	str	r3, [sp, #8]
  40125e:	9303      	str	r3, [sp, #12]
  401260:	9304      	str	r3, [sp, #16]
  401262:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401264:	4b21      	ldr	r3, [pc, #132]	; (4012ec <_ext_irq_handler+0x98>)
  401266:	6818      	ldr	r0, [r3, #0]
  401268:	22f8      	movs	r2, #248	; 0xf8
  40126a:	4921      	ldr	r1, [pc, #132]	; (4012f0 <_ext_irq_handler+0x9c>)
  40126c:	3000      	adds	r0, #0
  40126e:	bf18      	it	ne
  401270:	2001      	movne	r0, #1
  401272:	4b20      	ldr	r3, [pc, #128]	; (4012f4 <_ext_irq_handler+0xa0>)
  401274:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401276:	4b20      	ldr	r3, [pc, #128]	; (4012f8 <_ext_irq_handler+0xa4>)
  401278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40127a:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40127c:	4013      	ands	r3, r2
  40127e:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401280:	491e      	ldr	r1, [pc, #120]	; (4012fc <_ext_irq_handler+0xa8>)
  401282:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401284:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401286:	400a      	ands	r2, r1
  401288:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  40128a:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  40128c:	e025      	b.n	4012da <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40128e:	4b17      	ldr	r3, [pc, #92]	; (4012ec <_ext_irq_handler+0x98>)
  401290:	681b      	ldr	r3, [r3, #0]
  401292:	4620      	mov	r0, r4
  401294:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401296:	1163      	asrs	r3, r4, #5
  401298:	f004 041f 	and.w	r4, r4, #31
  40129c:	2201      	movs	r2, #1
  40129e:	fa02 f404 	lsl.w	r4, r2, r4
  4012a2:	aa06      	add	r2, sp, #24
  4012a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4012a8:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4012ac:	ea22 0204 	bic.w	r2, r2, r4
  4012b0:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4012b4:	2105      	movs	r1, #5
  4012b6:	a801      	add	r0, sp, #4
  4012b8:	4b11      	ldr	r3, [pc, #68]	; (401300 <_ext_irq_handler+0xac>)
  4012ba:	4798      	blx	r3
  4012bc:	4604      	mov	r4, r0
		while (-1 != pos) {
  4012be:	f1b4 3fff 	cmp.w	r4, #4294967295
  4012c2:	d1e4      	bne.n	40128e <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  4012c4:	4a0c      	ldr	r2, [pc, #48]	; (4012f8 <_ext_irq_handler+0xa4>)
  4012c6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4012c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4012ca:	400b      	ands	r3, r1
  4012cc:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4012ce:	490b      	ldr	r1, [pc, #44]	; (4012fc <_ext_irq_handler+0xa8>)
  4012d0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4012d2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4012d4:	4002      	ands	r2, r0
  4012d6:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  4012d8:	4313      	orrs	r3, r2
	while (flag_total) {
  4012da:	b12b      	cbz	r3, 4012e8 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4012dc:	2105      	movs	r1, #5
  4012de:	a801      	add	r0, sp, #4
  4012e0:	4b07      	ldr	r3, [pc, #28]	; (401300 <_ext_irq_handler+0xac>)
  4012e2:	4798      	blx	r3
  4012e4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4012e6:	e7ea      	b.n	4012be <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4012e8:	b006      	add	sp, #24
  4012ea:	bd10      	pop	{r4, pc}
  4012ec:	20400098 	.word	0x20400098
  4012f0:	00402e20 	.word	0x00402e20
  4012f4:	00400fe9 	.word	0x00400fe9
  4012f8:	400e0e00 	.word	0x400e0e00
  4012fc:	400e1000 	.word	0x400e1000
  401300:	00401225 	.word	0x00401225

00401304 <_pio_get_hardware_index>:
{
  401304:	b510      	push	{r4, lr}
	ASSERT(hw);
  401306:	4604      	mov	r4, r0
  401308:	22d2      	movs	r2, #210	; 0xd2
  40130a:	4905      	ldr	r1, [pc, #20]	; (401320 <_pio_get_hardware_index+0x1c>)
  40130c:	3000      	adds	r0, #0
  40130e:	bf18      	it	ne
  401310:	2001      	movne	r0, #1
  401312:	4b04      	ldr	r3, [pc, #16]	; (401324 <_pio_get_hardware_index+0x20>)
  401314:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401316:	4804      	ldr	r0, [pc, #16]	; (401328 <_pio_get_hardware_index+0x24>)
  401318:	4420      	add	r0, r4
}
  40131a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40131e:	bd10      	pop	{r4, pc}
  401320:	00402e20 	.word	0x00402e20
  401324:	00400fe9 	.word	0x00400fe9
  401328:	bff1f200 	.word	0xbff1f200

0040132c <_pio_get_index>:
{
  40132c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40132e:	4604      	mov	r4, r0
  401330:	22e0      	movs	r2, #224	; 0xe0
  401332:	490d      	ldr	r1, [pc, #52]	; (401368 <_pio_get_index+0x3c>)
  401334:	3000      	adds	r0, #0
  401336:	bf18      	it	ne
  401338:	2001      	movne	r0, #1
  40133a:	4b0c      	ldr	r3, [pc, #48]	; (40136c <_pio_get_index+0x40>)
  40133c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40133e:	4620      	mov	r0, r4
  401340:	4b0b      	ldr	r3, [pc, #44]	; (401370 <_pio_get_index+0x44>)
  401342:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401344:	2300      	movs	r3, #0
  401346:	2b01      	cmp	r3, #1
  401348:	d80b      	bhi.n	401362 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  40134a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40134e:	008a      	lsls	r2, r1, #2
  401350:	4908      	ldr	r1, [pc, #32]	; (401374 <_pio_get_index+0x48>)
  401352:	5c8a      	ldrb	r2, [r1, r2]
  401354:	4290      	cmp	r0, r2
  401356:	d002      	beq.n	40135e <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401358:	3301      	adds	r3, #1
  40135a:	b2db      	uxtb	r3, r3
  40135c:	e7f3      	b.n	401346 <_pio_get_index+0x1a>
			return i;
  40135e:	b258      	sxtb	r0, r3
  401360:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401362:	f04f 30ff 	mov.w	r0, #4294967295
}
  401366:	bd10      	pop	{r4, pc}
  401368:	00402e20 	.word	0x00402e20
  40136c:	00400fe9 	.word	0x00400fe9
  401370:	00401305 	.word	0x00401305
  401374:	00402de4 	.word	0x00402de4

00401378 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401378:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40137a:	4604      	mov	r4, r0
  40137c:	f240 1259 	movw	r2, #345	; 0x159
  401380:	4929      	ldr	r1, [pc, #164]	; (401428 <_pio_init+0xb0>)
  401382:	3000      	adds	r0, #0
  401384:	bf18      	it	ne
  401386:	2001      	movne	r0, #1
  401388:	4b28      	ldr	r3, [pc, #160]	; (40142c <_pio_init+0xb4>)
  40138a:	4798      	blx	r3

	i = _pio_get_index(hw);
  40138c:	4620      	mov	r0, r4
  40138e:	4b28      	ldr	r3, [pc, #160]	; (401430 <_pio_init+0xb8>)
  401390:	4798      	blx	r3
	if (i < 0) {
  401392:	2800      	cmp	r0, #0
  401394:	db43      	blt.n	40141e <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401396:	4d27      	ldr	r5, [pc, #156]	; (401434 <_pio_init+0xbc>)
  401398:	00c2      	lsls	r2, r0, #3
  40139a:	1a11      	subs	r1, r2, r0
  40139c:	008b      	lsls	r3, r1, #2
  40139e:	442b      	add	r3, r5
  4013a0:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4013a2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4013a6:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4013a8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4013ac:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4013ae:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4013b2:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4013b4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4013b8:	1a10      	subs	r0, r2, r0
  4013ba:	0083      	lsls	r3, r0, #2
  4013bc:	442b      	add	r3, r5
  4013be:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4013c0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4013c4:	4620      	mov	r0, r4
  4013c6:	4b1c      	ldr	r3, [pc, #112]	; (401438 <_pio_init+0xc0>)
  4013c8:	4798      	blx	r3
  4013ca:	4428      	add	r0, r5
  4013cc:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	db0c      	blt.n	4013ee <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013d4:	095a      	lsrs	r2, r3, #5
  4013d6:	f003 001f 	and.w	r0, r3, #31
  4013da:	2101      	movs	r1, #1
  4013dc:	4081      	lsls	r1, r0
  4013de:	3220      	adds	r2, #32
  4013e0:	4816      	ldr	r0, [pc, #88]	; (40143c <_pio_init+0xc4>)
  4013e2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4013e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013ea:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4013ee:	2b00      	cmp	r3, #0
  4013f0:	db08      	blt.n	401404 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013f2:	095a      	lsrs	r2, r3, #5
  4013f4:	f003 001f 	and.w	r0, r3, #31
  4013f8:	2101      	movs	r1, #1
  4013fa:	4081      	lsls	r1, r0
  4013fc:	3260      	adds	r2, #96	; 0x60
  4013fe:	480f      	ldr	r0, [pc, #60]	; (40143c <_pio_init+0xc4>)
  401400:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401404:	2b00      	cmp	r3, #0
  401406:	db0d      	blt.n	401424 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401408:	0959      	lsrs	r1, r3, #5
  40140a:	f003 031f 	and.w	r3, r3, #31
  40140e:	2201      	movs	r2, #1
  401410:	fa02 f303 	lsl.w	r3, r2, r3
  401414:	4a09      	ldr	r2, [pc, #36]	; (40143c <_pio_init+0xc4>)
  401416:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40141a:	2000      	movs	r0, #0
  40141c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40141e:	f06f 0010 	mvn.w	r0, #16
  401422:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401424:	2000      	movs	r0, #0
}
  401426:	bd38      	pop	{r3, r4, r5, pc}
  401428:	00402e20 	.word	0x00402e20
  40142c:	00400fe9 	.word	0x00400fe9
  401430:	0040132d 	.word	0x0040132d
  401434:	00402de4 	.word	0x00402de4
  401438:	00401305 	.word	0x00401305
  40143c:	e000e100 	.word	0xe000e100

00401440 <PIOB_Handler>:
{
  401440:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401442:	4b01      	ldr	r3, [pc, #4]	; (401448 <PIOB_Handler+0x8>)
  401444:	4798      	blx	r3
  401446:	bd08      	pop	{r3, pc}
  401448:	00401255 	.word	0x00401255

0040144c <PIOA_Handler>:
{
  40144c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40144e:	4b01      	ldr	r3, [pc, #4]	; (401454 <PIOA_Handler+0x8>)
  401450:	4798      	blx	r3
  401452:	bd08      	pop	{r3, pc}
  401454:	00401255 	.word	0x00401255

00401458 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401458:	b538      	push	{r3, r4, r5, lr}
  40145a:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  40145c:	4804      	ldr	r0, [pc, #16]	; (401470 <_ext_irq_init+0x18>)
  40145e:	4c05      	ldr	r4, [pc, #20]	; (401474 <_ext_irq_init+0x1c>)
  401460:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401462:	4805      	ldr	r0, [pc, #20]	; (401478 <_ext_irq_init+0x20>)
  401464:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401466:	4b05      	ldr	r3, [pc, #20]	; (40147c <_ext_irq_init+0x24>)
  401468:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  40146a:	2000      	movs	r0, #0
  40146c:	bd38      	pop	{r3, r4, r5, pc}
  40146e:	bf00      	nop
  401470:	400e0e00 	.word	0x400e0e00
  401474:	00401379 	.word	0x00401379
  401478:	400e1000 	.word	0x400e1000
  40147c:	20400098 	.word	0x20400098

00401480 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401484:	4604      	mov	r4, r0
  401486:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401488:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4014dc <_ext_irq_enable+0x5c>
  40148c:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  401490:	4641      	mov	r1, r8
  401492:	289f      	cmp	r0, #159	; 0x9f
  401494:	bf8c      	ite	hi
  401496:	2000      	movhi	r0, #0
  401498:	2001      	movls	r0, #1
  40149a:	4e0e      	ldr	r6, [pc, #56]	; (4014d4 <_ext_irq_enable+0x54>)
  40149c:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  40149e:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  4014a0:	22c3      	movs	r2, #195	; 0xc3
  4014a2:	4641      	mov	r1, r8
  4014a4:	2d9f      	cmp	r5, #159	; 0x9f
  4014a6:	bf8c      	ite	hi
  4014a8:	2000      	movhi	r0, #0
  4014aa:	2001      	movls	r0, #1
  4014ac:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4014ae:	096d      	lsrs	r5, r5, #5
  4014b0:	4b09      	ldr	r3, [pc, #36]	; (4014d8 <_ext_irq_enable+0x58>)
  4014b2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4014b6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4014ba:	b937      	cbnz	r7, 4014ca <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4014bc:	2301      	movs	r3, #1
  4014be:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4014c2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4014c4:	2000      	movs	r0, #0
  4014c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4014ca:	2301      	movs	r3, #1
  4014cc:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  4014d0:	642c      	str	r4, [r5, #64]	; 0x40
  4014d2:	e7f7      	b.n	4014c4 <_ext_irq_enable+0x44>
  4014d4:	00400fe9 	.word	0x00400fe9
  4014d8:	400e0e00 	.word	0x400e0e00
  4014dc:	00402e20 	.word	0x00402e20

004014e0 <_pmc_init_sources>:
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  4014e0:	4a14      	ldr	r2, [pc, #80]	; (401534 <_pmc_init_sources+0x54>)
  4014e2:	6a11      	ldr	r1, [r2, #32]
  4014e4:	4b14      	ldr	r3, [pc, #80]	; (401538 <_pmc_init_sources+0x58>)
  4014e6:	430b      	orrs	r3, r1
  4014e8:	6213      	str	r3, [r2, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  4014ea:	4b12      	ldr	r3, [pc, #72]	; (401534 <_pmc_init_sources+0x54>)
  4014ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68

#if (CONF_CLK_MAINCK_ENABLE == 1)
#if (CONF_OSC12M_ENABLE && (CONF_CLK_GEN_MAINCK_SRC == CLK_SRC_OPTION_OSC12M))
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	hri_pmc_set_CKGR_MOR_reg(PMC, (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN));
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  4014ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4014f2:	d0fa      	beq.n	4014ea <_pmc_init_sources+0xa>
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4014f4:	490f      	ldr	r1, [pc, #60]	; (401534 <_pmc_init_sources+0x54>)
  4014f6:	6a0a      	ldr	r2, [r1, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Change Fast RC oscillator frequency */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCRCF_Msk;
  4014f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCF(CONF_OSC12M_SELECTOR);
  4014fc:	4b0f      	ldr	r3, [pc, #60]	; (40153c <_pmc_init_sources+0x5c>)
  4014fe:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401500:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  401502:	4b0c      	ldr	r3, [pc, #48]	; (401534 <_pmc_init_sources+0x54>)
  401504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  401506:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40150a:	d0fa      	beq.n	401502 <_pmc_init_sources+0x22>
	return ((Pmc *)hw)->CKGR_MOR;
  40150c:	4b09      	ldr	r3, [pc, #36]	; (401534 <_pmc_init_sources+0x54>)
  40150e:	6a1a      	ldr	r2, [r3, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Switch to Fast RC */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCSEL;
  401510:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
	data |= CKGR_MOR_KEY_PASSWD;
  401514:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
	((Pmc *)hw)->CKGR_MOR = data;
  401518:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40151a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40151c:	4a08      	ldr	r2, [pc, #32]	; (401540 <_pmc_init_sources+0x60>)
  40151e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401520:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401522:	4a08      	ldr	r2, [pc, #32]	; (401544 <_pmc_init_sources+0x64>)
  401524:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401526:	4b03      	ldr	r3, [pc, #12]	; (401534 <_pmc_init_sources+0x54>)
  401528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40152a:	f013 0f02 	tst.w	r3, #2
  40152e:	d0fa      	beq.n	401526 <_pmc_init_sources+0x46>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	400e0600 	.word	0x400e0600
  401538:	00370008 	.word	0x00370008
  40153c:	00370020 	.word	0x00370020
  401540:	f800ffff 	.word	0xf800ffff
  401544:	20183f01 	.word	0x20183f01

00401548 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401548:	4a11      	ldr	r2, [pc, #68]	; (401590 <_pmc_init_master_clock+0x48>)
  40154a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40154c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401550:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401552:	4b0f      	ldr	r3, [pc, #60]	; (401590 <_pmc_init_master_clock+0x48>)
  401554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401556:	f013 0f08 	tst.w	r3, #8
  40155a:	d0fa      	beq.n	401552 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40155c:	4a0c      	ldr	r2, [pc, #48]	; (401590 <_pmc_init_master_clock+0x48>)
  40155e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401568:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40156a:	4b09      	ldr	r3, [pc, #36]	; (401590 <_pmc_init_master_clock+0x48>)
  40156c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40156e:	f013 0f08 	tst.w	r3, #8
  401572:	d0fa      	beq.n	40156a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401574:	4a06      	ldr	r2, [pc, #24]	; (401590 <_pmc_init_master_clock+0x48>)
  401576:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401578:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40157c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401580:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401582:	4b03      	ldr	r3, [pc, #12]	; (401590 <_pmc_init_master_clock+0x48>)
  401584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401586:	f013 0f08 	tst.w	r3, #8
  40158a:	d0fa      	beq.n	401582 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	400e0600 	.word	0x400e0600

00401594 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401594:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401596:	4b02      	ldr	r3, [pc, #8]	; (4015a0 <_pmc_init+0xc>)
  401598:	4798      	blx	r3
	_pmc_init_master_clock();
  40159a:	4b02      	ldr	r3, [pc, #8]	; (4015a4 <_pmc_init+0x10>)
  40159c:	4798      	blx	r3
  40159e:	bd08      	pop	{r3, pc}
  4015a0:	004014e1 	.word	0x004014e1
  4015a4:	00401549 	.word	0x00401549

004015a8 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4015a8:	2300      	movs	r3, #0
  4015aa:	2b01      	cmp	r3, #1
  4015ac:	d80f      	bhi.n	4015ce <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4015ae:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4015b2:	008a      	lsls	r2, r1, #2
  4015b4:	4907      	ldr	r1, [pc, #28]	; (4015d4 <_pwm_get_cfg+0x2c>)
  4015b6:	588a      	ldr	r2, [r1, r2]
  4015b8:	4282      	cmp	r2, r0
  4015ba:	d002      	beq.n	4015c2 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4015bc:	3301      	adds	r3, #1
  4015be:	b2db      	uxtb	r3, r3
  4015c0:	e7f3      	b.n	4015aa <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4015c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4015c6:	009a      	lsls	r2, r3, #2
  4015c8:	4608      	mov	r0, r1
  4015ca:	4410      	add	r0, r2
  4015cc:	4770      	bx	lr
		}
	}

	return NULL;
  4015ce:	2000      	movs	r0, #0
}
  4015d0:	4770      	bx	lr
  4015d2:	bf00      	nop
  4015d4:	00402e3c 	.word	0x00402e3c

004015d8 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4015d8:	4b06      	ldr	r3, [pc, #24]	; (4015f4 <_pwm_init_irq_param+0x1c>)
  4015da:	4298      	cmp	r0, r3
  4015dc:	d003      	beq.n	4015e6 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4015de:	4b06      	ldr	r3, [pc, #24]	; (4015f8 <_pwm_init_irq_param+0x20>)
  4015e0:	4298      	cmp	r0, r3
  4015e2:	d003      	beq.n	4015ec <_pwm_init_irq_param+0x14>
  4015e4:	4770      	bx	lr
		_pwm0_dev = dev;
  4015e6:	4b05      	ldr	r3, [pc, #20]	; (4015fc <_pwm_init_irq_param+0x24>)
  4015e8:	6019      	str	r1, [r3, #0]
  4015ea:	e7f8      	b.n	4015de <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4015ec:	4b03      	ldr	r3, [pc, #12]	; (4015fc <_pwm_init_irq_param+0x24>)
  4015ee:	6059      	str	r1, [r3, #4]
	}
}
  4015f0:	e7f8      	b.n	4015e4 <_pwm_init_irq_param+0xc>
  4015f2:	bf00      	nop
  4015f4:	40020000 	.word	0x40020000
  4015f8:	4005c000 	.word	0x4005c000
  4015fc:	2040009c 	.word	0x2040009c

00401600 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401600:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401602:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401604:	69db      	ldr	r3, [r3, #28]
  401606:	b113      	cbz	r3, 40160e <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401608:	6803      	ldr	r3, [r0, #0]
  40160a:	b103      	cbz	r3, 40160e <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  40160c:	4798      	blx	r3
  40160e:	bd08      	pop	{r3, pc}

00401610 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401610:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401612:	4b02      	ldr	r3, [pc, #8]	; (40161c <PWM0_Handler+0xc>)
  401614:	6818      	ldr	r0, [r3, #0]
  401616:	4b02      	ldr	r3, [pc, #8]	; (401620 <PWM0_Handler+0x10>)
  401618:	4798      	blx	r3
  40161a:	bd08      	pop	{r3, pc}
  40161c:	2040009c 	.word	0x2040009c
  401620:	00401601 	.word	0x00401601

00401624 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401624:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401626:	4b02      	ldr	r3, [pc, #8]	; (401630 <PWM1_Handler+0xc>)
  401628:	6858      	ldr	r0, [r3, #4]
  40162a:	4b02      	ldr	r3, [pc, #8]	; (401634 <PWM1_Handler+0x10>)
  40162c:	4798      	blx	r3
  40162e:	bd08      	pop	{r3, pc}
  401630:	2040009c 	.word	0x2040009c
  401634:	00401601 	.word	0x00401601

00401638 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40163a:	4606      	mov	r6, r0
	ASSERT(hw);
  40163c:	460c      	mov	r4, r1
  40163e:	1c08      	adds	r0, r1, #0
  401640:	bf18      	it	ne
  401642:	2001      	movne	r0, #1
  401644:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401648:	4944      	ldr	r1, [pc, #272]	; (40175c <_pwm_init+0x124>)
  40164a:	4b45      	ldr	r3, [pc, #276]	; (401760 <_pwm_init+0x128>)
  40164c:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  40164e:	4620      	mov	r0, r4
  401650:	4b44      	ldr	r3, [pc, #272]	; (401764 <_pwm_init+0x12c>)
  401652:	4798      	blx	r3
  401654:	4605      	mov	r5, r0

	device->hw = hw;
  401656:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401658:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40165a:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  40165c:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  40165e:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401660:	6903      	ldr	r3, [r0, #16]
  401662:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401666:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401668:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40166a:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  40166c:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  40166e:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401670:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401674:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401676:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401678:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  40167a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40167e:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401680:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401684:	2300      	movs	r3, #0
  401686:	e019      	b.n	4016bc <_pwm_init+0x84>
		ch = cfg->ch + i;
  401688:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40168a:	0118      	lsls	r0, r3, #4
  40168c:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401690:	5c3a      	ldrb	r2, [r7, r0]
  401692:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401696:	3210      	adds	r2, #16
  401698:	0152      	lsls	r2, r2, #5
  40169a:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40169c:	5c3a      	ldrb	r2, [r7, r0]
  40169e:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4016a2:	3210      	adds	r2, #16
  4016a4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4016a8:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4016aa:	5c3a      	ldrb	r2, [r7, r0]
  4016ac:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4016b0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4016b4:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4016b8:	3301      	adds	r3, #1
  4016ba:	b25b      	sxtb	r3, r3
  4016bc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4016be:	4293      	cmp	r3, r2
  4016c0:	d3e2      	bcc.n	401688 <_pwm_init+0x50>
  4016c2:	2300      	movs	r3, #0
  4016c4:	e014      	b.n	4016f0 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4016c6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4016c8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4016cc:	0082      	lsls	r2, r0, #2
  4016ce:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4016d2:	5c88      	ldrb	r0, [r1, r2]
  4016d4:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4016d8:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4016dc:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4016e0:	5c8a      	ldrb	r2, [r1, r2]
  4016e2:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4016e6:	3213      	adds	r2, #19
  4016e8:	0112      	lsls	r2, r2, #4
  4016ea:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4016ec:	3301      	adds	r3, #1
  4016ee:	b25b      	sxtb	r3, r3
  4016f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4016f2:	4293      	cmp	r3, r2
  4016f4:	d3e7      	bcc.n	4016c6 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4016f6:	4631      	mov	r1, r6
  4016f8:	4620      	mov	r0, r4
  4016fa:	4b1b      	ldr	r3, [pc, #108]	; (401768 <_pwm_init+0x130>)
  4016fc:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4016fe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401702:	2b00      	cmp	r3, #0
  401704:	db0d      	blt.n	401722 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401706:	095a      	lsrs	r2, r3, #5
  401708:	f003 031f 	and.w	r3, r3, #31
  40170c:	2101      	movs	r1, #1
  40170e:	fa01 f303 	lsl.w	r3, r1, r3
  401712:	3220      	adds	r2, #32
  401714:	4915      	ldr	r1, [pc, #84]	; (40176c <_pwm_init+0x134>)
  401716:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40171a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40171e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401722:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401726:	2b00      	cmp	r3, #0
  401728:	db09      	blt.n	40173e <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40172a:	095a      	lsrs	r2, r3, #5
  40172c:	f003 031f 	and.w	r3, r3, #31
  401730:	2101      	movs	r1, #1
  401732:	fa01 f303 	lsl.w	r3, r1, r3
  401736:	3260      	adds	r2, #96	; 0x60
  401738:	490c      	ldr	r1, [pc, #48]	; (40176c <_pwm_init+0x134>)
  40173a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40173e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401742:	2b00      	cmp	r3, #0
  401744:	db08      	blt.n	401758 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401746:	0959      	lsrs	r1, r3, #5
  401748:	f003 031f 	and.w	r3, r3, #31
  40174c:	2201      	movs	r2, #1
  40174e:	fa02 f303 	lsl.w	r3, r2, r3
  401752:	4a06      	ldr	r2, [pc, #24]	; (40176c <_pwm_init+0x134>)
  401754:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401758:	2000      	movs	r0, #0
  40175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40175c:	00402f04 	.word	0x00402f04
  401760:	00400fe9 	.word	0x00400fe9
  401764:	004015a9 	.word	0x004015a9
  401768:	004015d9 	.word	0x004015d9
  40176c:	e000e100 	.word	0xe000e100

00401770 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401770:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401772:	4604      	mov	r4, r0
  401774:	f240 12b5 	movw	r2, #437	; 0x1b5
  401778:	490b      	ldr	r1, [pc, #44]	; (4017a8 <_pwm_enable+0x38>)
  40177a:	3000      	adds	r0, #0
  40177c:	bf18      	it	ne
  40177e:	2001      	movne	r0, #1
  401780:	4b0a      	ldr	r3, [pc, #40]	; (4017ac <_pwm_enable+0x3c>)
  401782:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401784:	6920      	ldr	r0, [r4, #16]
  401786:	4b0a      	ldr	r3, [pc, #40]	; (4017b0 <_pwm_enable+0x40>)
  401788:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40178a:	2300      	movs	r3, #0
  40178c:	e008      	b.n	4017a0 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40178e:	6921      	ldr	r1, [r4, #16]
  401790:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401792:	011a      	lsls	r2, r3, #4
  401794:	5cad      	ldrb	r5, [r5, r2]
  401796:	2201      	movs	r2, #1
  401798:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40179a:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  40179c:	3301      	adds	r3, #1
  40179e:	b25b      	sxtb	r3, r3
  4017a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4017a2:	4293      	cmp	r3, r2
  4017a4:	d3f3      	bcc.n	40178e <_pwm_enable+0x1e>
	}
}
  4017a6:	bd38      	pop	{r3, r4, r5, pc}
  4017a8:	00402f04 	.word	0x00402f04
  4017ac:	00400fe9 	.word	0x00400fe9
  4017b0:	004015a9 	.word	0x004015a9

004017b4 <_pwm_is_enabled>:
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
	}
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4017b4:	b510      	push	{r4, lr}
	ASSERT(device);
  4017b6:	4604      	mov	r4, r0
  4017b8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4017bc:	4907      	ldr	r1, [pc, #28]	; (4017dc <_pwm_is_enabled+0x28>)
  4017be:	3000      	adds	r0, #0
  4017c0:	bf18      	it	ne
  4017c2:	2001      	movne	r0, #1
  4017c4:	4b06      	ldr	r3, [pc, #24]	; (4017e0 <_pwm_is_enabled+0x2c>)
  4017c6:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4017c8:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4017ca:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4017cc:	f013 0f0f 	tst.w	r3, #15
  4017d0:	d001      	beq.n	4017d6 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4017d2:	2001      	movs	r0, #1
	}
}
  4017d4:	bd10      	pop	{r4, pc}
		return false;
  4017d6:	2000      	movs	r0, #0
  4017d8:	bd10      	pop	{r4, pc}
  4017da:	bf00      	nop
  4017dc:	00402f04 	.word	0x00402f04
  4017e0:	00400fe9 	.word	0x00400fe9

004017e4 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4017e4:	2000      	movs	r0, #0
  4017e6:	4770      	bx	lr

004017e8 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4017e8:	2301      	movs	r3, #1
  4017ea:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  4017ec:	2000      	movs	r0, #0
  4017ee:	4770      	bx	lr

004017f0 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4017f0:	4b04      	ldr	r3, [pc, #16]	; (401804 <_spi_get_hardware_index+0x14>)
  4017f2:	4403      	add	r3, r0
  4017f4:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  4017f8:	2b05      	cmp	r3, #5
  4017fa:	d001      	beq.n	401800 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  4017fc:	2000      	movs	r0, #0
	}
}
  4017fe:	4770      	bx	lr
		return 1;
  401800:	2001      	movs	r0, #1
  401802:	4770      	bx	lr
  401804:	bfff8000 	.word	0xbfff8000

00401808 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  401808:	b570      	push	{r4, r5, r6, lr}
  40180a:	4606      	mov	r6, r0
  40180c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  40180e:	4608      	mov	r0, r1
  401810:	4b20      	ldr	r3, [pc, #128]	; (401894 <_spi_m_sync_init+0x8c>)
  401812:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401814:	2300      	movs	r3, #0
  401816:	b33b      	cbz	r3, 401868 <_spi_m_sync_init+0x60>
	return NULL;
  401818:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40181a:	f240 122f 	movw	r2, #303	; 0x12f
  40181e:	491e      	ldr	r1, [pc, #120]	; (401898 <_spi_m_sync_init+0x90>)
  401820:	2e00      	cmp	r6, #0
  401822:	bf18      	it	ne
  401824:	2c00      	cmpne	r4, #0
  401826:	bf14      	ite	ne
  401828:	2001      	movne	r0, #1
  40182a:	2000      	moveq	r0, #0
  40182c:	4b1b      	ldr	r3, [pc, #108]	; (40189c <_spi_m_sync_init+0x94>)
  40182e:	4798      	blx	r3

	if (regs == NULL) {
  401830:	b355      	cbz	r5, 401888 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401832:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401834:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401838:	d129      	bne.n	40188e <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  40183a:	2380      	movs	r3, #128	; 0x80
  40183c:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  40183e:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  401840:	686a      	ldr	r2, [r5, #4]
  401842:	4b17      	ldr	r3, [pc, #92]	; (4018a0 <_spi_m_sync_init+0x98>)
  401844:	4013      	ands	r3, r2
  401846:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401848:	68ab      	ldr	r3, [r5, #8]
  40184a:	4a16      	ldr	r2, [pc, #88]	; (4018a4 <_spi_m_sync_init+0x9c>)
  40184c:	401a      	ands	r2, r3
  40184e:	4b16      	ldr	r3, [pc, #88]	; (4018a8 <_spi_m_sync_init+0xa0>)
  401850:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  401852:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401854:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  401856:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401858:	8a2b      	ldrh	r3, [r5, #16]
  40185a:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  40185c:	68eb      	ldr	r3, [r5, #12]
  40185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401862:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  401864:	2000      	movs	r0, #0
  401866:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401868:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40186c:	008a      	lsls	r2, r1, #2
  40186e:	490f      	ldr	r1, [pc, #60]	; (4018ac <_spi_m_sync_init+0xa4>)
  401870:	5c8a      	ldrb	r2, [r1, r2]
  401872:	4290      	cmp	r0, r2
  401874:	d002      	beq.n	40187c <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401876:	3301      	adds	r3, #1
  401878:	b2db      	uxtb	r3, r3
  40187a:	e7cc      	b.n	401816 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  40187c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401880:	00ab      	lsls	r3, r5, #2
  401882:	460d      	mov	r5, r1
  401884:	441d      	add	r5, r3
  401886:	e7c8      	b.n	40181a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401888:	f06f 000c 	mvn.w	r0, #12
  40188c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  40188e:	f06f 0010 	mvn.w	r0, #16
}
  401892:	bd70      	pop	{r4, r5, r6, pc}
  401894:	004017f1 	.word	0x004017f1
  401898:	00402f30 	.word	0x00402f30
  40189c:	00400fe9 	.word	0x00400fe9
  4018a0:	feffff7c 	.word	0xfeffff7c
  4018a4:	fff1ff6f 	.word	0xfff1ff6f
  4018a8:	000e0010 	.word	0x000e0010
  4018ac:	00402f1c 	.word	0x00402f1c

004018b0 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  4018b0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  4018b2:	4604      	mov	r4, r0
  4018b4:	b168      	cbz	r0, 4018d2 <_spi_m_sync_enable+0x22>
  4018b6:	6803      	ldr	r3, [r0, #0]
  4018b8:	b14b      	cbz	r3, 4018ce <_spi_m_sync_enable+0x1e>
  4018ba:	2001      	movs	r0, #1
  4018bc:	f240 126d 	movw	r2, #365	; 0x16d
  4018c0:	4905      	ldr	r1, [pc, #20]	; (4018d8 <_spi_m_sync_enable+0x28>)
  4018c2:	4b06      	ldr	r3, [pc, #24]	; (4018dc <_spi_m_sync_enable+0x2c>)
  4018c4:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  4018c6:	6820      	ldr	r0, [r4, #0]
  4018c8:	4b05      	ldr	r3, [pc, #20]	; (4018e0 <_spi_m_sync_enable+0x30>)
  4018ca:	4798      	blx	r3
}
  4018cc:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  4018ce:	2000      	movs	r0, #0
  4018d0:	e7f4      	b.n	4018bc <_spi_m_sync_enable+0xc>
  4018d2:	2000      	movs	r0, #0
  4018d4:	e7f2      	b.n	4018bc <_spi_m_sync_enable+0xc>
  4018d6:	bf00      	nop
  4018d8:	00402f30 	.word	0x00402f30
  4018dc:	00400fe9 	.word	0x00400fe9
  4018e0:	004017e9 	.word	0x004017e9

004018e4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  4018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018e8:	b086      	sub	sp, #24
  4018ea:	4607      	mov	r7, r0
  4018ec:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  4018ee:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  4018f0:	680b      	ldr	r3, [r1, #0]
  4018f2:	9301      	str	r3, [sp, #4]
  4018f4:	684b      	ldr	r3, [r1, #4]
  4018f6:	9302      	str	r3, [sp, #8]
  4018f8:	2300      	movs	r3, #0
  4018fa:	9303      	str	r3, [sp, #12]
  4018fc:	9304      	str	r3, [sp, #16]
  4018fe:	7903      	ldrb	r3, [r0, #4]
  401900:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401904:	1c26      	adds	r6, r4, #0
  401906:	bf18      	it	ne
  401908:	2601      	movne	r6, #1
  40190a:	f44f 720b 	mov.w	r2, #556	; 0x22c
  40190e:	4933      	ldr	r1, [pc, #204]	; (4019dc <_spi_m_sync_trans+0xf8>)
  401910:	2800      	cmp	r0, #0
  401912:	bf0c      	ite	eq
  401914:	2000      	moveq	r0, #0
  401916:	f006 0001 	andne.w	r0, r6, #1
  40191a:	4b31      	ldr	r3, [pc, #196]	; (4019e0 <_spi_m_sync_trans+0xfc>)
  40191c:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  40191e:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401920:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401924:	d122      	bne.n	40196c <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  401926:	f06f 0013 	mvn.w	r0, #19
  40192a:	e053      	b.n	4019d4 <_spi_m_sync_trans+0xf0>
		return false;
  40192c:	2300      	movs	r3, #0
  40192e:	e035      	b.n	40199c <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401930:	7850      	ldrb	r0, [r2, #1]
  401932:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  401936:	3202      	adds	r2, #2
  401938:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  40193a:	3301      	adds	r3, #1
  40193c:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  40193e:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  401940:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  401944:	f240 221d 	movw	r2, #541	; 0x21d
  401948:	4924      	ldr	r1, [pc, #144]	; (4019dc <_spi_m_sync_trans+0xf8>)
  40194a:	4630      	mov	r0, r6
  40194c:	4b24      	ldr	r3, [pc, #144]	; (4019e0 <_spi_m_sync_trans+0xfc>)
  40194e:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  401950:	f018 0f08 	tst.w	r8, #8
  401954:	d038      	beq.n	4019c8 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  401956:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  40195a:	2800      	cmp	r0, #0
  40195c:	db36      	blt.n	4019cc <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  40195e:	9803      	ldr	r0, [sp, #12]
  401960:	68ab      	ldr	r3, [r5, #8]
  401962:	4298      	cmp	r0, r3
  401964:	d302      	bcc.n	40196c <_spi_m_sync_trans+0x88>
  401966:	9a04      	ldr	r2, [sp, #16]
  401968:	4293      	cmp	r3, r2
  40196a:	d92f      	bls.n	4019cc <_spi_m_sync_trans+0xe8>
  40196c:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  40196e:	f013 0f01 	tst.w	r3, #1
  401972:	d0db      	beq.n	40192c <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  401974:	68a3      	ldr	r3, [r4, #8]
  401976:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401978:	9a02      	ldr	r2, [sp, #8]
  40197a:	b15a      	cbz	r2, 401994 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  40197c:	1c51      	adds	r1, r2, #1
  40197e:	9102      	str	r1, [sp, #8]
  401980:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  401982:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401986:	2a01      	cmp	r2, #1
  401988:	d904      	bls.n	401994 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  40198a:	460a      	mov	r2, r1
  40198c:	3101      	adds	r1, #1
  40198e:	9102      	str	r1, [sp, #8]
  401990:	0a1b      	lsrs	r3, r3, #8
  401992:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401994:	9b04      	ldr	r3, [sp, #16]
  401996:	3301      	adds	r3, #1
  401998:	9304      	str	r3, [sp, #16]
	return true;
  40199a:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  40199c:	2b00      	cmp	r3, #0
  40199e:	d1cf      	bne.n	401940 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  4019a0:	9b03      	ldr	r3, [sp, #12]
  4019a2:	9a04      	ldr	r2, [sp, #16]
  4019a4:	429a      	cmp	r2, r3
  4019a6:	d3cb      	bcc.n	401940 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  4019a8:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  4019aa:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  4019ac:	f012 0f02 	tst.w	r2, #2
  4019b0:	d0c6      	beq.n	401940 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  4019b2:	9a01      	ldr	r2, [sp, #4]
  4019b4:	2a00      	cmp	r2, #0
  4019b6:	d0c0      	beq.n	40193a <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  4019b8:	1c51      	adds	r1, r2, #1
  4019ba:	9101      	str	r1, [sp, #4]
  4019bc:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  4019be:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4019c2:	2801      	cmp	r0, #1
  4019c4:	d8b4      	bhi.n	401930 <_spi_m_sync_trans+0x4c>
  4019c6:	e7b8      	b.n	40193a <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  4019c8:	2000      	movs	r0, #0
  4019ca:	e7c6      	b.n	40195a <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  4019cc:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  4019ce:	f413 7f00 	tst.w	r3, #512	; 0x200
  4019d2:	d0fb      	beq.n	4019cc <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  4019d4:	b006      	add	sp, #24
  4019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019da:	bf00      	nop
  4019dc:	00402f30 	.word	0x00402f30
  4019e0:	00400fe9 	.word	0x00400fe9

004019e4 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  4019e4:	2000      	movs	r0, #0
  4019e6:	4770      	bx	lr

004019e8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4019e8:	4b03      	ldr	r3, [pc, #12]	; (4019f8 <_system_time_init+0x10>)
  4019ea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4019ee:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4019f0:	2205      	movs	r2, #5
  4019f2:	601a      	str	r2, [r3, #0]
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	e000e010 	.word	0xe000e010

004019fc <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4019fc:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4019fe:	4b01      	ldr	r3, [pc, #4]	; (401a04 <_delay_init+0x8>)
  401a00:	4798      	blx	r3
  401a02:	bd08      	pop	{r3, pc}
  401a04:	004019e9 	.word	0x004019e9

00401a08 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401a08:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401a0a:	e00d      	b.n	401a28 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401a0c:	4b0d      	ldr	r3, [pc, #52]	; (401a44 <_delay_cycles+0x3c>)
  401a0e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401a12:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401a14:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401a16:	4b0b      	ldr	r3, [pc, #44]	; (401a44 <_delay_cycles+0x3c>)
  401a18:	681b      	ldr	r3, [r3, #0]
  401a1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a1e:	d0fa      	beq.n	401a16 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401a20:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401a24:	3101      	adds	r1, #1
	while (n--) {
  401a26:	4610      	mov	r0, r2
  401a28:	1e43      	subs	r3, r0, #1
  401a2a:	b2da      	uxtb	r2, r3
  401a2c:	2800      	cmp	r0, #0
  401a2e:	d1ed      	bne.n	401a0c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401a30:	4b04      	ldr	r3, [pc, #16]	; (401a44 <_delay_cycles+0x3c>)
  401a32:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401a34:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401a36:	4b03      	ldr	r3, [pc, #12]	; (401a44 <_delay_cycles+0x3c>)
  401a38:	681b      	ldr	r3, [r3, #0]
  401a3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a3e:	d0fa      	beq.n	401a36 <_delay_cycles+0x2e>
		;
}
  401a40:	4770      	bx	lr
  401a42:	bf00      	nop
  401a44:	e000e010 	.word	0xe000e010

00401a48 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401a48:	2300      	movs	r3, #0
  401a4a:	2b01      	cmp	r3, #1
  401a4c:	d815      	bhi.n	401a7a <get_cfg+0x32>
{
  401a4e:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401a50:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401a54:	008a      	lsls	r2, r1, #2
  401a56:	490a      	ldr	r1, [pc, #40]	; (401a80 <get_cfg+0x38>)
  401a58:	588a      	ldr	r2, [r1, r2]
  401a5a:	4282      	cmp	r2, r0
  401a5c:	d007      	beq.n	401a6e <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401a5e:	3301      	adds	r3, #1
  401a60:	b2db      	uxtb	r3, r3
  401a62:	2b01      	cmp	r3, #1
  401a64:	d9f4      	bls.n	401a50 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401a66:	2000      	movs	r0, #0
}
  401a68:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a6c:	4770      	bx	lr
			return &(_tcs[i]);
  401a6e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401a72:	00a3      	lsls	r3, r4, #2
  401a74:	4608      	mov	r0, r1
  401a76:	4418      	add	r0, r3
  401a78:	e7f6      	b.n	401a68 <get_cfg+0x20>
	return NULL;
  401a7a:	2000      	movs	r0, #0
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	20400000 	.word	0x20400000

00401a84 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401a84:	4b06      	ldr	r3, [pc, #24]	; (401aa0 <_tc_init_irq_param+0x1c>)
  401a86:	4298      	cmp	r0, r3
  401a88:	d003      	beq.n	401a92 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
  401a8a:	4b06      	ldr	r3, [pc, #24]	; (401aa4 <_tc_init_irq_param+0x20>)
  401a8c:	4298      	cmp	r0, r3
  401a8e:	d003      	beq.n	401a98 <_tc_init_irq_param+0x14>
  401a90:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401a92:	4b05      	ldr	r3, [pc, #20]	; (401aa8 <_tc_init_irq_param+0x24>)
  401a94:	6019      	str	r1, [r3, #0]
  401a96:	e7f8      	b.n	401a8a <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
  401a98:	4b03      	ldr	r3, [pc, #12]	; (401aa8 <_tc_init_irq_param+0x24>)
  401a9a:	6059      	str	r1, [r3, #4]
	}
}
  401a9c:	e7f8      	b.n	401a90 <_tc_init_irq_param+0xc>
  401a9e:	bf00      	nop
  401aa0:	4000c000 	.word	0x4000c000
  401aa4:	40010000 	.word	0x40010000
  401aa8:	204000bc 	.word	0x204000bc

00401aac <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401aac:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401aae:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401ab0:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401ab2:	f013 0f10 	tst.w	r3, #16
  401ab6:	d100      	bne.n	401aba <tc_interrupt_handler+0xe>
  401ab8:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401aba:	6803      	ldr	r3, [r0, #0]
  401abc:	4798      	blx	r3
	}
}
  401abe:	e7fb      	b.n	401ab8 <tc_interrupt_handler+0xc>

00401ac0 <_timer_init>:
{
  401ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ac2:	4607      	mov	r7, r0
  401ac4:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  401ac6:	4608      	mov	r0, r1
  401ac8:	4b27      	ldr	r3, [pc, #156]	; (401b68 <_timer_init+0xa8>)
  401aca:	4798      	blx	r3
  401acc:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  401ace:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  401ad0:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  401ad2:	2296      	movs	r2, #150	; 0x96
  401ad4:	4925      	ldr	r1, [pc, #148]	; (401b6c <_timer_init+0xac>)
  401ad6:	2001      	movs	r0, #1
  401ad8:	4b25      	ldr	r3, [pc, #148]	; (401b70 <_timer_init+0xb0>)
  401ada:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  401adc:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401ae0:	d001      	beq.n	401ae6 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401ae2:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401ae6:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  401ae8:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401aea:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  401aec:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401aee:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401af0:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401af2:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  401af4:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401af6:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401af8:	2310      	movs	r3, #16
  401afa:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  401afc:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401afe:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  401b02:	4639      	mov	r1, r7
  401b04:	4620      	mov	r0, r4
  401b06:	4b1b      	ldr	r3, [pc, #108]	; (401b74 <_timer_init+0xb4>)
  401b08:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401b0a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b0e:	2b00      	cmp	r3, #0
  401b10:	db0d      	blt.n	401b2e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b12:	095a      	lsrs	r2, r3, #5
  401b14:	f003 031f 	and.w	r3, r3, #31
  401b18:	2101      	movs	r1, #1
  401b1a:	fa01 f303 	lsl.w	r3, r1, r3
  401b1e:	3220      	adds	r2, #32
  401b20:	4915      	ldr	r1, [pc, #84]	; (401b78 <_timer_init+0xb8>)
  401b22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b2a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401b2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b32:	2b00      	cmp	r3, #0
  401b34:	db09      	blt.n	401b4a <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b36:	095a      	lsrs	r2, r3, #5
  401b38:	f003 031f 	and.w	r3, r3, #31
  401b3c:	2101      	movs	r1, #1
  401b3e:	fa01 f303 	lsl.w	r3, r1, r3
  401b42:	3260      	adds	r2, #96	; 0x60
  401b44:	490c      	ldr	r1, [pc, #48]	; (401b78 <_timer_init+0xb8>)
  401b46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401b4a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b4e:	2b00      	cmp	r3, #0
  401b50:	db08      	blt.n	401b64 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b52:	0959      	lsrs	r1, r3, #5
  401b54:	f003 031f 	and.w	r3, r3, #31
  401b58:	2201      	movs	r2, #1
  401b5a:	fa02 f303 	lsl.w	r3, r2, r3
  401b5e:	4a06      	ldr	r2, [pc, #24]	; (401b78 <_timer_init+0xb8>)
  401b60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401b64:	2000      	movs	r0, #0
  401b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b68:	00401a49 	.word	0x00401a49
  401b6c:	00402f48 	.word	0x00402f48
  401b70:	00400fe9 	.word	0x00400fe9
  401b74:	00401a85 	.word	0x00401a85
  401b78:	e000e100 	.word	0xe000e100

00401b7c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401b7c:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401b7e:	2205      	movs	r2, #5
  401b80:	601a      	str	r2, [r3, #0]
  401b82:	4770      	bx	lr

00401b84 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  401b84:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401b86:	6a18      	ldr	r0, [r3, #32]
}
  401b88:	f3c0 4000 	ubfx	r0, r0, #16, #1
  401b8c:	4770      	bx	lr
	...

00401b90 <_timer_set_irq>:
{
  401b90:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  401b92:	68c0      	ldr	r0, [r0, #12]
  401b94:	4b02      	ldr	r3, [pc, #8]	; (401ba0 <_timer_set_irq+0x10>)
  401b96:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  401b98:	7900      	ldrb	r0, [r0, #4]
  401b9a:	4b02      	ldr	r3, [pc, #8]	; (401ba4 <_timer_set_irq+0x14>)
  401b9c:	4798      	blx	r3
  401b9e:	bd08      	pop	{r3, pc}
  401ba0:	00401a49 	.word	0x00401a49
  401ba4:	00401195 	.word	0x00401195

00401ba8 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401ba8:	2000      	movs	r0, #0
  401baa:	4770      	bx	lr

00401bac <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401bac:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401bae:	4b02      	ldr	r3, [pc, #8]	; (401bb8 <TC0_Handler+0xc>)
  401bb0:	6818      	ldr	r0, [r3, #0]
  401bb2:	4b02      	ldr	r3, [pc, #8]	; (401bbc <TC0_Handler+0x10>)
  401bb4:	4798      	blx	r3
  401bb6:	bd08      	pop	{r3, pc}
  401bb8:	204000bc 	.word	0x204000bc
  401bbc:	00401aad 	.word	0x00401aad

00401bc0 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
  401bc0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
  401bc2:	4b02      	ldr	r3, [pc, #8]	; (401bcc <TC3_Handler+0xc>)
  401bc4:	6858      	ldr	r0, [r3, #4]
  401bc6:	4b02      	ldr	r3, [pc, #8]	; (401bd0 <TC3_Handler+0x10>)
  401bc8:	4798      	blx	r3
  401bca:	bd08      	pop	{r3, pc}
  401bcc:	204000bc 	.word	0x204000bc
  401bd0:	00401aad 	.word	0x00401aad

00401bd4 <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401bd4:	2300      	movs	r3, #0
  401bd6:	b13b      	cbz	r3, 401be8 <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  401bd8:	2000      	movs	r0, #0
  401bda:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  401bdc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401be0:	00e3      	lsls	r3, r4, #3
  401be2:	4608      	mov	r0, r1
  401be4:	4418      	add	r0, r3
  401be6:	e00c      	b.n	401c02 <_get_i2cm_sync_cfg+0x2e>
{
  401be8:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  401bea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401bee:	00ca      	lsls	r2, r1, #3
  401bf0:	4905      	ldr	r1, [pc, #20]	; (401c08 <_get_i2cm_sync_cfg+0x34>)
  401bf2:	588a      	ldr	r2, [r1, r2]
  401bf4:	4282      	cmp	r2, r0
  401bf6:	d0f1      	beq.n	401bdc <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401bf8:	3301      	adds	r3, #1
  401bfa:	b2db      	uxtb	r3, r3
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d0f4      	beq.n	401bea <_get_i2cm_sync_cfg+0x16>
	return NULL;
  401c00:	2000      	movs	r0, #0
}
  401c02:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c06:	4770      	bx	lr
  401c08:	00402f5c 	.word	0x00402f5c

00401c0c <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  401c0c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401c0e:	4604      	mov	r4, r0
  401c10:	460d      	mov	r5, r1
  401c12:	2800      	cmp	r0, #0
  401c14:	bf18      	it	ne
  401c16:	2900      	cmpne	r1, #0
  401c18:	bf14      	ite	ne
  401c1a:	2001      	movne	r0, #1
  401c1c:	2000      	moveq	r0, #0
  401c1e:	2278      	movs	r2, #120	; 0x78
  401c20:	4909      	ldr	r1, [pc, #36]	; (401c48 <_i2c_m_sync_init+0x3c>)
  401c22:	4b0a      	ldr	r3, [pc, #40]	; (401c4c <_i2c_m_sync_init+0x40>)
  401c24:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  401c26:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  401c28:	4628      	mov	r0, r5
  401c2a:	4b09      	ldr	r3, [pc, #36]	; (401c50 <_i2c_m_sync_init+0x44>)
  401c2c:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  401c2e:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  401c30:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  401c32:	6923      	ldr	r3, [r4, #16]
  401c34:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  401c36:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  401c38:	6923      	ldr	r3, [r4, #16]
  401c3a:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  401c3c:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  401c3e:	6923      	ldr	r3, [r4, #16]
  401c40:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  401c42:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  401c44:	2000      	movs	r0, #0
  401c46:	bd38      	pop	{r3, r4, r5, pc}
  401c48:	00402f74 	.word	0x00402f74
  401c4c:	00400fe9 	.word	0x00400fe9
  401c50:	00401bd5 	.word	0x00401bd5

00401c54 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  401c54:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  401c56:	4604      	mov	r4, r0
  401c58:	460d      	mov	r5, r1
  401c5a:	2800      	cmp	r0, #0
  401c5c:	bf18      	it	ne
  401c5e:	2900      	cmpne	r1, #0
  401c60:	bf14      	ite	ne
  401c62:	2001      	movne	r0, #1
  401c64:	2000      	moveq	r0, #0
  401c66:	22ba      	movs	r2, #186	; 0xba
  401c68:	4952      	ldr	r1, [pc, #328]	; (401db4 <_i2c_m_sync_transfer+0x160>)
  401c6a:	4b53      	ldr	r3, [pc, #332]	; (401db8 <_i2c_m_sync_transfer+0x164>)
  401c6c:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  401c6e:	8863      	ldrh	r3, [r4, #2]
  401c70:	f413 7f80 	tst.w	r3, #256	; 0x100
  401c74:	f040 809a 	bne.w	401dac <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401c78:	886b      	ldrh	r3, [r5, #2]
  401c7a:	f013 0f01 	tst.w	r3, #1
  401c7e:	d118      	bne.n	401cb2 <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401c80:	886b      	ldrh	r3, [r5, #2]
  401c82:	b29b      	uxth	r3, r3
  401c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401c88:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401c8a:	882b      	ldrh	r3, [r5, #0]
  401c8c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401c90:	d05f      	beq.n	401d52 <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  401c92:	6922      	ldr	r2, [r4, #16]
  401c94:	0a1b      	lsrs	r3, r3, #8
  401c96:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401c9a:	041b      	lsls	r3, r3, #16
  401c9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  401ca4:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401ca6:	6923      	ldr	r3, [r4, #16]
  401ca8:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401caa:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  401cac:	2000      	movs	r0, #0
  401cae:	4601      	mov	r1, r0
  401cb0:	e05c      	b.n	401d6c <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  401cb2:	886b      	ldrh	r3, [r5, #2]
  401cb4:	b29b      	uxth	r3, r3
  401cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401cba:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401cbc:	882b      	ldrh	r3, [r5, #0]
  401cbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401cc2:	d022      	beq.n	401d0a <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  401cc4:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  401cc6:	0a1b      	lsrs	r3, r3, #8
  401cc8:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401ccc:	041b      	lsls	r3, r3, #16
  401cce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401cd2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  401cd6:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401cd8:	6923      	ldr	r3, [r4, #16]
  401cda:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  401cdc:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  401cde:	6923      	ldr	r3, [r4, #16]
  401ce0:	686a      	ldr	r2, [r5, #4]
  401ce2:	2a01      	cmp	r2, #1
  401ce4:	d019      	beq.n	401d1a <_i2c_m_sync_transfer+0xc6>
  401ce6:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  401ce8:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  401cea:	2100      	movs	r1, #0
  401cec:	686b      	ldr	r3, [r5, #4]
  401cee:	4299      	cmp	r1, r3
  401cf0:	d222      	bcs.n	401d38 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  401cf2:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  401cf4:	6a1a      	ldr	r2, [r3, #32]
  401cf6:	f012 0f02 	tst.w	r2, #2
  401cfa:	d110      	bne.n	401d1e <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  401cfc:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  401cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d02:	d0f6      	beq.n	401cf2 <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  401d04:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  401d08:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  401d0a:	6922      	ldr	r2, [r4, #16]
  401d0c:	041b      	lsls	r3, r3, #16
  401d0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401d12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  401d16:	6053      	str	r3, [r2, #4]
  401d18:	e7e1      	b.n	401cde <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  401d1a:	2203      	movs	r2, #3
  401d1c:	e7e4      	b.n	401ce8 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  401d1e:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  401d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d22:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  401d24:	686b      	ldr	r3, [r5, #4]
  401d26:	3b02      	subs	r3, #2
  401d28:	4299      	cmp	r1, r3
  401d2a:	d001      	beq.n	401d30 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  401d2c:	3101      	adds	r1, #1
  401d2e:	e7dd      	b.n	401cec <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401d30:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401d32:	2202      	movs	r2, #2
  401d34:	601a      	str	r2, [r3, #0]
  401d36:	e7f9      	b.n	401d2c <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401d38:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401d3a:	6a1b      	ldr	r3, [r3, #32]
  401d3c:	f013 0f01 	tst.w	r3, #1
  401d40:	d0fa      	beq.n	401d38 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401d42:	8863      	ldrh	r3, [r4, #2]
  401d44:	b29b      	uxth	r3, r3
  401d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401d4a:	b29b      	uxth	r3, r3
  401d4c:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  401d4e:	2000      	movs	r0, #0
  401d50:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  401d52:	6922      	ldr	r2, [r4, #16]
  401d54:	041b      	lsls	r3, r3, #16
  401d56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  401d5a:	6053      	str	r3, [r2, #4]
  401d5c:	e7a6      	b.n	401cac <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  401d5e:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  401d62:	b978      	cbnz	r0, 401d84 <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  401d64:	68ab      	ldr	r3, [r5, #8]
  401d66:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  401d68:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  401d6a:	3101      	adds	r1, #1
  401d6c:	686b      	ldr	r3, [r5, #4]
  401d6e:	4299      	cmp	r1, r3
  401d70:	d208      	bcs.n	401d84 <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  401d72:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  401d74:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  401d76:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d7a:	d1f0      	bne.n	401d5e <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  401d7c:	f013 0f04 	tst.w	r3, #4
  401d80:	d0f7      	beq.n	401d72 <_i2c_m_sync_transfer+0x11e>
  401d82:	e7ee      	b.n	401d62 <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  401d84:	886b      	ldrh	r3, [r5, #2]
  401d86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401d8a:	d106      	bne.n	401d9a <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401d8c:	8863      	ldrh	r3, [r4, #2]
  401d8e:	b29b      	uxth	r3, r3
  401d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401d94:	b29b      	uxth	r3, r3
  401d96:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  401d98:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401d9a:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401d9c:	2202      	movs	r2, #2
  401d9e:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401da0:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401da2:	6a1b      	ldr	r3, [r3, #32]
  401da4:	f013 0f01 	tst.w	r3, #1
  401da8:	d0fa      	beq.n	401da0 <_i2c_m_sync_transfer+0x14c>
  401daa:	e7ef      	b.n	401d8c <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  401dac:	f06f 0005 	mvn.w	r0, #5
}
  401db0:	bd38      	pop	{r3, r4, r5, pc}
  401db2:	bf00      	nop
  401db4:	00402f74 	.word	0x00402f74
  401db8:	00400fe9 	.word	0x00400fe9

00401dbc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
  401dbc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
  401dbe:	4604      	mov	r4, r0
  401dc0:	b168      	cbz	r0, 401dde <_wdt_init+0x22>
  401dc2:	6803      	ldr	r3, [r0, #0]
  401dc4:	b14b      	cbz	r3, 401dda <_wdt_init+0x1e>
  401dc6:	2001      	movs	r0, #1
  401dc8:	2233      	movs	r2, #51	; 0x33
  401dca:	4906      	ldr	r1, [pc, #24]	; (401de4 <_wdt_init+0x28>)
  401dcc:	4b06      	ldr	r3, [pc, #24]	; (401de8 <_wdt_init+0x2c>)
  401dce:	4798      	blx	r3

	hri_wdt_write_MR_reg(dev->hw, (hri_wdt_mr_reg_t)WDT_CONFIGURATION);
  401dd0:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_wdt_write_MR_reg(const void *const hw, hri_wdt_mr_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR = data;
  401dd2:	4a06      	ldr	r2, [pc, #24]	; (401dec <_wdt_init+0x30>)
  401dd4:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
  401dd6:	2000      	movs	r0, #0
  401dd8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
  401dda:	2000      	movs	r0, #0
  401ddc:	e7f4      	b.n	401dc8 <_wdt_init+0xc>
  401dde:	2000      	movs	r0, #0
  401de0:	e7f2      	b.n	401dc8 <_wdt_init+0xc>
  401de2:	bf00      	nop
  401de4:	00402f90 	.word	0x00402f90
  401de8:	00400fe9 	.word	0x00400fe9
  401dec:	3fffafff 	.word	0x3fffafff

00401df0 <main>:
//temp definitions
#define MOTOR_FWD 2480
#define MOTOR_REV 2422

int main(void)
{
  401df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401df4:	b08d      	sub	sp, #52	; 0x34
	atmel_start_init();
  401df6:	4b76      	ldr	r3, [pc, #472]	; (401fd0 <main+0x1e0>)
  401df8:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  401dfa:	4b76      	ldr	r3, [pc, #472]	; (401fd4 <main+0x1e4>)
  401dfc:	2280      	movs	r2, #128	; 0x80
  401dfe:	635a      	str	r2, [r3, #52]	; 0x34
  401e00:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e04:	635a      	str	r2, [r3, #52]	; 0x34
  401e06:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e0a:	635a      	str	r2, [r3, #52]	; 0x34
  401e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401e10:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_set_pin_level(LED0, 0);
	gpio_set_pin_level(LED1, 0);
	gpio_set_pin_level(LED2, 0);
	gpio_set_pin_level(LED3, 0);
	
	uint8_t robot_ID = 0;
  401e12:	2500      	movs	r5, #0
  401e14:	a80c      	add	r0, sp, #48	; 0x30
  401e16:	f800 5d01 	strb.w	r5, [r0, #-1]!
	uint8_t data_store[32];
	
	//initialize wireless data processing
	NPP_init(&robot_ID);
  401e1a:	4b6f      	ldr	r3, [pc, #444]	; (401fd8 <main+0x1e8>)
  401e1c:	4798      	blx	r3
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  401e1e:	2220      	movs	r2, #32
  401e20:	4629      	mov	r1, r5
  401e22:	a803      	add	r0, sp, #12
  401e24:	4b6d      	ldr	r3, [pc, #436]	; (401fdc <main+0x1ec>)
  401e26:	4798      	blx	r3
	nRF24_init(data_store);
  401e28:	a803      	add	r0, sp, #12
  401e2a:	4b6d      	ldr	r3, [pc, #436]	; (401fe0 <main+0x1f0>)
  401e2c:	4798      	blx	r3
	delay_us(500); //Should be 200 us, setting higher for testing
  401e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401e32:	4b6c      	ldr	r3, [pc, #432]	; (401fe4 <main+0x1f4>)
  401e34:	4798      	blx	r3
	nRF24_enter_receive();
  401e36:	4b6c      	ldr	r3, [pc, #432]	; (401fe8 <main+0x1f8>)
  401e38:	4798      	blx	r3
	
	// PWMs
	pwm_enable(&PWM_0);
  401e3a:	486c      	ldr	r0, [pc, #432]	; (401fec <main+0x1fc>)
  401e3c:	4c6c      	ldr	r4, [pc, #432]	; (401ff0 <main+0x200>)
  401e3e:	47a0      	blx	r4
	pwm_enable(&PWM_1);
  401e40:	486c      	ldr	r0, [pc, #432]	; (401ff4 <main+0x204>)
  401e42:	47a0      	blx	r4
	
	//disable motors
	set_pwm_motor_0(0);
  401e44:	4628      	mov	r0, r5
  401e46:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 402018 <main+0x228>
  401e4a:	47c8      	blx	r9
	set_pwm_motor_1(0);
  401e4c:	4628      	mov	r0, r5
  401e4e:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 40201c <main+0x22c>
  401e52:	47c0      	blx	r8
	set_pwm_motor_2(0);
  401e54:	4628      	mov	r0, r5
  401e56:	4f68      	ldr	r7, [pc, #416]	; (401ff8 <main+0x208>)
  401e58:	47b8      	blx	r7
	set_pwm_motor_3(0);
  401e5a:	4628      	mov	r0, r5
  401e5c:	4e67      	ldr	r6, [pc, #412]	; (401ffc <main+0x20c>)
  401e5e:	47b0      	blx	r6
	set_pwm_dribbler_motor(0);
  401e60:	4628      	mov	r0, r5
  401e62:	4b67      	ldr	r3, [pc, #412]	; (402000 <main+0x210>)
  401e64:	4798      	blx	r3
	
	float adc_value_battery_current = 0;
  401e66:	2300      	movs	r3, #0
  401e68:	9302      	str	r3, [sp, #8]
	float adc_value_battery_voltage = 0;
  401e6a:	9301      	str	r3, [sp, #4]
	float adc_value_cap_charge = 0;
  401e6c:	9300      	str	r3, [sp, #0]
	
	//initialize ADCs
	adc_init();
  401e6e:	4b65      	ldr	r3, [pc, #404]	; (402004 <main+0x214>)
  401e70:	4798      	blx	r3
	
	//initialize timers
	initialize_task_PID();
  401e72:	4b65      	ldr	r3, [pc, #404]	; (402008 <main+0x218>)
  401e74:	4798      	blx	r3
	initialize_task_ADC();
  401e76:	4b65      	ldr	r3, [pc, #404]	; (40200c <main+0x21c>)
  401e78:	4798      	blx	r3
	uint16_t target_speed_0 = PWM_ZERO;
	uint16_t target_speed_1 = PWM_ZERO;
	uint16_t target_speed_2 = PWM_ZERO;
	uint16_t target_speed_3 = PWM_ZERO;
	
	delay_ms(1000);
  401e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401e7e:	4c64      	ldr	r4, [pc, #400]	; (402010 <main+0x220>)
  401e80:	47a0      	blx	r4
	
	set_pwm_motor_0(PWM_ZERO);
  401e82:	f640 108d 	movw	r0, #2445	; 0x98d
  401e86:	47c8      	blx	r9
	set_pwm_motor_1(PWM_ZERO);
  401e88:	f640 108d 	movw	r0, #2445	; 0x98d
  401e8c:	47c0      	blx	r8
	set_pwm_motor_2(PWM_ZERO);
  401e8e:	f640 108d 	movw	r0, #2445	; 0x98d
  401e92:	47b8      	blx	r7
	set_pwm_motor_3(PWM_ZERO);
  401e94:	f640 108d 	movw	r0, #2445	; 0x98d
  401e98:	47b0      	blx	r6
	
	delay_ms(4000);
  401e9a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
  401e9e:	47a0      	blx	r4
	uint16_t target_speed_3 = PWM_ZERO;
  401ea0:	f640 168d 	movw	r6, #2445	; 0x98d
	uint16_t target_speed_2 = PWM_ZERO;
  401ea4:	46b1      	mov	r9, r6
	uint16_t target_speed_1 = PWM_ZERO;
  401ea6:	46b0      	mov	r8, r6
	uint16_t target_speed_0 = PWM_ZERO;
  401ea8:	4637      	mov	r7, r6
	
	while (1) {
		
		//process information sent from hub
		if(nRF_24_is_data_available(1)){ //check to see if data was received
  401eaa:	2001      	movs	r0, #1
  401eac:	4b59      	ldr	r3, [pc, #356]	; (402014 <main+0x224>)
  401eae:	4798      	blx	r3
  401eb0:	2800      	cmp	r0, #0
  401eb2:	d12f      	bne.n	401f14 <main+0x124>
			gpio_set_pin_level(LED2, data_store[10]);
			gpio_set_pin_level(LED3, data_store[11]);
			memset(&data_store[0], 0, sizeof(uint8_t)*32); //clear data_store array
		}
		
		if((robot_stop == 1) || (robot_stop == 2)){
  401eb4:	1e6c      	subs	r4, r5, #1
  401eb6:	b2e4      	uxtb	r4, r4
  401eb8:	2c01      	cmp	r4, #1
  401eba:	d978      	bls.n	401fae <main+0x1be>
			set_pwm_motor_2(target_speed_2);
			set_pwm_motor_3(target_speed_3);
			gpio_set_pin_level(LED0, false);
		}
		else{
			set_pwm_motor_0(PWM_ZERO);
  401ebc:	f640 108d 	movw	r0, #2445	; 0x98d
  401ec0:	4b55      	ldr	r3, [pc, #340]	; (402018 <main+0x228>)
  401ec2:	4798      	blx	r3
			set_pwm_motor_1(PWM_ZERO);
  401ec4:	f640 108d 	movw	r0, #2445	; 0x98d
  401ec8:	4b54      	ldr	r3, [pc, #336]	; (40201c <main+0x22c>)
  401eca:	4798      	blx	r3
			set_pwm_motor_2(PWM_ZERO);
  401ecc:	f640 108d 	movw	r0, #2445	; 0x98d
  401ed0:	4b49      	ldr	r3, [pc, #292]	; (401ff8 <main+0x208>)
  401ed2:	4798      	blx	r3
			set_pwm_motor_3(PWM_ZERO);
  401ed4:	f640 108d 	movw	r0, #2445	; 0x98d
  401ed8:	4b48      	ldr	r3, [pc, #288]	; (401ffc <main+0x20c>)
  401eda:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401edc:	2280      	movs	r2, #128	; 0x80
  401ede:	4b3d      	ldr	r3, [pc, #244]	; (401fd4 <main+0x1e4>)
  401ee0:	631a      	str	r2, [r3, #48]	; 0x30
			gpio_set_pin_level(LED0, true);
		}
		
		//wheel and dribbler time
		if(time_to_pid){
  401ee2:	4b4f      	ldr	r3, [pc, #316]	; (402020 <main+0x230>)
  401ee4:	781b      	ldrb	r3, [r3, #0]
  401ee6:	b11b      	cbz	r3, 401ef0 <main+0x100>
			//wheelMotorPID();
			//setWheelMotorEffort(50, 150, -225, -100); //for testing motor controllers
			//set_pwm_dribbler_motor(100);
			robot_stop--;
			time_to_pid = 0;
  401ee8:	2200      	movs	r2, #0
  401eea:	4b4d      	ldr	r3, [pc, #308]	; (402020 <main+0x230>)
  401eec:	701a      	strb	r2, [r3, #0]
			robot_stop--;
  401eee:	4625      	mov	r5, r4
		}
		
		//adc time
		if(time_to_adc){
  401ef0:	4b4c      	ldr	r3, [pc, #304]	; (402024 <main+0x234>)
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	2b00      	cmp	r3, #0
  401ef6:	d0d8      	beq.n	401eaa <main+0xba>
			adc_read(&adc_value_battery_current, ADC_BATTERY_CURRENT);
  401ef8:	2100      	movs	r1, #0
  401efa:	a802      	add	r0, sp, #8
  401efc:	4c4a      	ldr	r4, [pc, #296]	; (402028 <main+0x238>)
  401efe:	47a0      	blx	r4
			adc_read(&adc_value_battery_voltage, ADC_BATTERY_VOLTAGE);
  401f00:	2105      	movs	r1, #5
  401f02:	a801      	add	r0, sp, #4
  401f04:	47a0      	blx	r4
			adc_read(&adc_value_cap_charge, ADC_CAP_CHARGE);
  401f06:	2107      	movs	r1, #7
  401f08:	4668      	mov	r0, sp
  401f0a:	47a0      	blx	r4
			time_to_adc = 0;
  401f0c:	2200      	movs	r2, #0
  401f0e:	4b45      	ldr	r3, [pc, #276]	; (402024 <main+0x234>)
  401f10:	701a      	strb	r2, [r3, #0]
  401f12:	e7ca      	b.n	401eaa <main+0xba>
			nRF24_receive_data(data_store);
  401f14:	a803      	add	r0, sp, #12
  401f16:	4b45      	ldr	r3, [pc, #276]	; (40202c <main+0x23c>)
  401f18:	4798      	blx	r3
			robot_stop = data_store[0];
  401f1a:	f89d 500c 	ldrb.w	r5, [sp, #12]
			target_speed_0 = data_store[1] + (data_store[2] << 8);
  401f1e:	f89d 700d 	ldrb.w	r7, [sp, #13]
  401f22:	f89d 300e 	ldrb.w	r3, [sp, #14]
  401f26:	eb07 2703 	add.w	r7, r7, r3, lsl #8
  401f2a:	b2bf      	uxth	r7, r7
			target_speed_1 = data_store[3] + (data_store[4] << 8);
  401f2c:	f89d 800f 	ldrb.w	r8, [sp, #15]
  401f30:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401f34:	eb08 2803 	add.w	r8, r8, r3, lsl #8
  401f38:	fa1f f888 	uxth.w	r8, r8
			target_speed_2 = data_store[5] + (data_store[6] << 8);
  401f3c:	f89d 9011 	ldrb.w	r9, [sp, #17]
  401f40:	f89d 3012 	ldrb.w	r3, [sp, #18]
  401f44:	eb09 2903 	add.w	r9, r9, r3, lsl #8
  401f48:	fa1f f989 	uxth.w	r9, r9
			target_speed_3 = data_store[7] + (data_store[8] << 8);
  401f4c:	f89d 6013 	ldrb.w	r6, [sp, #19]
  401f50:	f89d 3014 	ldrb.w	r3, [sp, #20]
  401f54:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  401f58:	b2b6      	uxth	r6, r6
			gpio_set_pin_level(LED1, data_store[9]);
  401f5a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	void *const hw = port_to_reg(port);
	if (level) {
  401f5e:	b1bb      	cbz	r3, 401f90 <main+0x1a0>
  401f60:	f44f 7280 	mov.w	r2, #256	; 0x100
  401f64:	4b1b      	ldr	r3, [pc, #108]	; (401fd4 <main+0x1e4>)
  401f66:	631a      	str	r2, [r3, #48]	; 0x30
			gpio_set_pin_level(LED2, data_store[10]);
  401f68:	f89d 3016 	ldrb.w	r3, [sp, #22]
  401f6c:	b1ab      	cbz	r3, 401f9a <main+0x1aa>
  401f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401f72:	4b18      	ldr	r3, [pc, #96]	; (401fd4 <main+0x1e4>)
  401f74:	631a      	str	r2, [r3, #48]	; 0x30
			gpio_set_pin_level(LED3, data_store[11]);
  401f76:	f89d 3017 	ldrb.w	r3, [sp, #23]
  401f7a:	b19b      	cbz	r3, 401fa4 <main+0x1b4>
  401f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401f80:	4b14      	ldr	r3, [pc, #80]	; (401fd4 <main+0x1e4>)
  401f82:	631a      	str	r2, [r3, #48]	; 0x30
			memset(&data_store[0], 0, sizeof(uint8_t)*32); //clear data_store array
  401f84:	2220      	movs	r2, #32
  401f86:	2100      	movs	r1, #0
  401f88:	a803      	add	r0, sp, #12
  401f8a:	4b14      	ldr	r3, [pc, #80]	; (401fdc <main+0x1ec>)
  401f8c:	4798      	blx	r3
  401f8e:	e791      	b.n	401eb4 <main+0xc4>
	((Pio *)hw)->PIO_CODR = mask;
  401f90:	f44f 7280 	mov.w	r2, #256	; 0x100
  401f94:	4b0f      	ldr	r3, [pc, #60]	; (401fd4 <main+0x1e4>)
  401f96:	635a      	str	r2, [r3, #52]	; 0x34
  401f98:	e7e6      	b.n	401f68 <main+0x178>
  401f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
  401f9e:	4b0d      	ldr	r3, [pc, #52]	; (401fd4 <main+0x1e4>)
  401fa0:	635a      	str	r2, [r3, #52]	; 0x34
  401fa2:	e7e8      	b.n	401f76 <main+0x186>
  401fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401fa8:	4b0a      	ldr	r3, [pc, #40]	; (401fd4 <main+0x1e4>)
  401faa:	635a      	str	r2, [r3, #52]	; 0x34
  401fac:	e7ea      	b.n	401f84 <main+0x194>
			set_pwm_motor_0(target_speed_0);
  401fae:	4638      	mov	r0, r7
  401fb0:	4b19      	ldr	r3, [pc, #100]	; (402018 <main+0x228>)
  401fb2:	4798      	blx	r3
			set_pwm_motor_1(target_speed_1);
  401fb4:	4640      	mov	r0, r8
  401fb6:	4b19      	ldr	r3, [pc, #100]	; (40201c <main+0x22c>)
  401fb8:	4798      	blx	r3
			set_pwm_motor_2(target_speed_2);
  401fba:	4648      	mov	r0, r9
  401fbc:	4b0e      	ldr	r3, [pc, #56]	; (401ff8 <main+0x208>)
  401fbe:	4798      	blx	r3
			set_pwm_motor_3(target_speed_3);
  401fc0:	4630      	mov	r0, r6
  401fc2:	4b0e      	ldr	r3, [pc, #56]	; (401ffc <main+0x20c>)
  401fc4:	4798      	blx	r3
  401fc6:	2280      	movs	r2, #128	; 0x80
  401fc8:	4b02      	ldr	r3, [pc, #8]	; (401fd4 <main+0x1e4>)
  401fca:	635a      	str	r2, [r3, #52]	; 0x34
  401fcc:	e789      	b.n	401ee2 <main+0xf2>
  401fce:	bf00      	nop
  401fd0:	0040024d 	.word	0x0040024d
  401fd4:	400e1400 	.word	0x400e1400
  401fd8:	00402031 	.word	0x00402031
  401fdc:	00402c85 	.word	0x00402c85
  401fe0:	004021c5 	.word	0x004021c5
  401fe4:	00400979 	.word	0x00400979
  401fe8:	004022a1 	.word	0x004022a1
  401fec:	204000c8 	.word	0x204000c8
  401ff0:	00400c59 	.word	0x00400c59
  401ff4:	20400120 	.word	0x20400120
  401ff8:	00402341 	.word	0x00402341
  401ffc:	00402359 	.word	0x00402359
  402000:	00402371 	.word	0x00402371
  402004:	004001c5 	.word	0x004001c5
  402008:	004023a1 	.word	0x004023a1
  40200c:	004023d5 	.word	0x004023d5
  402010:	00400999 	.word	0x00400999
  402014:	00402279 	.word	0x00402279
  402018:	00402311 	.word	0x00402311
  40201c:	00402329 	.word	0x00402329
  402020:	204000c4 	.word	0x204000c4
  402024:	204000c5 	.word	0x204000c5
  402028:	004001e9 	.word	0x004001e9
  40202c:	00402145 	.word	0x00402145

00402030 <NPP_init>:
	return ((Pio *)hw)->PIO_PDSR;
  402030:	4a0a      	ldr	r2, [pc, #40]	; (40205c <NPP_init+0x2c>)
  402032:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  402034:	f3c3 3300 	ubfx	r3, r3, #12, #1
  402038:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  40203a:	f3c1 3140 	ubfx	r1, r1, #13, #1
uint8_t kicker; //kicker solenoid information
uint8_t chipper; //chipper solenoid information


void NPP_init(uint8_t *robot_ID){
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  40203e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  402042:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  402044:	f3c1 3180 	ubfx	r1, r1, #14, #1
				(gpio_get_pin_level(DipSwitch1) << 1) +
  402048:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40204c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  40204e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
				(gpio_get_pin_level(DipSwitch2) << 2) +
				(gpio_get_pin_level(DipSwitch3) << 3);
  402052:	00d2      	lsls	r2, r2, #3
				(gpio_get_pin_level(DipSwitch2) << 2) +
  402054:	fa52 f383 	uxtab	r3, r2, r3
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  402058:	7003      	strb	r3, [r0, #0]
  40205a:	4770      	bx	lr
  40205c:	400e1400 	.word	0x400e1400

00402060 <nRF24_write_to_register>:
/* The io_descriptor and pointer for the received byte array are declared. */
struct io_descriptor *spi_0_io;
uint8_t* global_data_pointer;

/* This function takes in a byte indicating which of the nRF24's registers should be written to, and then a single byte of data to write to that register */
void nRF24_write_to_register(uint8_t registerd, uint8_t data){
  402060:	b530      	push	{r4, r5, lr}
  402062:	b083      	sub	sp, #12
	memset(&buffer[0], 0, sizeof(uint8_t)*2);
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer[0] = buffer[0] | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer[0] = (buffer[0]) | registerd;
  402064:	f040 0020 	orr.w	r0, r0, #32
  402068:	f88d 0004 	strb.w	r0, [sp, #4]
	/* Set the second byte of the buffer equal to the passed in data to be written to the register */
	buffer[1] = data;
  40206c:	f88d 1005 	strb.w	r1, [sp, #5]
	((Pio *)hw)->PIO_CODR = mask;
  402070:	4c05      	ldr	r4, [pc, #20]	; (402088 <nRF24_write_to_register+0x28>)
  402072:	2508      	movs	r5, #8
  402074:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, buffer, 2); //Write the constructed 2 byte packet to the nRF24 over SPI
  402076:	2202      	movs	r2, #2
  402078:	a901      	add	r1, sp, #4
  40207a:	4b04      	ldr	r3, [pc, #16]	; (40208c <nRF24_write_to_register+0x2c>)
  40207c:	6818      	ldr	r0, [r3, #0]
  40207e:	4b04      	ldr	r3, [pc, #16]	; (402090 <nRF24_write_to_register+0x30>)
  402080:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402082:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  402084:	b003      	add	sp, #12
  402086:	bd30      	pop	{r4, r5, pc}
  402088:	400e1000 	.word	0x400e1000
  40208c:	204001a4 	.word	0x204001a4
  402090:	00400ba1 	.word	0x00400ba1

00402094 <nRF24_write_to_register_multi_byte>:

/* This function takes in a byte indicating which of the nRF24's registers should be written to, a pointer to multiple bytes of data to be written to that register, and the length
(in number of bytes) of the data to be sent to the register */
void nRF24_write_to_register_multi_byte(uint8_t registerd, uint8_t *data, int length){
  402094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402098:	b083      	sub	sp, #12
  40209a:	4688      	mov	r8, r1
  40209c:	4691      	mov	r9, r2
	buffer = 0;
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer = buffer | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  40209e:	f040 0020 	orr.w	r0, r0, #32
  4020a2:	a902      	add	r1, sp, #8
  4020a4:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  4020a8:	4c08      	ldr	r4, [pc, #32]	; (4020cc <nRF24_write_to_register_multi_byte+0x38>)
  4020aa:	2508      	movs	r5, #8
  4020ac:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); //Write the constructed 1 byte (does not contain any of the data to be written to the register) packet to the nRF24 over SPI
  4020ae:	4f08      	ldr	r7, [pc, #32]	; (4020d0 <nRF24_write_to_register_multi_byte+0x3c>)
  4020b0:	2201      	movs	r2, #1
  4020b2:	6838      	ldr	r0, [r7, #0]
  4020b4:	4e07      	ldr	r6, [pc, #28]	; (4020d4 <nRF24_write_to_register_multi_byte+0x40>)
  4020b6:	47b0      	blx	r6
	io_write(spi_0_io, data, length); //Write all of the data to be written to the register to the nRF24 over SPI
  4020b8:	fa1f f289 	uxth.w	r2, r9
  4020bc:	4641      	mov	r1, r8
  4020be:	6838      	ldr	r0, [r7, #0]
  4020c0:	47b0      	blx	r6
	((Pio *)hw)->PIO_SODR = mask;
  4020c2:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  4020c4:	b003      	add	sp, #12
  4020c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4020ca:	bf00      	nop
  4020cc:	400e1000 	.word	0x400e1000
  4020d0:	204001a4 	.word	0x204001a4
  4020d4:	00400ba1 	.word	0x00400ba1

004020d8 <nRF24_read_from_register>:

/* This function takes in a byte indicating which of the nRF24's registers should be read from, and then reads in a single byte from that register and returns it to the function caller */
uint8_t nRF24_read_from_register(uint8_t registerd){
  4020d8:	b570      	push	{r4, r5, r6, lr}
  4020da:	b082      	sub	sp, #8
	/* Initialize a 1 byte buffer to all zeros. Bits 7:5 will be the Read to Register SPI command word (000), and then bits 4:0 will be the 5 bit long register number to read from */
	uint8_t buffer;
	buffer = 0;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  4020dc:	a902      	add	r1, sp, #8
  4020de:	f801 0d02 	strb.w	r0, [r1, #-2]!
	((Pio *)hw)->PIO_CODR = mask;
  4020e2:	4c09      	ldr	r4, [pc, #36]	; (402108 <nRF24_read_from_register+0x30>)
  4020e4:	2508      	movs	r5, #8
  4020e6:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); /* Write the constructed 1 byte packet to the nRF24 over SPI. This will tell the nRF24 that the next time we read, we would like it to return the 1 byte
  4020e8:	4e08      	ldr	r6, [pc, #32]	; (40210c <nRF24_read_from_register+0x34>)
  4020ea:	2201      	movs	r2, #1
  4020ec:	6830      	ldr	r0, [r6, #0]
  4020ee:	4b08      	ldr	r3, [pc, #32]	; (402110 <nRF24_read_from_register+0x38>)
  4020f0:	4798      	blx	r3
	of data from the target register */
	io_read(spi_0_io, &in_byte, 1); /* Read the 1 byte of data into the in_byte buffer */
  4020f2:	2201      	movs	r2, #1
  4020f4:	f10d 0107 	add.w	r1, sp, #7
  4020f8:	6830      	ldr	r0, [r6, #0]
  4020fa:	4b06      	ldr	r3, [pc, #24]	; (402114 <nRF24_read_from_register+0x3c>)
  4020fc:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4020fe:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
	/* Return the 1 read byte back to the function caller */
	return in_byte;
}
  402100:	f89d 0007 	ldrb.w	r0, [sp, #7]
  402104:	b002      	add	sp, #8
  402106:	bd70      	pop	{r4, r5, r6, pc}
  402108:	400e1000 	.word	0x400e1000
  40210c:	204001a4 	.word	0x204001a4
  402110:	00400ba1 	.word	0x00400ba1
  402114:	00400bd1 	.word	0x00400bd1

00402118 <nRF24_send_SPI_command>:
	io_read(spi_0_io, data_pointer, length); /* Read the multiple bytes of data into the pointer that was passed in as a parameter */
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}

/* This function will send a raw SPI command to the nRF24, without reading or writing to or from a particular register. */
void nRF24_send_SPI_command(uint8_t command){
  402118:	b530      	push	{r4, r5, lr}
  40211a:	b083      	sub	sp, #12
  40211c:	a902      	add	r1, sp, #8
  40211e:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  402122:	4c05      	ldr	r4, [pc, #20]	; (402138 <nRF24_send_SPI_command+0x20>)
  402124:	2508      	movs	r5, #8
  402126:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &command, 1); //Send the 1 byte command that was received as a parameter to the nRF24 over SPI
  402128:	2201      	movs	r2, #1
  40212a:	4b04      	ldr	r3, [pc, #16]	; (40213c <nRF24_send_SPI_command+0x24>)
  40212c:	6818      	ldr	r0, [r3, #0]
  40212e:	4b04      	ldr	r3, [pc, #16]	; (402140 <nRF24_send_SPI_command+0x28>)
  402130:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402132:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  402134:	b003      	add	sp, #12
  402136:	bd30      	pop	{r4, r5, pc}
  402138:	400e1000 	.word	0x400e1000
  40213c:	204001a4 	.word	0x204001a4
  402140:	00400ba1 	.word	0x00400ba1

00402144 <nRF24_receive_data>:
	nRF24_write_to_register_multi_byte(RX_ADDR_P1, &rx_address[0], 5);
	nRF24_write_to_register(RX_PW_P1,32); //32 bytes packet size
	gpio_set_pin_level(RF24_CE, true);
}

void nRF24_receive_data(){
  402144:	b570      	push	{r4, r5, r6, lr}
  402146:	b082      	sub	sp, #8
	uint8_t cmd = R_RX_PAYLOAD;
  402148:	a902      	add	r1, sp, #8
  40214a:	2361      	movs	r3, #97	; 0x61
  40214c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  402150:	4c13      	ldr	r4, [pc, #76]	; (4021a0 <nRF24_receive_data+0x5c>)
  402152:	2508      	movs	r5, #8
  402154:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //drive this low before doing SPI transmissions
	io_write(spi_0_io, &cmd, 1);
  402156:	4e13      	ldr	r6, [pc, #76]	; (4021a4 <nRF24_receive_data+0x60>)
  402158:	2201      	movs	r2, #1
  40215a:	6830      	ldr	r0, [r6, #0]
  40215c:	4b12      	ldr	r3, [pc, #72]	; (4021a8 <nRF24_receive_data+0x64>)
  40215e:	4798      	blx	r3
	io_read(spi_0_io, global_data_pointer, 32);
  402160:	2220      	movs	r2, #32
  402162:	4b12      	ldr	r3, [pc, #72]	; (4021ac <nRF24_receive_data+0x68>)
  402164:	6819      	ldr	r1, [r3, #0]
  402166:	6830      	ldr	r0, [r6, #0]
  402168:	4b11      	ldr	r3, [pc, #68]	; (4021b0 <nRF24_receive_data+0x6c>)
  40216a:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  40216c:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //return to high after SPI transmissions
	delay_us(11); //Make sure we had enough time to grab the data before flushing
  40216e:	200b      	movs	r0, #11
  402170:	4b10      	ldr	r3, [pc, #64]	; (4021b4 <nRF24_receive_data+0x70>)
  402172:	4798      	blx	r3
	cmd = FLUSH_RX;
  402174:	20e2      	movs	r0, #226	; 0xe2
  402176:	f88d 0007 	strb.w	r0, [sp, #7]
	nRF24_send_SPI_command(cmd);
  40217a:	4b0f      	ldr	r3, [pc, #60]	; (4021b8 <nRF24_receive_data+0x74>)
  40217c:	4798      	blx	r3
	uint8_t status_read = nRF24_read_from_register(STATUS);
  40217e:	2007      	movs	r0, #7
  402180:	4b0e      	ldr	r3, [pc, #56]	; (4021bc <nRF24_receive_data+0x78>)
  402182:	4798      	blx	r3
	status_read = status_read | 64;
  402184:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  402188:	b2c9      	uxtb	r1, r1
  40218a:	2007      	movs	r0, #7
  40218c:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <nRF24_receive_data+0x7c>)
  40218e:	4798      	blx	r3
	//uint8_t charray[64];
	for(int x = 0; x < 32; x++){
  402190:	2300      	movs	r3, #0
  402192:	e000      	b.n	402196 <nRF24_receive_data+0x52>
  402194:	3301      	adds	r3, #1
  402196:	2b1f      	cmp	r3, #31
  402198:	ddfc      	ble.n	402194 <nRF24_receive_data+0x50>
		//printf("%02x ", global_data_pointer[x]);
	}
	//printf("\r\n");
}
  40219a:	b002      	add	sp, #8
  40219c:	bd70      	pop	{r4, r5, r6, pc}
  40219e:	bf00      	nop
  4021a0:	400e1000 	.word	0x400e1000
  4021a4:	204001a4 	.word	0x204001a4
  4021a8:	00400ba1 	.word	0x00400ba1
  4021ac:	204001a0 	.word	0x204001a0
  4021b0:	00400bd1 	.word	0x00400bd1
  4021b4:	00400979 	.word	0x00400979
  4021b8:	00402119 	.word	0x00402119
  4021bc:	004020d9 	.word	0x004020d9
  4021c0:	00402061 	.word	0x00402061

004021c4 <nRF24_init>:
void nRF24_init(uint8_t* data_pointer){
  4021c4:	b530      	push	{r4, r5, lr}
  4021c6:	b083      	sub	sp, #12
  4021c8:	4605      	mov	r5, r0
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_0_io);
  4021ca:	4c1f      	ldr	r4, [pc, #124]	; (402248 <nRF24_init+0x84>)
  4021cc:	491f      	ldr	r1, [pc, #124]	; (40224c <nRF24_init+0x88>)
  4021ce:	4620      	mov	r0, r4
  4021d0:	4b1f      	ldr	r3, [pc, #124]	; (402250 <nRF24_init+0x8c>)
  4021d2:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  4021d4:	4620      	mov	r0, r4
  4021d6:	4b1f      	ldr	r3, [pc, #124]	; (402254 <nRF24_init+0x90>)
  4021d8:	4798      	blx	r3
	global_data_pointer = data_pointer;
  4021da:	4b1f      	ldr	r3, [pc, #124]	; (402258 <nRF24_init+0x94>)
  4021dc:	601d      	str	r5, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4021de:	2504      	movs	r5, #4
  4021e0:	4b1e      	ldr	r3, [pc, #120]	; (40225c <nRF24_init+0x98>)
  4021e2:	635d      	str	r5, [r3, #52]	; 0x34
	nRF24_write_to_register(CONFIG,0); //0000 0000 Keep us in power down mode, IRQ pin assertion set to default, CRC disabled, RX / TX control in RX mode
  4021e4:	2100      	movs	r1, #0
  4021e6:	4608      	mov	r0, r1
  4021e8:	4c1d      	ldr	r4, [pc, #116]	; (402260 <nRF24_init+0x9c>)
  4021ea:	47a0      	blx	r4
	uint8_t status_read = nRF24_read_from_register(STATUS);
  4021ec:	2007      	movs	r0, #7
  4021ee:	4b1d      	ldr	r3, [pc, #116]	; (402264 <nRF24_init+0xa0>)
  4021f0:	4798      	blx	r3
	status_read = status_read | 64;
  4021f2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  4021f6:	b2c9      	uxtb	r1, r1
  4021f8:	2007      	movs	r0, #7
  4021fa:	47a0      	blx	r4
	nRF24_write_to_register(EN_AA,0); //0000 0000 no auto ACK
  4021fc:	2100      	movs	r1, #0
  4021fe:	2001      	movs	r0, #1
  402200:	47a0      	blx	r4
	nRF24_write_to_register(EN_RXADDR,0); //0000 0000 disable all RX pipes
  402202:	2100      	movs	r1, #0
  402204:	2002      	movs	r0, #2
  402206:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_AW,3); //0000 0011 5 byte tx rx address fields
  402208:	2103      	movs	r1, #3
  40220a:	4608      	mov	r0, r1
  40220c:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_RETR,0); //0000 0000 no auto retransmission
  40220e:	2100      	movs	r1, #0
  402210:	4628      	mov	r0, r5
  402212:	47a0      	blx	r4
	nRF24_write_to_register(RF_CH,120); //0111 1000 first bit must be 0, 0111 1000 = 120, freq = 2400 + 120 = 2520 = 2.52 GHz, tested to have low interference in UH
  402214:	2178      	movs	r1, #120	; 0x78
  402216:	2005      	movs	r0, #5
  402218:	47a0      	blx	r4
	nRF24_write_to_register(RF_SETUP,6); //0000 0110 1 Mbps and maximum power output
  40221a:	2106      	movs	r1, #6
  40221c:	4608      	mov	r0, r1
  40221e:	47a0      	blx	r4
	uint8_t tx_address[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA}; //Needs to be the same on the other nRF24L01+ device
  402220:	4b11      	ldr	r3, [pc, #68]	; (402268 <nRF24_init+0xa4>)
  402222:	e893 0003 	ldmia.w	r3, {r0, r1}
  402226:	9000      	str	r0, [sp, #0]
  402228:	f88d 1004 	strb.w	r1, [sp, #4]
	nRF24_write_to_register_multi_byte(TX_ADDR, &tx_address[0], 5);
  40222c:	2205      	movs	r2, #5
  40222e:	4669      	mov	r1, sp
  402230:	2010      	movs	r0, #16
  402232:	4b0e      	ldr	r3, [pc, #56]	; (40226c <nRF24_init+0xa8>)
  402234:	4798      	blx	r3
	nRF24_write_to_register(CONFIG,2); //0000 0020 enter standby-1, disable checksums
  402236:	2102      	movs	r1, #2
  402238:	2000      	movs	r0, #0
  40223a:	47a0      	blx	r4
	ext_irq_register(PB1, nRF24_receive_data); //enable interrupt	
  40223c:	490c      	ldr	r1, [pc, #48]	; (402270 <nRF24_init+0xac>)
  40223e:	2021      	movs	r0, #33	; 0x21
  402240:	4b0c      	ldr	r3, [pc, #48]	; (402274 <nRF24_init+0xb0>)
  402242:	4798      	blx	r3
}
  402244:	b003      	add	sp, #12
  402246:	bd30      	pop	{r4, r5, pc}
  402248:	20400108 	.word	0x20400108
  40224c:	204001a4 	.word	0x204001a4
  402250:	00400de5 	.word	0x00400de5
  402254:	00400d05 	.word	0x00400d05
  402258:	204001a0 	.word	0x204001a0
  40225c:	400e1400 	.word	0x400e1400
  402260:	00402061 	.word	0x00402061
  402264:	004020d9 	.word	0x004020d9
  402268:	00402fa8 	.word	0x00402fa8
  40226c:	00402095 	.word	0x00402095
  402270:	00402145 	.word	0x00402145
  402274:	00400a31 	.word	0x00400a31

00402278 <nRF_24_is_data_available>:
uint8_t nRF_24_is_data_available(int pipe_num){
  402278:	b508      	push	{r3, lr}
	status_reg = nRF24_read_from_register(STATUS);
  40227a:	2007      	movs	r0, #7
  40227c:	4b06      	ldr	r3, [pc, #24]	; (402298 <nRF_24_is_data_available+0x20>)
  40227e:	4798      	blx	r3
	if((status_reg&(1<<6))&&(status_reg&(1<<1))){ //1<<6 is the data ready rx fifo interrupt and 1<<1 is the data from pipe 1 ready to read 
  402280:	f000 0042 	and.w	r0, r0, #66	; 0x42
  402284:	2842      	cmp	r0, #66	; 0x42
  402286:	d001      	beq.n	40228c <nRF_24_is_data_available+0x14>
	return 0;
  402288:	2000      	movs	r0, #0
}
  40228a:	bd08      	pop	{r3, pc}
		nRF24_write_to_register(STATUS, (1<<6)); //clear data ready rx fifo
  40228c:	2140      	movs	r1, #64	; 0x40
  40228e:	2007      	movs	r0, #7
  402290:	4b02      	ldr	r3, [pc, #8]	; (40229c <nRF_24_is_data_available+0x24>)
  402292:	4798      	blx	r3
		return 1;
  402294:	2001      	movs	r0, #1
  402296:	bd08      	pop	{r3, pc}
  402298:	004020d9 	.word	0x004020d9
  40229c:	00402061 	.word	0x00402061

004022a0 <nRF24_enter_receive>:
void nRF24_enter_receive(){ //You are in receive at the end of this call
  4022a0:	b510      	push	{r4, lr}
  4022a2:	b082      	sub	sp, #8
	config_reg = nRF24_read_from_register(CONFIG);
  4022a4:	2000      	movs	r0, #0
  4022a6:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <nRF24_enter_receive+0x44>)
  4022a8:	4798      	blx	r3
	config_reg = config_reg | 1; //XXXX XXX1 PRIM_RX to 1
  4022aa:	f040 0101 	orr.w	r1, r0, #1
	nRF24_write_to_register(CONFIG, config_reg);
  4022ae:	b2c9      	uxtb	r1, r1
  4022b0:	2000      	movs	r0, #0
  4022b2:	4c0d      	ldr	r4, [pc, #52]	; (4022e8 <nRF24_enter_receive+0x48>)
  4022b4:	47a0      	blx	r4
	nRF24_write_to_register(EN_RXADDR, 2); //0000 0010 set data pipe 1 to on
  4022b6:	2102      	movs	r1, #2
  4022b8:	4608      	mov	r0, r1
  4022ba:	47a0      	blx	r4
	uint8_t rx_address[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
  4022bc:	4b0b      	ldr	r3, [pc, #44]	; (4022ec <nRF24_enter_receive+0x4c>)
  4022be:	e893 0003 	ldmia.w	r3, {r0, r1}
  4022c2:	9000      	str	r0, [sp, #0]
  4022c4:	f88d 1004 	strb.w	r1, [sp, #4]
	nRF24_write_to_register_multi_byte(RX_ADDR_P1, &rx_address[0], 5);
  4022c8:	2205      	movs	r2, #5
  4022ca:	4669      	mov	r1, sp
  4022cc:	200b      	movs	r0, #11
  4022ce:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <nRF24_enter_receive+0x50>)
  4022d0:	4798      	blx	r3
	nRF24_write_to_register(RX_PW_P1,32); //32 bytes packet size
  4022d2:	2120      	movs	r1, #32
  4022d4:	2012      	movs	r0, #18
  4022d6:	47a0      	blx	r4
	((Pio *)hw)->PIO_SODR = mask;
  4022d8:	2204      	movs	r2, #4
  4022da:	4b06      	ldr	r3, [pc, #24]	; (4022f4 <nRF24_enter_receive+0x54>)
  4022dc:	631a      	str	r2, [r3, #48]	; 0x30
}
  4022de:	b002      	add	sp, #8
  4022e0:	bd10      	pop	{r4, pc}
  4022e2:	bf00      	nop
  4022e4:	004020d9 	.word	0x004020d9
  4022e8:	00402061 	.word	0x00402061
  4022ec:	00402fa8 	.word	0x00402fa8
  4022f0:	00402095 	.word	0x00402095
  4022f4:	400e1400 	.word	0x400e1400

004022f8 <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  4022f8:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4022fa:	0149      	lsls	r1, r1, #5
  4022fc:	440b      	add	r3, r1
  4022fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  402302:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  402304:	4419      	add	r1, r3
  402306:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  40230a:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  40230e:	4770      	bx	lr

00402310 <set_pwm_motor_0>:
}

//motor 0, PA13
void set_pwm_motor_0(uint32_t duty_cycle){
  402310:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_0, duty_cycle);
  402312:	4602      	mov	r2, r0
  402314:	2102      	movs	r1, #2
  402316:	4802      	ldr	r0, [pc, #8]	; (402320 <set_pwm_motor_0+0x10>)
  402318:	4b02      	ldr	r3, [pc, #8]	; (402324 <set_pwm_motor_0+0x14>)
  40231a:	4798      	blx	r3
  40231c:	bd08      	pop	{r3, pc}
  40231e:	bf00      	nop
  402320:	204000c8 	.word	0x204000c8
  402324:	004022f9 	.word	0x004022f9

00402328 <set_pwm_motor_1>:
}
//motor 1, PA17
void set_pwm_motor_1(uint32_t duty_cycle){
  402328:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_1, duty_cycle);
  40232a:	4602      	mov	r2, r0
  40232c:	2103      	movs	r1, #3
  40232e:	4802      	ldr	r0, [pc, #8]	; (402338 <set_pwm_motor_1+0x10>)
  402330:	4b02      	ldr	r3, [pc, #8]	; (40233c <set_pwm_motor_1+0x14>)
  402332:	4798      	blx	r3
  402334:	bd08      	pop	{r3, pc}
  402336:	bf00      	nop
  402338:	204000c8 	.word	0x204000c8
  40233c:	004022f9 	.word	0x004022f9

00402340 <set_pwm_motor_2>:
}
//motor 2, PA2
void set_pwm_motor_2(uint32_t duty_cycle){
  402340:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_2, duty_cycle);
  402342:	4602      	mov	r2, r0
  402344:	2101      	movs	r1, #1
  402346:	4802      	ldr	r0, [pc, #8]	; (402350 <set_pwm_motor_2+0x10>)
  402348:	4b02      	ldr	r3, [pc, #8]	; (402354 <set_pwm_motor_2+0x14>)
  40234a:	4798      	blx	r3
  40234c:	bd08      	pop	{r3, pc}
  40234e:	bf00      	nop
  402350:	204000c8 	.word	0x204000c8
  402354:	004022f9 	.word	0x004022f9

00402358 <set_pwm_motor_3>:
}
//motor 3, PD11
void set_pwm_motor_3(uint32_t duty_cycle){
  402358:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_3, duty_cycle);
  40235a:	4602      	mov	r2, r0
  40235c:	2100      	movs	r1, #0
  40235e:	4802      	ldr	r0, [pc, #8]	; (402368 <set_pwm_motor_3+0x10>)
  402360:	4b02      	ldr	r3, [pc, #8]	; (40236c <set_pwm_motor_3+0x14>)
  402362:	4798      	blx	r3
  402364:	bd08      	pop	{r3, pc}
  402366:	bf00      	nop
  402368:	204000c8 	.word	0x204000c8
  40236c:	004022f9 	.word	0x004022f9

00402370 <set_pwm_dribbler_motor>:
}

//motor dribbler PA12
void set_pwm_dribbler_motor(uint32_t duty_cycle){
  402370:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_1.device), PWM_1_CHANNEL_0, duty_cycle);
  402372:	4602      	mov	r2, r0
  402374:	2100      	movs	r1, #0
  402376:	4802      	ldr	r0, [pc, #8]	; (402380 <set_pwm_dribbler_motor+0x10>)
  402378:	4b02      	ldr	r3, [pc, #8]	; (402384 <set_pwm_dribbler_motor+0x14>)
  40237a:	4798      	blx	r3
  40237c:	bd08      	pop	{r3, pc}
  40237e:	bf00      	nop
  402380:	20400120 	.word	0x20400120
  402384:	004022f9 	.word	0x004022f9

00402388 <timer_task_PID_cb>:

bool time_to_pid = 0; //flag for when to run PID for motors
bool time_to_adc = 0; //flag for when to read ADCs

void timer_task_PID_cb(const struct timer_task *const timer_task){ //sets flag for PID
	time_to_pid = 1;
  402388:	2201      	movs	r2, #1
  40238a:	4b01      	ldr	r3, [pc, #4]	; (402390 <timer_task_PID_cb+0x8>)
  40238c:	701a      	strb	r2, [r3, #0]
  40238e:	4770      	bx	lr
  402390:	204000c4 	.word	0x204000c4

00402394 <timer_task_ADC_cb>:
	timer_add_task(&TIMER_0, &task_0);
	timer_start(&TIMER_0);
}

void timer_task_ADC_cb(const struct timer_task *const timer_task){ //sets flag for ADC
	time_to_adc = 1;
  402394:	2201      	movs	r2, #1
  402396:	4b01      	ldr	r3, [pc, #4]	; (40239c <timer_task_ADC_cb+0x8>)
  402398:	705a      	strb	r2, [r3, #1]
  40239a:	4770      	bx	lr
  40239c:	204000c4 	.word	0x204000c4

004023a0 <initialize_task_PID>:
void initialize_task_PID(void){ //initializes timer 0
  4023a0:	b510      	push	{r4, lr}
	task_0.interval = 50; //amount of counts before repeating task NORMALLY 5, 50 FOR TESTING PURPOSES
  4023a2:	4907      	ldr	r1, [pc, #28]	; (4023c0 <initialize_task_PID+0x20>)
  4023a4:	2332      	movs	r3, #50	; 0x32
  4023a6:	608b      	str	r3, [r1, #8]
	task_0.cb = timer_task_PID_cb; //tells timer what task to execute
  4023a8:	4b06      	ldr	r3, [pc, #24]	; (4023c4 <initialize_task_PID+0x24>)
  4023aa:	60cb      	str	r3, [r1, #12]
	task_0.mode = TIMER_TASK_REPEAT; //tells timer to repeat task
  4023ac:	2301      	movs	r3, #1
  4023ae:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &task_0);
  4023b0:	4c05      	ldr	r4, [pc, #20]	; (4023c8 <initialize_task_PID+0x28>)
  4023b2:	4620      	mov	r0, r4
  4023b4:	4b05      	ldr	r3, [pc, #20]	; (4023cc <initialize_task_PID+0x2c>)
  4023b6:	4798      	blx	r3
	timer_start(&TIMER_0);
  4023b8:	4620      	mov	r0, r4
  4023ba:	4b05      	ldr	r3, [pc, #20]	; (4023d0 <initialize_task_PID+0x30>)
  4023bc:	4798      	blx	r3
  4023be:	bd10      	pop	{r4, pc}
  4023c0:	20400178 	.word	0x20400178
  4023c4:	00402389 	.word	0x00402389
  4023c8:	2040015c 	.word	0x2040015c
  4023cc:	00400f41 	.word	0x00400f41
  4023d0:	00400f05 	.word	0x00400f05

004023d4 <initialize_task_ADC>:
}

void initialize_task_ADC(void){ //initializes timer 1
  4023d4:	b510      	push	{r4, lr}
	task_1.interval = 10; //amount of counts before repeating task
  4023d6:	4907      	ldr	r1, [pc, #28]	; (4023f4 <initialize_task_ADC+0x20>)
  4023d8:	230a      	movs	r3, #10
  4023da:	608b      	str	r3, [r1, #8]
	task_1.cb = timer_task_ADC_cb; //tells timer what task to execute
  4023dc:	4b06      	ldr	r3, [pc, #24]	; (4023f8 <initialize_task_ADC+0x24>)
  4023de:	60cb      	str	r3, [r1, #12]
	task_1.mode = TIMER_TASK_REPEAT; //tells timer to repeat task
  4023e0:	2301      	movs	r3, #1
  4023e2:	740b      	strb	r3, [r1, #16]

	timer_add_task(&TIMER_1, &task_1);
  4023e4:	4c05      	ldr	r4, [pc, #20]	; (4023fc <initialize_task_ADC+0x28>)
  4023e6:	4620      	mov	r0, r4
  4023e8:	4b05      	ldr	r3, [pc, #20]	; (402400 <initialize_task_ADC+0x2c>)
  4023ea:	4798      	blx	r3
	timer_start(&TIMER_1);
  4023ec:	4620      	mov	r0, r4
  4023ee:	4b05      	ldr	r3, [pc, #20]	; (402404 <initialize_task_ADC+0x30>)
  4023f0:	4798      	blx	r3
  4023f2:	bd10      	pop	{r4, pc}
  4023f4:	2040018c 	.word	0x2040018c
  4023f8:	00402395 	.word	0x00402395
  4023fc:	204000ec 	.word	0x204000ec
  402400:	00400f41 	.word	0x00400f41
  402404:	00400f05 	.word	0x00400f05

00402408 <__aeabi_drsub>:
  402408:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40240c:	e002      	b.n	402414 <__adddf3>
  40240e:	bf00      	nop

00402410 <__aeabi_dsub>:
  402410:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402414 <__adddf3>:
  402414:	b530      	push	{r4, r5, lr}
  402416:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40241a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40241e:	ea94 0f05 	teq	r4, r5
  402422:	bf08      	it	eq
  402424:	ea90 0f02 	teqeq	r0, r2
  402428:	bf1f      	itttt	ne
  40242a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40242e:	ea55 0c02 	orrsne.w	ip, r5, r2
  402432:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402436:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40243a:	f000 80e2 	beq.w	402602 <__adddf3+0x1ee>
  40243e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402442:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402446:	bfb8      	it	lt
  402448:	426d      	neglt	r5, r5
  40244a:	dd0c      	ble.n	402466 <__adddf3+0x52>
  40244c:	442c      	add	r4, r5
  40244e:	ea80 0202 	eor.w	r2, r0, r2
  402452:	ea81 0303 	eor.w	r3, r1, r3
  402456:	ea82 0000 	eor.w	r0, r2, r0
  40245a:	ea83 0101 	eor.w	r1, r3, r1
  40245e:	ea80 0202 	eor.w	r2, r0, r2
  402462:	ea81 0303 	eor.w	r3, r1, r3
  402466:	2d36      	cmp	r5, #54	; 0x36
  402468:	bf88      	it	hi
  40246a:	bd30      	pophi	{r4, r5, pc}
  40246c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402470:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402474:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402478:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40247c:	d002      	beq.n	402484 <__adddf3+0x70>
  40247e:	4240      	negs	r0, r0
  402480:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402484:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402488:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40248c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402490:	d002      	beq.n	402498 <__adddf3+0x84>
  402492:	4252      	negs	r2, r2
  402494:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402498:	ea94 0f05 	teq	r4, r5
  40249c:	f000 80a7 	beq.w	4025ee <__adddf3+0x1da>
  4024a0:	f1a4 0401 	sub.w	r4, r4, #1
  4024a4:	f1d5 0e20 	rsbs	lr, r5, #32
  4024a8:	db0d      	blt.n	4024c6 <__adddf3+0xb2>
  4024aa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4024ae:	fa22 f205 	lsr.w	r2, r2, r5
  4024b2:	1880      	adds	r0, r0, r2
  4024b4:	f141 0100 	adc.w	r1, r1, #0
  4024b8:	fa03 f20e 	lsl.w	r2, r3, lr
  4024bc:	1880      	adds	r0, r0, r2
  4024be:	fa43 f305 	asr.w	r3, r3, r5
  4024c2:	4159      	adcs	r1, r3
  4024c4:	e00e      	b.n	4024e4 <__adddf3+0xd0>
  4024c6:	f1a5 0520 	sub.w	r5, r5, #32
  4024ca:	f10e 0e20 	add.w	lr, lr, #32
  4024ce:	2a01      	cmp	r2, #1
  4024d0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4024d4:	bf28      	it	cs
  4024d6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4024da:	fa43 f305 	asr.w	r3, r3, r5
  4024de:	18c0      	adds	r0, r0, r3
  4024e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4024e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4024e8:	d507      	bpl.n	4024fa <__adddf3+0xe6>
  4024ea:	f04f 0e00 	mov.w	lr, #0
  4024ee:	f1dc 0c00 	rsbs	ip, ip, #0
  4024f2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4024f6:	eb6e 0101 	sbc.w	r1, lr, r1
  4024fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4024fe:	d31b      	bcc.n	402538 <__adddf3+0x124>
  402500:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402504:	d30c      	bcc.n	402520 <__adddf3+0x10c>
  402506:	0849      	lsrs	r1, r1, #1
  402508:	ea5f 0030 	movs.w	r0, r0, rrx
  40250c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402510:	f104 0401 	add.w	r4, r4, #1
  402514:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402518:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40251c:	f080 809a 	bcs.w	402654 <__adddf3+0x240>
  402520:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402524:	bf08      	it	eq
  402526:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40252a:	f150 0000 	adcs.w	r0, r0, #0
  40252e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402532:	ea41 0105 	orr.w	r1, r1, r5
  402536:	bd30      	pop	{r4, r5, pc}
  402538:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40253c:	4140      	adcs	r0, r0
  40253e:	eb41 0101 	adc.w	r1, r1, r1
  402542:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402546:	f1a4 0401 	sub.w	r4, r4, #1
  40254a:	d1e9      	bne.n	402520 <__adddf3+0x10c>
  40254c:	f091 0f00 	teq	r1, #0
  402550:	bf04      	itt	eq
  402552:	4601      	moveq	r1, r0
  402554:	2000      	moveq	r0, #0
  402556:	fab1 f381 	clz	r3, r1
  40255a:	bf08      	it	eq
  40255c:	3320      	addeq	r3, #32
  40255e:	f1a3 030b 	sub.w	r3, r3, #11
  402562:	f1b3 0220 	subs.w	r2, r3, #32
  402566:	da0c      	bge.n	402582 <__adddf3+0x16e>
  402568:	320c      	adds	r2, #12
  40256a:	dd08      	ble.n	40257e <__adddf3+0x16a>
  40256c:	f102 0c14 	add.w	ip, r2, #20
  402570:	f1c2 020c 	rsb	r2, r2, #12
  402574:	fa01 f00c 	lsl.w	r0, r1, ip
  402578:	fa21 f102 	lsr.w	r1, r1, r2
  40257c:	e00c      	b.n	402598 <__adddf3+0x184>
  40257e:	f102 0214 	add.w	r2, r2, #20
  402582:	bfd8      	it	le
  402584:	f1c2 0c20 	rsble	ip, r2, #32
  402588:	fa01 f102 	lsl.w	r1, r1, r2
  40258c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402590:	bfdc      	itt	le
  402592:	ea41 010c 	orrle.w	r1, r1, ip
  402596:	4090      	lslle	r0, r2
  402598:	1ae4      	subs	r4, r4, r3
  40259a:	bfa2      	ittt	ge
  40259c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4025a0:	4329      	orrge	r1, r5
  4025a2:	bd30      	popge	{r4, r5, pc}
  4025a4:	ea6f 0404 	mvn.w	r4, r4
  4025a8:	3c1f      	subs	r4, #31
  4025aa:	da1c      	bge.n	4025e6 <__adddf3+0x1d2>
  4025ac:	340c      	adds	r4, #12
  4025ae:	dc0e      	bgt.n	4025ce <__adddf3+0x1ba>
  4025b0:	f104 0414 	add.w	r4, r4, #20
  4025b4:	f1c4 0220 	rsb	r2, r4, #32
  4025b8:	fa20 f004 	lsr.w	r0, r0, r4
  4025bc:	fa01 f302 	lsl.w	r3, r1, r2
  4025c0:	ea40 0003 	orr.w	r0, r0, r3
  4025c4:	fa21 f304 	lsr.w	r3, r1, r4
  4025c8:	ea45 0103 	orr.w	r1, r5, r3
  4025cc:	bd30      	pop	{r4, r5, pc}
  4025ce:	f1c4 040c 	rsb	r4, r4, #12
  4025d2:	f1c4 0220 	rsb	r2, r4, #32
  4025d6:	fa20 f002 	lsr.w	r0, r0, r2
  4025da:	fa01 f304 	lsl.w	r3, r1, r4
  4025de:	ea40 0003 	orr.w	r0, r0, r3
  4025e2:	4629      	mov	r1, r5
  4025e4:	bd30      	pop	{r4, r5, pc}
  4025e6:	fa21 f004 	lsr.w	r0, r1, r4
  4025ea:	4629      	mov	r1, r5
  4025ec:	bd30      	pop	{r4, r5, pc}
  4025ee:	f094 0f00 	teq	r4, #0
  4025f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4025f6:	bf06      	itte	eq
  4025f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4025fc:	3401      	addeq	r4, #1
  4025fe:	3d01      	subne	r5, #1
  402600:	e74e      	b.n	4024a0 <__adddf3+0x8c>
  402602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402606:	bf18      	it	ne
  402608:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40260c:	d029      	beq.n	402662 <__adddf3+0x24e>
  40260e:	ea94 0f05 	teq	r4, r5
  402612:	bf08      	it	eq
  402614:	ea90 0f02 	teqeq	r0, r2
  402618:	d005      	beq.n	402626 <__adddf3+0x212>
  40261a:	ea54 0c00 	orrs.w	ip, r4, r0
  40261e:	bf04      	itt	eq
  402620:	4619      	moveq	r1, r3
  402622:	4610      	moveq	r0, r2
  402624:	bd30      	pop	{r4, r5, pc}
  402626:	ea91 0f03 	teq	r1, r3
  40262a:	bf1e      	ittt	ne
  40262c:	2100      	movne	r1, #0
  40262e:	2000      	movne	r0, #0
  402630:	bd30      	popne	{r4, r5, pc}
  402632:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402636:	d105      	bne.n	402644 <__adddf3+0x230>
  402638:	0040      	lsls	r0, r0, #1
  40263a:	4149      	adcs	r1, r1
  40263c:	bf28      	it	cs
  40263e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402642:	bd30      	pop	{r4, r5, pc}
  402644:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402648:	bf3c      	itt	cc
  40264a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40264e:	bd30      	popcc	{r4, r5, pc}
  402650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402654:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402658:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40265c:	f04f 0000 	mov.w	r0, #0
  402660:	bd30      	pop	{r4, r5, pc}
  402662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402666:	bf1a      	itte	ne
  402668:	4619      	movne	r1, r3
  40266a:	4610      	movne	r0, r2
  40266c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402670:	bf1c      	itt	ne
  402672:	460b      	movne	r3, r1
  402674:	4602      	movne	r2, r0
  402676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40267a:	bf06      	itte	eq
  40267c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402680:	ea91 0f03 	teqeq	r1, r3
  402684:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402688:	bd30      	pop	{r4, r5, pc}
  40268a:	bf00      	nop

0040268c <__aeabi_ui2d>:
  40268c:	f090 0f00 	teq	r0, #0
  402690:	bf04      	itt	eq
  402692:	2100      	moveq	r1, #0
  402694:	4770      	bxeq	lr
  402696:	b530      	push	{r4, r5, lr}
  402698:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40269c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4026a0:	f04f 0500 	mov.w	r5, #0
  4026a4:	f04f 0100 	mov.w	r1, #0
  4026a8:	e750      	b.n	40254c <__adddf3+0x138>
  4026aa:	bf00      	nop

004026ac <__aeabi_i2d>:
  4026ac:	f090 0f00 	teq	r0, #0
  4026b0:	bf04      	itt	eq
  4026b2:	2100      	moveq	r1, #0
  4026b4:	4770      	bxeq	lr
  4026b6:	b530      	push	{r4, r5, lr}
  4026b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4026bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4026c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4026c4:	bf48      	it	mi
  4026c6:	4240      	negmi	r0, r0
  4026c8:	f04f 0100 	mov.w	r1, #0
  4026cc:	e73e      	b.n	40254c <__adddf3+0x138>
  4026ce:	bf00      	nop

004026d0 <__aeabi_f2d>:
  4026d0:	0042      	lsls	r2, r0, #1
  4026d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4026d6:	ea4f 0131 	mov.w	r1, r1, rrx
  4026da:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4026de:	bf1f      	itttt	ne
  4026e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4026e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4026e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4026ec:	4770      	bxne	lr
  4026ee:	f092 0f00 	teq	r2, #0
  4026f2:	bf14      	ite	ne
  4026f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4026f8:	4770      	bxeq	lr
  4026fa:	b530      	push	{r4, r5, lr}
  4026fc:	f44f 7460 	mov.w	r4, #896	; 0x380
  402700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402708:	e720      	b.n	40254c <__adddf3+0x138>
  40270a:	bf00      	nop

0040270c <__aeabi_ul2d>:
  40270c:	ea50 0201 	orrs.w	r2, r0, r1
  402710:	bf08      	it	eq
  402712:	4770      	bxeq	lr
  402714:	b530      	push	{r4, r5, lr}
  402716:	f04f 0500 	mov.w	r5, #0
  40271a:	e00a      	b.n	402732 <__aeabi_l2d+0x16>

0040271c <__aeabi_l2d>:
  40271c:	ea50 0201 	orrs.w	r2, r0, r1
  402720:	bf08      	it	eq
  402722:	4770      	bxeq	lr
  402724:	b530      	push	{r4, r5, lr}
  402726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40272a:	d502      	bpl.n	402732 <__aeabi_l2d+0x16>
  40272c:	4240      	negs	r0, r0
  40272e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402732:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402736:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40273a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40273e:	f43f aedc 	beq.w	4024fa <__adddf3+0xe6>
  402742:	f04f 0203 	mov.w	r2, #3
  402746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40274a:	bf18      	it	ne
  40274c:	3203      	addne	r2, #3
  40274e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402752:	bf18      	it	ne
  402754:	3203      	addne	r2, #3
  402756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40275a:	f1c2 0320 	rsb	r3, r2, #32
  40275e:	fa00 fc03 	lsl.w	ip, r0, r3
  402762:	fa20 f002 	lsr.w	r0, r0, r2
  402766:	fa01 fe03 	lsl.w	lr, r1, r3
  40276a:	ea40 000e 	orr.w	r0, r0, lr
  40276e:	fa21 f102 	lsr.w	r1, r1, r2
  402772:	4414      	add	r4, r2
  402774:	e6c1      	b.n	4024fa <__adddf3+0xe6>
  402776:	bf00      	nop

00402778 <__aeabi_dmul>:
  402778:	b570      	push	{r4, r5, r6, lr}
  40277a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40277e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402786:	bf1d      	ittte	ne
  402788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40278c:	ea94 0f0c 	teqne	r4, ip
  402790:	ea95 0f0c 	teqne	r5, ip
  402794:	f000 f8de 	bleq	402954 <__aeabi_dmul+0x1dc>
  402798:	442c      	add	r4, r5
  40279a:	ea81 0603 	eor.w	r6, r1, r3
  40279e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4027a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4027a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4027aa:	bf18      	it	ne
  4027ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4027b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4027b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4027b8:	d038      	beq.n	40282c <__aeabi_dmul+0xb4>
  4027ba:	fba0 ce02 	umull	ip, lr, r0, r2
  4027be:	f04f 0500 	mov.w	r5, #0
  4027c2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4027c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4027ca:	fbe0 e503 	umlal	lr, r5, r0, r3
  4027ce:	f04f 0600 	mov.w	r6, #0
  4027d2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4027d6:	f09c 0f00 	teq	ip, #0
  4027da:	bf18      	it	ne
  4027dc:	f04e 0e01 	orrne.w	lr, lr, #1
  4027e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4027e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4027e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4027ec:	d204      	bcs.n	4027f8 <__aeabi_dmul+0x80>
  4027ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4027f2:	416d      	adcs	r5, r5
  4027f4:	eb46 0606 	adc.w	r6, r6, r6
  4027f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4027fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402800:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402804:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402808:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40280c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402810:	bf88      	it	hi
  402812:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402816:	d81e      	bhi.n	402856 <__aeabi_dmul+0xde>
  402818:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40281c:	bf08      	it	eq
  40281e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402822:	f150 0000 	adcs.w	r0, r0, #0
  402826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40282a:	bd70      	pop	{r4, r5, r6, pc}
  40282c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402830:	ea46 0101 	orr.w	r1, r6, r1
  402834:	ea40 0002 	orr.w	r0, r0, r2
  402838:	ea81 0103 	eor.w	r1, r1, r3
  40283c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402840:	bfc2      	ittt	gt
  402842:	ebd4 050c 	rsbsgt	r5, r4, ip
  402846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40284a:	bd70      	popgt	{r4, r5, r6, pc}
  40284c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402850:	f04f 0e00 	mov.w	lr, #0
  402854:	3c01      	subs	r4, #1
  402856:	f300 80ab 	bgt.w	4029b0 <__aeabi_dmul+0x238>
  40285a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40285e:	bfde      	ittt	le
  402860:	2000      	movle	r0, #0
  402862:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402866:	bd70      	pople	{r4, r5, r6, pc}
  402868:	f1c4 0400 	rsb	r4, r4, #0
  40286c:	3c20      	subs	r4, #32
  40286e:	da35      	bge.n	4028dc <__aeabi_dmul+0x164>
  402870:	340c      	adds	r4, #12
  402872:	dc1b      	bgt.n	4028ac <__aeabi_dmul+0x134>
  402874:	f104 0414 	add.w	r4, r4, #20
  402878:	f1c4 0520 	rsb	r5, r4, #32
  40287c:	fa00 f305 	lsl.w	r3, r0, r5
  402880:	fa20 f004 	lsr.w	r0, r0, r4
  402884:	fa01 f205 	lsl.w	r2, r1, r5
  402888:	ea40 0002 	orr.w	r0, r0, r2
  40288c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402898:	fa21 f604 	lsr.w	r6, r1, r4
  40289c:	eb42 0106 	adc.w	r1, r2, r6
  4028a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4028a4:	bf08      	it	eq
  4028a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4028aa:	bd70      	pop	{r4, r5, r6, pc}
  4028ac:	f1c4 040c 	rsb	r4, r4, #12
  4028b0:	f1c4 0520 	rsb	r5, r4, #32
  4028b4:	fa00 f304 	lsl.w	r3, r0, r4
  4028b8:	fa20 f005 	lsr.w	r0, r0, r5
  4028bc:	fa01 f204 	lsl.w	r2, r1, r4
  4028c0:	ea40 0002 	orr.w	r0, r0, r2
  4028c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4028c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4028cc:	f141 0100 	adc.w	r1, r1, #0
  4028d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4028d4:	bf08      	it	eq
  4028d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4028da:	bd70      	pop	{r4, r5, r6, pc}
  4028dc:	f1c4 0520 	rsb	r5, r4, #32
  4028e0:	fa00 f205 	lsl.w	r2, r0, r5
  4028e4:	ea4e 0e02 	orr.w	lr, lr, r2
  4028e8:	fa20 f304 	lsr.w	r3, r0, r4
  4028ec:	fa01 f205 	lsl.w	r2, r1, r5
  4028f0:	ea43 0302 	orr.w	r3, r3, r2
  4028f4:	fa21 f004 	lsr.w	r0, r1, r4
  4028f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4028fc:	fa21 f204 	lsr.w	r2, r1, r4
  402900:	ea20 0002 	bic.w	r0, r0, r2
  402904:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40290c:	bf08      	it	eq
  40290e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402912:	bd70      	pop	{r4, r5, r6, pc}
  402914:	f094 0f00 	teq	r4, #0
  402918:	d10f      	bne.n	40293a <__aeabi_dmul+0x1c2>
  40291a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40291e:	0040      	lsls	r0, r0, #1
  402920:	eb41 0101 	adc.w	r1, r1, r1
  402924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402928:	bf08      	it	eq
  40292a:	3c01      	subeq	r4, #1
  40292c:	d0f7      	beq.n	40291e <__aeabi_dmul+0x1a6>
  40292e:	ea41 0106 	orr.w	r1, r1, r6
  402932:	f095 0f00 	teq	r5, #0
  402936:	bf18      	it	ne
  402938:	4770      	bxne	lr
  40293a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40293e:	0052      	lsls	r2, r2, #1
  402940:	eb43 0303 	adc.w	r3, r3, r3
  402944:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402948:	bf08      	it	eq
  40294a:	3d01      	subeq	r5, #1
  40294c:	d0f7      	beq.n	40293e <__aeabi_dmul+0x1c6>
  40294e:	ea43 0306 	orr.w	r3, r3, r6
  402952:	4770      	bx	lr
  402954:	ea94 0f0c 	teq	r4, ip
  402958:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40295c:	bf18      	it	ne
  40295e:	ea95 0f0c 	teqne	r5, ip
  402962:	d00c      	beq.n	40297e <__aeabi_dmul+0x206>
  402964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402968:	bf18      	it	ne
  40296a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40296e:	d1d1      	bne.n	402914 <__aeabi_dmul+0x19c>
  402970:	ea81 0103 	eor.w	r1, r1, r3
  402974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402978:	f04f 0000 	mov.w	r0, #0
  40297c:	bd70      	pop	{r4, r5, r6, pc}
  40297e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402982:	bf06      	itte	eq
  402984:	4610      	moveq	r0, r2
  402986:	4619      	moveq	r1, r3
  402988:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40298c:	d019      	beq.n	4029c2 <__aeabi_dmul+0x24a>
  40298e:	ea94 0f0c 	teq	r4, ip
  402992:	d102      	bne.n	40299a <__aeabi_dmul+0x222>
  402994:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402998:	d113      	bne.n	4029c2 <__aeabi_dmul+0x24a>
  40299a:	ea95 0f0c 	teq	r5, ip
  40299e:	d105      	bne.n	4029ac <__aeabi_dmul+0x234>
  4029a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4029a4:	bf1c      	itt	ne
  4029a6:	4610      	movne	r0, r2
  4029a8:	4619      	movne	r1, r3
  4029aa:	d10a      	bne.n	4029c2 <__aeabi_dmul+0x24a>
  4029ac:	ea81 0103 	eor.w	r1, r1, r3
  4029b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4029b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4029b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4029bc:	f04f 0000 	mov.w	r0, #0
  4029c0:	bd70      	pop	{r4, r5, r6, pc}
  4029c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4029c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4029ca:	bd70      	pop	{r4, r5, r6, pc}

004029cc <__aeabi_ddiv>:
  4029cc:	b570      	push	{r4, r5, r6, lr}
  4029ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4029d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4029d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4029da:	bf1d      	ittte	ne
  4029dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4029e0:	ea94 0f0c 	teqne	r4, ip
  4029e4:	ea95 0f0c 	teqne	r5, ip
  4029e8:	f000 f8a7 	bleq	402b3a <__aeabi_ddiv+0x16e>
  4029ec:	eba4 0405 	sub.w	r4, r4, r5
  4029f0:	ea81 0e03 	eor.w	lr, r1, r3
  4029f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4029f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4029fc:	f000 8088 	beq.w	402b10 <__aeabi_ddiv+0x144>
  402a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402a04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402a08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402a0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402a10:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402a14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402a18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402a1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402a20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402a24:	429d      	cmp	r5, r3
  402a26:	bf08      	it	eq
  402a28:	4296      	cmpeq	r6, r2
  402a2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402a2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402a32:	d202      	bcs.n	402a3a <__aeabi_ddiv+0x6e>
  402a34:	085b      	lsrs	r3, r3, #1
  402a36:	ea4f 0232 	mov.w	r2, r2, rrx
  402a3a:	1ab6      	subs	r6, r6, r2
  402a3c:	eb65 0503 	sbc.w	r5, r5, r3
  402a40:	085b      	lsrs	r3, r3, #1
  402a42:	ea4f 0232 	mov.w	r2, r2, rrx
  402a46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402a4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402a4e:	ebb6 0e02 	subs.w	lr, r6, r2
  402a52:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a56:	bf22      	ittt	cs
  402a58:	1ab6      	subcs	r6, r6, r2
  402a5a:	4675      	movcs	r5, lr
  402a5c:	ea40 000c 	orrcs.w	r0, r0, ip
  402a60:	085b      	lsrs	r3, r3, #1
  402a62:	ea4f 0232 	mov.w	r2, r2, rrx
  402a66:	ebb6 0e02 	subs.w	lr, r6, r2
  402a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a6e:	bf22      	ittt	cs
  402a70:	1ab6      	subcs	r6, r6, r2
  402a72:	4675      	movcs	r5, lr
  402a74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402a78:	085b      	lsrs	r3, r3, #1
  402a7a:	ea4f 0232 	mov.w	r2, r2, rrx
  402a7e:	ebb6 0e02 	subs.w	lr, r6, r2
  402a82:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a86:	bf22      	ittt	cs
  402a88:	1ab6      	subcs	r6, r6, r2
  402a8a:	4675      	movcs	r5, lr
  402a8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402a90:	085b      	lsrs	r3, r3, #1
  402a92:	ea4f 0232 	mov.w	r2, r2, rrx
  402a96:	ebb6 0e02 	subs.w	lr, r6, r2
  402a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402a9e:	bf22      	ittt	cs
  402aa0:	1ab6      	subcs	r6, r6, r2
  402aa2:	4675      	movcs	r5, lr
  402aa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402aa8:	ea55 0e06 	orrs.w	lr, r5, r6
  402aac:	d018      	beq.n	402ae0 <__aeabi_ddiv+0x114>
  402aae:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402ab2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402ab6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402aba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402abe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402ac2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402ac6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402aca:	d1c0      	bne.n	402a4e <__aeabi_ddiv+0x82>
  402acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ad0:	d10b      	bne.n	402aea <__aeabi_ddiv+0x11e>
  402ad2:	ea41 0100 	orr.w	r1, r1, r0
  402ad6:	f04f 0000 	mov.w	r0, #0
  402ada:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402ade:	e7b6      	b.n	402a4e <__aeabi_ddiv+0x82>
  402ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ae4:	bf04      	itt	eq
  402ae6:	4301      	orreq	r1, r0
  402ae8:	2000      	moveq	r0, #0
  402aea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402aee:	bf88      	it	hi
  402af0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402af4:	f63f aeaf 	bhi.w	402856 <__aeabi_dmul+0xde>
  402af8:	ebb5 0c03 	subs.w	ip, r5, r3
  402afc:	bf04      	itt	eq
  402afe:	ebb6 0c02 	subseq.w	ip, r6, r2
  402b02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402b06:	f150 0000 	adcs.w	r0, r0, #0
  402b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402b0e:	bd70      	pop	{r4, r5, r6, pc}
  402b10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402b14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402b18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402b1c:	bfc2      	ittt	gt
  402b1e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402b22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b26:	bd70      	popgt	{r4, r5, r6, pc}
  402b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b2c:	f04f 0e00 	mov.w	lr, #0
  402b30:	3c01      	subs	r4, #1
  402b32:	e690      	b.n	402856 <__aeabi_dmul+0xde>
  402b34:	ea45 0e06 	orr.w	lr, r5, r6
  402b38:	e68d      	b.n	402856 <__aeabi_dmul+0xde>
  402b3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402b3e:	ea94 0f0c 	teq	r4, ip
  402b42:	bf08      	it	eq
  402b44:	ea95 0f0c 	teqeq	r5, ip
  402b48:	f43f af3b 	beq.w	4029c2 <__aeabi_dmul+0x24a>
  402b4c:	ea94 0f0c 	teq	r4, ip
  402b50:	d10a      	bne.n	402b68 <__aeabi_ddiv+0x19c>
  402b52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402b56:	f47f af34 	bne.w	4029c2 <__aeabi_dmul+0x24a>
  402b5a:	ea95 0f0c 	teq	r5, ip
  402b5e:	f47f af25 	bne.w	4029ac <__aeabi_dmul+0x234>
  402b62:	4610      	mov	r0, r2
  402b64:	4619      	mov	r1, r3
  402b66:	e72c      	b.n	4029c2 <__aeabi_dmul+0x24a>
  402b68:	ea95 0f0c 	teq	r5, ip
  402b6c:	d106      	bne.n	402b7c <__aeabi_ddiv+0x1b0>
  402b6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402b72:	f43f aefd 	beq.w	402970 <__aeabi_dmul+0x1f8>
  402b76:	4610      	mov	r0, r2
  402b78:	4619      	mov	r1, r3
  402b7a:	e722      	b.n	4029c2 <__aeabi_dmul+0x24a>
  402b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402b80:	bf18      	it	ne
  402b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402b86:	f47f aec5 	bne.w	402914 <__aeabi_dmul+0x19c>
  402b8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402b8e:	f47f af0d 	bne.w	4029ac <__aeabi_dmul+0x234>
  402b92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402b96:	f47f aeeb 	bne.w	402970 <__aeabi_dmul+0x1f8>
  402b9a:	e712      	b.n	4029c2 <__aeabi_dmul+0x24a>

00402b9c <__aeabi_d2f>:
  402b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402ba4:	bf24      	itt	cs
  402ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402bae:	d90d      	bls.n	402bcc <__aeabi_d2f+0x30>
  402bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402bc4:	bf08      	it	eq
  402bc6:	f020 0001 	biceq.w	r0, r0, #1
  402bca:	4770      	bx	lr
  402bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402bd0:	d121      	bne.n	402c16 <__aeabi_d2f+0x7a>
  402bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402bd6:	bfbc      	itt	lt
  402bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402bdc:	4770      	bxlt	lr
  402bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402be6:	f1c2 0218 	rsb	r2, r2, #24
  402bea:	f1c2 0c20 	rsb	ip, r2, #32
  402bee:	fa10 f30c 	lsls.w	r3, r0, ip
  402bf2:	fa20 f002 	lsr.w	r0, r0, r2
  402bf6:	bf18      	it	ne
  402bf8:	f040 0001 	orrne.w	r0, r0, #1
  402bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402c04:	fa03 fc0c 	lsl.w	ip, r3, ip
  402c08:	ea40 000c 	orr.w	r0, r0, ip
  402c0c:	fa23 f302 	lsr.w	r3, r3, r2
  402c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402c14:	e7cc      	b.n	402bb0 <__aeabi_d2f+0x14>
  402c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402c1a:	d107      	bne.n	402c2c <__aeabi_d2f+0x90>
  402c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402c20:	bf1e      	ittt	ne
  402c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402c2a:	4770      	bxne	lr
  402c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402c38:	4770      	bx	lr
  402c3a:	bf00      	nop

00402c3c <__libc_init_array>:
  402c3c:	b570      	push	{r4, r5, r6, lr}
  402c3e:	4e0d      	ldr	r6, [pc, #52]	; (402c74 <__libc_init_array+0x38>)
  402c40:	4c0d      	ldr	r4, [pc, #52]	; (402c78 <__libc_init_array+0x3c>)
  402c42:	1ba4      	subs	r4, r4, r6
  402c44:	10a4      	asrs	r4, r4, #2
  402c46:	2500      	movs	r5, #0
  402c48:	42a5      	cmp	r5, r4
  402c4a:	d109      	bne.n	402c60 <__libc_init_array+0x24>
  402c4c:	4e0b      	ldr	r6, [pc, #44]	; (402c7c <__libc_init_array+0x40>)
  402c4e:	4c0c      	ldr	r4, [pc, #48]	; (402c80 <__libc_init_array+0x44>)
  402c50:	f000 f9ae 	bl	402fb0 <_init>
  402c54:	1ba4      	subs	r4, r4, r6
  402c56:	10a4      	asrs	r4, r4, #2
  402c58:	2500      	movs	r5, #0
  402c5a:	42a5      	cmp	r5, r4
  402c5c:	d105      	bne.n	402c6a <__libc_init_array+0x2e>
  402c5e:	bd70      	pop	{r4, r5, r6, pc}
  402c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402c64:	4798      	blx	r3
  402c66:	3501      	adds	r5, #1
  402c68:	e7ee      	b.n	402c48 <__libc_init_array+0xc>
  402c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402c6e:	4798      	blx	r3
  402c70:	3501      	adds	r5, #1
  402c72:	e7f2      	b.n	402c5a <__libc_init_array+0x1e>
  402c74:	00402fbc 	.word	0x00402fbc
  402c78:	00402fbc 	.word	0x00402fbc
  402c7c:	00402fbc 	.word	0x00402fbc
  402c80:	00402fc0 	.word	0x00402fc0

00402c84 <memset>:
  402c84:	4402      	add	r2, r0
  402c86:	4603      	mov	r3, r0
  402c88:	4293      	cmp	r3, r2
  402c8a:	d100      	bne.n	402c8e <memset+0xa>
  402c8c:	4770      	bx	lr
  402c8e:	f803 1b01 	strb.w	r1, [r3], #1
  402c92:	e7f9      	b.n	402c88 <memset+0x4>
  402c94:	682f2e2e 	.word	0x682f2e2e
  402c98:	692f6c61 	.word	0x692f6c61
  402c9c:	756c636e 	.word	0x756c636e
  402ca0:	682f6564 	.word	0x682f6564
  402ca4:	775f6c61 	.word	0x775f6c61
  402ca8:	682e7464 	.word	0x682e7464
  402cac:	00000000 	.word	0x00000000
  402cb0:	682f2e2e 	.word	0x682f2e2e
  402cb4:	732f6c61 	.word	0x732f6c61
  402cb8:	682f6372 	.word	0x682f6372
  402cbc:	615f6c61 	.word	0x615f6c61
  402cc0:	735f6364 	.word	0x735f6364
  402cc4:	2e636e79 	.word	0x2e636e79
  402cc8:	00000063 	.word	0x00000063
  402ccc:	682f2e2e 	.word	0x682f2e2e
  402cd0:	732f6c61 	.word	0x732f6c61
  402cd4:	682f6372 	.word	0x682f6372
  402cd8:	695f6c61 	.word	0x695f6c61
  402cdc:	6d5f6332 	.word	0x6d5f6332
  402ce0:	6e79735f 	.word	0x6e79735f
  402ce4:	00632e63 	.word	0x00632e63
  402ce8:	682f2e2e 	.word	0x682f2e2e
  402cec:	732f6c61 	.word	0x732f6c61
  402cf0:	682f6372 	.word	0x682f6372
  402cf4:	695f6c61 	.word	0x695f6c61
  402cf8:	00632e6f 	.word	0x00632e6f
  402cfc:	682f2e2e 	.word	0x682f2e2e
  402d00:	732f6c61 	.word	0x732f6c61
  402d04:	682f6372 	.word	0x682f6372
  402d08:	705f6c61 	.word	0x705f6c61
  402d0c:	632e6d77 	.word	0x632e6d77
  402d10:	00000000 	.word	0x00000000
  402d14:	682f2e2e 	.word	0x682f2e2e
  402d18:	732f6c61 	.word	0x732f6c61
  402d1c:	682f6372 	.word	0x682f6372
  402d20:	735f6c61 	.word	0x735f6c61
  402d24:	6d5f6970 	.word	0x6d5f6970
  402d28:	6e79735f 	.word	0x6e79735f
  402d2c:	00632e63 	.word	0x00632e63
  402d30:	682f2e2e 	.word	0x682f2e2e
  402d34:	732f6c61 	.word	0x732f6c61
  402d38:	682f6372 	.word	0x682f6372
  402d3c:	745f6c61 	.word	0x745f6c61
  402d40:	72656d69 	.word	0x72656d69
  402d44:	0000632e 	.word	0x0000632e
  402d48:	682f2e2e 	.word	0x682f2e2e
  402d4c:	752f6c61 	.word	0x752f6c61
  402d50:	736c6974 	.word	0x736c6974
  402d54:	6372732f 	.word	0x6372732f
  402d58:	6974752f 	.word	0x6974752f
  402d5c:	6c5f736c 	.word	0x6c5f736c
  402d60:	2e747369 	.word	0x2e747369
  402d64:	00000063 	.word	0x00000063

00402d68 <_afecs>:
  402d68:	00000000 2f843100 03000000 ffffffff     .....1./........
  402d78:	0000ffff 00000000 00000000 00000000     ................
  402d88:	0000010c 00000000 00000000 00000000     ................
  402d98:	00000000 00000200 00000200 00000200     ................
  402da8:	00000200 00000200 00000200 00000200     ................
  402db8:	00000200 00000200 00000200 00000200     ................
  402dc8:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  402dd8:	5f6c7068 63656661 0000632e              hpl_afec.c..

00402de4 <_ext_irq>:
  402de4:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  402df4:	00000000 03c00000 00008020 00000001     ........ .......
  402e04:	00000002 000000f2 000000f2 00000000     ................
  402e14:	000000f0 00000002                       ........

00402e1c <_pio_irq_n>:
  402e1c:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  402e2c:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

00402e3c <_pwms>:
  402e3c:	40020000 0000001f 00010001 00000001     ...@............
  402e4c:	00000001 000000ff 00000000 00000004     ................
	...
  402e68:	00000004 00402ec4 00000000 204000b0     ......@.......@ 
  402e78:	4005c000 0000003c 00010001 00000001     ...@<...........
  402e88:	00000001 000000ff 00000000 00000004     ................
	...
  402ea4:	00000001 00402eb4 00000000 204000a4     ......@.......@ 

00402eb4 <_ch_cfg1>:
  402eb4:	00000000 00000208 00000400 00000200     ................

00402ec4 <_ch_cfg0>:
  402ec4:	00000000 00000208 00000400 00000200     ................
  402ed4:	00000001 00000208 00000400 00000200     ................
  402ee4:	00000002 00000208 00000400 00000200     ................
  402ef4:	00000003 00000208 00000400 00000200     ................
  402f04:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  402f14:	632e6d77 00000000                       wm.c....

00402f1c <spi_regs>:
  402f1c:	00000000 80000000 00000001 0496fa02     ................
  402f2c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  402f3c:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  402f4c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00402f5c <_i2cm_sync_cfgs>:
  402f5c:	40018000 00000020 00000000 00000000     ...@ ...........
  402f6c:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  402f7c:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  402f8c:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  402f9c:	775f6c70 632e7464 00000000 bbccddee     pl_wdt.c........
  402fac:	000000aa                                ....

00402fb0 <_init>:
  402fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fb2:	bf00      	nop
  402fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402fb6:	bc08      	pop	{r3}
  402fb8:	469e      	mov	lr, r3
  402fba:	4770      	bx	lr

00402fbc <__init_array_start>:
  402fbc:	0040017d 	.word	0x0040017d

00402fc0 <_fini>:
  402fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fc2:	bf00      	nop
  402fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402fc6:	bc08      	pop	{r3}
  402fc8:	469e      	mov	lr, r3
  402fca:	4770      	bx	lr

00402fcc <__fini_array_start>:
  402fcc:	00400159 	.word	0x00400159
