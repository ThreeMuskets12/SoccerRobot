
Robot_Firmware_v.16.3.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000278c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  0040278c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20400064  004027f0  00020064  2**2
                  ALLOC
  3 .heap         00000200  20400170  004028fc  00020064  2**0
                  ALLOC
  4 .stack        00000400  20400370  00402afc  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020d85  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000043c9  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cad2  00000000  00000000  00045239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e30  00000000  00000000  00051d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cf0  00000000  00000000  00052b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003b545  00000000  00000000  0005382b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a142  00000000  00000000  0008ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00123cc0  00000000  00000000  000a8eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002890  00000000  00000000  001ccb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 07 40 20 dd 01 40 00 d9 01 40 00 d9 01 40 00     p.@ ..@...@...@.
  400010:	d9 01 40 00 d9 01 40 00 d9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 01 40 00 d9 01 40 00 00 00 00 00 d9 01 40 00     ..@...@.......@.
  40003c:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  40004c:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  40005c:	d9 01 40 00 d9 01 40 00 00 00 00 00 6d 10 40 00     ..@...@.....m.@.
  40006c:	61 10 40 00 00 00 00 00 d9 01 40 00 d9 01 40 00     a.@.......@...@.
  40007c:	d9 01 40 00 d9 01 40 00 00 00 00 00 d9 01 40 00     ..@...@.......@.
  40008c:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  40009c:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  4000ac:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  4000bc:	d1 11 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
	...
  4000e0:	d9 01 40 00 d9 01 40 00 00 00 00 00 d9 01 40 00     ..@...@.......@.
  4000f0:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  400100:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  400110:	d9 01 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	d9 01 40 00 d9 01 40 00 d9 01 40 00 d9 01 40 00     ..@...@...@...@.
  400130:	e5 11 40 00 d9 01 40 00 00 00 00 00 d9 01 40 00     ..@...@.......@.
  400140:	d9 01 40 00 d9 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400150:	d9 01 40 00 d9 01 40 00                             ..@...@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	20400064 	.word	0x20400064
  400174:	00000000 	.word	0x00000000
  400178:	0040278c 	.word	0x0040278c

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	0040278c 	.word	0x0040278c
  4001b8:	20400068 	.word	0x20400068
  4001bc:	0040278c 	.word	0x0040278c
  4001c0:	00000000 	.word	0x00000000

004001c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001c4:	b508      	push	{r3, lr}
	system_init();
  4001c6:	4b02      	ldr	r3, [pc, #8]	; (4001d0 <atmel_start_init+0xc>)
  4001c8:	4798      	blx	r3
	stdio_redirect_init();
  4001ca:	4b02      	ldr	r3, [pc, #8]	; (4001d4 <atmel_start_init+0x10>)
  4001cc:	4798      	blx	r3
  4001ce:	bd08      	pop	{r3, pc}
  4001d0:	004005c5 	.word	0x004005c5
  4001d4:	00401be9 	.word	0x00401be9

004001d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001d8:	e7fe      	b.n	4001d8 <Dummy_Handler>
	...

004001dc <Reset_Handler>:
{
  4001dc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001de:	4b10      	ldr	r3, [pc, #64]	; (400220 <Reset_Handler+0x44>)
  4001e0:	4a10      	ldr	r2, [pc, #64]	; (400224 <Reset_Handler+0x48>)
  4001e2:	429a      	cmp	r2, r3
  4001e4:	d009      	beq.n	4001fa <Reset_Handler+0x1e>
  4001e6:	4b0e      	ldr	r3, [pc, #56]	; (400220 <Reset_Handler+0x44>)
  4001e8:	4a0e      	ldr	r2, [pc, #56]	; (400224 <Reset_Handler+0x48>)
  4001ea:	e003      	b.n	4001f4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001ec:	6811      	ldr	r1, [r2, #0]
  4001ee:	6019      	str	r1, [r3, #0]
  4001f0:	3304      	adds	r3, #4
  4001f2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001f4:	490c      	ldr	r1, [pc, #48]	; (400228 <Reset_Handler+0x4c>)
  4001f6:	428b      	cmp	r3, r1
  4001f8:	d3f8      	bcc.n	4001ec <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <Reset_Handler+0x50>)
  4001fc:	e002      	b.n	400204 <Reset_Handler+0x28>
                *pDest++ = 0;
  4001fe:	2200      	movs	r2, #0
  400200:	601a      	str	r2, [r3, #0]
  400202:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400204:	4a0a      	ldr	r2, [pc, #40]	; (400230 <Reset_Handler+0x54>)
  400206:	4293      	cmp	r3, r2
  400208:	d3f9      	bcc.n	4001fe <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40020a:	4a0a      	ldr	r2, [pc, #40]	; (400234 <Reset_Handler+0x58>)
  40020c:	4b0a      	ldr	r3, [pc, #40]	; (400238 <Reset_Handler+0x5c>)
  40020e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400212:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400214:	4b09      	ldr	r3, [pc, #36]	; (40023c <Reset_Handler+0x60>)
  400216:	4798      	blx	r3
        main();
  400218:	4b09      	ldr	r3, [pc, #36]	; (400240 <Reset_Handler+0x64>)
  40021a:	4798      	blx	r3
  40021c:	e7fe      	b.n	40021c <Reset_Handler+0x40>
  40021e:	bf00      	nop
  400220:	20400000 	.word	0x20400000
  400224:	0040278c 	.word	0x0040278c
  400228:	20400064 	.word	0x20400064
  40022c:	20400064 	.word	0x20400064
  400230:	20400170 	.word	0x20400170
  400234:	e000ed00 	.word	0xe000ed00
  400238:	00400000 	.word	0x00400000
  40023c:	00401c09 	.word	0x00401c09
  400240:	00401a21 	.word	0x00401a21

00400244 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400248:	4b05      	ldr	r3, [pc, #20]	; (400260 <ADC_0_PORT_init+0x1c>)
  40024a:	601a      	str	r2, [r3, #0]
  40024c:	2204      	movs	r2, #4
  40024e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400252:	601a      	str	r2, [r3, #0]
  400254:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400258:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40025c:	601a      	str	r2, [r3, #0]
  40025e:	4770      	bx	lr
  400260:	400e1400 	.word	0x400e1400

00400264 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <ADC_0_CLOCK_init+0x14>)
  400266:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400268:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40026c:	d103      	bne.n	400276 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40026e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400272:	4b01      	ldr	r3, [pc, #4]	; (400278 <ADC_0_CLOCK_init+0x14>)
  400274:	611a      	str	r2, [r3, #16]
  400276:	4770      	bx	lr
  400278:	400e0600 	.word	0x400e0600

0040027c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40027c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40027e:	4b05      	ldr	r3, [pc, #20]	; (400294 <ADC_0_init+0x18>)
  400280:	4798      	blx	r3
	ADC_0_PORT_init();
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <ADC_0_init+0x1c>)
  400284:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400286:	2200      	movs	r2, #0
  400288:	4904      	ldr	r1, [pc, #16]	; (40029c <ADC_0_init+0x20>)
  40028a:	4805      	ldr	r0, [pc, #20]	; (4002a0 <ADC_0_init+0x24>)
  40028c:	4b05      	ldr	r3, [pc, #20]	; (4002a4 <ADC_0_init+0x28>)
  40028e:	4798      	blx	r3
  400290:	bd08      	pop	{r3, pc}
  400292:	bf00      	nop
  400294:	00400265 	.word	0x00400265
  400298:	00400245 	.word	0x00400245
  40029c:	4003c000 	.word	0x4003c000
  4002a0:	20400110 	.word	0x20400110
  4002a4:	00400769 	.word	0x00400769

004002a8 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4002a8:	4b03      	ldr	r3, [pc, #12]	; (4002b8 <EXTERNAL_IRQ_1_init+0x10>)
  4002aa:	2202      	movs	r2, #2
  4002ac:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4002ae:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4002b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002b4:	601a      	str	r2, [r3, #0]
  4002b6:	4770      	bx	lr
  4002b8:	400e1000 	.word	0x400e1000

004002bc <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4002bc:	4b12      	ldr	r3, [pc, #72]	; (400308 <EXTERNAL_IRQ_0_init+0x4c>)
  4002be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002c2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002c4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002ca:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002d0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002d2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002d8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002de:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002e0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002e6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002ec:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002ee:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002f4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4002fa:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002fc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400302:	601a      	str	r2, [r3, #0]
  400304:	4770      	bx	lr
  400306:	bf00      	nop
  400308:	400e0e00 	.word	0x400e0e00

0040030c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40030c:	4b17      	ldr	r3, [pc, #92]	; (40036c <PWM_0_PORT_init+0x60>)
  40030e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400314:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400316:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40031c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40031e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400322:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400324:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40032a:	f022 0204 	bic.w	r2, r2, #4
  40032e:	671a      	str	r2, [r3, #112]	; 0x70
  400330:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400332:	f022 0204 	bic.w	r2, r2, #4
  400336:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400338:	2204      	movs	r2, #4
  40033a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40033c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40033e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400342:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400344:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40034a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40034c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400350:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400354:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400358:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40035a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40035c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400360:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400366:	605a      	str	r2, [r3, #4]
  400368:	4770      	bx	lr
  40036a:	bf00      	nop
  40036c:	400e1400 	.word	0x400e1400

00400370 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <PWM_0_CLOCK_init+0x14>)
  400372:	699b      	ldr	r3, [r3, #24]
  400374:	2b00      	cmp	r3, #0
  400376:	db03      	blt.n	400380 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400378:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40037c:	4b01      	ldr	r3, [pc, #4]	; (400384 <PWM_0_CLOCK_init+0x14>)
  40037e:	611a      	str	r2, [r3, #16]
  400380:	4770      	bx	lr
  400382:	bf00      	nop
  400384:	400e0600 	.word	0x400e0600

00400388 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400388:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40038a:	4b06      	ldr	r3, [pc, #24]	; (4003a4 <PWM_0_init+0x1c>)
  40038c:	4798      	blx	r3
	PWM_0_PORT_init();
  40038e:	4b06      	ldr	r3, [pc, #24]	; (4003a8 <PWM_0_init+0x20>)
  400390:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400392:	4b06      	ldr	r3, [pc, #24]	; (4003ac <PWM_0_init+0x24>)
  400394:	4798      	blx	r3
  400396:	4602      	mov	r2, r0
  400398:	4905      	ldr	r1, [pc, #20]	; (4003b0 <PWM_0_init+0x28>)
  40039a:	4806      	ldr	r0, [pc, #24]	; (4003b4 <PWM_0_init+0x2c>)
  40039c:	4b06      	ldr	r3, [pc, #24]	; (4003b8 <PWM_0_init+0x30>)
  40039e:	4798      	blx	r3
  4003a0:	bd08      	pop	{r3, pc}
  4003a2:	bf00      	nop
  4003a4:	00400371 	.word	0x00400371
  4003a8:	0040030d 	.word	0x0040030d
  4003ac:	004013a5 	.word	0x004013a5
  4003b0:	40020000 	.word	0x40020000
  4003b4:	204000e8 	.word	0x204000e8
  4003b8:	00400995 	.word	0x00400995

004003bc <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003bc:	4b06      	ldr	r3, [pc, #24]	; (4003d8 <PWM_1_PORT_init+0x1c>)
  4003be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4003c4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4003cc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4003d2:	605a      	str	r2, [r3, #4]
  4003d4:	4770      	bx	lr
  4003d6:	bf00      	nop
  4003d8:	400e0e00 	.word	0x400e0e00

004003dc <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4003dc:	4b05      	ldr	r3, [pc, #20]	; (4003f4 <PWM_1_CLOCK_init+0x18>)
  4003de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4003e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4003e6:	d104      	bne.n	4003f2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003ec:	4b01      	ldr	r3, [pc, #4]	; (4003f4 <PWM_1_CLOCK_init+0x18>)
  4003ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4003f2:	4770      	bx	lr
  4003f4:	400e0600 	.word	0x400e0600

004003f8 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  4003f8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4003fa:	4b06      	ldr	r3, [pc, #24]	; (400414 <PWM_1_init+0x1c>)
  4003fc:	4798      	blx	r3
	PWM_1_PORT_init();
  4003fe:	4b06      	ldr	r3, [pc, #24]	; (400418 <PWM_1_init+0x20>)
  400400:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400402:	4b06      	ldr	r3, [pc, #24]	; (40041c <PWM_1_init+0x24>)
  400404:	4798      	blx	r3
  400406:	4602      	mov	r2, r0
  400408:	4905      	ldr	r1, [pc, #20]	; (400420 <PWM_1_init+0x28>)
  40040a:	4806      	ldr	r0, [pc, #24]	; (400424 <PWM_1_init+0x2c>)
  40040c:	4b06      	ldr	r3, [pc, #24]	; (400428 <PWM_1_init+0x30>)
  40040e:	4798      	blx	r3
  400410:	bd08      	pop	{r3, pc}
  400412:	bf00      	nop
  400414:	004003dd 	.word	0x004003dd
  400418:	004003bd 	.word	0x004003bd
  40041c:	004013a5 	.word	0x004013a5
  400420:	4005c000 	.word	0x4005c000
  400424:	20400130 	.word	0x20400130
  400428:	00400995 	.word	0x00400995

0040042c <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40042c:	4b11      	ldr	r3, [pc, #68]	; (400474 <SPI_0_PORT_init+0x48>)
  40042e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400430:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400434:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400436:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400438:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40043c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40043e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400442:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400446:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40044a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40044c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40044e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400452:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400454:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400458:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40045a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40045c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400460:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400462:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400464:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400468:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40046a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40046e:	605a      	str	r2, [r3, #4]
  400470:	4770      	bx	lr
  400472:	bf00      	nop
  400474:	400e1400 	.word	0x400e1400

00400478 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400478:	4b04      	ldr	r3, [pc, #16]	; (40048c <SPI_0_CLOCK_init+0x14>)
  40047a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40047c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400480:	d103      	bne.n	40048a <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400486:	4b01      	ldr	r3, [pc, #4]	; (40048c <SPI_0_CLOCK_init+0x14>)
  400488:	611a      	str	r2, [r3, #16]
  40048a:	4770      	bx	lr
  40048c:	400e0600 	.word	0x400e0600

00400490 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void SPI_0_init(void)
{
  400490:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400492:	4b08      	ldr	r3, [pc, #32]	; (4004b4 <SPI_0_init+0x24>)
  400494:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <SPI_0_init+0x28>)
  400498:	4798      	blx	r3
  40049a:	4c08      	ldr	r4, [pc, #32]	; (4004bc <SPI_0_init+0x2c>)
  40049c:	4601      	mov	r1, r0
  40049e:	4620      	mov	r0, r4
  4004a0:	4b07      	ldr	r3, [pc, #28]	; (4004c0 <SPI_0_init+0x30>)
  4004a2:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4004a4:	4907      	ldr	r1, [pc, #28]	; (4004c4 <SPI_0_init+0x34>)
  4004a6:	4620      	mov	r0, r4
  4004a8:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <SPI_0_init+0x38>)
  4004aa:	4798      	blx	r3
	SPI_0_PORT_init();
  4004ac:	4b07      	ldr	r3, [pc, #28]	; (4004cc <SPI_0_init+0x3c>)
  4004ae:	4798      	blx	r3
  4004b0:	bd10      	pop	{r4, pc}
  4004b2:	bf00      	nop
  4004b4:	00400479 	.word	0x00400479
  4004b8:	00401569 	.word	0x00401569
  4004bc:	20400118 	.word	0x20400118
  4004c0:	00400a15 	.word	0x00400a15
  4004c4:	40008000 	.word	0x40008000
  4004c8:	00400a35 	.word	0x00400a35
  4004cc:	0040042d 	.word	0x0040042d

004004d0 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004d0:	4b0a      	ldr	r3, [pc, #40]	; (4004fc <I2C_0_PORT_init+0x2c>)
  4004d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004d4:	f022 0210 	bic.w	r2, r2, #16
  4004d8:	671a      	str	r2, [r3, #112]	; 0x70
  4004da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004dc:	f022 0210 	bic.w	r2, r2, #16
  4004e0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004e2:	2210      	movs	r2, #16
  4004e4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004e8:	f022 0208 	bic.w	r2, r2, #8
  4004ec:	671a      	str	r2, [r3, #112]	; 0x70
  4004ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004f0:	f022 0208 	bic.w	r2, r2, #8
  4004f4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004f6:	2208      	movs	r2, #8
  4004f8:	605a      	str	r2, [r3, #4]
  4004fa:	4770      	bx	lr
  4004fc:	400e0e00 	.word	0x400e0e00

00400500 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400500:	4b04      	ldr	r3, [pc, #16]	; (400514 <I2C_0_CLOCK_init+0x14>)
  400502:	699b      	ldr	r3, [r3, #24]
  400504:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400508:	d103      	bne.n	400512 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40050a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40050e:	4b01      	ldr	r3, [pc, #4]	; (400514 <I2C_0_CLOCK_init+0x14>)
  400510:	611a      	str	r2, [r3, #16]
  400512:	4770      	bx	lr
  400514:	400e0600 	.word	0x400e0600

00400518 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400518:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40051a:	4b04      	ldr	r3, [pc, #16]	; (40052c <I2C_0_init+0x14>)
  40051c:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  40051e:	4904      	ldr	r1, [pc, #16]	; (400530 <I2C_0_init+0x18>)
  400520:	4804      	ldr	r0, [pc, #16]	; (400534 <I2C_0_init+0x1c>)
  400522:	4b05      	ldr	r3, [pc, #20]	; (400538 <I2C_0_init+0x20>)
  400524:	4798      	blx	r3

	I2C_0_PORT_init();
  400526:	4b05      	ldr	r3, [pc, #20]	; (40053c <I2C_0_init+0x24>)
  400528:	4798      	blx	r3
  40052a:	bd08      	pop	{r3, pc}
  40052c:	00400501 	.word	0x00400501
  400530:	40018000 	.word	0x40018000
  400534:	2040014c 	.word	0x2040014c
  400538:	004008e1 	.word	0x004008e1
  40053c:	004004d1 	.word	0x004004d1

00400540 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400540:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400542:	4802      	ldr	r0, [pc, #8]	; (40054c <delay_driver_init+0xc>)
  400544:	4b02      	ldr	r3, [pc, #8]	; (400550 <delay_driver_init+0x10>)
  400546:	4798      	blx	r3
  400548:	bd08      	pop	{r3, pc}
  40054a:	bf00      	nop
  40054c:	e000e010 	.word	0xe000e010
  400550:	004007b5 	.word	0x004007b5

00400554 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <TARGET_IO_CLOCK_init+0x14>)
  400556:	699b      	ldr	r3, [r3, #24]
  400558:	f013 0f80 	tst.w	r3, #128	; 0x80
  40055c:	d102      	bne.n	400564 <TARGET_IO_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40055e:	2280      	movs	r2, #128	; 0x80
  400560:	4b01      	ldr	r3, [pc, #4]	; (400568 <TARGET_IO_CLOCK_init+0x14>)
  400562:	611a      	str	r2, [r3, #16]
  400564:	4770      	bx	lr
  400566:	bf00      	nop
  400568:	400e0600 	.word	0x400e0600

0040056c <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART0);
}

void TARGET_IO_init(void)
{
  40056c:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  40056e:	4b05      	ldr	r3, [pc, #20]	; (400584 <TARGET_IO_init+0x18>)
  400570:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART0, _uart_get_usart_sync());
  400572:	4b05      	ldr	r3, [pc, #20]	; (400588 <TARGET_IO_init+0x1c>)
  400574:	4798      	blx	r3
  400576:	4602      	mov	r2, r0
  400578:	4904      	ldr	r1, [pc, #16]	; (40058c <TARGET_IO_init+0x20>)
  40057a:	4805      	ldr	r0, [pc, #20]	; (400590 <TARGET_IO_init+0x24>)
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <TARGET_IO_init+0x28>)
  40057e:	4798      	blx	r3
  400580:	bd08      	pop	{r3, pc}
  400582:	bf00      	nop
  400584:	00400555 	.word	0x00400555
  400588:	004019e9 	.word	0x004019e9
  40058c:	400e0800 	.word	0x400e0800
  400590:	20400104 	.word	0x20400104
  400594:	00400c0d 	.word	0x00400c0d

00400598 <WDT_0_init>:
	TARGET_IO_PORT_init();
}

void WDT_0_init(void)
{
  400598:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  40059a:	2248      	movs	r2, #72	; 0x48
  40059c:	4904      	ldr	r1, [pc, #16]	; (4005b0 <WDT_0_init+0x18>)
  40059e:	2001      	movs	r0, #1
  4005a0:	4b04      	ldr	r3, [pc, #16]	; (4005b4 <WDT_0_init+0x1c>)
  4005a2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  4005a4:	4804      	ldr	r0, [pc, #16]	; (4005b8 <WDT_0_init+0x20>)
  4005a6:	4b05      	ldr	r3, [pc, #20]	; (4005bc <WDT_0_init+0x24>)
  4005a8:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  4005aa:	4b05      	ldr	r3, [pc, #20]	; (4005c0 <WDT_0_init+0x28>)
  4005ac:	4798      	blx	r3
  4005ae:	bd08      	pop	{r3, pc}
  4005b0:	004023d0 	.word	0x004023d0
  4005b4:	00400c81 	.word	0x00400c81
  4005b8:	20400114 	.word	0x20400114
  4005bc:	400e1850 	.word	0x400e1850
  4005c0:	004019ed 	.word	0x004019ed

004005c4 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  4005c4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4005c6:	4b5a      	ldr	r3, [pc, #360]	; (400730 <system_init+0x16c>)
  4005c8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005ca:	4b5a      	ldr	r3, [pc, #360]	; (400734 <system_init+0x170>)
  4005cc:	699b      	ldr	r3, [r3, #24]
  4005ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4005d2:	d103      	bne.n	4005dc <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005d8:	4b56      	ldr	r3, [pc, #344]	; (400734 <system_init+0x170>)
  4005da:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005dc:	4b55      	ldr	r3, [pc, #340]	; (400734 <system_init+0x170>)
  4005de:	699b      	ldr	r3, [r3, #24]
  4005e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4005e4:	d103      	bne.n	4005ee <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005ea:	4b52      	ldr	r3, [pc, #328]	; (400734 <system_init+0x170>)
  4005ec:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005ee:	4b51      	ldr	r3, [pc, #324]	; (400734 <system_init+0x170>)
  4005f0:	699b      	ldr	r3, [r3, #24]
  4005f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4005f6:	d103      	bne.n	400600 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4005fc:	4b4d      	ldr	r3, [pc, #308]	; (400734 <system_init+0x170>)
  4005fe:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  400600:	4b4d      	ldr	r3, [pc, #308]	; (400738 <system_init+0x174>)
  400602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400606:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400608:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40060a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40060e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400614:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400616:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40061c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40061e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400622:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400624:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40062a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40062c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400630:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400632:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400638:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40063a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40063e:	2208      	movs	r2, #8
  400640:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400642:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400644:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40064a:	2104      	movs	r1, #4
  40064c:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40064e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400650:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400652:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400654:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400656:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400658:	2210      	movs	r2, #16
  40065a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40065c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40065e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400660:	2220      	movs	r2, #32
  400662:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400664:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400666:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400668:	2240      	movs	r2, #64	; 0x40
  40066a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40066c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40066e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400670:	2280      	movs	r2, #128	; 0x80
  400672:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400674:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400676:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400678:	f44f 7280 	mov.w	r2, #256	; 0x100
  40067c:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40067e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400680:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400682:	f44f 7200 	mov.w	r2, #512	; 0x200
  400686:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400688:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40068a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40068c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400690:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400692:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400694:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400696:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40069a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40069c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40069e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006a2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4006a8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006aa:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006b0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4006b6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006b8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006be:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4006c4:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006c6:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006c8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4006ce:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006d0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006d6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4006dc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006de:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4006ea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006ec:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006f2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006f8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006fa:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400700:	601a      	str	r2, [r3, #0]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DipSwitch7, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400702:	4b0e      	ldr	r3, [pc, #56]	; (40073c <system_init+0x178>)
  400704:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  400706:	4b0e      	ldr	r3, [pc, #56]	; (400740 <system_init+0x17c>)
  400708:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  40070a:	4b0e      	ldr	r3, [pc, #56]	; (400744 <system_init+0x180>)
  40070c:	4798      	blx	r3

	PWM_0_init();
  40070e:	4b0e      	ldr	r3, [pc, #56]	; (400748 <system_init+0x184>)
  400710:	4798      	blx	r3

	PWM_1_init();
  400712:	4b0e      	ldr	r3, [pc, #56]	; (40074c <system_init+0x188>)
  400714:	4798      	blx	r3

	SPI_0_init();
  400716:	4b0e      	ldr	r3, [pc, #56]	; (400750 <system_init+0x18c>)
  400718:	4798      	blx	r3

	I2C_0_init();
  40071a:	4b0e      	ldr	r3, [pc, #56]	; (400754 <system_init+0x190>)
  40071c:	4798      	blx	r3

	delay_driver_init();
  40071e:	4b0e      	ldr	r3, [pc, #56]	; (400758 <system_init+0x194>)
  400720:	4798      	blx	r3

	TARGET_IO_init();
  400722:	4b0e      	ldr	r3, [pc, #56]	; (40075c <system_init+0x198>)
  400724:	4798      	blx	r3

	WDT_0_init();
  400726:	4b0e      	ldr	r3, [pc, #56]	; (400760 <system_init+0x19c>)
  400728:	4798      	blx	r3

	ext_irq_init();
  40072a:	4b0e      	ldr	r3, [pc, #56]	; (400764 <system_init+0x1a0>)
  40072c:	4798      	blx	r3
  40072e:	bd08      	pop	{r3, pc}
  400730:	00400df1 	.word	0x00400df1
  400734:	400e0600 	.word	0x400e0600
  400738:	400e0e00 	.word	0x400e0e00
  40073c:	0040027d 	.word	0x0040027d
  400740:	004002a9 	.word	0x004002a9
  400744:	004002bd 	.word	0x004002bd
  400748:	00400389 	.word	0x00400389
  40074c:	004003f9 	.word	0x004003f9
  400750:	00400491 	.word	0x00400491
  400754:	00400519 	.word	0x00400519
  400758:	00400541 	.word	0x00400541
  40075c:	0040056d 	.word	0x0040056d
  400760:	00400599 	.word	0x00400599
  400764:	0040084d 	.word	0x0040084d

00400768 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400768:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40076a:	4604      	mov	r4, r0
  40076c:	460d      	mov	r5, r1
  40076e:	2800      	cmp	r0, #0
  400770:	bf18      	it	ne
  400772:	2900      	cmpne	r1, #0
  400774:	bf14      	ite	ne
  400776:	2001      	movne	r0, #1
  400778:	2000      	moveq	r0, #0
  40077a:	2239      	movs	r2, #57	; 0x39
  40077c:	4903      	ldr	r1, [pc, #12]	; (40078c <adc_sync_init+0x24>)
  40077e:	4b04      	ldr	r3, [pc, #16]	; (400790 <adc_sync_init+0x28>)
  400780:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400782:	4629      	mov	r1, r5
  400784:	4620      	mov	r0, r4
  400786:	4b03      	ldr	r3, [pc, #12]	; (400794 <adc_sync_init+0x2c>)
  400788:	4798      	blx	r3
}
  40078a:	bd38      	pop	{r3, r4, r5, pc}
  40078c:	004023ec 	.word	0x004023ec
  400790:	00400c81 	.word	0x00400c81
  400794:	00400d9d 	.word	0x00400d9d

00400798 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400798:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40079c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40079e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4007a0:	f3bf 8f5f 	dmb	sy
  4007a4:	4770      	bx	lr

004007a6 <atomic_leave_critical>:
  4007a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4007aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4007ac:	f383 8810 	msr	PRIMASK, r3
  4007b0:	4770      	bx	lr
	...

004007b4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4007b4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4007b6:	4b02      	ldr	r3, [pc, #8]	; (4007c0 <delay_init+0xc>)
  4007b8:	6018      	str	r0, [r3, #0]
  4007ba:	4b02      	ldr	r3, [pc, #8]	; (4007c4 <delay_init+0x10>)
  4007bc:	4798      	blx	r3
  4007be:	bd08      	pop	{r3, pc}
  4007c0:	20400080 	.word	0x20400080
  4007c4:	00401581 	.word	0x00401581

004007c8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4007c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4007ca:	4b04      	ldr	r3, [pc, #16]	; (4007dc <delay_us+0x14>)
  4007cc:	681c      	ldr	r4, [r3, #0]
  4007ce:	4b04      	ldr	r3, [pc, #16]	; (4007e0 <delay_us+0x18>)
  4007d0:	4798      	blx	r3
  4007d2:	4601      	mov	r1, r0
  4007d4:	4620      	mov	r0, r4
  4007d6:	4b03      	ldr	r3, [pc, #12]	; (4007e4 <delay_us+0x1c>)
  4007d8:	4798      	blx	r3
  4007da:	bd10      	pop	{r4, pc}
  4007dc:	20400080 	.word	0x20400080
  4007e0:	00400dd5 	.word	0x00400dd5
  4007e4:	0040158d 	.word	0x0040158d

004007e8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4007e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4007ea:	4b04      	ldr	r3, [pc, #16]	; (4007fc <delay_ms+0x14>)
  4007ec:	681c      	ldr	r4, [r3, #0]
  4007ee:	4b04      	ldr	r3, [pc, #16]	; (400800 <delay_ms+0x18>)
  4007f0:	4798      	blx	r3
  4007f2:	4601      	mov	r1, r0
  4007f4:	4620      	mov	r0, r4
  4007f6:	4b03      	ldr	r3, [pc, #12]	; (400804 <delay_ms+0x1c>)
  4007f8:	4798      	blx	r3
  4007fa:	bd10      	pop	{r4, pc}
  4007fc:	20400080 	.word	0x20400080
  400800:	00400ddf 	.word	0x00400ddf
  400804:	0040158d 	.word	0x0040158d

00400808 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400808:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40080a:	2506      	movs	r5, #6
  40080c:	2400      	movs	r4, #0

	while (upper >= lower) {
  40080e:	e007      	b.n	400820 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400810:	4a0d      	ldr	r2, [pc, #52]	; (400848 <process_ext_irq+0x40>)
  400812:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400816:	b1b3      	cbz	r3, 400846 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400818:	4798      	blx	r3
  40081a:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  40081c:	3a01      	subs	r2, #1
  40081e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400820:	42ac      	cmp	r4, r5
  400822:	d810      	bhi.n	400846 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400824:	192b      	adds	r3, r5, r4
  400826:	105b      	asrs	r3, r3, #1
  400828:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40082a:	2a05      	cmp	r2, #5
  40082c:	d80b      	bhi.n	400846 <process_ext_irq+0x3e>
  40082e:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400830:	4905      	ldr	r1, [pc, #20]	; (400848 <process_ext_irq+0x40>)
  400832:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400836:	6849      	ldr	r1, [r1, #4]
  400838:	4281      	cmp	r1, r0
  40083a:	d0e9      	beq.n	400810 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  40083c:	4281      	cmp	r1, r0
  40083e:	d2ed      	bcs.n	40081c <process_ext_irq+0x14>
			lower = middle + 1;
  400840:	3201      	adds	r2, #1
  400842:	b2d4      	uxtb	r4, r2
  400844:	e7ec      	b.n	400820 <process_ext_irq+0x18>
  400846:	bd38      	pop	{r3, r4, r5, pc}
  400848:	20400084 	.word	0x20400084

0040084c <ext_irq_init>:
{
  40084c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40084e:	2300      	movs	r3, #0
  400850:	e00a      	b.n	400868 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400852:	4a08      	ldr	r2, [pc, #32]	; (400874 <ext_irq_init+0x28>)
  400854:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400858:	f04f 30ff 	mov.w	r0, #4294967295
  40085c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40085e:	2100      	movs	r1, #0
  400860:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400864:	3301      	adds	r3, #1
  400866:	b29b      	uxth	r3, r3
  400868:	2b05      	cmp	r3, #5
  40086a:	d9f2      	bls.n	400852 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  40086c:	4802      	ldr	r0, [pc, #8]	; (400878 <ext_irq_init+0x2c>)
  40086e:	4b03      	ldr	r3, [pc, #12]	; (40087c <ext_irq_init+0x30>)
  400870:	4798      	blx	r3
}
  400872:	bd08      	pop	{r3, pc}
  400874:	20400084 	.word	0x20400084
  400878:	00400809 	.word	0x00400809
  40087c:	00401079 	.word	0x00401079

00400880 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400880:	b510      	push	{r4, lr}
  400882:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400884:	8903      	ldrh	r3, [r0, #8]
  400886:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  40088a:	4614      	mov	r4, r2
  40088c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  40088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400892:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400896:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400898:	a901      	add	r1, sp, #4
  40089a:	3814      	subs	r0, #20
  40089c:	4b03      	ldr	r3, [pc, #12]	; (4008ac <i2c_m_sync_write+0x2c>)
  40089e:	4798      	blx	r3

	if (ret) {
  4008a0:	b910      	cbnz	r0, 4008a8 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  4008a2:	4620      	mov	r0, r4
  4008a4:	b004      	add	sp, #16
  4008a6:	bd10      	pop	{r4, pc}
		return ret;
  4008a8:	4604      	mov	r4, r0
  4008aa:	e7fa      	b.n	4008a2 <i2c_m_sync_write+0x22>
  4008ac:	0040164d 	.word	0x0040164d

004008b0 <i2c_m_sync_read>:
{
  4008b0:	b510      	push	{r4, lr}
  4008b2:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  4008b4:	8903      	ldrh	r3, [r0, #8]
  4008b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  4008ba:	4614      	mov	r4, r2
  4008bc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  4008be:	f248 0301 	movw	r3, #32769	; 0x8001
  4008c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  4008c6:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4008c8:	a901      	add	r1, sp, #4
  4008ca:	3814      	subs	r0, #20
  4008cc:	4b03      	ldr	r3, [pc, #12]	; (4008dc <i2c_m_sync_read+0x2c>)
  4008ce:	4798      	blx	r3
	if (ret) {
  4008d0:	b910      	cbnz	r0, 4008d8 <i2c_m_sync_read+0x28>
}
  4008d2:	4620      	mov	r0, r4
  4008d4:	b004      	add	sp, #16
  4008d6:	bd10      	pop	{r4, pc}
		return ret;
  4008d8:	4604      	mov	r4, r0
  4008da:	e7fa      	b.n	4008d2 <i2c_m_sync_read+0x22>
  4008dc:	0040164d 	.word	0x0040164d

004008e0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4008e0:	b538      	push	{r3, r4, r5, lr}
  4008e2:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  4008e4:	4604      	mov	r4, r0
  4008e6:	225e      	movs	r2, #94	; 0x5e
  4008e8:	4908      	ldr	r1, [pc, #32]	; (40090c <i2c_m_sync_init+0x2c>)
  4008ea:	3000      	adds	r0, #0
  4008ec:	bf18      	it	ne
  4008ee:	2001      	movne	r0, #1
  4008f0:	4b07      	ldr	r3, [pc, #28]	; (400910 <i2c_m_sync_init+0x30>)
  4008f2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  4008f4:	4629      	mov	r1, r5
  4008f6:	4620      	mov	r0, r4
  4008f8:	4b06      	ldr	r3, [pc, #24]	; (400914 <i2c_m_sync_init+0x34>)
  4008fa:	4798      	blx	r3
	if (init_status) {
  4008fc:	4603      	mov	r3, r0
  4008fe:	b918      	cbnz	r0, 400908 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400900:	4a05      	ldr	r2, [pc, #20]	; (400918 <i2c_m_sync_init+0x38>)
  400902:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400904:	4a05      	ldr	r2, [pc, #20]	; (40091c <i2c_m_sync_init+0x3c>)
  400906:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400908:	4618      	mov	r0, r3
  40090a:	bd38      	pop	{r3, r4, r5, pc}
  40090c:	00402408 	.word	0x00402408
  400910:	00400c81 	.word	0x00400c81
  400914:	00401605 	.word	0x00401605
  400918:	004008b1 	.word	0x004008b1
  40091c:	00400881 	.word	0x00400881

00400920 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400920:	b570      	push	{r4, r5, r6, lr}
  400922:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400924:	4604      	mov	r4, r0
  400926:	460d      	mov	r5, r1
  400928:	2800      	cmp	r0, #0
  40092a:	bf18      	it	ne
  40092c:	2900      	cmpne	r1, #0
  40092e:	bf14      	ite	ne
  400930:	2001      	movne	r0, #1
  400932:	2000      	moveq	r0, #0
  400934:	2234      	movs	r2, #52	; 0x34
  400936:	4904      	ldr	r1, [pc, #16]	; (400948 <io_write+0x28>)
  400938:	4b04      	ldr	r3, [pc, #16]	; (40094c <io_write+0x2c>)
  40093a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40093c:	6823      	ldr	r3, [r4, #0]
  40093e:	4632      	mov	r2, r6
  400940:	4629      	mov	r1, r5
  400942:	4620      	mov	r0, r4
  400944:	4798      	blx	r3
}
  400946:	bd70      	pop	{r4, r5, r6, pc}
  400948:	00402424 	.word	0x00402424
  40094c:	00400c81 	.word	0x00400c81

00400950 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400950:	b570      	push	{r4, r5, r6, lr}
  400952:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400954:	4604      	mov	r4, r0
  400956:	460d      	mov	r5, r1
  400958:	2800      	cmp	r0, #0
  40095a:	bf18      	it	ne
  40095c:	2900      	cmpne	r1, #0
  40095e:	bf14      	ite	ne
  400960:	2001      	movne	r0, #1
  400962:	2000      	moveq	r0, #0
  400964:	223d      	movs	r2, #61	; 0x3d
  400966:	4904      	ldr	r1, [pc, #16]	; (400978 <io_read+0x28>)
  400968:	4b04      	ldr	r3, [pc, #16]	; (40097c <io_read+0x2c>)
  40096a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40096c:	6863      	ldr	r3, [r4, #4]
  40096e:	4632      	mov	r2, r6
  400970:	4629      	mov	r1, r5
  400972:	4620      	mov	r0, r4
  400974:	4798      	blx	r3
}
  400976:	bd70      	pop	{r4, r5, r6, pc}
  400978:	00402424 	.word	0x00402424
  40097c:	00400c81 	.word	0x00400c81

00400980 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400980:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400982:	6943      	ldr	r3, [r0, #20]
  400984:	b103      	cbz	r3, 400988 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400986:	4798      	blx	r3
  400988:	bd08      	pop	{r3, pc}

0040098a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40098a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  40098c:	6983      	ldr	r3, [r0, #24]
  40098e:	b103      	cbz	r3, 400992 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400990:	4798      	blx	r3
  400992:	bd08      	pop	{r3, pc}

00400994 <pwm_init>:
{
  400994:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400996:	4604      	mov	r4, r0
  400998:	460d      	mov	r5, r1
  40099a:	2800      	cmp	r0, #0
  40099c:	bf18      	it	ne
  40099e:	2900      	cmpne	r1, #0
  4009a0:	bf14      	ite	ne
  4009a2:	2001      	movne	r0, #1
  4009a4:	2000      	moveq	r0, #0
  4009a6:	2233      	movs	r2, #51	; 0x33
  4009a8:	4906      	ldr	r1, [pc, #24]	; (4009c4 <pwm_init+0x30>)
  4009aa:	4b07      	ldr	r3, [pc, #28]	; (4009c8 <pwm_init+0x34>)
  4009ac:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4009ae:	4629      	mov	r1, r5
  4009b0:	4620      	mov	r0, r4
  4009b2:	4b06      	ldr	r3, [pc, #24]	; (4009cc <pwm_init+0x38>)
  4009b4:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4009b6:	4b06      	ldr	r3, [pc, #24]	; (4009d0 <pwm_init+0x3c>)
  4009b8:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4009ba:	4b06      	ldr	r3, [pc, #24]	; (4009d4 <pwm_init+0x40>)
  4009bc:	6063      	str	r3, [r4, #4]
}
  4009be:	2000      	movs	r0, #0
  4009c0:	bd38      	pop	{r3, r4, r5, pc}
  4009c2:	bf00      	nop
  4009c4:	00402438 	.word	0x00402438
  4009c8:	00400c81 	.word	0x00400c81
  4009cc:	004011f9 	.word	0x004011f9
  4009d0:	00400981 	.word	0x00400981
  4009d4:	0040098b 	.word	0x0040098b

004009d8 <pwm_enable>:
{
  4009d8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4009da:	4604      	mov	r4, r0
  4009dc:	224a      	movs	r2, #74	; 0x4a
  4009de:	4909      	ldr	r1, [pc, #36]	; (400a04 <pwm_enable+0x2c>)
  4009e0:	3000      	adds	r0, #0
  4009e2:	bf18      	it	ne
  4009e4:	2001      	movne	r0, #1
  4009e6:	4b08      	ldr	r3, [pc, #32]	; (400a08 <pwm_enable+0x30>)
  4009e8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4009ea:	4620      	mov	r0, r4
  4009ec:	4b07      	ldr	r3, [pc, #28]	; (400a0c <pwm_enable+0x34>)
  4009ee:	4798      	blx	r3
  4009f0:	b920      	cbnz	r0, 4009fc <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4009f2:	4620      	mov	r0, r4
  4009f4:	4b06      	ldr	r3, [pc, #24]	; (400a10 <pwm_enable+0x38>)
  4009f6:	4798      	blx	r3
	return ERR_NONE;
  4009f8:	2000      	movs	r0, #0
  4009fa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4009fc:	f06f 0010 	mvn.w	r0, #16
}
  400a00:	bd10      	pop	{r4, pc}
  400a02:	bf00      	nop
  400a04:	00402438 	.word	0x00402438
  400a08:	00400c81 	.word	0x00400c81
  400a0c:	00401375 	.word	0x00401375
  400a10:	00401331 	.word	0x00401331

00400a14 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400a14:	b538      	push	{r3, r4, r5, lr}
  400a16:	460d      	mov	r5, r1
	ASSERT(spi);
  400a18:	4604      	mov	r4, r0
  400a1a:	2239      	movs	r2, #57	; 0x39
  400a1c:	4903      	ldr	r1, [pc, #12]	; (400a2c <spi_m_sync_set_func_ptr+0x18>)
  400a1e:	3000      	adds	r0, #0
  400a20:	bf18      	it	ne
  400a22:	2001      	movne	r0, #1
  400a24:	4b02      	ldr	r3, [pc, #8]	; (400a30 <spi_m_sync_set_func_ptr+0x1c>)
  400a26:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400a28:	6025      	str	r5, [r4, #0]
  400a2a:	bd38      	pop	{r3, r4, r5, pc}
  400a2c:	00402450 	.word	0x00402450
  400a30:	00400c81 	.word	0x00400c81

00400a34 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400a34:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400a36:	4604      	mov	r4, r0
  400a38:	460d      	mov	r5, r1
  400a3a:	2800      	cmp	r0, #0
  400a3c:	bf18      	it	ne
  400a3e:	2900      	cmpne	r1, #0
  400a40:	bf14      	ite	ne
  400a42:	2001      	movne	r0, #1
  400a44:	2000      	moveq	r0, #0
  400a46:	2240      	movs	r2, #64	; 0x40
  400a48:	4909      	ldr	r1, [pc, #36]	; (400a70 <spi_m_sync_init+0x3c>)
  400a4a:	4b0a      	ldr	r3, [pc, #40]	; (400a74 <spi_m_sync_init+0x40>)
  400a4c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400a4e:	4620      	mov	r0, r4
  400a50:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400a54:	4629      	mov	r1, r5
  400a56:	4b08      	ldr	r3, [pc, #32]	; (400a78 <spi_m_sync_init+0x44>)
  400a58:	4798      	blx	r3

	if (rc < 0) {
  400a5a:	2800      	cmp	r0, #0
  400a5c:	db07      	blt.n	400a6e <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a62:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400a64:	4b05      	ldr	r3, [pc, #20]	; (400a7c <spi_m_sync_init+0x48>)
  400a66:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400a68:	4b05      	ldr	r3, [pc, #20]	; (400a80 <spi_m_sync_init+0x4c>)
  400a6a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400a6c:	2000      	movs	r0, #0
}
  400a6e:	bd38      	pop	{r3, r4, r5, pc}
  400a70:	00402450 	.word	0x00402450
  400a74:	00400c81 	.word	0x00400c81
  400a78:	004013c1 	.word	0x004013c1
  400a7c:	00400b01 	.word	0x00400b01
  400a80:	00400ac5 	.word	0x00400ac5

00400a84 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400a84:	b530      	push	{r4, r5, lr}
  400a86:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400a88:	4605      	mov	r5, r0
  400a8a:	460c      	mov	r4, r1
  400a8c:	2800      	cmp	r0, #0
  400a8e:	bf18      	it	ne
  400a90:	2900      	cmpne	r1, #0
  400a92:	bf14      	ite	ne
  400a94:	2001      	movne	r0, #1
  400a96:	2000      	moveq	r0, #0
  400a98:	22b3      	movs	r2, #179	; 0xb3
  400a9a:	4907      	ldr	r1, [pc, #28]	; (400ab8 <spi_m_sync_transfer+0x34>)
  400a9c:	4b07      	ldr	r3, [pc, #28]	; (400abc <spi_m_sync_transfer+0x38>)
  400a9e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400aa0:	6823      	ldr	r3, [r4, #0]
  400aa2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400aa4:	6863      	ldr	r3, [r4, #4]
  400aa6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400aa8:	68a3      	ldr	r3, [r4, #8]
  400aaa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400aac:	a901      	add	r1, sp, #4
  400aae:	1d28      	adds	r0, r5, #4
  400ab0:	4b03      	ldr	r3, [pc, #12]	; (400ac0 <spi_m_sync_transfer+0x3c>)
  400ab2:	4798      	blx	r3
}
  400ab4:	b005      	add	sp, #20
  400ab6:	bd30      	pop	{r4, r5, pc}
  400ab8:	00402450 	.word	0x00402450
  400abc:	00400c81 	.word	0x00400c81
  400ac0:	00401469 	.word	0x00401469

00400ac4 <_spi_m_sync_io_write>:
{
  400ac4:	b570      	push	{r4, r5, r6, lr}
  400ac6:	b084      	sub	sp, #16
  400ac8:	460e      	mov	r6, r1
  400aca:	4615      	mov	r5, r2
	ASSERT(io);
  400acc:	4604      	mov	r4, r0
  400ace:	22a3      	movs	r2, #163	; 0xa3
  400ad0:	4908      	ldr	r1, [pc, #32]	; (400af4 <_spi_m_sync_io_write+0x30>)
  400ad2:	3000      	adds	r0, #0
  400ad4:	bf18      	it	ne
  400ad6:	2001      	movne	r0, #1
  400ad8:	4b07      	ldr	r3, [pc, #28]	; (400af8 <_spi_m_sync_io_write+0x34>)
  400ada:	4798      	blx	r3
	xfer.rxbuf = 0;
  400adc:	2300      	movs	r3, #0
  400ade:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400ae0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400ae2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400ae4:	a901      	add	r1, sp, #4
  400ae6:	f1a4 000c 	sub.w	r0, r4, #12
  400aea:	4b04      	ldr	r3, [pc, #16]	; (400afc <_spi_m_sync_io_write+0x38>)
  400aec:	4798      	blx	r3
}
  400aee:	b004      	add	sp, #16
  400af0:	bd70      	pop	{r4, r5, r6, pc}
  400af2:	bf00      	nop
  400af4:	00402450 	.word	0x00402450
  400af8:	00400c81 	.word	0x00400c81
  400afc:	00400a85 	.word	0x00400a85

00400b00 <_spi_m_sync_io_read>:
{
  400b00:	b570      	push	{r4, r5, r6, lr}
  400b02:	b084      	sub	sp, #16
  400b04:	460e      	mov	r6, r1
  400b06:	4615      	mov	r5, r2
	ASSERT(io);
  400b08:	4604      	mov	r4, r0
  400b0a:	2287      	movs	r2, #135	; 0x87
  400b0c:	4908      	ldr	r1, [pc, #32]	; (400b30 <_spi_m_sync_io_read+0x30>)
  400b0e:	3000      	adds	r0, #0
  400b10:	bf18      	it	ne
  400b12:	2001      	movne	r0, #1
  400b14:	4b07      	ldr	r3, [pc, #28]	; (400b34 <_spi_m_sync_io_read+0x34>)
  400b16:	4798      	blx	r3
	xfer.rxbuf = buf;
  400b18:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400b1a:	2300      	movs	r3, #0
  400b1c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400b1e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400b20:	a901      	add	r1, sp, #4
  400b22:	f1a4 000c 	sub.w	r0, r4, #12
  400b26:	4b04      	ldr	r3, [pc, #16]	; (400b38 <_spi_m_sync_io_read+0x38>)
  400b28:	4798      	blx	r3
}
  400b2a:	b004      	add	sp, #16
  400b2c:	bd70      	pop	{r4, r5, r6, pc}
  400b2e:	bf00      	nop
  400b30:	00402450 	.word	0x00402450
  400b34:	00400c81 	.word	0x00400c81
  400b38:	00400a85 	.word	0x00400a85

00400b3c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b3e:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400b40:	4605      	mov	r5, r0
  400b42:	460f      	mov	r7, r1
  400b44:	2800      	cmp	r0, #0
  400b46:	bf18      	it	ne
  400b48:	2900      	cmpne	r1, #0
  400b4a:	d002      	beq.n	400b52 <usart_sync_write+0x16>
  400b4c:	bb0a      	cbnz	r2, 400b92 <usart_sync_write+0x56>
  400b4e:	2000      	movs	r0, #0
  400b50:	e000      	b.n	400b54 <usart_sync_write+0x18>
  400b52:	2000      	movs	r0, #0
  400b54:	22f1      	movs	r2, #241	; 0xf1
  400b56:	4910      	ldr	r1, [pc, #64]	; (400b98 <usart_sync_write+0x5c>)
  400b58:	4b10      	ldr	r3, [pc, #64]	; (400b9c <usart_sync_write+0x60>)
  400b5a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400b5c:	f105 0408 	add.w	r4, r5, #8
  400b60:	4620      	mov	r0, r4
  400b62:	4b0f      	ldr	r3, [pc, #60]	; (400ba0 <usart_sync_write+0x64>)
  400b64:	4798      	blx	r3
  400b66:	2800      	cmp	r0, #0
  400b68:	d0f8      	beq.n	400b5c <usart_sync_write+0x20>
  400b6a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400b6c:	5d79      	ldrb	r1, [r7, r5]
  400b6e:	4620      	mov	r0, r4
  400b70:	4b0c      	ldr	r3, [pc, #48]	; (400ba4 <usart_sync_write+0x68>)
  400b72:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400b74:	4620      	mov	r0, r4
  400b76:	4b0a      	ldr	r3, [pc, #40]	; (400ba0 <usart_sync_write+0x64>)
  400b78:	4798      	blx	r3
  400b7a:	2800      	cmp	r0, #0
  400b7c:	d0fa      	beq.n	400b74 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400b7e:	3501      	adds	r5, #1
  400b80:	42b5      	cmp	r5, r6
  400b82:	d3f3      	bcc.n	400b6c <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400b84:	4620      	mov	r0, r4
  400b86:	4b08      	ldr	r3, [pc, #32]	; (400ba8 <usart_sync_write+0x6c>)
  400b88:	4798      	blx	r3
  400b8a:	2800      	cmp	r0, #0
  400b8c:	d0fa      	beq.n	400b84 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400b8e:	4628      	mov	r0, r5
  400b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400b92:	2001      	movs	r0, #1
  400b94:	e7de      	b.n	400b54 <usart_sync_write+0x18>
  400b96:	bf00      	nop
  400b98:	0040246c 	.word	0x0040246c
  400b9c:	00400c81 	.word	0x00400c81
  400ba0:	00401971 	.word	0x00401971
  400ba4:	00401929 	.word	0x00401929
  400ba8:	00401999 	.word	0x00401999

00400bac <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bb0:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400bb2:	4605      	mov	r5, r0
  400bb4:	4688      	mov	r8, r1
  400bb6:	2800      	cmp	r0, #0
  400bb8:	bf18      	it	ne
  400bba:	2900      	cmpne	r1, #0
  400bbc:	d002      	beq.n	400bc4 <usart_sync_read+0x18>
  400bbe:	b9d2      	cbnz	r2, 400bf6 <usart_sync_read+0x4a>
  400bc0:	2000      	movs	r0, #0
  400bc2:	e000      	b.n	400bc6 <usart_sync_read+0x1a>
  400bc4:	2000      	movs	r0, #0
  400bc6:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400bca:	490c      	ldr	r1, [pc, #48]	; (400bfc <usart_sync_read+0x50>)
  400bcc:	4b0c      	ldr	r3, [pc, #48]	; (400c00 <usart_sync_read+0x54>)
  400bce:	4798      	blx	r3
	uint32_t                      offset = 0;
  400bd0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400bd2:	f105 0408 	add.w	r4, r5, #8
  400bd6:	4620      	mov	r0, r4
  400bd8:	4b0a      	ldr	r3, [pc, #40]	; (400c04 <usart_sync_read+0x58>)
  400bda:	4798      	blx	r3
  400bdc:	2800      	cmp	r0, #0
  400bde:	d0f8      	beq.n	400bd2 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400be0:	4620      	mov	r0, r4
  400be2:	4b09      	ldr	r3, [pc, #36]	; (400c08 <usart_sync_read+0x5c>)
  400be4:	4798      	blx	r3
  400be6:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400bea:	3601      	adds	r6, #1
  400bec:	42be      	cmp	r6, r7
  400bee:	d3f0      	bcc.n	400bd2 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400bf0:	4630      	mov	r0, r6
  400bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400bf6:	2001      	movs	r0, #1
  400bf8:	e7e5      	b.n	400bc6 <usart_sync_read+0x1a>
  400bfa:	bf00      	nop
  400bfc:	0040246c 	.word	0x0040246c
  400c00:	00400c81 	.word	0x00400c81
  400c04:	004019c1 	.word	0x004019c1
  400c08:	0040194d 	.word	0x0040194d

00400c0c <usart_sync_init>:
{
  400c0c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c0e:	4604      	mov	r4, r0
  400c10:	460d      	mov	r5, r1
  400c12:	2800      	cmp	r0, #0
  400c14:	bf18      	it	ne
  400c16:	2900      	cmpne	r1, #0
  400c18:	bf14      	ite	ne
  400c1a:	2001      	movne	r0, #1
  400c1c:	2000      	moveq	r0, #0
  400c1e:	2234      	movs	r2, #52	; 0x34
  400c20:	4907      	ldr	r1, [pc, #28]	; (400c40 <usart_sync_init+0x34>)
  400c22:	4b08      	ldr	r3, [pc, #32]	; (400c44 <usart_sync_init+0x38>)
  400c24:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400c26:	4629      	mov	r1, r5
  400c28:	f104 0008 	add.w	r0, r4, #8
  400c2c:	4b06      	ldr	r3, [pc, #24]	; (400c48 <usart_sync_init+0x3c>)
  400c2e:	4798      	blx	r3
	if (init_status) {
  400c30:	4603      	mov	r3, r0
  400c32:	b918      	cbnz	r0, 400c3c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400c34:	4a05      	ldr	r2, [pc, #20]	; (400c4c <usart_sync_init+0x40>)
  400c36:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400c38:	4a05      	ldr	r2, [pc, #20]	; (400c50 <usart_sync_init+0x44>)
  400c3a:	6022      	str	r2, [r4, #0]
}
  400c3c:	4618      	mov	r0, r3
  400c3e:	bd38      	pop	{r3, r4, r5, pc}
  400c40:	0040246c 	.word	0x0040246c
  400c44:	00400c81 	.word	0x00400c81
  400c48:	004018bd 	.word	0x004018bd
  400c4c:	00400bad 	.word	0x00400bad
  400c50:	00400b3d 	.word	0x00400b3d

00400c54 <usart_sync_enable>:
{
  400c54:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c56:	4604      	mov	r4, r0
  400c58:	2253      	movs	r2, #83	; 0x53
  400c5a:	4906      	ldr	r1, [pc, #24]	; (400c74 <usart_sync_enable+0x20>)
  400c5c:	3000      	adds	r0, #0
  400c5e:	bf18      	it	ne
  400c60:	2001      	movne	r0, #1
  400c62:	4b05      	ldr	r3, [pc, #20]	; (400c78 <usart_sync_enable+0x24>)
  400c64:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400c66:	f104 0008 	add.w	r0, r4, #8
  400c6a:	4b04      	ldr	r3, [pc, #16]	; (400c7c <usart_sync_enable+0x28>)
  400c6c:	4798      	blx	r3
}
  400c6e:	2000      	movs	r0, #0
  400c70:	bd10      	pop	{r4, pc}
  400c72:	bf00      	nop
  400c74:	0040246c 	.word	0x0040246c
  400c78:	00400c81 	.word	0x00400c81
  400c7c:	004018f5 	.word	0x004018f5

00400c80 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400c80:	b900      	cbnz	r0, 400c84 <assert+0x4>
		__asm("BKPT #0");
  400c82:	be00      	bkpt	0x0000
  400c84:	4770      	bx	lr
	...

00400c88 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400c88:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400c8a:	4a06      	ldr	r2, [pc, #24]	; (400ca4 <_sbrk+0x1c>)
  400c8c:	6812      	ldr	r2, [r2, #0]
  400c8e:	b122      	cbz	r2, 400c9a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400c90:	4a04      	ldr	r2, [pc, #16]	; (400ca4 <_sbrk+0x1c>)
  400c92:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400c94:	4403      	add	r3, r0
  400c96:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400c98:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c9a:	4903      	ldr	r1, [pc, #12]	; (400ca8 <_sbrk+0x20>)
  400c9c:	4a01      	ldr	r2, [pc, #4]	; (400ca4 <_sbrk+0x1c>)
  400c9e:	6011      	str	r1, [r2, #0]
  400ca0:	e7f6      	b.n	400c90 <_sbrk+0x8>
  400ca2:	bf00      	nop
  400ca4:	204000b4 	.word	0x204000b4
  400ca8:	20400770 	.word	0x20400770

00400cac <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400cac:	f04f 30ff 	mov.w	r0, #4294967295
  400cb0:	4770      	bx	lr

00400cb2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400cb6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400cb8:	2000      	movs	r0, #0
  400cba:	4770      	bx	lr

00400cbc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400cbc:	2000      	movs	r0, #0
  400cbe:	4770      	bx	lr

00400cc0 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400cc0:	2364      	movs	r3, #100	; 0x64
  400cc2:	4a1d      	ldr	r2, [pc, #116]	; (400d38 <_afec_init+0x78>)
  400cc4:	fb03 2301 	mla	r3, r3, r1, r2
  400cc8:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400cca:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400ccc:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400cce:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400cd0:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400cd2:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400cd4:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400cd6:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400cd8:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400cda:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400cdc:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400cde:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400ce0:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400ce2:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400ce4:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400ce6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400cec:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400cf2:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400cf8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400cfe:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400d02:	2200      	movs	r2, #0
  400d04:	2a0b      	cmp	r2, #11
  400d06:	d814      	bhi.n	400d32 <_afec_init+0x72>
{
  400d08:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400d0a:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400d0c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400d14:	4413      	add	r3, r2
  400d16:	330c      	adds	r3, #12
  400d18:	4c07      	ldr	r4, [pc, #28]	; (400d38 <_afec_init+0x78>)
  400d1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400d1e:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400d20:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400d22:	3201      	adds	r2, #1
  400d24:	b2d2      	uxtb	r2, r2
  400d26:	2a0b      	cmp	r2, #11
  400d28:	d9ef      	bls.n	400d0a <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400d2a:	2000      	movs	r0, #0
  400d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d30:	4770      	bx	lr
  400d32:	2000      	movs	r0, #0
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	00402488 	.word	0x00402488

00400d3c <_afec_get_hardware_index>:
{
  400d3c:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400d3e:	4b09      	ldr	r3, [pc, #36]	; (400d64 <_afec_get_hardware_index+0x28>)
  400d40:	4298      	cmp	r0, r3
  400d42:	d00a      	beq.n	400d5a <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400d44:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400d48:	4298      	cmp	r0, r3
  400d4a:	d008      	beq.n	400d5e <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400d4c:	22a3      	movs	r2, #163	; 0xa3
  400d4e:	4906      	ldr	r1, [pc, #24]	; (400d68 <_afec_get_hardware_index+0x2c>)
  400d50:	2000      	movs	r0, #0
  400d52:	4b06      	ldr	r3, [pc, #24]	; (400d6c <_afec_get_hardware_index+0x30>)
  400d54:	4798      	blx	r3
	return 0;
  400d56:	2000      	movs	r0, #0
  400d58:	bd08      	pop	{r3, pc}
		return 0;
  400d5a:	2000      	movs	r0, #0
  400d5c:	bd08      	pop	{r3, pc}
		return 1;
  400d5e:	2001      	movs	r0, #1
}
  400d60:	bd08      	pop	{r3, pc}
  400d62:	bf00      	nop
  400d64:	4003c000 	.word	0x4003c000
  400d68:	004024ec 	.word	0x004024ec
  400d6c:	00400c81 	.word	0x00400c81

00400d70 <_afec_get_regs>:
{
  400d70:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400d72:	4b08      	ldr	r3, [pc, #32]	; (400d94 <_afec_get_regs+0x24>)
  400d74:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d76:	2300      	movs	r3, #0
  400d78:	b113      	cbz	r3, 400d80 <_afec_get_regs+0x10>
	return 0;
  400d7a:	2300      	movs	r3, #0
}
  400d7c:	4618      	mov	r0, r3
  400d7e:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  400d80:	2264      	movs	r2, #100	; 0x64
  400d82:	fb02 f203 	mul.w	r2, r2, r3
  400d86:	4904      	ldr	r1, [pc, #16]	; (400d98 <_afec_get_regs+0x28>)
  400d88:	5c8a      	ldrb	r2, [r1, r2]
  400d8a:	4290      	cmp	r0, r2
  400d8c:	d0f6      	beq.n	400d7c <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d8e:	3301      	adds	r3, #1
  400d90:	b2db      	uxtb	r3, r3
  400d92:	e7f1      	b.n	400d78 <_afec_get_regs+0x8>
  400d94:	00400d3d 	.word	0x00400d3d
  400d98:	00402488 	.word	0x00402488

00400d9c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400d9c:	b538      	push	{r3, r4, r5, lr}
  400d9e:	460c      	mov	r4, r1
	ASSERT(device);
  400da0:	4605      	mov	r5, r0
  400da2:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400da6:	4907      	ldr	r1, [pc, #28]	; (400dc4 <_adc_sync_init+0x28>)
  400da8:	3000      	adds	r0, #0
  400daa:	bf18      	it	ne
  400dac:	2001      	movne	r0, #1
  400dae:	4b06      	ldr	r3, [pc, #24]	; (400dc8 <_adc_sync_init+0x2c>)
  400db0:	4798      	blx	r3

	device->hw = hw;
  400db2:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400db4:	4620      	mov	r0, r4
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <_adc_sync_init+0x30>)
  400db8:	4798      	blx	r3
  400dba:	4601      	mov	r1, r0
  400dbc:	4620      	mov	r0, r4
  400dbe:	4b04      	ldr	r3, [pc, #16]	; (400dd0 <_adc_sync_init+0x34>)
  400dc0:	4798      	blx	r3
}
  400dc2:	bd38      	pop	{r3, r4, r5, pc}
  400dc4:	004024ec 	.word	0x004024ec
  400dc8:	00400c81 	.word	0x00400c81
  400dcc:	00400d71 	.word	0x00400d71
  400dd0:	00400cc1 	.word	0x00400cc1

00400dd4 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400dd4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400dd8:	fb03 f000 	mul.w	r0, r3, r0
  400ddc:	4770      	bx	lr

00400dde <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400dde:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400de2:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400dea:	fb03 f000 	mul.w	r0, r3, r0
  400dee:	4770      	bx	lr

00400df0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400df0:	b500      	push	{lr}
  400df2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400df4:	a801      	add	r0, sp, #4
  400df6:	4b0e      	ldr	r3, [pc, #56]	; (400e30 <_init_chip+0x40>)
  400df8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400dfa:	4a0e      	ldr	r2, [pc, #56]	; (400e34 <_init_chip+0x44>)
  400dfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e0c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400e10:	a801      	add	r0, sp, #4
  400e12:	4b09      	ldr	r3, [pc, #36]	; (400e38 <_init_chip+0x48>)
  400e14:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400e16:	4a09      	ldr	r2, [pc, #36]	; (400e3c <_init_chip+0x4c>)
  400e18:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400e1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400e1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400e22:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400e24:	4b06      	ldr	r3, [pc, #24]	; (400e40 <_init_chip+0x50>)
  400e26:	4798      	blx	r3
}
  400e28:	b003      	add	sp, #12
  400e2a:	f85d fb04 	ldr.w	pc, [sp], #4
  400e2e:	bf00      	nop
  400e30:	00400799 	.word	0x00400799
  400e34:	e000ed00 	.word	0xe000ed00
  400e38:	004007a7 	.word	0x004007a7
  400e3c:	400e0c00 	.word	0x400e0c00
  400e40:	00401155 	.word	0x00401155

00400e44 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400e44:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400e46:	2500      	movs	r5, #0
  400e48:	428d      	cmp	r5, r1
  400e4a:	d210      	bcs.n	400e6e <_ffs+0x2a>
  400e4c:	2201      	movs	r2, #1
  400e4e:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e50:	2b1f      	cmp	r3, #31
  400e52:	d80a      	bhi.n	400e6a <_ffs+0x26>
			if (v[i] & bit) {
  400e54:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400e58:	4222      	tst	r2, r4
  400e5a:	d102      	bne.n	400e62 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400e5c:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e5e:	3301      	adds	r3, #1
  400e60:	e7f6      	b.n	400e50 <_ffs+0xc>
				return i * 32 + j;
  400e62:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400e66:	bc30      	pop	{r4, r5}
  400e68:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400e6a:	3501      	adds	r5, #1
  400e6c:	e7ec      	b.n	400e48 <_ffs+0x4>
	return -1;
  400e6e:	f04f 30ff 	mov.w	r0, #4294967295
  400e72:	e7f8      	b.n	400e66 <_ffs+0x22>

00400e74 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400e74:	b510      	push	{r4, lr}
  400e76:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400e78:	2300      	movs	r3, #0
  400e7a:	9301      	str	r3, [sp, #4]
  400e7c:	9302      	str	r3, [sp, #8]
  400e7e:	9303      	str	r3, [sp, #12]
  400e80:	9304      	str	r3, [sp, #16]
  400e82:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400e84:	4b21      	ldr	r3, [pc, #132]	; (400f0c <_ext_irq_handler+0x98>)
  400e86:	6818      	ldr	r0, [r3, #0]
  400e88:	22f8      	movs	r2, #248	; 0xf8
  400e8a:	4921      	ldr	r1, [pc, #132]	; (400f10 <_ext_irq_handler+0x9c>)
  400e8c:	3000      	adds	r0, #0
  400e8e:	bf18      	it	ne
  400e90:	2001      	movne	r0, #1
  400e92:	4b20      	ldr	r3, [pc, #128]	; (400f14 <_ext_irq_handler+0xa0>)
  400e94:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400e96:	4b20      	ldr	r3, [pc, #128]	; (400f18 <_ext_irq_handler+0xa4>)
  400e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400e9c:	4013      	ands	r3, r2
  400e9e:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400ea0:	491e      	ldr	r1, [pc, #120]	; (400f1c <_ext_irq_handler+0xa8>)
  400ea2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ea4:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400ea6:	400a      	ands	r2, r1
  400ea8:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  400eaa:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400eac:	e025      	b.n	400efa <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400eae:	4b17      	ldr	r3, [pc, #92]	; (400f0c <_ext_irq_handler+0x98>)
  400eb0:	681b      	ldr	r3, [r3, #0]
  400eb2:	4620      	mov	r0, r4
  400eb4:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400eb6:	1163      	asrs	r3, r4, #5
  400eb8:	f004 041f 	and.w	r4, r4, #31
  400ebc:	2201      	movs	r2, #1
  400ebe:	fa02 f404 	lsl.w	r4, r2, r4
  400ec2:	aa06      	add	r2, sp, #24
  400ec4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400ec8:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400ecc:	ea22 0204 	bic.w	r2, r2, r4
  400ed0:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400ed4:	2105      	movs	r1, #5
  400ed6:	a801      	add	r0, sp, #4
  400ed8:	4b11      	ldr	r3, [pc, #68]	; (400f20 <_ext_irq_handler+0xac>)
  400eda:	4798      	blx	r3
  400edc:	4604      	mov	r4, r0
		while (-1 != pos) {
  400ede:	f1b4 3fff 	cmp.w	r4, #4294967295
  400ee2:	d1e4      	bne.n	400eae <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400ee4:	4a0c      	ldr	r2, [pc, #48]	; (400f18 <_ext_irq_handler+0xa4>)
  400ee6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ee8:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400eea:	400b      	ands	r3, r1
  400eec:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400eee:	490b      	ldr	r1, [pc, #44]	; (400f1c <_ext_irq_handler+0xa8>)
  400ef0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ef2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400ef4:	4002      	ands	r2, r0
  400ef6:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  400ef8:	4313      	orrs	r3, r2
	while (flag_total) {
  400efa:	b12b      	cbz	r3, 400f08 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400efc:	2105      	movs	r1, #5
  400efe:	a801      	add	r0, sp, #4
  400f00:	4b07      	ldr	r3, [pc, #28]	; (400f20 <_ext_irq_handler+0xac>)
  400f02:	4798      	blx	r3
  400f04:	4604      	mov	r4, r0
		while (-1 != pos) {
  400f06:	e7ea      	b.n	400ede <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400f08:	b006      	add	sp, #24
  400f0a:	bd10      	pop	{r4, pc}
  400f0c:	204000b8 	.word	0x204000b8
  400f10:	00402540 	.word	0x00402540
  400f14:	00400c81 	.word	0x00400c81
  400f18:	400e0e00 	.word	0x400e0e00
  400f1c:	400e1000 	.word	0x400e1000
  400f20:	00400e45 	.word	0x00400e45

00400f24 <_pio_get_hardware_index>:
{
  400f24:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f26:	4604      	mov	r4, r0
  400f28:	22d2      	movs	r2, #210	; 0xd2
  400f2a:	4905      	ldr	r1, [pc, #20]	; (400f40 <_pio_get_hardware_index+0x1c>)
  400f2c:	3000      	adds	r0, #0
  400f2e:	bf18      	it	ne
  400f30:	2001      	movne	r0, #1
  400f32:	4b04      	ldr	r3, [pc, #16]	; (400f44 <_pio_get_hardware_index+0x20>)
  400f34:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400f36:	4804      	ldr	r0, [pc, #16]	; (400f48 <_pio_get_hardware_index+0x24>)
  400f38:	4420      	add	r0, r4
}
  400f3a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400f3e:	bd10      	pop	{r4, pc}
  400f40:	00402540 	.word	0x00402540
  400f44:	00400c81 	.word	0x00400c81
  400f48:	bff1f200 	.word	0xbff1f200

00400f4c <_pio_get_index>:
{
  400f4c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f4e:	4604      	mov	r4, r0
  400f50:	22e0      	movs	r2, #224	; 0xe0
  400f52:	490d      	ldr	r1, [pc, #52]	; (400f88 <_pio_get_index+0x3c>)
  400f54:	3000      	adds	r0, #0
  400f56:	bf18      	it	ne
  400f58:	2001      	movne	r0, #1
  400f5a:	4b0c      	ldr	r3, [pc, #48]	; (400f8c <_pio_get_index+0x40>)
  400f5c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400f5e:	4620      	mov	r0, r4
  400f60:	4b0b      	ldr	r3, [pc, #44]	; (400f90 <_pio_get_index+0x44>)
  400f62:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f64:	2300      	movs	r3, #0
  400f66:	2b01      	cmp	r3, #1
  400f68:	d80b      	bhi.n	400f82 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400f6a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400f6e:	008a      	lsls	r2, r1, #2
  400f70:	4908      	ldr	r1, [pc, #32]	; (400f94 <_pio_get_index+0x48>)
  400f72:	5c8a      	ldrb	r2, [r1, r2]
  400f74:	4290      	cmp	r0, r2
  400f76:	d002      	beq.n	400f7e <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f78:	3301      	adds	r3, #1
  400f7a:	b2db      	uxtb	r3, r3
  400f7c:	e7f3      	b.n	400f66 <_pio_get_index+0x1a>
			return i;
  400f7e:	b258      	sxtb	r0, r3
  400f80:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400f82:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f86:	bd10      	pop	{r4, pc}
  400f88:	00402540 	.word	0x00402540
  400f8c:	00400c81 	.word	0x00400c81
  400f90:	00400f25 	.word	0x00400f25
  400f94:	00402504 	.word	0x00402504

00400f98 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400f98:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400f9a:	4604      	mov	r4, r0
  400f9c:	f240 1259 	movw	r2, #345	; 0x159
  400fa0:	4929      	ldr	r1, [pc, #164]	; (401048 <_pio_init+0xb0>)
  400fa2:	3000      	adds	r0, #0
  400fa4:	bf18      	it	ne
  400fa6:	2001      	movne	r0, #1
  400fa8:	4b28      	ldr	r3, [pc, #160]	; (40104c <_pio_init+0xb4>)
  400faa:	4798      	blx	r3

	i = _pio_get_index(hw);
  400fac:	4620      	mov	r0, r4
  400fae:	4b28      	ldr	r3, [pc, #160]	; (401050 <_pio_init+0xb8>)
  400fb0:	4798      	blx	r3
	if (i < 0) {
  400fb2:	2800      	cmp	r0, #0
  400fb4:	db43      	blt.n	40103e <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400fb6:	4d27      	ldr	r5, [pc, #156]	; (401054 <_pio_init+0xbc>)
  400fb8:	00c2      	lsls	r2, r0, #3
  400fba:	1a11      	subs	r1, r2, r0
  400fbc:	008b      	lsls	r3, r1, #2
  400fbe:	442b      	add	r3, r5
  400fc0:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400fc2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400fc6:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400fc8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400fcc:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400fce:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400fd2:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400fd4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400fd8:	1a10      	subs	r0, r2, r0
  400fda:	0083      	lsls	r3, r0, #2
  400fdc:	442b      	add	r3, r5
  400fde:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400fe0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400fe4:	4620      	mov	r0, r4
  400fe6:	4b1c      	ldr	r3, [pc, #112]	; (401058 <_pio_init+0xc0>)
  400fe8:	4798      	blx	r3
  400fea:	4428      	add	r0, r5
  400fec:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400ff0:	2b00      	cmp	r3, #0
  400ff2:	db0c      	blt.n	40100e <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ff4:	095a      	lsrs	r2, r3, #5
  400ff6:	f003 001f 	and.w	r0, r3, #31
  400ffa:	2101      	movs	r1, #1
  400ffc:	4081      	lsls	r1, r0
  400ffe:	3220      	adds	r2, #32
  401000:	4816      	ldr	r0, [pc, #88]	; (40105c <_pio_init+0xc4>)
  401002:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401006:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40100a:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40100e:	2b00      	cmp	r3, #0
  401010:	db08      	blt.n	401024 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401012:	095a      	lsrs	r2, r3, #5
  401014:	f003 001f 	and.w	r0, r3, #31
  401018:	2101      	movs	r1, #1
  40101a:	4081      	lsls	r1, r0
  40101c:	3260      	adds	r2, #96	; 0x60
  40101e:	480f      	ldr	r0, [pc, #60]	; (40105c <_pio_init+0xc4>)
  401020:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401024:	2b00      	cmp	r3, #0
  401026:	db0d      	blt.n	401044 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401028:	0959      	lsrs	r1, r3, #5
  40102a:	f003 031f 	and.w	r3, r3, #31
  40102e:	2201      	movs	r2, #1
  401030:	fa02 f303 	lsl.w	r3, r2, r3
  401034:	4a09      	ldr	r2, [pc, #36]	; (40105c <_pio_init+0xc4>)
  401036:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40103a:	2000      	movs	r0, #0
  40103c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40103e:	f06f 0010 	mvn.w	r0, #16
  401042:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401044:	2000      	movs	r0, #0
}
  401046:	bd38      	pop	{r3, r4, r5, pc}
  401048:	00402540 	.word	0x00402540
  40104c:	00400c81 	.word	0x00400c81
  401050:	00400f4d 	.word	0x00400f4d
  401054:	00402504 	.word	0x00402504
  401058:	00400f25 	.word	0x00400f25
  40105c:	e000e100 	.word	0xe000e100

00401060 <PIOB_Handler>:
{
  401060:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401062:	4b01      	ldr	r3, [pc, #4]	; (401068 <PIOB_Handler+0x8>)
  401064:	4798      	blx	r3
  401066:	bd08      	pop	{r3, pc}
  401068:	00400e75 	.word	0x00400e75

0040106c <PIOA_Handler>:
{
  40106c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40106e:	4b01      	ldr	r3, [pc, #4]	; (401074 <PIOA_Handler+0x8>)
  401070:	4798      	blx	r3
  401072:	bd08      	pop	{r3, pc}
  401074:	00400e75 	.word	0x00400e75

00401078 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401078:	b538      	push	{r3, r4, r5, lr}
  40107a:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  40107c:	4804      	ldr	r0, [pc, #16]	; (401090 <_ext_irq_init+0x18>)
  40107e:	4c05      	ldr	r4, [pc, #20]	; (401094 <_ext_irq_init+0x1c>)
  401080:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401082:	4805      	ldr	r0, [pc, #20]	; (401098 <_ext_irq_init+0x20>)
  401084:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401086:	4b05      	ldr	r3, [pc, #20]	; (40109c <_ext_irq_init+0x24>)
  401088:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  40108a:	2000      	movs	r0, #0
  40108c:	bd38      	pop	{r3, r4, r5, pc}
  40108e:	bf00      	nop
  401090:	400e0e00 	.word	0x400e0e00
  401094:	00400f99 	.word	0x00400f99
  401098:	400e1000 	.word	0x400e1000
  40109c:	204000b8 	.word	0x204000b8

004010a0 <_pmc_init_sources>:
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  4010a0:	4a14      	ldr	r2, [pc, #80]	; (4010f4 <_pmc_init_sources+0x54>)
  4010a2:	6a11      	ldr	r1, [r2, #32]
  4010a4:	4b14      	ldr	r3, [pc, #80]	; (4010f8 <_pmc_init_sources+0x58>)
  4010a6:	430b      	orrs	r3, r1
  4010a8:	6213      	str	r3, [r2, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  4010aa:	4b12      	ldr	r3, [pc, #72]	; (4010f4 <_pmc_init_sources+0x54>)
  4010ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68

#if (CONF_CLK_MAINCK_ENABLE == 1)
#if (CONF_OSC12M_ENABLE && (CONF_CLK_GEN_MAINCK_SRC == CLK_SRC_OPTION_OSC12M))
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	hri_pmc_set_CKGR_MOR_reg(PMC, (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN));
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  4010ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4010b2:	d0fa      	beq.n	4010aa <_pmc_init_sources+0xa>
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4010b4:	490f      	ldr	r1, [pc, #60]	; (4010f4 <_pmc_init_sources+0x54>)
  4010b6:	6a0a      	ldr	r2, [r1, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Change Fast RC oscillator frequency */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCRCF_Msk;
  4010b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCF(CONF_OSC12M_SELECTOR);
  4010bc:	4b0f      	ldr	r3, [pc, #60]	; (4010fc <_pmc_init_sources+0x5c>)
  4010be:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4010c0:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  4010c2:	4b0c      	ldr	r3, [pc, #48]	; (4010f4 <_pmc_init_sources+0x54>)
  4010c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  4010c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4010ca:	d0fa      	beq.n	4010c2 <_pmc_init_sources+0x22>
	return ((Pmc *)hw)->CKGR_MOR;
  4010cc:	4b09      	ldr	r3, [pc, #36]	; (4010f4 <_pmc_init_sources+0x54>)
  4010ce:	6a1a      	ldr	r2, [r3, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Switch to Fast RC */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCSEL;
  4010d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
	data |= CKGR_MOR_KEY_PASSWD;
  4010d4:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
	((Pmc *)hw)->CKGR_MOR = data;
  4010d8:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4010da:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4010dc:	4a08      	ldr	r2, [pc, #32]	; (401100 <_pmc_init_sources+0x60>)
  4010de:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4010e0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4010e2:	4a08      	ldr	r2, [pc, #32]	; (401104 <_pmc_init_sources+0x64>)
  4010e4:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4010e6:	4b03      	ldr	r3, [pc, #12]	; (4010f4 <_pmc_init_sources+0x54>)
  4010e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4010ea:	f013 0f02 	tst.w	r3, #2
  4010ee:	d0fa      	beq.n	4010e6 <_pmc_init_sources+0x46>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4010f0:	4770      	bx	lr
  4010f2:	bf00      	nop
  4010f4:	400e0600 	.word	0x400e0600
  4010f8:	00370008 	.word	0x00370008
  4010fc:	00370020 	.word	0x00370020
  401100:	f800ffff 	.word	0xf800ffff
  401104:	20183f01 	.word	0x20183f01

00401108 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401108:	4a11      	ldr	r2, [pc, #68]	; (401150 <_pmc_init_master_clock+0x48>)
  40110a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40110c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401110:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401112:	4b0f      	ldr	r3, [pc, #60]	; (401150 <_pmc_init_master_clock+0x48>)
  401114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401116:	f013 0f08 	tst.w	r3, #8
  40111a:	d0fa      	beq.n	401112 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40111c:	4a0c      	ldr	r2, [pc, #48]	; (401150 <_pmc_init_master_clock+0x48>)
  40111e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401128:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40112a:	4b09      	ldr	r3, [pc, #36]	; (401150 <_pmc_init_master_clock+0x48>)
  40112c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40112e:	f013 0f08 	tst.w	r3, #8
  401132:	d0fa      	beq.n	40112a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401134:	4a06      	ldr	r2, [pc, #24]	; (401150 <_pmc_init_master_clock+0x48>)
  401136:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401138:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40113c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401140:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401142:	4b03      	ldr	r3, [pc, #12]	; (401150 <_pmc_init_master_clock+0x48>)
  401144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401146:	f013 0f08 	tst.w	r3, #8
  40114a:	d0fa      	beq.n	401142 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	400e0600 	.word	0x400e0600

00401154 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401154:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401156:	4b02      	ldr	r3, [pc, #8]	; (401160 <_pmc_init+0xc>)
  401158:	4798      	blx	r3
	_pmc_init_master_clock();
  40115a:	4b02      	ldr	r3, [pc, #8]	; (401164 <_pmc_init+0x10>)
  40115c:	4798      	blx	r3
  40115e:	bd08      	pop	{r3, pc}
  401160:	004010a1 	.word	0x004010a1
  401164:	00401109 	.word	0x00401109

00401168 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401168:	2300      	movs	r3, #0
  40116a:	2b01      	cmp	r3, #1
  40116c:	d80f      	bhi.n	40118e <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  40116e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401172:	008a      	lsls	r2, r1, #2
  401174:	4907      	ldr	r1, [pc, #28]	; (401194 <_pwm_get_cfg+0x2c>)
  401176:	588a      	ldr	r2, [r1, r2]
  401178:	4282      	cmp	r2, r0
  40117a:	d002      	beq.n	401182 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40117c:	3301      	adds	r3, #1
  40117e:	b2db      	uxtb	r3, r3
  401180:	e7f3      	b.n	40116a <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401182:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401186:	009a      	lsls	r2, r3, #2
  401188:	4608      	mov	r0, r1
  40118a:	4410      	add	r0, r2
  40118c:	4770      	bx	lr
		}
	}

	return NULL;
  40118e:	2000      	movs	r0, #0
}
  401190:	4770      	bx	lr
  401192:	bf00      	nop
  401194:	0040255c 	.word	0x0040255c

00401198 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401198:	4b06      	ldr	r3, [pc, #24]	; (4011b4 <_pwm_init_irq_param+0x1c>)
  40119a:	4298      	cmp	r0, r3
  40119c:	d003      	beq.n	4011a6 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  40119e:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <_pwm_init_irq_param+0x20>)
  4011a0:	4298      	cmp	r0, r3
  4011a2:	d003      	beq.n	4011ac <_pwm_init_irq_param+0x14>
  4011a4:	4770      	bx	lr
		_pwm0_dev = dev;
  4011a6:	4b05      	ldr	r3, [pc, #20]	; (4011bc <_pwm_init_irq_param+0x24>)
  4011a8:	6019      	str	r1, [r3, #0]
  4011aa:	e7f8      	b.n	40119e <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4011ac:	4b03      	ldr	r3, [pc, #12]	; (4011bc <_pwm_init_irq_param+0x24>)
  4011ae:	6059      	str	r1, [r3, #4]
	}
}
  4011b0:	e7f8      	b.n	4011a4 <_pwm_init_irq_param+0xc>
  4011b2:	bf00      	nop
  4011b4:	40020000 	.word	0x40020000
  4011b8:	4005c000 	.word	0x4005c000
  4011bc:	204000bc 	.word	0x204000bc

004011c0 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  4011c0:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  4011c2:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  4011c4:	69db      	ldr	r3, [r3, #28]
  4011c6:	b113      	cbz	r3, 4011ce <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  4011c8:	6803      	ldr	r3, [r0, #0]
  4011ca:	b103      	cbz	r3, 4011ce <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  4011cc:	4798      	blx	r3
  4011ce:	bd08      	pop	{r3, pc}

004011d0 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  4011d0:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  4011d2:	4b02      	ldr	r3, [pc, #8]	; (4011dc <PWM0_Handler+0xc>)
  4011d4:	6818      	ldr	r0, [r3, #0]
  4011d6:	4b02      	ldr	r3, [pc, #8]	; (4011e0 <PWM0_Handler+0x10>)
  4011d8:	4798      	blx	r3
  4011da:	bd08      	pop	{r3, pc}
  4011dc:	204000bc 	.word	0x204000bc
  4011e0:	004011c1 	.word	0x004011c1

004011e4 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  4011e4:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  4011e6:	4b02      	ldr	r3, [pc, #8]	; (4011f0 <PWM1_Handler+0xc>)
  4011e8:	6858      	ldr	r0, [r3, #4]
  4011ea:	4b02      	ldr	r3, [pc, #8]	; (4011f4 <PWM1_Handler+0x10>)
  4011ec:	4798      	blx	r3
  4011ee:	bd08      	pop	{r3, pc}
  4011f0:	204000bc 	.word	0x204000bc
  4011f4:	004011c1 	.word	0x004011c1

004011f8 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011fa:	4606      	mov	r6, r0
	ASSERT(hw);
  4011fc:	460c      	mov	r4, r1
  4011fe:	1c08      	adds	r0, r1, #0
  401200:	bf18      	it	ne
  401202:	2001      	movne	r0, #1
  401204:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401208:	4944      	ldr	r1, [pc, #272]	; (40131c <_pwm_init+0x124>)
  40120a:	4b45      	ldr	r3, [pc, #276]	; (401320 <_pwm_init+0x128>)
  40120c:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  40120e:	4620      	mov	r0, r4
  401210:	4b44      	ldr	r3, [pc, #272]	; (401324 <_pwm_init+0x12c>)
  401212:	4798      	blx	r3
  401214:	4605      	mov	r5, r0

	device->hw = hw;
  401216:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401218:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40121a:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  40121c:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  40121e:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401220:	6903      	ldr	r3, [r0, #16]
  401222:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401226:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401228:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40122a:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  40122c:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  40122e:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401230:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401234:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401236:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401238:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  40123a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40123e:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401240:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401244:	2300      	movs	r3, #0
  401246:	e019      	b.n	40127c <_pwm_init+0x84>
		ch = cfg->ch + i;
  401248:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40124a:	0118      	lsls	r0, r3, #4
  40124c:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401250:	5c3a      	ldrb	r2, [r7, r0]
  401252:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401256:	3210      	adds	r2, #16
  401258:	0152      	lsls	r2, r2, #5
  40125a:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40125c:	5c3a      	ldrb	r2, [r7, r0]
  40125e:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401262:	3210      	adds	r2, #16
  401264:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401268:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40126a:	5c3a      	ldrb	r2, [r7, r0]
  40126c:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401270:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401274:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401278:	3301      	adds	r3, #1
  40127a:	b25b      	sxtb	r3, r3
  40127c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40127e:	4293      	cmp	r3, r2
  401280:	d3e2      	bcc.n	401248 <_pwm_init+0x50>
  401282:	2300      	movs	r3, #0
  401284:	e014      	b.n	4012b0 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401286:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401288:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40128c:	0082      	lsls	r2, r0, #2
  40128e:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401292:	5c88      	ldrb	r0, [r1, r2]
  401294:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401298:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  40129c:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4012a0:	5c8a      	ldrb	r2, [r1, r2]
  4012a2:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4012a6:	3213      	adds	r2, #19
  4012a8:	0112      	lsls	r2, r2, #4
  4012aa:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4012ac:	3301      	adds	r3, #1
  4012ae:	b25b      	sxtb	r3, r3
  4012b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4012b2:	4293      	cmp	r3, r2
  4012b4:	d3e7      	bcc.n	401286 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4012b6:	4631      	mov	r1, r6
  4012b8:	4620      	mov	r0, r4
  4012ba:	4b1b      	ldr	r3, [pc, #108]	; (401328 <_pwm_init+0x130>)
  4012bc:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4012be:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	db0d      	blt.n	4012e2 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012c6:	095a      	lsrs	r2, r3, #5
  4012c8:	f003 031f 	and.w	r3, r3, #31
  4012cc:	2101      	movs	r1, #1
  4012ce:	fa01 f303 	lsl.w	r3, r1, r3
  4012d2:	3220      	adds	r2, #32
  4012d4:	4915      	ldr	r1, [pc, #84]	; (40132c <_pwm_init+0x134>)
  4012d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012de:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4012e2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	db09      	blt.n	4012fe <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012ea:	095a      	lsrs	r2, r3, #5
  4012ec:	f003 031f 	and.w	r3, r3, #31
  4012f0:	2101      	movs	r1, #1
  4012f2:	fa01 f303 	lsl.w	r3, r1, r3
  4012f6:	3260      	adds	r2, #96	; 0x60
  4012f8:	490c      	ldr	r1, [pc, #48]	; (40132c <_pwm_init+0x134>)
  4012fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4012fe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401302:	2b00      	cmp	r3, #0
  401304:	db08      	blt.n	401318 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401306:	0959      	lsrs	r1, r3, #5
  401308:	f003 031f 	and.w	r3, r3, #31
  40130c:	2201      	movs	r2, #1
  40130e:	fa02 f303 	lsl.w	r3, r2, r3
  401312:	4a06      	ldr	r2, [pc, #24]	; (40132c <_pwm_init+0x134>)
  401314:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401318:	2000      	movs	r0, #0
  40131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40131c:	00402654 	.word	0x00402654
  401320:	00400c81 	.word	0x00400c81
  401324:	00401169 	.word	0x00401169
  401328:	00401199 	.word	0x00401199
  40132c:	e000e100 	.word	0xe000e100

00401330 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401330:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401332:	4604      	mov	r4, r0
  401334:	f240 12b5 	movw	r2, #437	; 0x1b5
  401338:	490b      	ldr	r1, [pc, #44]	; (401368 <_pwm_enable+0x38>)
  40133a:	3000      	adds	r0, #0
  40133c:	bf18      	it	ne
  40133e:	2001      	movne	r0, #1
  401340:	4b0a      	ldr	r3, [pc, #40]	; (40136c <_pwm_enable+0x3c>)
  401342:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401344:	6920      	ldr	r0, [r4, #16]
  401346:	4b0a      	ldr	r3, [pc, #40]	; (401370 <_pwm_enable+0x40>)
  401348:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40134a:	2300      	movs	r3, #0
  40134c:	e008      	b.n	401360 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40134e:	6921      	ldr	r1, [r4, #16]
  401350:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401352:	011a      	lsls	r2, r3, #4
  401354:	5cad      	ldrb	r5, [r5, r2]
  401356:	2201      	movs	r2, #1
  401358:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40135a:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  40135c:	3301      	adds	r3, #1
  40135e:	b25b      	sxtb	r3, r3
  401360:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401362:	4293      	cmp	r3, r2
  401364:	d3f3      	bcc.n	40134e <_pwm_enable+0x1e>
	}
}
  401366:	bd38      	pop	{r3, r4, r5, pc}
  401368:	00402654 	.word	0x00402654
  40136c:	00400c81 	.word	0x00400c81
  401370:	00401169 	.word	0x00401169

00401374 <_pwm_is_enabled>:
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
	}
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401374:	b510      	push	{r4, lr}
	ASSERT(device);
  401376:	4604      	mov	r4, r0
  401378:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  40137c:	4907      	ldr	r1, [pc, #28]	; (40139c <_pwm_is_enabled+0x28>)
  40137e:	3000      	adds	r0, #0
  401380:	bf18      	it	ne
  401382:	2001      	movne	r0, #1
  401384:	4b06      	ldr	r3, [pc, #24]	; (4013a0 <_pwm_is_enabled+0x2c>)
  401386:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401388:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  40138a:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  40138c:	f013 0f0f 	tst.w	r3, #15
  401390:	d001      	beq.n	401396 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  401392:	2001      	movs	r0, #1
	}
}
  401394:	bd10      	pop	{r4, pc}
		return false;
  401396:	2000      	movs	r0, #0
  401398:	bd10      	pop	{r4, pc}
  40139a:	bf00      	nop
  40139c:	00402654 	.word	0x00402654
  4013a0:	00400c81 	.word	0x00400c81

004013a4 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4013a4:	2000      	movs	r0, #0
  4013a6:	4770      	bx	lr

004013a8 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4013a8:	4b04      	ldr	r3, [pc, #16]	; (4013bc <_spi_get_hardware_index+0x14>)
  4013aa:	4403      	add	r3, r0
  4013ac:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  4013b0:	2b05      	cmp	r3, #5
  4013b2:	d001      	beq.n	4013b8 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  4013b4:	2000      	movs	r0, #0
	}
}
  4013b6:	4770      	bx	lr
		return 1;
  4013b8:	2001      	movs	r0, #1
  4013ba:	4770      	bx	lr
  4013bc:	bfff8000 	.word	0xbfff8000

004013c0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  4013c0:	b570      	push	{r4, r5, r6, lr}
  4013c2:	4606      	mov	r6, r0
  4013c4:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4013c6:	4608      	mov	r0, r1
  4013c8:	4b20      	ldr	r3, [pc, #128]	; (40144c <_spi_m_sync_init+0x8c>)
  4013ca:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4013cc:	2300      	movs	r3, #0
  4013ce:	b33b      	cbz	r3, 401420 <_spi_m_sync_init+0x60>
	return NULL;
  4013d0:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  4013d2:	f240 122f 	movw	r2, #303	; 0x12f
  4013d6:	491e      	ldr	r1, [pc, #120]	; (401450 <_spi_m_sync_init+0x90>)
  4013d8:	2e00      	cmp	r6, #0
  4013da:	bf18      	it	ne
  4013dc:	2c00      	cmpne	r4, #0
  4013de:	bf14      	ite	ne
  4013e0:	2001      	movne	r0, #1
  4013e2:	2000      	moveq	r0, #0
  4013e4:	4b1b      	ldr	r3, [pc, #108]	; (401454 <_spi_m_sync_init+0x94>)
  4013e6:	4798      	blx	r3

	if (regs == NULL) {
  4013e8:	b355      	cbz	r5, 401440 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4013ea:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4013ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013f0:	d129      	bne.n	401446 <_spi_m_sync_init+0x86>
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4013f2:	2380      	movs	r3, #128	; 0x80
  4013f4:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4013f6:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4013f8:	686a      	ldr	r2, [r5, #4]
  4013fa:	4b17      	ldr	r3, [pc, #92]	; (401458 <_spi_m_sync_init+0x98>)
  4013fc:	4013      	ands	r3, r2
  4013fe:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401400:	68ab      	ldr	r3, [r5, #8]
  401402:	4a16      	ldr	r2, [pc, #88]	; (40145c <_spi_m_sync_init+0x9c>)
  401404:	401a      	ands	r2, r3
  401406:	4b16      	ldr	r3, [pc, #88]	; (401460 <_spi_m_sync_init+0xa0>)
  401408:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  40140a:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  40140c:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  40140e:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401410:	8a2b      	ldrh	r3, [r5, #16]
  401412:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  401414:	68eb      	ldr	r3, [r5, #12]
  401416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40141a:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  40141c:	2000      	movs	r0, #0
  40141e:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401420:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401424:	008a      	lsls	r2, r1, #2
  401426:	490f      	ldr	r1, [pc, #60]	; (401464 <_spi_m_sync_init+0xa4>)
  401428:	5c8a      	ldrb	r2, [r1, r2]
  40142a:	4290      	cmp	r0, r2
  40142c:	d002      	beq.n	401434 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  40142e:	3301      	adds	r3, #1
  401430:	b2db      	uxtb	r3, r3
  401432:	e7cc      	b.n	4013ce <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401434:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401438:	00ab      	lsls	r3, r5, #2
  40143a:	460d      	mov	r5, r1
  40143c:	441d      	add	r5, r3
  40143e:	e7c8      	b.n	4013d2 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401440:	f06f 000c 	mvn.w	r0, #12
  401444:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  401446:	f06f 0010 	mvn.w	r0, #16
}
  40144a:	bd70      	pop	{r4, r5, r6, pc}
  40144c:	004013a9 	.word	0x004013a9
  401450:	00402680 	.word	0x00402680
  401454:	00400c81 	.word	0x00400c81
  401458:	feffff7c 	.word	0xfeffff7c
  40145c:	fff1ff6f 	.word	0xfff1ff6f
  401460:	000e0010 	.word	0x000e0010
  401464:	0040266c 	.word	0x0040266c

00401468 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40146c:	b086      	sub	sp, #24
  40146e:	4607      	mov	r7, r0
  401470:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401472:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401474:	680b      	ldr	r3, [r1, #0]
  401476:	9301      	str	r3, [sp, #4]
  401478:	684b      	ldr	r3, [r1, #4]
  40147a:	9302      	str	r3, [sp, #8]
  40147c:	2300      	movs	r3, #0
  40147e:	9303      	str	r3, [sp, #12]
  401480:	9304      	str	r3, [sp, #16]
  401482:	7903      	ldrb	r3, [r0, #4]
  401484:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401488:	1c26      	adds	r6, r4, #0
  40148a:	bf18      	it	ne
  40148c:	2601      	movne	r6, #1
  40148e:	f44f 720b 	mov.w	r2, #556	; 0x22c
  401492:	4933      	ldr	r1, [pc, #204]	; (401560 <_spi_m_sync_trans+0xf8>)
  401494:	2800      	cmp	r0, #0
  401496:	bf0c      	ite	eq
  401498:	2000      	moveq	r0, #0
  40149a:	f006 0001 	andne.w	r0, r6, #1
  40149e:	4b31      	ldr	r3, [pc, #196]	; (401564 <_spi_m_sync_trans+0xfc>)
  4014a0:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4014a2:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  4014a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014a8:	d122      	bne.n	4014f0 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  4014aa:	f06f 0013 	mvn.w	r0, #19
  4014ae:	e053      	b.n	401558 <_spi_m_sync_trans+0xf0>
		return false;
  4014b0:	2300      	movs	r3, #0
  4014b2:	e035      	b.n	401520 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  4014b4:	7850      	ldrb	r0, [r2, #1]
  4014b6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  4014ba:	3202      	adds	r2, #2
  4014bc:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  4014be:	3301      	adds	r3, #1
  4014c0:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4014c2:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  4014c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  4014c8:	f240 221d 	movw	r2, #541	; 0x21d
  4014cc:	4924      	ldr	r1, [pc, #144]	; (401560 <_spi_m_sync_trans+0xf8>)
  4014ce:	4630      	mov	r0, r6
  4014d0:	4b24      	ldr	r3, [pc, #144]	; (401564 <_spi_m_sync_trans+0xfc>)
  4014d2:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  4014d4:	f018 0f08 	tst.w	r8, #8
  4014d8:	d038      	beq.n	40154c <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  4014da:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  4014de:	2800      	cmp	r0, #0
  4014e0:	db36      	blt.n	401550 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4014e2:	9803      	ldr	r0, [sp, #12]
  4014e4:	68ab      	ldr	r3, [r5, #8]
  4014e6:	4298      	cmp	r0, r3
  4014e8:	d302      	bcc.n	4014f0 <_spi_m_sync_trans+0x88>
  4014ea:	9a04      	ldr	r2, [sp, #16]
  4014ec:	4293      	cmp	r3, r2
  4014ee:	d92f      	bls.n	401550 <_spi_m_sync_trans+0xe8>
  4014f0:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  4014f2:	f013 0f01 	tst.w	r3, #1
  4014f6:	d0db      	beq.n	4014b0 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4014f8:	68a3      	ldr	r3, [r4, #8]
  4014fa:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  4014fc:	9a02      	ldr	r2, [sp, #8]
  4014fe:	b15a      	cbz	r2, 401518 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401500:	1c51      	adds	r1, r2, #1
  401502:	9102      	str	r1, [sp, #8]
  401504:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  401506:	f89d 2014 	ldrb.w	r2, [sp, #20]
  40150a:	2a01      	cmp	r2, #1
  40150c:	d904      	bls.n	401518 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  40150e:	460a      	mov	r2, r1
  401510:	3101      	adds	r1, #1
  401512:	9102      	str	r1, [sp, #8]
  401514:	0a1b      	lsrs	r3, r3, #8
  401516:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401518:	9b04      	ldr	r3, [sp, #16]
  40151a:	3301      	adds	r3, #1
  40151c:	9304      	str	r3, [sp, #16]
	return true;
  40151e:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401520:	2b00      	cmp	r3, #0
  401522:	d1cf      	bne.n	4014c4 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401524:	9b03      	ldr	r3, [sp, #12]
  401526:	9a04      	ldr	r2, [sp, #16]
  401528:	429a      	cmp	r2, r3
  40152a:	d3cb      	bcc.n	4014c4 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  40152c:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  40152e:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401530:	f012 0f02 	tst.w	r2, #2
  401534:	d0c6      	beq.n	4014c4 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401536:	9a01      	ldr	r2, [sp, #4]
  401538:	2a00      	cmp	r2, #0
  40153a:	d0c0      	beq.n	4014be <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  40153c:	1c51      	adds	r1, r2, #1
  40153e:	9101      	str	r1, [sp, #4]
  401540:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401542:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401546:	2801      	cmp	r0, #1
  401548:	d8b4      	bhi.n	4014b4 <_spi_m_sync_trans+0x4c>
  40154a:	e7b8      	b.n	4014be <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  40154c:	2000      	movs	r0, #0
  40154e:	e7c6      	b.n	4014de <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401550:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401552:	f413 7f00 	tst.w	r3, #512	; 0x200
  401556:	d0fb      	beq.n	401550 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401558:	b006      	add	sp, #24
  40155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40155e:	bf00      	nop
  401560:	00402680 	.word	0x00402680
  401564:	00400c81 	.word	0x00400c81

00401568 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401568:	2000      	movs	r0, #0
  40156a:	4770      	bx	lr

0040156c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40156c:	4b03      	ldr	r3, [pc, #12]	; (40157c <_system_time_init+0x10>)
  40156e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401572:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401574:	2205      	movs	r2, #5
  401576:	601a      	str	r2, [r3, #0]
  401578:	4770      	bx	lr
  40157a:	bf00      	nop
  40157c:	e000e010 	.word	0xe000e010

00401580 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401580:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401582:	4b01      	ldr	r3, [pc, #4]	; (401588 <_delay_init+0x8>)
  401584:	4798      	blx	r3
  401586:	bd08      	pop	{r3, pc}
  401588:	0040156d 	.word	0x0040156d

0040158c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  40158c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40158e:	e00d      	b.n	4015ac <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401590:	4b0d      	ldr	r3, [pc, #52]	; (4015c8 <_delay_cycles+0x3c>)
  401592:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401596:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401598:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40159a:	4b0b      	ldr	r3, [pc, #44]	; (4015c8 <_delay_cycles+0x3c>)
  40159c:	681b      	ldr	r3, [r3, #0]
  40159e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015a2:	d0fa      	beq.n	40159a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4015a4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4015a8:	3101      	adds	r1, #1
	while (n--) {
  4015aa:	4610      	mov	r0, r2
  4015ac:	1e43      	subs	r3, r0, #1
  4015ae:	b2da      	uxtb	r2, r3
  4015b0:	2800      	cmp	r0, #0
  4015b2:	d1ed      	bne.n	401590 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4015b4:	4b04      	ldr	r3, [pc, #16]	; (4015c8 <_delay_cycles+0x3c>)
  4015b6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4015b8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4015ba:	4b03      	ldr	r3, [pc, #12]	; (4015c8 <_delay_cycles+0x3c>)
  4015bc:	681b      	ldr	r3, [r3, #0]
  4015be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015c2:	d0fa      	beq.n	4015ba <_delay_cycles+0x2e>
		;
}
  4015c4:	4770      	bx	lr
  4015c6:	bf00      	nop
  4015c8:	e000e010 	.word	0xe000e010

004015cc <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4015cc:	2300      	movs	r3, #0
  4015ce:	b13b      	cbz	r3, 4015e0 <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  4015d0:	2000      	movs	r0, #0
  4015d2:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  4015d4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  4015d8:	00e3      	lsls	r3, r4, #3
  4015da:	4608      	mov	r0, r1
  4015dc:	4418      	add	r0, r3
  4015de:	e00c      	b.n	4015fa <_get_i2cm_sync_cfg+0x2e>
{
  4015e0:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  4015e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4015e6:	00ca      	lsls	r2, r1, #3
  4015e8:	4905      	ldr	r1, [pc, #20]	; (401600 <_get_i2cm_sync_cfg+0x34>)
  4015ea:	588a      	ldr	r2, [r1, r2]
  4015ec:	4282      	cmp	r2, r0
  4015ee:	d0f1      	beq.n	4015d4 <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4015f0:	3301      	adds	r3, #1
  4015f2:	b2db      	uxtb	r3, r3
  4015f4:	2b00      	cmp	r3, #0
  4015f6:	d0f4      	beq.n	4015e2 <_get_i2cm_sync_cfg+0x16>
	return NULL;
  4015f8:	2000      	movs	r0, #0
}
  4015fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015fe:	4770      	bx	lr
  401600:	00402698 	.word	0x00402698

00401604 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  401604:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401606:	4604      	mov	r4, r0
  401608:	460d      	mov	r5, r1
  40160a:	2800      	cmp	r0, #0
  40160c:	bf18      	it	ne
  40160e:	2900      	cmpne	r1, #0
  401610:	bf14      	ite	ne
  401612:	2001      	movne	r0, #1
  401614:	2000      	moveq	r0, #0
  401616:	2278      	movs	r2, #120	; 0x78
  401618:	4909      	ldr	r1, [pc, #36]	; (401640 <_i2c_m_sync_init+0x3c>)
  40161a:	4b0a      	ldr	r3, [pc, #40]	; (401644 <_i2c_m_sync_init+0x40>)
  40161c:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  40161e:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  401620:	4628      	mov	r0, r5
  401622:	4b09      	ldr	r3, [pc, #36]	; (401648 <_i2c_m_sync_init+0x44>)
  401624:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  401626:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  401628:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  40162a:	6923      	ldr	r3, [r4, #16]
  40162c:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  40162e:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  401630:	6923      	ldr	r3, [r4, #16]
  401632:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  401634:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  401636:	6923      	ldr	r3, [r4, #16]
  401638:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  40163a:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  40163c:	2000      	movs	r0, #0
  40163e:	bd38      	pop	{r3, r4, r5, pc}
  401640:	004026b0 	.word	0x004026b0
  401644:	00400c81 	.word	0x00400c81
  401648:	004015cd 	.word	0x004015cd

0040164c <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  40164c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  40164e:	4604      	mov	r4, r0
  401650:	460d      	mov	r5, r1
  401652:	2800      	cmp	r0, #0
  401654:	bf18      	it	ne
  401656:	2900      	cmpne	r1, #0
  401658:	bf14      	ite	ne
  40165a:	2001      	movne	r0, #1
  40165c:	2000      	moveq	r0, #0
  40165e:	22ba      	movs	r2, #186	; 0xba
  401660:	4952      	ldr	r1, [pc, #328]	; (4017ac <_i2c_m_sync_transfer+0x160>)
  401662:	4b53      	ldr	r3, [pc, #332]	; (4017b0 <_i2c_m_sync_transfer+0x164>)
  401664:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  401666:	8863      	ldrh	r3, [r4, #2]
  401668:	f413 7f80 	tst.w	r3, #256	; 0x100
  40166c:	f040 809a 	bne.w	4017a4 <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401670:	886b      	ldrh	r3, [r5, #2]
  401672:	f013 0f01 	tst.w	r3, #1
  401676:	d118      	bne.n	4016aa <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401678:	886b      	ldrh	r3, [r5, #2]
  40167a:	b29b      	uxth	r3, r3
  40167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401680:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  401682:	882b      	ldrh	r3, [r5, #0]
  401684:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401688:	d05f      	beq.n	40174a <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  40168a:	6922      	ldr	r2, [r4, #16]
  40168c:	0a1b      	lsrs	r3, r3, #8
  40168e:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401692:	041b      	lsls	r3, r3, #16
  401694:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  40169c:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  40169e:	6923      	ldr	r3, [r4, #16]
  4016a0:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  4016a2:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  4016a4:	2000      	movs	r0, #0
  4016a6:	4601      	mov	r1, r0
  4016a8:	e05c      	b.n	401764 <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  4016aa:	886b      	ldrh	r3, [r5, #2]
  4016ac:	b29b      	uxth	r3, r3
  4016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4016b2:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  4016b4:	882b      	ldrh	r3, [r5, #0]
  4016b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4016ba:	d022      	beq.n	401702 <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  4016bc:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  4016be:	0a1b      	lsrs	r3, r3, #8
  4016c0:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  4016c4:	041b      	lsls	r3, r3, #16
  4016c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4016ca:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  4016ce:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  4016d0:	6923      	ldr	r3, [r4, #16]
  4016d2:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  4016d4:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4016d6:	6923      	ldr	r3, [r4, #16]
  4016d8:	686a      	ldr	r2, [r5, #4]
  4016da:	2a01      	cmp	r2, #1
  4016dc:	d019      	beq.n	401712 <_i2c_m_sync_transfer+0xc6>
  4016de:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  4016e0:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  4016e2:	2100      	movs	r1, #0
  4016e4:	686b      	ldr	r3, [r5, #4]
  4016e6:	4299      	cmp	r1, r3
  4016e8:	d222      	bcs.n	401730 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  4016ea:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  4016ec:	6a1a      	ldr	r2, [r3, #32]
  4016ee:	f012 0f02 	tst.w	r2, #2
  4016f2:	d110      	bne.n	401716 <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  4016f4:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  4016f6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4016fa:	d0f6      	beq.n	4016ea <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  4016fc:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  401700:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  401702:	6922      	ldr	r2, [r4, #16]
  401704:	041b      	lsls	r3, r3, #16
  401706:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40170a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  40170e:	6053      	str	r3, [r2, #4]
  401710:	e7e1      	b.n	4016d6 <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  401712:	2203      	movs	r2, #3
  401714:	e7e4      	b.n	4016e0 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  401716:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  401718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171a:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  40171c:	686b      	ldr	r3, [r5, #4]
  40171e:	3b02      	subs	r3, #2
  401720:	4299      	cmp	r1, r3
  401722:	d001      	beq.n	401728 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  401724:	3101      	adds	r1, #1
  401726:	e7dd      	b.n	4016e4 <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401728:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  40172a:	2202      	movs	r2, #2
  40172c:	601a      	str	r2, [r3, #0]
  40172e:	e7f9      	b.n	401724 <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401730:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401732:	6a1b      	ldr	r3, [r3, #32]
  401734:	f013 0f01 	tst.w	r3, #1
  401738:	d0fa      	beq.n	401730 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  40173a:	8863      	ldrh	r3, [r4, #2]
  40173c:	b29b      	uxth	r3, r3
  40173e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401742:	b29b      	uxth	r3, r3
  401744:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  401746:	2000      	movs	r0, #0
  401748:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  40174a:	6922      	ldr	r2, [r4, #16]
  40174c:	041b      	lsls	r3, r3, #16
  40174e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  401752:	6053      	str	r3, [r2, #4]
  401754:	e7a6      	b.n	4016a4 <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  401756:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  40175a:	b978      	cbnz	r0, 40177c <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  40175c:	68ab      	ldr	r3, [r5, #8]
  40175e:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  401760:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  401762:	3101      	adds	r1, #1
  401764:	686b      	ldr	r3, [r5, #4]
  401766:	4299      	cmp	r1, r3
  401768:	d208      	bcs.n	40177c <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  40176a:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  40176c:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  40176e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401772:	d1f0      	bne.n	401756 <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  401774:	f013 0f04 	tst.w	r3, #4
  401778:	d0f7      	beq.n	40176a <_i2c_m_sync_transfer+0x11e>
  40177a:	e7ee      	b.n	40175a <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  40177c:	886b      	ldrh	r3, [r5, #2]
  40177e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401782:	d106      	bne.n	401792 <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401784:	8863      	ldrh	r3, [r4, #2]
  401786:	b29b      	uxth	r3, r3
  401788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40178c:	b29b      	uxth	r3, r3
  40178e:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  401790:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401792:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401794:	2202      	movs	r2, #2
  401796:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401798:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  40179a:	6a1b      	ldr	r3, [r3, #32]
  40179c:	f013 0f01 	tst.w	r3, #1
  4017a0:	d0fa      	beq.n	401798 <_i2c_m_sync_transfer+0x14c>
  4017a2:	e7ef      	b.n	401784 <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  4017a4:	f06f 0005 	mvn.w	r0, #5
}
  4017a8:	bd38      	pop	{r3, r4, r5, pc}
  4017aa:	bf00      	nop
  4017ac:	004026b0 	.word	0x004026b0
  4017b0:	00400c81 	.word	0x00400c81

004017b4 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4017b4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017b6:	4604      	mov	r4, r0
  4017b8:	f240 2219 	movw	r2, #537	; 0x219
  4017bc:	4912      	ldr	r1, [pc, #72]	; (401808 <_uart_get_hardware_index+0x54>)
  4017be:	3000      	adds	r0, #0
  4017c0:	bf18      	it	ne
  4017c2:	2001      	movne	r0, #1
  4017c4:	4b11      	ldr	r3, [pc, #68]	; (40180c <_uart_get_hardware_index+0x58>)
  4017c6:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4017c8:	4b11      	ldr	r3, [pc, #68]	; (401810 <_uart_get_hardware_index+0x5c>)
  4017ca:	429c      	cmp	r4, r3
  4017cc:	d013      	beq.n	4017f6 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  4017ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4017d2:	429c      	cmp	r4, r3
  4017d4:	d011      	beq.n	4017fa <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  4017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4017da:	429c      	cmp	r4, r3
  4017dc:	d00f      	beq.n	4017fe <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  4017de:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4017e2:	429c      	cmp	r4, r3
  4017e4:	d00d      	beq.n	401802 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  4017e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4017ea:	429c      	cmp	r4, r3
  4017ec:	d001      	beq.n	4017f2 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  4017ee:	20ff      	movs	r0, #255	; 0xff
	}
}
  4017f0:	bd10      	pop	{r4, pc}
		return 4;
  4017f2:	2004      	movs	r0, #4
  4017f4:	bd10      	pop	{r4, pc}
		return 0;
  4017f6:	2000      	movs	r0, #0
  4017f8:	bd10      	pop	{r4, pc}
		return 1;
  4017fa:	2001      	movs	r0, #1
  4017fc:	bd10      	pop	{r4, pc}
		return 2;
  4017fe:	2002      	movs	r0, #2
  401800:	bd10      	pop	{r4, pc}
		return 3;
  401802:	2003      	movs	r0, #3
  401804:	bd10      	pop	{r4, pc}
  401806:	bf00      	nop
  401808:	004026d8 	.word	0x004026d8
  40180c:	00400c81 	.word	0x00400c81
  401810:	400e0800 	.word	0x400e0800

00401814 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  401814:	b510      	push	{r4, lr}
	ASSERT(hw);
  401816:	4604      	mov	r4, r0
  401818:	f44f 7227 	mov.w	r2, #668	; 0x29c
  40181c:	490e      	ldr	r1, [pc, #56]	; (401858 <_get_uart_index+0x44>)
  40181e:	3000      	adds	r0, #0
  401820:	bf18      	it	ne
  401822:	2001      	movne	r0, #1
  401824:	4b0d      	ldr	r3, [pc, #52]	; (40185c <_get_uart_index+0x48>)
  401826:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  401828:	4620      	mov	r0, r4
  40182a:	4b0d      	ldr	r3, [pc, #52]	; (401860 <_get_uart_index+0x4c>)
  40182c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  40182e:	2300      	movs	r3, #0
  401830:	b143      	cbz	r3, 401844 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401832:	f240 22a6 	movw	r2, #678	; 0x2a6
  401836:	4908      	ldr	r1, [pc, #32]	; (401858 <_get_uart_index+0x44>)
  401838:	2000      	movs	r0, #0
  40183a:	4b08      	ldr	r3, [pc, #32]	; (40185c <_get_uart_index+0x48>)
  40183c:	4798      	blx	r3
	return 0;
  40183e:	2300      	movs	r3, #0
}
  401840:	4618      	mov	r0, r3
  401842:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  401844:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401848:	008a      	lsls	r2, r1, #2
  40184a:	4906      	ldr	r1, [pc, #24]	; (401864 <_get_uart_index+0x50>)
  40184c:	5c8a      	ldrb	r2, [r1, r2]
  40184e:	4290      	cmp	r0, r2
  401850:	d0f6      	beq.n	401840 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  401852:	3301      	adds	r3, #1
  401854:	b2db      	uxtb	r3, r3
  401856:	e7eb      	b.n	401830 <_get_uart_index+0x1c>
  401858:	004026d8 	.word	0x004026d8
  40185c:	00400c81 	.word	0x00400c81
  401860:	004017b5 	.word	0x004017b5
  401864:	004026cc 	.word	0x004026cc

00401868 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  401868:	b510      	push	{r4, lr}
	ASSERT(hw);
  40186a:	4604      	mov	r4, r0
  40186c:	f240 22b3 	movw	r2, #691	; 0x2b3
  401870:	490d      	ldr	r1, [pc, #52]	; (4018a8 <_uart_init+0x40>)
  401872:	3000      	adds	r0, #0
  401874:	bf18      	it	ne
  401876:	2001      	movne	r0, #1
  401878:	4b0c      	ldr	r3, [pc, #48]	; (4018ac <_uart_init+0x44>)
  40187a:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  40187c:	4620      	mov	r0, r4
  40187e:	4b0c      	ldr	r3, [pc, #48]	; (4018b0 <_uart_init+0x48>)
  401880:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  401882:	4b0c      	ldr	r3, [pc, #48]	; (4018b4 <_uart_init+0x4c>)
  401884:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  401888:	23ac      	movs	r3, #172	; 0xac
  40188a:	6023      	str	r3, [r4, #0]
  40188c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401890:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  401892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401896:	0082      	lsls	r2, r0, #2
  401898:	4b07      	ldr	r3, [pc, #28]	; (4018b8 <_uart_init+0x50>)
  40189a:	4413      	add	r3, r2
  40189c:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  40189e:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  4018a0:	23f4      	movs	r3, #244	; 0xf4
  4018a2:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  4018a4:	2000      	movs	r0, #0
  4018a6:	bd10      	pop	{r4, pc}
  4018a8:	004026d8 	.word	0x004026d8
  4018ac:	00400c81 	.word	0x00400c81
  4018b0:	00401815 	.word	0x00401815
  4018b4:	55415200 	.word	0x55415200
  4018b8:	004026cc 	.word	0x004026cc

004018bc <_usart_sync_init>:
{
  4018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018be:	460c      	mov	r4, r1
	ASSERT(device);
  4018c0:	4e09      	ldr	r6, [pc, #36]	; (4018e8 <_usart_sync_init+0x2c>)
  4018c2:	4607      	mov	r7, r0
  4018c4:	22a9      	movs	r2, #169	; 0xa9
  4018c6:	4631      	mov	r1, r6
  4018c8:	3000      	adds	r0, #0
  4018ca:	bf18      	it	ne
  4018cc:	2001      	movne	r0, #1
  4018ce:	4d07      	ldr	r5, [pc, #28]	; (4018ec <_usart_sync_init+0x30>)
  4018d0:	47a8      	blx	r5
	ASSERT(hw);
  4018d2:	22aa      	movs	r2, #170	; 0xaa
  4018d4:	4631      	mov	r1, r6
  4018d6:	1c20      	adds	r0, r4, #0
  4018d8:	bf18      	it	ne
  4018da:	2001      	movne	r0, #1
  4018dc:	47a8      	blx	r5
	device->hw = hw;
  4018de:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  4018e0:	4620      	mov	r0, r4
  4018e2:	4b03      	ldr	r3, [pc, #12]	; (4018f0 <_usart_sync_init+0x34>)
  4018e4:	4798      	blx	r3
}
  4018e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018e8:	004026d8 	.word	0x004026d8
  4018ec:	00400c81 	.word	0x00400c81
  4018f0:	00401869 	.word	0x00401869

004018f4 <_usart_sync_enable>:
{
  4018f4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4018f6:	4e0a      	ldr	r6, [pc, #40]	; (401920 <_usart_sync_enable+0x2c>)
  4018f8:	4604      	mov	r4, r0
  4018fa:	22f2      	movs	r2, #242	; 0xf2
  4018fc:	4631      	mov	r1, r6
  4018fe:	3000      	adds	r0, #0
  401900:	bf18      	it	ne
  401902:	2001      	movne	r0, #1
  401904:	4d07      	ldr	r5, [pc, #28]	; (401924 <_usart_sync_enable+0x30>)
  401906:	47a8      	blx	r5
	_uart_enable(device->hw);
  401908:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  40190a:	f240 22d7 	movw	r2, #727	; 0x2d7
  40190e:	4631      	mov	r1, r6
  401910:	1c20      	adds	r0, r4, #0
  401912:	bf18      	it	ne
  401914:	2001      	movne	r0, #1
  401916:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  401918:	2350      	movs	r3, #80	; 0x50
  40191a:	6023      	str	r3, [r4, #0]
  40191c:	bd70      	pop	{r4, r5, r6, pc}
  40191e:	bf00      	nop
  401920:	004026d8 	.word	0x004026d8
  401924:	00400c81 	.word	0x00400c81

00401928 <_usart_sync_write_byte>:
{
  401928:	b538      	push	{r3, r4, r5, lr}
  40192a:	460c      	mov	r4, r1
	ASSERT(device);
  40192c:	4605      	mov	r5, r0
  40192e:	f240 1295 	movw	r2, #405	; 0x195
  401932:	4904      	ldr	r1, [pc, #16]	; (401944 <_usart_sync_write_byte+0x1c>)
  401934:	3000      	adds	r0, #0
  401936:	bf18      	it	ne
  401938:	2001      	movne	r0, #1
  40193a:	4b03      	ldr	r3, [pc, #12]	; (401948 <_usart_sync_write_byte+0x20>)
  40193c:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  40193e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  401940:	61dc      	str	r4, [r3, #28]
  401942:	bd38      	pop	{r3, r4, r5, pc}
  401944:	004026d8 	.word	0x004026d8
  401948:	00400c81 	.word	0x00400c81

0040194c <_usart_sync_read_byte>:
{
  40194c:	b510      	push	{r4, lr}
	ASSERT(device);
  40194e:	4604      	mov	r4, r0
  401950:	f240 12a7 	movw	r2, #423	; 0x1a7
  401954:	4904      	ldr	r1, [pc, #16]	; (401968 <_usart_sync_read_byte+0x1c>)
  401956:	3000      	adds	r0, #0
  401958:	bf18      	it	ne
  40195a:	2001      	movne	r0, #1
  40195c:	4b03      	ldr	r3, [pc, #12]	; (40196c <_usart_sync_read_byte+0x20>)
  40195e:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  401960:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  401962:	6998      	ldr	r0, [r3, #24]
}
  401964:	b2c0      	uxtb	r0, r0
  401966:	bd10      	pop	{r4, pc}
  401968:	004026d8 	.word	0x004026d8
  40196c:	00400c81 	.word	0x00400c81

00401970 <_usart_sync_is_ready_to_send>:
{
  401970:	b510      	push	{r4, lr}
	ASSERT(device);
  401972:	4604      	mov	r4, r0
  401974:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  401978:	4905      	ldr	r1, [pc, #20]	; (401990 <_usart_sync_is_ready_to_send+0x20>)
  40197a:	3000      	adds	r0, #0
  40197c:	bf18      	it	ne
  40197e:	2001      	movne	r0, #1
  401980:	4b04      	ldr	r3, [pc, #16]	; (401994 <_usart_sync_is_ready_to_send+0x24>)
  401982:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  401984:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  401986:	6958      	ldr	r0, [r3, #20]
}
  401988:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40198c:	bd10      	pop	{r4, pc}
  40198e:	bf00      	nop
  401990:	004026d8 	.word	0x004026d8
  401994:	00400c81 	.word	0x00400c81

00401998 <_usart_sync_is_transmit_done>:
{
  401998:	b510      	push	{r4, lr}
	ASSERT(device);
  40199a:	4604      	mov	r4, r0
  40199c:	f240 12b9 	movw	r2, #441	; 0x1b9
  4019a0:	4905      	ldr	r1, [pc, #20]	; (4019b8 <_usart_sync_is_transmit_done+0x20>)
  4019a2:	3000      	adds	r0, #0
  4019a4:	bf18      	it	ne
  4019a6:	2001      	movne	r0, #1
  4019a8:	4b04      	ldr	r3, [pc, #16]	; (4019bc <_usart_sync_is_transmit_done+0x24>)
  4019aa:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  4019ac:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  4019ae:	6958      	ldr	r0, [r3, #20]
}
  4019b0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	004026d8 	.word	0x004026d8
  4019bc:	00400c81 	.word	0x00400c81

004019c0 <_usart_sync_is_byte_received>:
{
  4019c0:	b510      	push	{r4, lr}
	ASSERT(device);
  4019c2:	4604      	mov	r4, r0
  4019c4:	f240 12cb 	movw	r2, #459	; 0x1cb
  4019c8:	4905      	ldr	r1, [pc, #20]	; (4019e0 <_usart_sync_is_byte_received+0x20>)
  4019ca:	3000      	adds	r0, #0
  4019cc:	bf18      	it	ne
  4019ce:	2001      	movne	r0, #1
  4019d0:	4b04      	ldr	r3, [pc, #16]	; (4019e4 <_usart_sync_is_byte_received+0x24>)
  4019d2:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  4019d4:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  4019d6:	6958      	ldr	r0, [r3, #20]
  4019d8:	f000 0001 	and.w	r0, r0, #1
}
  4019dc:	bd10      	pop	{r4, pc}
  4019de:	bf00      	nop
  4019e0:	004026d8 	.word	0x004026d8
  4019e4:	00400c81 	.word	0x00400c81

004019e8 <_uart_get_usart_sync>:
}
  4019e8:	2000      	movs	r0, #0
  4019ea:	4770      	bx	lr

004019ec <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
  4019ec:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
  4019ee:	4604      	mov	r4, r0
  4019f0:	b168      	cbz	r0, 401a0e <_wdt_init+0x22>
  4019f2:	6803      	ldr	r3, [r0, #0]
  4019f4:	b14b      	cbz	r3, 401a0a <_wdt_init+0x1e>
  4019f6:	2001      	movs	r0, #1
  4019f8:	2233      	movs	r2, #51	; 0x33
  4019fa:	4906      	ldr	r1, [pc, #24]	; (401a14 <_wdt_init+0x28>)
  4019fc:	4b06      	ldr	r3, [pc, #24]	; (401a18 <_wdt_init+0x2c>)
  4019fe:	4798      	blx	r3

	hri_wdt_write_MR_reg(dev->hw, (hri_wdt_mr_reg_t)WDT_CONFIGURATION);
  401a00:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_wdt_write_MR_reg(const void *const hw, hri_wdt_mr_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR = data;
  401a02:	4a06      	ldr	r2, [pc, #24]	; (401a1c <_wdt_init+0x30>)
  401a04:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
  401a06:	2000      	movs	r0, #0
  401a08:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
  401a0a:	2000      	movs	r0, #0
  401a0c:	e7f4      	b.n	4019f8 <_wdt_init+0xc>
  401a0e:	2000      	movs	r0, #0
  401a10:	e7f2      	b.n	4019f8 <_wdt_init+0xc>
  401a12:	bf00      	nop
  401a14:	004026f0 	.word	0x004026f0
  401a18:	00400c81 	.word	0x00400c81
  401a1c:	3fffafff 	.word	0x3fffafff

00401a20 <main>:
#include "nRF24_driver.h"
#include "PWM_driver.h"
#include "BQ76925_driver.h"

int main(void)
{
  401a20:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401a22:	4b21      	ldr	r3, [pc, #132]	; (401aa8 <main+0x88>)
  401a24:	4798      	blx	r3
	//init_IMU(&imu_vector_buffer[0]);
	
	//uint8_t data_store[32];
	//memset(&data_store[0], 0, sizeof(uint8_t)*32);
	//nRF24_init(data_store);
	delay_us(500); //Should be 200 us, setting higher for testing
  401a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401a2a:	4b20      	ldr	r3, [pc, #128]	; (401aac <main+0x8c>)
  401a2c:	4798      	blx	r3
	//nRF24_enter_receive();
	pwm_enable(&PWM_0);
  401a2e:	4c20      	ldr	r4, [pc, #128]	; (401ab0 <main+0x90>)
  401a30:	4620      	mov	r0, r4
  401a32:	4b20      	ldr	r3, [pc, #128]	; (401ab4 <main+0x94>)
  401a34:	4798      	blx	r3
	
	set_pwm_motor_0(&(PWM_0.device), 100);
  401a36:	2164      	movs	r1, #100	; 0x64
  401a38:	4620      	mov	r0, r4
  401a3a:	4b1f      	ldr	r3, [pc, #124]	; (401ab8 <main+0x98>)
  401a3c:	4798      	blx	r3
	set_pwm_motor_1(&(PWM_0.device), 500);
  401a3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  401a42:	4620      	mov	r0, r4
  401a44:	4b1d      	ldr	r3, [pc, #116]	; (401abc <main+0x9c>)
  401a46:	4798      	blx	r3
	set_pwm_motor_2(&(PWM_0.device), 1300);
  401a48:	f240 5114 	movw	r1, #1300	; 0x514
  401a4c:	4620      	mov	r0, r4
  401a4e:	4b1c      	ldr	r3, [pc, #112]	; (401ac0 <main+0xa0>)
  401a50:	4798      	blx	r3
	set_pwm_motor_3(&(PWM_0.device), 2500);
  401a52:	f640 11c4 	movw	r1, #2500	; 0x9c4
  401a56:	4620      	mov	r0, r4
  401a58:	4b1a      	ldr	r3, [pc, #104]	; (401ac4 <main+0xa4>)
  401a5a:	4798      	blx	r3
	tmp = ((Pio *)hw)->PIO_ODSR;
  401a5c:	4b1a      	ldr	r3, [pc, #104]	; (401ac8 <main+0xa8>)
  401a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	tmp &= mask;
  401a60:	f002 0280 	and.w	r2, r2, #128	; 0x80
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  401a64:	43d1      	mvns	r1, r2
  401a66:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  401a6a:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401a6c:	635a      	str	r2, [r3, #52]	; 0x34
	tmp = ((Pio *)hw)->PIO_ODSR;
  401a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	tmp &= mask;
  401a70:	f002 0280 	and.w	r2, r2, #128	; 0x80
  401a74:	43d1      	mvns	r1, r2
  401a76:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  401a7a:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401a7c:	635a      	str	r2, [r3, #52]	; 0x34
	tmp = ((Pio *)hw)->PIO_ODSR;
  401a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	tmp &= mask;
  401a80:	f002 0280 	and.w	r2, r2, #128	; 0x80
  401a84:	43d1      	mvns	r1, r2
  401a86:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  401a8a:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401a8c:	635a      	str	r2, [r3, #52]	; 0x34
	tmp = ((Pio *)hw)->PIO_ODSR;
  401a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	tmp &= mask;
  401a90:	f002 0280 	and.w	r2, r2, #128	; 0x80
  401a94:	43d1      	mvns	r1, r2
  401a96:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  401a9a:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401a9c:	635a      	str	r2, [r3, #52]	; 0x34
	while (1) {
		gpio_toggle_pin_level(LED0);
		gpio_toggle_pin_level(LED0);
		gpio_toggle_pin_level(LED0);
		gpio_toggle_pin_level(LED0);
		delay_ms(500);
  401a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401aa2:	4b0a      	ldr	r3, [pc, #40]	; (401acc <main+0xac>)
  401aa4:	4798      	blx	r3
  401aa6:	e7d9      	b.n	401a5c <main+0x3c>
  401aa8:	004001c5 	.word	0x004001c5
  401aac:	004007c9 	.word	0x004007c9
  401ab0:	204000e8 	.word	0x204000e8
  401ab4:	004009d9 	.word	0x004009d9
  401ab8:	00401ae9 	.word	0x00401ae9
  401abc:	00401af9 	.word	0x00401af9
  401ac0:	00401b09 	.word	0x00401b09
  401ac4:	00401b19 	.word	0x00401b19
  401ac8:	400e1400 	.word	0x400e1400
  401acc:	004007e9 	.word	0x004007e9

00401ad0 <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  401ad0:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401ad2:	0149      	lsls	r1, r1, #5
  401ad4:	440b      	add	r3, r1
  401ad6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  401ada:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401adc:	4419      	add	r1, r3
  401ade:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  401ae2:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  401ae6:	4770      	bx	lr

00401ae8 <set_pwm_motor_0>:
}

//motor 0, PA13
void set_pwm_motor_0(struct _pwm_device *const device, uint32_t duty_cycle){
  401ae8:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_0, duty_cycle);
  401aea:	460a      	mov	r2, r1
  401aec:	2102      	movs	r1, #2
  401aee:	4b01      	ldr	r3, [pc, #4]	; (401af4 <set_pwm_motor_0+0xc>)
  401af0:	4798      	blx	r3
  401af2:	bd08      	pop	{r3, pc}
  401af4:	00401ad1 	.word	0x00401ad1

00401af8 <set_pwm_motor_1>:
}
//motor 1, PA17
void set_pwm_motor_1(struct _pwm_device *const device, uint32_t duty_cycle){
  401af8:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_1, duty_cycle);
  401afa:	460a      	mov	r2, r1
  401afc:	2103      	movs	r1, #3
  401afe:	4b01      	ldr	r3, [pc, #4]	; (401b04 <set_pwm_motor_1+0xc>)
  401b00:	4798      	blx	r3
  401b02:	bd08      	pop	{r3, pc}
  401b04:	00401ad1 	.word	0x00401ad1

00401b08 <set_pwm_motor_2>:
}
//motor 2, PA2
void set_pwm_motor_2(struct _pwm_device *const device,  uint32_t duty_cycle){
  401b08:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_2, duty_cycle);
  401b0a:	460a      	mov	r2, r1
  401b0c:	2101      	movs	r1, #1
  401b0e:	4b01      	ldr	r3, [pc, #4]	; (401b14 <set_pwm_motor_2+0xc>)
  401b10:	4798      	blx	r3
  401b12:	bd08      	pop	{r3, pc}
  401b14:	00401ad1 	.word	0x00401ad1

00401b18 <set_pwm_motor_3>:
}
//motor 3, PD11
void set_pwm_motor_3(struct _pwm_device *const device,  uint32_t duty_cycle){
  401b18:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_3, duty_cycle);
  401b1a:	460a      	mov	r2, r1
  401b1c:	2100      	movs	r1, #0
  401b1e:	4b01      	ldr	r3, [pc, #4]	; (401b24 <set_pwm_motor_3+0xc>)
  401b20:	4798      	blx	r3
  401b22:	bd08      	pop	{r3, pc}
  401b24:	00401ad1 	.word	0x00401ad1

00401b28 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401b28:	b958      	cbnz	r0, 401b42 <_read+0x1a>
{
  401b2a:	b508      	push	{r3, lr}
  401b2c:	460b      	mov	r3, r1
  401b2e:	4611      	mov	r1, r2
  401b30:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401b32:	4b05      	ldr	r3, [pc, #20]	; (401b48 <_read+0x20>)
  401b34:	4798      	blx	r3
	if (n < 0) {
  401b36:	2800      	cmp	r0, #0
  401b38:	db00      	blt.n	401b3c <_read+0x14>
		return -1;
	}

	return n;
}
  401b3a:	bd08      	pop	{r3, pc}
		return -1;
  401b3c:	f04f 30ff 	mov.w	r0, #4294967295
  401b40:	bd08      	pop	{r3, pc}
		return -1;
  401b42:	f04f 30ff 	mov.w	r0, #4294967295
  401b46:	4770      	bx	lr
  401b48:	00401ba1 	.word	0x00401ba1

00401b4c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401b4c:	3801      	subs	r0, #1
  401b4e:	2802      	cmp	r0, #2
  401b50:	d80b      	bhi.n	401b6a <_write+0x1e>
{
  401b52:	b508      	push	{r3, lr}
  401b54:	460b      	mov	r3, r1
  401b56:	4611      	mov	r1, r2
  401b58:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401b5a:	4b05      	ldr	r3, [pc, #20]	; (401b70 <_write+0x24>)
  401b5c:	4798      	blx	r3
	if (n < 0) {
  401b5e:	2800      	cmp	r0, #0
  401b60:	db00      	blt.n	401b64 <_write+0x18>
		return -1;
	}

	return n;
}
  401b62:	bd08      	pop	{r3, pc}
		return -1;
  401b64:	f04f 30ff 	mov.w	r0, #4294967295
  401b68:	bd08      	pop	{r3, pc}
		return -1;
  401b6a:	f04f 30ff 	mov.w	r0, #4294967295
  401b6e:	4770      	bx	lr
  401b70:	00401bc5 	.word	0x00401bc5

00401b74 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401b74:	b570      	push	{r4, r5, r6, lr}
  401b76:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401b78:	4d06      	ldr	r5, [pc, #24]	; (401b94 <stdio_io_init+0x20>)
  401b7a:	682b      	ldr	r3, [r5, #0]
  401b7c:	2100      	movs	r1, #0
  401b7e:	6898      	ldr	r0, [r3, #8]
  401b80:	4c05      	ldr	r4, [pc, #20]	; (401b98 <stdio_io_init+0x24>)
  401b82:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401b84:	682b      	ldr	r3, [r5, #0]
  401b86:	2100      	movs	r1, #0
  401b88:	6858      	ldr	r0, [r3, #4]
  401b8a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401b8c:	4b03      	ldr	r3, [pc, #12]	; (401b9c <stdio_io_init+0x28>)
  401b8e:	601e      	str	r6, [r3, #0]
  401b90:	bd70      	pop	{r4, r5, r6, pc}
  401b92:	bf00      	nop
  401b94:	20400000 	.word	0x20400000
  401b98:	00401de9 	.word	0x00401de9
  401b9c:	204000dc 	.word	0x204000dc

00401ba0 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401ba0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401ba2:	4b06      	ldr	r3, [pc, #24]	; (401bbc <stdio_io_read+0x1c>)
  401ba4:	681b      	ldr	r3, [r3, #0]
  401ba6:	b133      	cbz	r3, 401bb6 <stdio_io_read+0x16>
  401ba8:	460a      	mov	r2, r1
  401baa:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401bac:	b292      	uxth	r2, r2
  401bae:	4618      	mov	r0, r3
  401bb0:	4b03      	ldr	r3, [pc, #12]	; (401bc0 <stdio_io_read+0x20>)
  401bb2:	4798      	blx	r3
  401bb4:	bd08      	pop	{r3, pc}
		return 0;
  401bb6:	2000      	movs	r0, #0
}
  401bb8:	bd08      	pop	{r3, pc}
  401bba:	bf00      	nop
  401bbc:	204000dc 	.word	0x204000dc
  401bc0:	00400951 	.word	0x00400951

00401bc4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401bc4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401bc6:	4b06      	ldr	r3, [pc, #24]	; (401be0 <stdio_io_write+0x1c>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	b133      	cbz	r3, 401bda <stdio_io_write+0x16>
  401bcc:	460a      	mov	r2, r1
  401bce:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401bd0:	b292      	uxth	r2, r2
  401bd2:	4618      	mov	r0, r3
  401bd4:	4b03      	ldr	r3, [pc, #12]	; (401be4 <stdio_io_write+0x20>)
  401bd6:	4798      	blx	r3
  401bd8:	bd08      	pop	{r3, pc}
		return 0;
  401bda:	2000      	movs	r0, #0
}
  401bdc:	bd08      	pop	{r3, pc}
  401bde:	bf00      	nop
  401be0:	204000dc 	.word	0x204000dc
  401be4:	00400921 	.word	0x00400921

00401be8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401be8:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  401bea:	4c04      	ldr	r4, [pc, #16]	; (401bfc <stdio_redirect_init+0x14>)
  401bec:	4620      	mov	r0, r4
  401bee:	4b04      	ldr	r3, [pc, #16]	; (401c00 <stdio_redirect_init+0x18>)
  401bf0:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401bf2:	4620      	mov	r0, r4
  401bf4:	4b03      	ldr	r3, [pc, #12]	; (401c04 <stdio_redirect_init+0x1c>)
  401bf6:	4798      	blx	r3
  401bf8:	bd10      	pop	{r4, pc}
  401bfa:	bf00      	nop
  401bfc:	20400104 	.word	0x20400104
  401c00:	00400c55 	.word	0x00400c55
  401c04:	00401b75 	.word	0x00401b75

00401c08 <__libc_init_array>:
  401c08:	b570      	push	{r4, r5, r6, lr}
  401c0a:	4e0d      	ldr	r6, [pc, #52]	; (401c40 <__libc_init_array+0x38>)
  401c0c:	4c0d      	ldr	r4, [pc, #52]	; (401c44 <__libc_init_array+0x3c>)
  401c0e:	1ba4      	subs	r4, r4, r6
  401c10:	10a4      	asrs	r4, r4, #2
  401c12:	2500      	movs	r5, #0
  401c14:	42a5      	cmp	r5, r4
  401c16:	d109      	bne.n	401c2c <__libc_init_array+0x24>
  401c18:	4e0b      	ldr	r6, [pc, #44]	; (401c48 <__libc_init_array+0x40>)
  401c1a:	4c0c      	ldr	r4, [pc, #48]	; (401c4c <__libc_init_array+0x44>)
  401c1c:	f000 fda6 	bl	40276c <_init>
  401c20:	1ba4      	subs	r4, r4, r6
  401c22:	10a4      	asrs	r4, r4, #2
  401c24:	2500      	movs	r5, #0
  401c26:	42a5      	cmp	r5, r4
  401c28:	d105      	bne.n	401c36 <__libc_init_array+0x2e>
  401c2a:	bd70      	pop	{r4, r5, r6, pc}
  401c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401c30:	4798      	blx	r3
  401c32:	3501      	adds	r5, #1
  401c34:	e7ee      	b.n	401c14 <__libc_init_array+0xc>
  401c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401c3a:	4798      	blx	r3
  401c3c:	3501      	adds	r5, #1
  401c3e:	e7f2      	b.n	401c26 <__libc_init_array+0x1e>
  401c40:	00402778 	.word	0x00402778
  401c44:	00402778 	.word	0x00402778
  401c48:	00402778 	.word	0x00402778
  401c4c:	0040277c 	.word	0x0040277c

00401c50 <malloc>:
  401c50:	4b02      	ldr	r3, [pc, #8]	; (401c5c <malloc+0xc>)
  401c52:	4601      	mov	r1, r0
  401c54:	6818      	ldr	r0, [r3, #0]
  401c56:	f000 b859 	b.w	401d0c <_malloc_r>
  401c5a:	bf00      	nop
  401c5c:	20400000 	.word	0x20400000

00401c60 <memset>:
  401c60:	4402      	add	r2, r0
  401c62:	4603      	mov	r3, r0
  401c64:	4293      	cmp	r3, r2
  401c66:	d100      	bne.n	401c6a <memset+0xa>
  401c68:	4770      	bx	lr
  401c6a:	f803 1b01 	strb.w	r1, [r3], #1
  401c6e:	e7f9      	b.n	401c64 <memset+0x4>

00401c70 <_free_r>:
  401c70:	b538      	push	{r3, r4, r5, lr}
  401c72:	4605      	mov	r5, r0
  401c74:	2900      	cmp	r1, #0
  401c76:	d045      	beq.n	401d04 <_free_r+0x94>
  401c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401c7c:	1f0c      	subs	r4, r1, #4
  401c7e:	2b00      	cmp	r3, #0
  401c80:	bfb8      	it	lt
  401c82:	18e4      	addlt	r4, r4, r3
  401c84:	f000 fb06 	bl	402294 <__malloc_lock>
  401c88:	4a1f      	ldr	r2, [pc, #124]	; (401d08 <_free_r+0x98>)
  401c8a:	6813      	ldr	r3, [r2, #0]
  401c8c:	4610      	mov	r0, r2
  401c8e:	b933      	cbnz	r3, 401c9e <_free_r+0x2e>
  401c90:	6063      	str	r3, [r4, #4]
  401c92:	6014      	str	r4, [r2, #0]
  401c94:	4628      	mov	r0, r5
  401c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401c9a:	f000 bafc 	b.w	402296 <__malloc_unlock>
  401c9e:	42a3      	cmp	r3, r4
  401ca0:	d90c      	bls.n	401cbc <_free_r+0x4c>
  401ca2:	6821      	ldr	r1, [r4, #0]
  401ca4:	1862      	adds	r2, r4, r1
  401ca6:	4293      	cmp	r3, r2
  401ca8:	bf04      	itt	eq
  401caa:	681a      	ldreq	r2, [r3, #0]
  401cac:	685b      	ldreq	r3, [r3, #4]
  401cae:	6063      	str	r3, [r4, #4]
  401cb0:	bf04      	itt	eq
  401cb2:	1852      	addeq	r2, r2, r1
  401cb4:	6022      	streq	r2, [r4, #0]
  401cb6:	6004      	str	r4, [r0, #0]
  401cb8:	e7ec      	b.n	401c94 <_free_r+0x24>
  401cba:	4613      	mov	r3, r2
  401cbc:	685a      	ldr	r2, [r3, #4]
  401cbe:	b10a      	cbz	r2, 401cc4 <_free_r+0x54>
  401cc0:	42a2      	cmp	r2, r4
  401cc2:	d9fa      	bls.n	401cba <_free_r+0x4a>
  401cc4:	6819      	ldr	r1, [r3, #0]
  401cc6:	1858      	adds	r0, r3, r1
  401cc8:	42a0      	cmp	r0, r4
  401cca:	d10b      	bne.n	401ce4 <_free_r+0x74>
  401ccc:	6820      	ldr	r0, [r4, #0]
  401cce:	4401      	add	r1, r0
  401cd0:	1858      	adds	r0, r3, r1
  401cd2:	4282      	cmp	r2, r0
  401cd4:	6019      	str	r1, [r3, #0]
  401cd6:	d1dd      	bne.n	401c94 <_free_r+0x24>
  401cd8:	6810      	ldr	r0, [r2, #0]
  401cda:	6852      	ldr	r2, [r2, #4]
  401cdc:	605a      	str	r2, [r3, #4]
  401cde:	4401      	add	r1, r0
  401ce0:	6019      	str	r1, [r3, #0]
  401ce2:	e7d7      	b.n	401c94 <_free_r+0x24>
  401ce4:	d902      	bls.n	401cec <_free_r+0x7c>
  401ce6:	230c      	movs	r3, #12
  401ce8:	602b      	str	r3, [r5, #0]
  401cea:	e7d3      	b.n	401c94 <_free_r+0x24>
  401cec:	6820      	ldr	r0, [r4, #0]
  401cee:	1821      	adds	r1, r4, r0
  401cf0:	428a      	cmp	r2, r1
  401cf2:	bf04      	itt	eq
  401cf4:	6811      	ldreq	r1, [r2, #0]
  401cf6:	6852      	ldreq	r2, [r2, #4]
  401cf8:	6062      	str	r2, [r4, #4]
  401cfa:	bf04      	itt	eq
  401cfc:	1809      	addeq	r1, r1, r0
  401cfe:	6021      	streq	r1, [r4, #0]
  401d00:	605c      	str	r4, [r3, #4]
  401d02:	e7c7      	b.n	401c94 <_free_r+0x24>
  401d04:	bd38      	pop	{r3, r4, r5, pc}
  401d06:	bf00      	nop
  401d08:	204000e0 	.word	0x204000e0

00401d0c <_malloc_r>:
  401d0c:	b570      	push	{r4, r5, r6, lr}
  401d0e:	1ccd      	adds	r5, r1, #3
  401d10:	f025 0503 	bic.w	r5, r5, #3
  401d14:	3508      	adds	r5, #8
  401d16:	2d0c      	cmp	r5, #12
  401d18:	bf38      	it	cc
  401d1a:	250c      	movcc	r5, #12
  401d1c:	2d00      	cmp	r5, #0
  401d1e:	4606      	mov	r6, r0
  401d20:	db01      	blt.n	401d26 <_malloc_r+0x1a>
  401d22:	42a9      	cmp	r1, r5
  401d24:	d903      	bls.n	401d2e <_malloc_r+0x22>
  401d26:	230c      	movs	r3, #12
  401d28:	6033      	str	r3, [r6, #0]
  401d2a:	2000      	movs	r0, #0
  401d2c:	bd70      	pop	{r4, r5, r6, pc}
  401d2e:	f000 fab1 	bl	402294 <__malloc_lock>
  401d32:	4a23      	ldr	r2, [pc, #140]	; (401dc0 <_malloc_r+0xb4>)
  401d34:	6814      	ldr	r4, [r2, #0]
  401d36:	4621      	mov	r1, r4
  401d38:	b991      	cbnz	r1, 401d60 <_malloc_r+0x54>
  401d3a:	4c22      	ldr	r4, [pc, #136]	; (401dc4 <_malloc_r+0xb8>)
  401d3c:	6823      	ldr	r3, [r4, #0]
  401d3e:	b91b      	cbnz	r3, 401d48 <_malloc_r+0x3c>
  401d40:	4630      	mov	r0, r6
  401d42:	f000 f841 	bl	401dc8 <_sbrk_r>
  401d46:	6020      	str	r0, [r4, #0]
  401d48:	4629      	mov	r1, r5
  401d4a:	4630      	mov	r0, r6
  401d4c:	f000 f83c 	bl	401dc8 <_sbrk_r>
  401d50:	1c43      	adds	r3, r0, #1
  401d52:	d126      	bne.n	401da2 <_malloc_r+0x96>
  401d54:	230c      	movs	r3, #12
  401d56:	6033      	str	r3, [r6, #0]
  401d58:	4630      	mov	r0, r6
  401d5a:	f000 fa9c 	bl	402296 <__malloc_unlock>
  401d5e:	e7e4      	b.n	401d2a <_malloc_r+0x1e>
  401d60:	680b      	ldr	r3, [r1, #0]
  401d62:	1b5b      	subs	r3, r3, r5
  401d64:	d41a      	bmi.n	401d9c <_malloc_r+0x90>
  401d66:	2b0b      	cmp	r3, #11
  401d68:	d90f      	bls.n	401d8a <_malloc_r+0x7e>
  401d6a:	600b      	str	r3, [r1, #0]
  401d6c:	50cd      	str	r5, [r1, r3]
  401d6e:	18cc      	adds	r4, r1, r3
  401d70:	4630      	mov	r0, r6
  401d72:	f000 fa90 	bl	402296 <__malloc_unlock>
  401d76:	f104 000b 	add.w	r0, r4, #11
  401d7a:	1d23      	adds	r3, r4, #4
  401d7c:	f020 0007 	bic.w	r0, r0, #7
  401d80:	1ac3      	subs	r3, r0, r3
  401d82:	d01b      	beq.n	401dbc <_malloc_r+0xb0>
  401d84:	425a      	negs	r2, r3
  401d86:	50e2      	str	r2, [r4, r3]
  401d88:	bd70      	pop	{r4, r5, r6, pc}
  401d8a:	428c      	cmp	r4, r1
  401d8c:	bf0d      	iteet	eq
  401d8e:	6863      	ldreq	r3, [r4, #4]
  401d90:	684b      	ldrne	r3, [r1, #4]
  401d92:	6063      	strne	r3, [r4, #4]
  401d94:	6013      	streq	r3, [r2, #0]
  401d96:	bf18      	it	ne
  401d98:	460c      	movne	r4, r1
  401d9a:	e7e9      	b.n	401d70 <_malloc_r+0x64>
  401d9c:	460c      	mov	r4, r1
  401d9e:	6849      	ldr	r1, [r1, #4]
  401da0:	e7ca      	b.n	401d38 <_malloc_r+0x2c>
  401da2:	1cc4      	adds	r4, r0, #3
  401da4:	f024 0403 	bic.w	r4, r4, #3
  401da8:	42a0      	cmp	r0, r4
  401daa:	d005      	beq.n	401db8 <_malloc_r+0xac>
  401dac:	1a21      	subs	r1, r4, r0
  401dae:	4630      	mov	r0, r6
  401db0:	f000 f80a 	bl	401dc8 <_sbrk_r>
  401db4:	3001      	adds	r0, #1
  401db6:	d0cd      	beq.n	401d54 <_malloc_r+0x48>
  401db8:	6025      	str	r5, [r4, #0]
  401dba:	e7d9      	b.n	401d70 <_malloc_r+0x64>
  401dbc:	bd70      	pop	{r4, r5, r6, pc}
  401dbe:	bf00      	nop
  401dc0:	204000e0 	.word	0x204000e0
  401dc4:	204000e4 	.word	0x204000e4

00401dc8 <_sbrk_r>:
  401dc8:	b538      	push	{r3, r4, r5, lr}
  401dca:	4c06      	ldr	r4, [pc, #24]	; (401de4 <_sbrk_r+0x1c>)
  401dcc:	2300      	movs	r3, #0
  401dce:	4605      	mov	r5, r0
  401dd0:	4608      	mov	r0, r1
  401dd2:	6023      	str	r3, [r4, #0]
  401dd4:	f7fe ff58 	bl	400c88 <_sbrk>
  401dd8:	1c43      	adds	r3, r0, #1
  401dda:	d102      	bne.n	401de2 <_sbrk_r+0x1a>
  401ddc:	6823      	ldr	r3, [r4, #0]
  401dde:	b103      	cbz	r3, 401de2 <_sbrk_r+0x1a>
  401de0:	602b      	str	r3, [r5, #0]
  401de2:	bd38      	pop	{r3, r4, r5, pc}
  401de4:	2040016c 	.word	0x2040016c

00401de8 <setbuf>:
  401de8:	2900      	cmp	r1, #0
  401dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401dee:	bf0c      	ite	eq
  401df0:	2202      	moveq	r2, #2
  401df2:	2200      	movne	r2, #0
  401df4:	f000 b800 	b.w	401df8 <setvbuf>

00401df8 <setvbuf>:
  401df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401dfc:	461d      	mov	r5, r3
  401dfe:	4b51      	ldr	r3, [pc, #324]	; (401f44 <setvbuf+0x14c>)
  401e00:	681e      	ldr	r6, [r3, #0]
  401e02:	4604      	mov	r4, r0
  401e04:	460f      	mov	r7, r1
  401e06:	4690      	mov	r8, r2
  401e08:	b126      	cbz	r6, 401e14 <setvbuf+0x1c>
  401e0a:	69b3      	ldr	r3, [r6, #24]
  401e0c:	b913      	cbnz	r3, 401e14 <setvbuf+0x1c>
  401e0e:	4630      	mov	r0, r6
  401e10:	f000 f992 	bl	402138 <__sinit>
  401e14:	4b4c      	ldr	r3, [pc, #304]	; (401f48 <setvbuf+0x150>)
  401e16:	429c      	cmp	r4, r3
  401e18:	d152      	bne.n	401ec0 <setvbuf+0xc8>
  401e1a:	6874      	ldr	r4, [r6, #4]
  401e1c:	f1b8 0f02 	cmp.w	r8, #2
  401e20:	d006      	beq.n	401e30 <setvbuf+0x38>
  401e22:	f1b8 0f01 	cmp.w	r8, #1
  401e26:	f200 8089 	bhi.w	401f3c <setvbuf+0x144>
  401e2a:	2d00      	cmp	r5, #0
  401e2c:	f2c0 8086 	blt.w	401f3c <setvbuf+0x144>
  401e30:	4621      	mov	r1, r4
  401e32:	4630      	mov	r0, r6
  401e34:	f000 f916 	bl	402064 <_fflush_r>
  401e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401e3a:	b141      	cbz	r1, 401e4e <setvbuf+0x56>
  401e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401e40:	4299      	cmp	r1, r3
  401e42:	d002      	beq.n	401e4a <setvbuf+0x52>
  401e44:	4630      	mov	r0, r6
  401e46:	f7ff ff13 	bl	401c70 <_free_r>
  401e4a:	2300      	movs	r3, #0
  401e4c:	6363      	str	r3, [r4, #52]	; 0x34
  401e4e:	2300      	movs	r3, #0
  401e50:	61a3      	str	r3, [r4, #24]
  401e52:	6063      	str	r3, [r4, #4]
  401e54:	89a3      	ldrh	r3, [r4, #12]
  401e56:	061b      	lsls	r3, r3, #24
  401e58:	d503      	bpl.n	401e62 <setvbuf+0x6a>
  401e5a:	6921      	ldr	r1, [r4, #16]
  401e5c:	4630      	mov	r0, r6
  401e5e:	f7ff ff07 	bl	401c70 <_free_r>
  401e62:	89a3      	ldrh	r3, [r4, #12]
  401e64:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401e68:	f023 0303 	bic.w	r3, r3, #3
  401e6c:	f1b8 0f02 	cmp.w	r8, #2
  401e70:	81a3      	strh	r3, [r4, #12]
  401e72:	d05d      	beq.n	401f30 <setvbuf+0x138>
  401e74:	ab01      	add	r3, sp, #4
  401e76:	466a      	mov	r2, sp
  401e78:	4621      	mov	r1, r4
  401e7a:	4630      	mov	r0, r6
  401e7c:	f000 f9e6 	bl	40224c <__swhatbuf_r>
  401e80:	89a3      	ldrh	r3, [r4, #12]
  401e82:	4318      	orrs	r0, r3
  401e84:	81a0      	strh	r0, [r4, #12]
  401e86:	bb2d      	cbnz	r5, 401ed4 <setvbuf+0xdc>
  401e88:	9d00      	ldr	r5, [sp, #0]
  401e8a:	4628      	mov	r0, r5
  401e8c:	f7ff fee0 	bl	401c50 <malloc>
  401e90:	4607      	mov	r7, r0
  401e92:	2800      	cmp	r0, #0
  401e94:	d14e      	bne.n	401f34 <setvbuf+0x13c>
  401e96:	f8dd 9000 	ldr.w	r9, [sp]
  401e9a:	45a9      	cmp	r9, r5
  401e9c:	d13c      	bne.n	401f18 <setvbuf+0x120>
  401e9e:	f04f 30ff 	mov.w	r0, #4294967295
  401ea2:	89a3      	ldrh	r3, [r4, #12]
  401ea4:	f043 0302 	orr.w	r3, r3, #2
  401ea8:	81a3      	strh	r3, [r4, #12]
  401eaa:	2300      	movs	r3, #0
  401eac:	60a3      	str	r3, [r4, #8]
  401eae:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401eb2:	6023      	str	r3, [r4, #0]
  401eb4:	6123      	str	r3, [r4, #16]
  401eb6:	2301      	movs	r3, #1
  401eb8:	6163      	str	r3, [r4, #20]
  401eba:	b003      	add	sp, #12
  401ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ec0:	4b22      	ldr	r3, [pc, #136]	; (401f4c <setvbuf+0x154>)
  401ec2:	429c      	cmp	r4, r3
  401ec4:	d101      	bne.n	401eca <setvbuf+0xd2>
  401ec6:	68b4      	ldr	r4, [r6, #8]
  401ec8:	e7a8      	b.n	401e1c <setvbuf+0x24>
  401eca:	4b21      	ldr	r3, [pc, #132]	; (401f50 <setvbuf+0x158>)
  401ecc:	429c      	cmp	r4, r3
  401ece:	bf08      	it	eq
  401ed0:	68f4      	ldreq	r4, [r6, #12]
  401ed2:	e7a3      	b.n	401e1c <setvbuf+0x24>
  401ed4:	2f00      	cmp	r7, #0
  401ed6:	d0d8      	beq.n	401e8a <setvbuf+0x92>
  401ed8:	69b3      	ldr	r3, [r6, #24]
  401eda:	b913      	cbnz	r3, 401ee2 <setvbuf+0xea>
  401edc:	4630      	mov	r0, r6
  401ede:	f000 f92b 	bl	402138 <__sinit>
  401ee2:	f1b8 0f01 	cmp.w	r8, #1
  401ee6:	bf08      	it	eq
  401ee8:	89a3      	ldrheq	r3, [r4, #12]
  401eea:	6027      	str	r7, [r4, #0]
  401eec:	bf04      	itt	eq
  401eee:	f043 0301 	orreq.w	r3, r3, #1
  401ef2:	81a3      	strheq	r3, [r4, #12]
  401ef4:	89a3      	ldrh	r3, [r4, #12]
  401ef6:	6127      	str	r7, [r4, #16]
  401ef8:	f013 0008 	ands.w	r0, r3, #8
  401efc:	6165      	str	r5, [r4, #20]
  401efe:	d01b      	beq.n	401f38 <setvbuf+0x140>
  401f00:	f013 0001 	ands.w	r0, r3, #1
  401f04:	bf18      	it	ne
  401f06:	426d      	negne	r5, r5
  401f08:	f04f 0300 	mov.w	r3, #0
  401f0c:	bf1d      	ittte	ne
  401f0e:	60a3      	strne	r3, [r4, #8]
  401f10:	61a5      	strne	r5, [r4, #24]
  401f12:	4618      	movne	r0, r3
  401f14:	60a5      	streq	r5, [r4, #8]
  401f16:	e7d0      	b.n	401eba <setvbuf+0xc2>
  401f18:	4648      	mov	r0, r9
  401f1a:	f7ff fe99 	bl	401c50 <malloc>
  401f1e:	4607      	mov	r7, r0
  401f20:	2800      	cmp	r0, #0
  401f22:	d0bc      	beq.n	401e9e <setvbuf+0xa6>
  401f24:	89a3      	ldrh	r3, [r4, #12]
  401f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401f2a:	81a3      	strh	r3, [r4, #12]
  401f2c:	464d      	mov	r5, r9
  401f2e:	e7d3      	b.n	401ed8 <setvbuf+0xe0>
  401f30:	2000      	movs	r0, #0
  401f32:	e7b6      	b.n	401ea2 <setvbuf+0xaa>
  401f34:	46a9      	mov	r9, r5
  401f36:	e7f5      	b.n	401f24 <setvbuf+0x12c>
  401f38:	60a0      	str	r0, [r4, #8]
  401f3a:	e7be      	b.n	401eba <setvbuf+0xc2>
  401f3c:	f04f 30ff 	mov.w	r0, #4294967295
  401f40:	e7bb      	b.n	401eba <setvbuf+0xc2>
  401f42:	bf00      	nop
  401f44:	20400000 	.word	0x20400000
  401f48:	0040272c 	.word	0x0040272c
  401f4c:	0040274c 	.word	0x0040274c
  401f50:	0040270c 	.word	0x0040270c

00401f54 <__sflush_r>:
  401f54:	898a      	ldrh	r2, [r1, #12]
  401f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f5a:	4605      	mov	r5, r0
  401f5c:	0710      	lsls	r0, r2, #28
  401f5e:	460c      	mov	r4, r1
  401f60:	d45a      	bmi.n	402018 <__sflush_r+0xc4>
  401f62:	684b      	ldr	r3, [r1, #4]
  401f64:	2b00      	cmp	r3, #0
  401f66:	dc05      	bgt.n	401f74 <__sflush_r+0x20>
  401f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401f6a:	2b00      	cmp	r3, #0
  401f6c:	dc02      	bgt.n	401f74 <__sflush_r+0x20>
  401f6e:	2000      	movs	r0, #0
  401f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401f76:	2e00      	cmp	r6, #0
  401f78:	d0f9      	beq.n	401f6e <__sflush_r+0x1a>
  401f7a:	2300      	movs	r3, #0
  401f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  401f80:	682f      	ldr	r7, [r5, #0]
  401f82:	602b      	str	r3, [r5, #0]
  401f84:	d033      	beq.n	401fee <__sflush_r+0x9a>
  401f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401f88:	89a3      	ldrh	r3, [r4, #12]
  401f8a:	075a      	lsls	r2, r3, #29
  401f8c:	d505      	bpl.n	401f9a <__sflush_r+0x46>
  401f8e:	6863      	ldr	r3, [r4, #4]
  401f90:	1ac0      	subs	r0, r0, r3
  401f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401f94:	b10b      	cbz	r3, 401f9a <__sflush_r+0x46>
  401f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401f98:	1ac0      	subs	r0, r0, r3
  401f9a:	2300      	movs	r3, #0
  401f9c:	4602      	mov	r2, r0
  401f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401fa0:	6a21      	ldr	r1, [r4, #32]
  401fa2:	4628      	mov	r0, r5
  401fa4:	47b0      	blx	r6
  401fa6:	1c43      	adds	r3, r0, #1
  401fa8:	89a3      	ldrh	r3, [r4, #12]
  401faa:	d106      	bne.n	401fba <__sflush_r+0x66>
  401fac:	6829      	ldr	r1, [r5, #0]
  401fae:	291d      	cmp	r1, #29
  401fb0:	d84b      	bhi.n	40204a <__sflush_r+0xf6>
  401fb2:	4a2b      	ldr	r2, [pc, #172]	; (402060 <__sflush_r+0x10c>)
  401fb4:	40ca      	lsrs	r2, r1
  401fb6:	07d6      	lsls	r6, r2, #31
  401fb8:	d547      	bpl.n	40204a <__sflush_r+0xf6>
  401fba:	2200      	movs	r2, #0
  401fbc:	6062      	str	r2, [r4, #4]
  401fbe:	04d9      	lsls	r1, r3, #19
  401fc0:	6922      	ldr	r2, [r4, #16]
  401fc2:	6022      	str	r2, [r4, #0]
  401fc4:	d504      	bpl.n	401fd0 <__sflush_r+0x7c>
  401fc6:	1c42      	adds	r2, r0, #1
  401fc8:	d101      	bne.n	401fce <__sflush_r+0x7a>
  401fca:	682b      	ldr	r3, [r5, #0]
  401fcc:	b903      	cbnz	r3, 401fd0 <__sflush_r+0x7c>
  401fce:	6560      	str	r0, [r4, #84]	; 0x54
  401fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401fd2:	602f      	str	r7, [r5, #0]
  401fd4:	2900      	cmp	r1, #0
  401fd6:	d0ca      	beq.n	401f6e <__sflush_r+0x1a>
  401fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401fdc:	4299      	cmp	r1, r3
  401fde:	d002      	beq.n	401fe6 <__sflush_r+0x92>
  401fe0:	4628      	mov	r0, r5
  401fe2:	f7ff fe45 	bl	401c70 <_free_r>
  401fe6:	2000      	movs	r0, #0
  401fe8:	6360      	str	r0, [r4, #52]	; 0x34
  401fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401fee:	6a21      	ldr	r1, [r4, #32]
  401ff0:	2301      	movs	r3, #1
  401ff2:	4628      	mov	r0, r5
  401ff4:	47b0      	blx	r6
  401ff6:	1c41      	adds	r1, r0, #1
  401ff8:	d1c6      	bne.n	401f88 <__sflush_r+0x34>
  401ffa:	682b      	ldr	r3, [r5, #0]
  401ffc:	2b00      	cmp	r3, #0
  401ffe:	d0c3      	beq.n	401f88 <__sflush_r+0x34>
  402000:	2b1d      	cmp	r3, #29
  402002:	d001      	beq.n	402008 <__sflush_r+0xb4>
  402004:	2b16      	cmp	r3, #22
  402006:	d101      	bne.n	40200c <__sflush_r+0xb8>
  402008:	602f      	str	r7, [r5, #0]
  40200a:	e7b0      	b.n	401f6e <__sflush_r+0x1a>
  40200c:	89a3      	ldrh	r3, [r4, #12]
  40200e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402012:	81a3      	strh	r3, [r4, #12]
  402014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402018:	690f      	ldr	r7, [r1, #16]
  40201a:	2f00      	cmp	r7, #0
  40201c:	d0a7      	beq.n	401f6e <__sflush_r+0x1a>
  40201e:	0793      	lsls	r3, r2, #30
  402020:	680e      	ldr	r6, [r1, #0]
  402022:	bf08      	it	eq
  402024:	694b      	ldreq	r3, [r1, #20]
  402026:	600f      	str	r7, [r1, #0]
  402028:	bf18      	it	ne
  40202a:	2300      	movne	r3, #0
  40202c:	eba6 0807 	sub.w	r8, r6, r7
  402030:	608b      	str	r3, [r1, #8]
  402032:	f1b8 0f00 	cmp.w	r8, #0
  402036:	dd9a      	ble.n	401f6e <__sflush_r+0x1a>
  402038:	4643      	mov	r3, r8
  40203a:	463a      	mov	r2, r7
  40203c:	6a21      	ldr	r1, [r4, #32]
  40203e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  402040:	4628      	mov	r0, r5
  402042:	47b0      	blx	r6
  402044:	2800      	cmp	r0, #0
  402046:	dc07      	bgt.n	402058 <__sflush_r+0x104>
  402048:	89a3      	ldrh	r3, [r4, #12]
  40204a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40204e:	81a3      	strh	r3, [r4, #12]
  402050:	f04f 30ff 	mov.w	r0, #4294967295
  402054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402058:	4407      	add	r7, r0
  40205a:	eba8 0800 	sub.w	r8, r8, r0
  40205e:	e7e8      	b.n	402032 <__sflush_r+0xde>
  402060:	20400001 	.word	0x20400001

00402064 <_fflush_r>:
  402064:	b538      	push	{r3, r4, r5, lr}
  402066:	690b      	ldr	r3, [r1, #16]
  402068:	4605      	mov	r5, r0
  40206a:	460c      	mov	r4, r1
  40206c:	b1db      	cbz	r3, 4020a6 <_fflush_r+0x42>
  40206e:	b118      	cbz	r0, 402078 <_fflush_r+0x14>
  402070:	6983      	ldr	r3, [r0, #24]
  402072:	b90b      	cbnz	r3, 402078 <_fflush_r+0x14>
  402074:	f000 f860 	bl	402138 <__sinit>
  402078:	4b0c      	ldr	r3, [pc, #48]	; (4020ac <_fflush_r+0x48>)
  40207a:	429c      	cmp	r4, r3
  40207c:	d109      	bne.n	402092 <_fflush_r+0x2e>
  40207e:	686c      	ldr	r4, [r5, #4]
  402080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402084:	b17b      	cbz	r3, 4020a6 <_fflush_r+0x42>
  402086:	4621      	mov	r1, r4
  402088:	4628      	mov	r0, r5
  40208a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40208e:	f7ff bf61 	b.w	401f54 <__sflush_r>
  402092:	4b07      	ldr	r3, [pc, #28]	; (4020b0 <_fflush_r+0x4c>)
  402094:	429c      	cmp	r4, r3
  402096:	d101      	bne.n	40209c <_fflush_r+0x38>
  402098:	68ac      	ldr	r4, [r5, #8]
  40209a:	e7f1      	b.n	402080 <_fflush_r+0x1c>
  40209c:	4b05      	ldr	r3, [pc, #20]	; (4020b4 <_fflush_r+0x50>)
  40209e:	429c      	cmp	r4, r3
  4020a0:	bf08      	it	eq
  4020a2:	68ec      	ldreq	r4, [r5, #12]
  4020a4:	e7ec      	b.n	402080 <_fflush_r+0x1c>
  4020a6:	2000      	movs	r0, #0
  4020a8:	bd38      	pop	{r3, r4, r5, pc}
  4020aa:	bf00      	nop
  4020ac:	0040272c 	.word	0x0040272c
  4020b0:	0040274c 	.word	0x0040274c
  4020b4:	0040270c 	.word	0x0040270c

004020b8 <_cleanup_r>:
  4020b8:	4901      	ldr	r1, [pc, #4]	; (4020c0 <_cleanup_r+0x8>)
  4020ba:	f000 b8a9 	b.w	402210 <_fwalk_reent>
  4020be:	bf00      	nop
  4020c0:	00402065 	.word	0x00402065

004020c4 <std.isra.0>:
  4020c4:	2300      	movs	r3, #0
  4020c6:	b510      	push	{r4, lr}
  4020c8:	4604      	mov	r4, r0
  4020ca:	6003      	str	r3, [r0, #0]
  4020cc:	6043      	str	r3, [r0, #4]
  4020ce:	6083      	str	r3, [r0, #8]
  4020d0:	8181      	strh	r1, [r0, #12]
  4020d2:	6643      	str	r3, [r0, #100]	; 0x64
  4020d4:	81c2      	strh	r2, [r0, #14]
  4020d6:	6103      	str	r3, [r0, #16]
  4020d8:	6143      	str	r3, [r0, #20]
  4020da:	6183      	str	r3, [r0, #24]
  4020dc:	4619      	mov	r1, r3
  4020de:	2208      	movs	r2, #8
  4020e0:	305c      	adds	r0, #92	; 0x5c
  4020e2:	f7ff fdbd 	bl	401c60 <memset>
  4020e6:	4b05      	ldr	r3, [pc, #20]	; (4020fc <std.isra.0+0x38>)
  4020e8:	6263      	str	r3, [r4, #36]	; 0x24
  4020ea:	4b05      	ldr	r3, [pc, #20]	; (402100 <std.isra.0+0x3c>)
  4020ec:	62a3      	str	r3, [r4, #40]	; 0x28
  4020ee:	4b05      	ldr	r3, [pc, #20]	; (402104 <std.isra.0+0x40>)
  4020f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  4020f2:	4b05      	ldr	r3, [pc, #20]	; (402108 <std.isra.0+0x44>)
  4020f4:	6224      	str	r4, [r4, #32]
  4020f6:	6323      	str	r3, [r4, #48]	; 0x30
  4020f8:	bd10      	pop	{r4, pc}
  4020fa:	bf00      	nop
  4020fc:	00402299 	.word	0x00402299
  402100:	004022bb 	.word	0x004022bb
  402104:	004022f3 	.word	0x004022f3
  402108:	00402317 	.word	0x00402317

0040210c <__sfmoreglue>:
  40210c:	b570      	push	{r4, r5, r6, lr}
  40210e:	1e4a      	subs	r2, r1, #1
  402110:	2568      	movs	r5, #104	; 0x68
  402112:	4355      	muls	r5, r2
  402114:	460e      	mov	r6, r1
  402116:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40211a:	f7ff fdf7 	bl	401d0c <_malloc_r>
  40211e:	4604      	mov	r4, r0
  402120:	b140      	cbz	r0, 402134 <__sfmoreglue+0x28>
  402122:	2100      	movs	r1, #0
  402124:	e880 0042 	stmia.w	r0, {r1, r6}
  402128:	300c      	adds	r0, #12
  40212a:	60a0      	str	r0, [r4, #8]
  40212c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  402130:	f7ff fd96 	bl	401c60 <memset>
  402134:	4620      	mov	r0, r4
  402136:	bd70      	pop	{r4, r5, r6, pc}

00402138 <__sinit>:
  402138:	6983      	ldr	r3, [r0, #24]
  40213a:	b510      	push	{r4, lr}
  40213c:	4604      	mov	r4, r0
  40213e:	bb33      	cbnz	r3, 40218e <__sinit+0x56>
  402140:	6483      	str	r3, [r0, #72]	; 0x48
  402142:	64c3      	str	r3, [r0, #76]	; 0x4c
  402144:	6503      	str	r3, [r0, #80]	; 0x50
  402146:	4b12      	ldr	r3, [pc, #72]	; (402190 <__sinit+0x58>)
  402148:	4a12      	ldr	r2, [pc, #72]	; (402194 <__sinit+0x5c>)
  40214a:	681b      	ldr	r3, [r3, #0]
  40214c:	6282      	str	r2, [r0, #40]	; 0x28
  40214e:	4298      	cmp	r0, r3
  402150:	bf04      	itt	eq
  402152:	2301      	moveq	r3, #1
  402154:	6183      	streq	r3, [r0, #24]
  402156:	f000 f81f 	bl	402198 <__sfp>
  40215a:	6060      	str	r0, [r4, #4]
  40215c:	4620      	mov	r0, r4
  40215e:	f000 f81b 	bl	402198 <__sfp>
  402162:	60a0      	str	r0, [r4, #8]
  402164:	4620      	mov	r0, r4
  402166:	f000 f817 	bl	402198 <__sfp>
  40216a:	2200      	movs	r2, #0
  40216c:	60e0      	str	r0, [r4, #12]
  40216e:	2104      	movs	r1, #4
  402170:	6860      	ldr	r0, [r4, #4]
  402172:	f7ff ffa7 	bl	4020c4 <std.isra.0>
  402176:	2201      	movs	r2, #1
  402178:	2109      	movs	r1, #9
  40217a:	68a0      	ldr	r0, [r4, #8]
  40217c:	f7ff ffa2 	bl	4020c4 <std.isra.0>
  402180:	2202      	movs	r2, #2
  402182:	2112      	movs	r1, #18
  402184:	68e0      	ldr	r0, [r4, #12]
  402186:	f7ff ff9d 	bl	4020c4 <std.isra.0>
  40218a:	2301      	movs	r3, #1
  40218c:	61a3      	str	r3, [r4, #24]
  40218e:	bd10      	pop	{r4, pc}
  402190:	00402708 	.word	0x00402708
  402194:	004020b9 	.word	0x004020b9

00402198 <__sfp>:
  402198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40219a:	4b1c      	ldr	r3, [pc, #112]	; (40220c <__sfp+0x74>)
  40219c:	681e      	ldr	r6, [r3, #0]
  40219e:	69b3      	ldr	r3, [r6, #24]
  4021a0:	4607      	mov	r7, r0
  4021a2:	b913      	cbnz	r3, 4021aa <__sfp+0x12>
  4021a4:	4630      	mov	r0, r6
  4021a6:	f7ff ffc7 	bl	402138 <__sinit>
  4021aa:	3648      	adds	r6, #72	; 0x48
  4021ac:	68b4      	ldr	r4, [r6, #8]
  4021ae:	6873      	ldr	r3, [r6, #4]
  4021b0:	3b01      	subs	r3, #1
  4021b2:	d503      	bpl.n	4021bc <__sfp+0x24>
  4021b4:	6833      	ldr	r3, [r6, #0]
  4021b6:	b133      	cbz	r3, 4021c6 <__sfp+0x2e>
  4021b8:	6836      	ldr	r6, [r6, #0]
  4021ba:	e7f7      	b.n	4021ac <__sfp+0x14>
  4021bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4021c0:	b16d      	cbz	r5, 4021de <__sfp+0x46>
  4021c2:	3468      	adds	r4, #104	; 0x68
  4021c4:	e7f4      	b.n	4021b0 <__sfp+0x18>
  4021c6:	2104      	movs	r1, #4
  4021c8:	4638      	mov	r0, r7
  4021ca:	f7ff ff9f 	bl	40210c <__sfmoreglue>
  4021ce:	6030      	str	r0, [r6, #0]
  4021d0:	2800      	cmp	r0, #0
  4021d2:	d1f1      	bne.n	4021b8 <__sfp+0x20>
  4021d4:	230c      	movs	r3, #12
  4021d6:	603b      	str	r3, [r7, #0]
  4021d8:	4604      	mov	r4, r0
  4021da:	4620      	mov	r0, r4
  4021dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4021e2:	81e3      	strh	r3, [r4, #14]
  4021e4:	2301      	movs	r3, #1
  4021e6:	81a3      	strh	r3, [r4, #12]
  4021e8:	6665      	str	r5, [r4, #100]	; 0x64
  4021ea:	6025      	str	r5, [r4, #0]
  4021ec:	60a5      	str	r5, [r4, #8]
  4021ee:	6065      	str	r5, [r4, #4]
  4021f0:	6125      	str	r5, [r4, #16]
  4021f2:	6165      	str	r5, [r4, #20]
  4021f4:	61a5      	str	r5, [r4, #24]
  4021f6:	2208      	movs	r2, #8
  4021f8:	4629      	mov	r1, r5
  4021fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4021fe:	f7ff fd2f 	bl	401c60 <memset>
  402202:	6365      	str	r5, [r4, #52]	; 0x34
  402204:	63a5      	str	r5, [r4, #56]	; 0x38
  402206:	64a5      	str	r5, [r4, #72]	; 0x48
  402208:	64e5      	str	r5, [r4, #76]	; 0x4c
  40220a:	e7e6      	b.n	4021da <__sfp+0x42>
  40220c:	00402708 	.word	0x00402708

00402210 <_fwalk_reent>:
  402210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402214:	4680      	mov	r8, r0
  402216:	4689      	mov	r9, r1
  402218:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40221c:	2600      	movs	r6, #0
  40221e:	b914      	cbnz	r4, 402226 <_fwalk_reent+0x16>
  402220:	4630      	mov	r0, r6
  402222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402226:	68a5      	ldr	r5, [r4, #8]
  402228:	6867      	ldr	r7, [r4, #4]
  40222a:	3f01      	subs	r7, #1
  40222c:	d501      	bpl.n	402232 <_fwalk_reent+0x22>
  40222e:	6824      	ldr	r4, [r4, #0]
  402230:	e7f5      	b.n	40221e <_fwalk_reent+0xe>
  402232:	89ab      	ldrh	r3, [r5, #12]
  402234:	2b01      	cmp	r3, #1
  402236:	d907      	bls.n	402248 <_fwalk_reent+0x38>
  402238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40223c:	3301      	adds	r3, #1
  40223e:	d003      	beq.n	402248 <_fwalk_reent+0x38>
  402240:	4629      	mov	r1, r5
  402242:	4640      	mov	r0, r8
  402244:	47c8      	blx	r9
  402246:	4306      	orrs	r6, r0
  402248:	3568      	adds	r5, #104	; 0x68
  40224a:	e7ee      	b.n	40222a <_fwalk_reent+0x1a>

0040224c <__swhatbuf_r>:
  40224c:	b570      	push	{r4, r5, r6, lr}
  40224e:	460e      	mov	r6, r1
  402250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402254:	2900      	cmp	r1, #0
  402256:	b090      	sub	sp, #64	; 0x40
  402258:	4614      	mov	r4, r2
  40225a:	461d      	mov	r5, r3
  40225c:	da07      	bge.n	40226e <__swhatbuf_r+0x22>
  40225e:	2300      	movs	r3, #0
  402260:	602b      	str	r3, [r5, #0]
  402262:	89b3      	ldrh	r3, [r6, #12]
  402264:	061a      	lsls	r2, r3, #24
  402266:	d410      	bmi.n	40228a <__swhatbuf_r+0x3e>
  402268:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40226c:	e00e      	b.n	40228c <__swhatbuf_r+0x40>
  40226e:	aa01      	add	r2, sp, #4
  402270:	f000 f878 	bl	402364 <_fstat_r>
  402274:	2800      	cmp	r0, #0
  402276:	dbf2      	blt.n	40225e <__swhatbuf_r+0x12>
  402278:	9a02      	ldr	r2, [sp, #8]
  40227a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40227e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  402282:	425a      	negs	r2, r3
  402284:	415a      	adcs	r2, r3
  402286:	602a      	str	r2, [r5, #0]
  402288:	e7ee      	b.n	402268 <__swhatbuf_r+0x1c>
  40228a:	2340      	movs	r3, #64	; 0x40
  40228c:	2000      	movs	r0, #0
  40228e:	6023      	str	r3, [r4, #0]
  402290:	b010      	add	sp, #64	; 0x40
  402292:	bd70      	pop	{r4, r5, r6, pc}

00402294 <__malloc_lock>:
  402294:	4770      	bx	lr

00402296 <__malloc_unlock>:
  402296:	4770      	bx	lr

00402298 <__sread>:
  402298:	b510      	push	{r4, lr}
  40229a:	460c      	mov	r4, r1
  40229c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4022a0:	f000 f884 	bl	4023ac <_read_r>
  4022a4:	2800      	cmp	r0, #0
  4022a6:	bfab      	itete	ge
  4022a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4022aa:	89a3      	ldrhlt	r3, [r4, #12]
  4022ac:	181b      	addge	r3, r3, r0
  4022ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4022b2:	bfac      	ite	ge
  4022b4:	6563      	strge	r3, [r4, #84]	; 0x54
  4022b6:	81a3      	strhlt	r3, [r4, #12]
  4022b8:	bd10      	pop	{r4, pc}

004022ba <__swrite>:
  4022ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022be:	461f      	mov	r7, r3
  4022c0:	898b      	ldrh	r3, [r1, #12]
  4022c2:	05db      	lsls	r3, r3, #23
  4022c4:	4605      	mov	r5, r0
  4022c6:	460c      	mov	r4, r1
  4022c8:	4616      	mov	r6, r2
  4022ca:	d505      	bpl.n	4022d8 <__swrite+0x1e>
  4022cc:	2302      	movs	r3, #2
  4022ce:	2200      	movs	r2, #0
  4022d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4022d4:	f000 f858 	bl	402388 <_lseek_r>
  4022d8:	89a3      	ldrh	r3, [r4, #12]
  4022da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4022de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4022e2:	81a3      	strh	r3, [r4, #12]
  4022e4:	4632      	mov	r2, r6
  4022e6:	463b      	mov	r3, r7
  4022e8:	4628      	mov	r0, r5
  4022ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4022ee:	f000 b817 	b.w	402320 <_write_r>

004022f2 <__sseek>:
  4022f2:	b510      	push	{r4, lr}
  4022f4:	460c      	mov	r4, r1
  4022f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4022fa:	f000 f845 	bl	402388 <_lseek_r>
  4022fe:	1c43      	adds	r3, r0, #1
  402300:	89a3      	ldrh	r3, [r4, #12]
  402302:	bf15      	itete	ne
  402304:	6560      	strne	r0, [r4, #84]	; 0x54
  402306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40230a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40230e:	81a3      	strheq	r3, [r4, #12]
  402310:	bf18      	it	ne
  402312:	81a3      	strhne	r3, [r4, #12]
  402314:	bd10      	pop	{r4, pc}

00402316 <__sclose>:
  402316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40231a:	f000 b813 	b.w	402344 <_close_r>
	...

00402320 <_write_r>:
  402320:	b538      	push	{r3, r4, r5, lr}
  402322:	4c07      	ldr	r4, [pc, #28]	; (402340 <_write_r+0x20>)
  402324:	4605      	mov	r5, r0
  402326:	4608      	mov	r0, r1
  402328:	4611      	mov	r1, r2
  40232a:	2200      	movs	r2, #0
  40232c:	6022      	str	r2, [r4, #0]
  40232e:	461a      	mov	r2, r3
  402330:	f7ff fc0c 	bl	401b4c <_write>
  402334:	1c43      	adds	r3, r0, #1
  402336:	d102      	bne.n	40233e <_write_r+0x1e>
  402338:	6823      	ldr	r3, [r4, #0]
  40233a:	b103      	cbz	r3, 40233e <_write_r+0x1e>
  40233c:	602b      	str	r3, [r5, #0]
  40233e:	bd38      	pop	{r3, r4, r5, pc}
  402340:	2040016c 	.word	0x2040016c

00402344 <_close_r>:
  402344:	b538      	push	{r3, r4, r5, lr}
  402346:	4c06      	ldr	r4, [pc, #24]	; (402360 <_close_r+0x1c>)
  402348:	2300      	movs	r3, #0
  40234a:	4605      	mov	r5, r0
  40234c:	4608      	mov	r0, r1
  40234e:	6023      	str	r3, [r4, #0]
  402350:	f7fe fcac 	bl	400cac <_close>
  402354:	1c43      	adds	r3, r0, #1
  402356:	d102      	bne.n	40235e <_close_r+0x1a>
  402358:	6823      	ldr	r3, [r4, #0]
  40235a:	b103      	cbz	r3, 40235e <_close_r+0x1a>
  40235c:	602b      	str	r3, [r5, #0]
  40235e:	bd38      	pop	{r3, r4, r5, pc}
  402360:	2040016c 	.word	0x2040016c

00402364 <_fstat_r>:
  402364:	b538      	push	{r3, r4, r5, lr}
  402366:	4c07      	ldr	r4, [pc, #28]	; (402384 <_fstat_r+0x20>)
  402368:	2300      	movs	r3, #0
  40236a:	4605      	mov	r5, r0
  40236c:	4608      	mov	r0, r1
  40236e:	4611      	mov	r1, r2
  402370:	6023      	str	r3, [r4, #0]
  402372:	f7fe fc9e 	bl	400cb2 <_fstat>
  402376:	1c43      	adds	r3, r0, #1
  402378:	d102      	bne.n	402380 <_fstat_r+0x1c>
  40237a:	6823      	ldr	r3, [r4, #0]
  40237c:	b103      	cbz	r3, 402380 <_fstat_r+0x1c>
  40237e:	602b      	str	r3, [r5, #0]
  402380:	bd38      	pop	{r3, r4, r5, pc}
  402382:	bf00      	nop
  402384:	2040016c 	.word	0x2040016c

00402388 <_lseek_r>:
  402388:	b538      	push	{r3, r4, r5, lr}
  40238a:	4c07      	ldr	r4, [pc, #28]	; (4023a8 <_lseek_r+0x20>)
  40238c:	4605      	mov	r5, r0
  40238e:	4608      	mov	r0, r1
  402390:	4611      	mov	r1, r2
  402392:	2200      	movs	r2, #0
  402394:	6022      	str	r2, [r4, #0]
  402396:	461a      	mov	r2, r3
  402398:	f7fe fc90 	bl	400cbc <_lseek>
  40239c:	1c43      	adds	r3, r0, #1
  40239e:	d102      	bne.n	4023a6 <_lseek_r+0x1e>
  4023a0:	6823      	ldr	r3, [r4, #0]
  4023a2:	b103      	cbz	r3, 4023a6 <_lseek_r+0x1e>
  4023a4:	602b      	str	r3, [r5, #0]
  4023a6:	bd38      	pop	{r3, r4, r5, pc}
  4023a8:	2040016c 	.word	0x2040016c

004023ac <_read_r>:
  4023ac:	b538      	push	{r3, r4, r5, lr}
  4023ae:	4c07      	ldr	r4, [pc, #28]	; (4023cc <_read_r+0x20>)
  4023b0:	4605      	mov	r5, r0
  4023b2:	4608      	mov	r0, r1
  4023b4:	4611      	mov	r1, r2
  4023b6:	2200      	movs	r2, #0
  4023b8:	6022      	str	r2, [r4, #0]
  4023ba:	461a      	mov	r2, r3
  4023bc:	f7ff fbb4 	bl	401b28 <_read>
  4023c0:	1c43      	adds	r3, r0, #1
  4023c2:	d102      	bne.n	4023ca <_read_r+0x1e>
  4023c4:	6823      	ldr	r3, [r4, #0]
  4023c6:	b103      	cbz	r3, 4023ca <_read_r+0x1e>
  4023c8:	602b      	str	r3, [r5, #0]
  4023ca:	bd38      	pop	{r3, r4, r5, pc}
  4023cc:	2040016c 	.word	0x2040016c
  4023d0:	682f2e2e 	.word	0x682f2e2e
  4023d4:	692f6c61 	.word	0x692f6c61
  4023d8:	756c636e 	.word	0x756c636e
  4023dc:	682f6564 	.word	0x682f6564
  4023e0:	775f6c61 	.word	0x775f6c61
  4023e4:	682e7464 	.word	0x682e7464
  4023e8:	00000000 	.word	0x00000000
  4023ec:	682f2e2e 	.word	0x682f2e2e
  4023f0:	732f6c61 	.word	0x732f6c61
  4023f4:	682f6372 	.word	0x682f6372
  4023f8:	615f6c61 	.word	0x615f6c61
  4023fc:	735f6364 	.word	0x735f6364
  402400:	2e636e79 	.word	0x2e636e79
  402404:	00000063 	.word	0x00000063
  402408:	682f2e2e 	.word	0x682f2e2e
  40240c:	732f6c61 	.word	0x732f6c61
  402410:	682f6372 	.word	0x682f6372
  402414:	695f6c61 	.word	0x695f6c61
  402418:	6d5f6332 	.word	0x6d5f6332
  40241c:	6e79735f 	.word	0x6e79735f
  402420:	00632e63 	.word	0x00632e63
  402424:	682f2e2e 	.word	0x682f2e2e
  402428:	732f6c61 	.word	0x732f6c61
  40242c:	682f6372 	.word	0x682f6372
  402430:	695f6c61 	.word	0x695f6c61
  402434:	00632e6f 	.word	0x00632e6f
  402438:	682f2e2e 	.word	0x682f2e2e
  40243c:	732f6c61 	.word	0x732f6c61
  402440:	682f6372 	.word	0x682f6372
  402444:	705f6c61 	.word	0x705f6c61
  402448:	632e6d77 	.word	0x632e6d77
  40244c:	00000000 	.word	0x00000000
  402450:	682f2e2e 	.word	0x682f2e2e
  402454:	732f6c61 	.word	0x732f6c61
  402458:	682f6372 	.word	0x682f6372
  40245c:	735f6c61 	.word	0x735f6c61
  402460:	6d5f6970 	.word	0x6d5f6970
  402464:	6e79735f 	.word	0x6e79735f
  402468:	00632e63 	.word	0x00632e63
  40246c:	682f2e2e 	.word	0x682f2e2e
  402470:	732f6c61 	.word	0x732f6c61
  402474:	682f6372 	.word	0x682f6372
  402478:	755f6c61 	.word	0x755f6c61
  40247c:	74726173 	.word	0x74726173
  402480:	6e79735f 	.word	0x6e79735f
  402484:	00632e63 	.word	0x00632e63

00402488 <_afecs>:
  402488:	00000000 2f843100 03000000 ffffffff     .....1./........
  402498:	0000ffff 00000000 00000000 00000000     ................
  4024a8:	0000010c 00000000 00000000 00000000     ................
  4024b8:	00000000 00000200 00000200 00000200     ................
  4024c8:	00000200 00000200 00000200 00000200     ................
  4024d8:	00000200 00000200 00000200 00000200     ................
  4024e8:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  4024f8:	5f6c7068 63656661 0000632e              hpl_afec.c..

00402504 <_ext_irq>:
  402504:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  402514:	00000000 03c00000 00008020 00000001     ........ .......
  402524:	000000f2 000000f2 000000f2 00000000     ................
  402534:	000000f0 00000002                       ........

0040253c <_pio_irq_n>:
  40253c:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  40254c:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

0040255c <_pwms>:
  40255c:	40020000 0000001f 00010001 00000001     ...@............
  40256c:	00000001 000000ff 00000000 00000004     ................
	...
  402588:	00000004 00402614 00000000 204000d0     .....&@.......@ 
  402598:	4005c000 0000003c 00010001 00000001     ...@<...........
  4025a8:	00000001 000000ff 00000000 00000004     ................
	...
  4025c4:	00000004 004025d4 00000000 204000c4     .....%@.......@ 

004025d4 <_ch_cfg1>:
  4025d4:	00000000 00000008 00000400 00000200     ................
  4025e4:	00000001 00000000 00000400 00000200     ................
  4025f4:	00000002 00000000 00000400 00000200     ................
  402604:	00000003 00000000 00000400 00000200     ................

00402614 <_ch_cfg0>:
  402614:	00000000 00000208 00000400 00000200     ................
  402624:	00000001 00000208 00000400 00000200     ................
  402634:	00000002 00000208 00000400 00000200     ................
  402644:	00000003 00000208 00000400 00000200     ................
  402654:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  402664:	632e6d77 00000000                       wm.c....

0040266c <spi_regs>:
  40266c:	00000000 80000000 00000001 0496fa02     ................
  40267c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  40268c:	735f6c70 632e6970 00000000              pl_spi.c....

00402698 <_i2cm_sync_cfgs>:
  402698:	40018000 00000020 00000000 00000000     ...@ ...........
  4026a8:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  4026b8:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  4026c8:	00000000                                ....

004026cc <_uarts>:
  4026cc:	00000000 00000800 000000f4 682f2e2e     ............../h
  4026dc:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  4026ec:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
  4026fc:	775f6c70 632e7464 00000000              pl_wdt.c....

00402708 <_global_impure_ptr>:
  402708:	20400004                                ..@ 

0040270c <__sf_fake_stderr>:
	...

0040272c <__sf_fake_stdin>:
	...

0040274c <__sf_fake_stdout>:
	...

0040276c <_init>:
  40276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40276e:	bf00      	nop
  402770:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402772:	bc08      	pop	{r3}
  402774:	469e      	mov	lr, r3
  402776:	4770      	bx	lr

00402778 <__init_array_start>:
  402778:	0040017d 	.word	0x0040017d

0040277c <_fini>:
  40277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40277e:	bf00      	nop
  402780:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402782:	bc08      	pop	{r3}
  402784:	469e      	mov	lr, r3
  402786:	4770      	bx	lr

00402788 <__fini_array_start>:
  402788:	00400159 	.word	0x00400159
