
Robot_Firmware_v17.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003344  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20400000  00403344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017c  2040004c  00403390  0002004c  2**2
                  ALLOC
  3 .heap         00000200  204001c8  0040350c  0002004c  2**0
                  ALLOC
  4 .stack        00000400  204003c8  0040370c  0002004c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002316b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000047b0  00000000  00000000  0004323e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cb72  00000000  00000000  000479ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d90  00000000  00000000  00054560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cd0  00000000  00000000  000552f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003bcdd  00000000  00000000  00055fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ba71  00000000  00000000  00091c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00123b06  00000000  00000000  000ad70e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002340  00000000  00000000  001d1214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 07 40 20 5d 02 40 00 59 02 40 00 59 02 40 00     ..@ ].@.Y.@.Y.@.
  400010:	59 02 40 00 59 02 40 00 59 02 40 00 00 00 00 00     Y.@.Y.@.Y.@.....
	...
  40002c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40003c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40004c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40005c:	59 02 40 00 59 02 40 00 00 00 00 00 19 13 40 00     Y.@.Y.@.......@.
  40006c:	0d 13 40 00 00 00 00 00 59 02 40 00 59 02 40 00     ..@.....Y.@.Y.@.
  40007c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40008c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40009c:	4d 1a 40 00 59 02 40 00 59 02 40 00 61 1a 40 00     M.@.Y.@.Y.@.a.@.
  4000ac:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  4000bc:	dd 14 40 00 59 02 40 00 59 02 40 00 59 02 40 00     ..@.Y.@.Y.@.Y.@.
	...
  4000e0:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  4000f0:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400100:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400110:	59 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00     Y.@.............
  400120:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400130:	f1 14 40 00 59 02 40 00 00 00 00 00 59 02 40 00     ..@.Y.@.....Y.@.
  400140:	59 02 40 00 59 02 40 00 00 00 00 00 00 00 00 00     Y.@.Y.@.........
  400150:	59 02 40 00 59 02 40 00                             Y.@.Y.@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	2040004c 	.word	0x2040004c
  400174:	00000000 	.word	0x00000000
  400178:	00403344 	.word	0x00403344

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	00403344 	.word	0x00403344
  4001b8:	20400050 	.word	0x20400050
  4001bc:	00403344 	.word	0x00403344
  4001c0:	00000000 	.word	0x00000000

004001c4 <adc_init>:
 *  Author: bensc
 */ 

#include "ADC_driver.h"

void adc_init(){
  4001c4:	b538      	push	{r3, r4, r5, lr}
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_CURRENT);
  4001c6:	4d06      	ldr	r5, [pc, #24]	; (4001e0 <adc_init+0x1c>)
  4001c8:	2100      	movs	r1, #0
  4001ca:	4628      	mov	r0, r5
  4001cc:	4c05      	ldr	r4, [pc, #20]	; (4001e4 <adc_init+0x20>)
  4001ce:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_VOLTAGE);
  4001d0:	2105      	movs	r1, #5
  4001d2:	4628      	mov	r0, r5
  4001d4:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_CAP_CHARGE);
  4001d6:	2107      	movs	r1, #7
  4001d8:	4628      	mov	r0, r5
  4001da:	47a0      	blx	r4
  4001dc:	bd38      	pop	{r3, r4, r5, pc}
  4001de:	bf00      	nop
  4001e0:	20400114 	.word	0x20400114
  4001e4:	0040087d 	.word	0x0040087d

004001e8 <adc_read>:
}

void adc_read(float *adc_value, uint8_t channel){
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
  4001ec:	4604      	mov	r4, r0
	uint8_t adc_buff[2];
	adc_sync_read_channel(&ADC_0, channel, &adc_buff[0], 2);
  4001ee:	2302      	movs	r3, #2
  4001f0:	aa01      	add	r2, sp, #4
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <adc_read+0x50>)
  4001f4:	4d11      	ldr	r5, [pc, #68]	; (40023c <adc_read+0x54>)
  4001f6:	47a8      	blx	r5
	*adc_value = (3.3/4095) * (float)(adc_buff[0] + ((adc_buff[1] & 0x0F) << 8));
  4001f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4001fc:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400200:	0200      	lsls	r0, r0, #8
  400202:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  400206:	4418      	add	r0, r3
  400208:	ee07 0a90 	vmov	s15, r0
  40020c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400210:	ee17 0a90 	vmov	r0, s15
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <adc_read+0x58>)
  400216:	4798      	blx	r3
  400218:	a305      	add	r3, pc, #20	; (adr r3, 400230 <adc_read+0x48>)
  40021a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <adc_read+0x5c>)
  400220:	47a8      	blx	r5
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <adc_read+0x60>)
  400224:	4798      	blx	r3
  400226:	6020      	str	r0, [r4, #0]
  400228:	b003      	add	sp, #12
  40022a:	bd30      	pop	{r4, r5, pc}
  40022c:	f3af 8000 	nop.w
  400230:	e734d9b4 	.word	0xe734d9b4
  400234:	3f4a680c 	.word	0x3f4a680c
  400238:	20400114 	.word	0x20400114
  40023c:	004008a9 	.word	0x004008a9
  400240:	00402935 	.word	0x00402935
  400244:	004029dd 	.word	0x004029dd
  400248:	00402f11 	.word	0x00402f11

0040024c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  40024c:	b508      	push	{r3, lr}
	system_init();
  40024e:	4b01      	ldr	r3, [pc, #4]	; (400254 <atmel_start_init+0x8>)
  400250:	4798      	blx	r3
  400252:	bd08      	pop	{r3, pc}
  400254:	00400671 	.word	0x00400671

00400258 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400258:	e7fe      	b.n	400258 <Dummy_Handler>
	...

0040025c <Reset_Handler>:
{
  40025c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40025e:	4b10      	ldr	r3, [pc, #64]	; (4002a0 <Reset_Handler+0x44>)
  400260:	4a10      	ldr	r2, [pc, #64]	; (4002a4 <Reset_Handler+0x48>)
  400262:	429a      	cmp	r2, r3
  400264:	d009      	beq.n	40027a <Reset_Handler+0x1e>
  400266:	4b0e      	ldr	r3, [pc, #56]	; (4002a0 <Reset_Handler+0x44>)
  400268:	4a0e      	ldr	r2, [pc, #56]	; (4002a4 <Reset_Handler+0x48>)
  40026a:	e003      	b.n	400274 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40026c:	6811      	ldr	r1, [r2, #0]
  40026e:	6019      	str	r1, [r3, #0]
  400270:	3304      	adds	r3, #4
  400272:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400274:	490c      	ldr	r1, [pc, #48]	; (4002a8 <Reset_Handler+0x4c>)
  400276:	428b      	cmp	r3, r1
  400278:	d3f8      	bcc.n	40026c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40027a:	4b0c      	ldr	r3, [pc, #48]	; (4002ac <Reset_Handler+0x50>)
  40027c:	e002      	b.n	400284 <Reset_Handler+0x28>
                *pDest++ = 0;
  40027e:	2200      	movs	r2, #0
  400280:	601a      	str	r2, [r3, #0]
  400282:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400284:	4a0a      	ldr	r2, [pc, #40]	; (4002b0 <Reset_Handler+0x54>)
  400286:	4293      	cmp	r3, r2
  400288:	d3f9      	bcc.n	40027e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40028a:	4a0a      	ldr	r2, [pc, #40]	; (4002b4 <Reset_Handler+0x58>)
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <Reset_Handler+0x5c>)
  40028e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400292:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400294:	4b09      	ldr	r3, [pc, #36]	; (4002bc <Reset_Handler+0x60>)
  400296:	4798      	blx	r3
        main();
  400298:	4b09      	ldr	r3, [pc, #36]	; (4002c0 <Reset_Handler+0x64>)
  40029a:	4798      	blx	r3
  40029c:	e7fe      	b.n	40029c <Reset_Handler+0x40>
  40029e:	bf00      	nop
  4002a0:	20400000 	.word	0x20400000
  4002a4:	00403344 	.word	0x00403344
  4002a8:	2040004c 	.word	0x2040004c
  4002ac:	2040004c 	.word	0x2040004c
  4002b0:	204001c8 	.word	0x204001c8
  4002b4:	e000ed00 	.word	0xe000ed00
  4002b8:	00400000 	.word	0x00400000
  4002bc:	00402fb1 	.word	0x00402fb1
  4002c0:	00401c91 	.word	0x00401c91

004002c4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  4002c4:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002c6:	4b08      	ldr	r3, [pc, #32]	; (4002e8 <TIMER_0_init+0x24>)
  4002c8:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002ca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4002ce:	d103      	bne.n	4002d8 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002d4:	4b04      	ldr	r3, [pc, #16]	; (4002e8 <TIMER_0_init+0x24>)
  4002d6:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  4002d8:	4b04      	ldr	r3, [pc, #16]	; (4002ec <TIMER_0_init+0x28>)
  4002da:	4798      	blx	r3
  4002dc:	4602      	mov	r2, r0
  4002de:	4904      	ldr	r1, [pc, #16]	; (4002f0 <TIMER_0_init+0x2c>)
  4002e0:	4804      	ldr	r0, [pc, #16]	; (4002f4 <TIMER_0_init+0x30>)
  4002e2:	4b05      	ldr	r3, [pc, #20]	; (4002f8 <TIMER_0_init+0x34>)
  4002e4:	4798      	blx	r3
  4002e6:	bd08      	pop	{r3, pc}
  4002e8:	400e0600 	.word	0x400e0600
  4002ec:	00401a49 	.word	0x00401a49
  4002f0:	4000c000 	.word	0x4000c000
  4002f4:	2040018c 	.word	0x2040018c
  4002f8:	00400ea9 	.word	0x00400ea9

004002fc <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
  4002fc:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <TIMER_1_init+0x24>)
  400300:	699b      	ldr	r3, [r3, #24]
  400302:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400306:	d103      	bne.n	400310 <TIMER_1_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400308:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40030c:	4b04      	ldr	r3, [pc, #16]	; (400320 <TIMER_1_init+0x24>)
  40030e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	TIMER_1_PORT_init();
	timer_init(&TIMER_1, TC1, _tc_get_timer());
  400310:	4b04      	ldr	r3, [pc, #16]	; (400324 <TIMER_1_init+0x28>)
  400312:	4798      	blx	r3
  400314:	4602      	mov	r2, r0
  400316:	4904      	ldr	r1, [pc, #16]	; (400328 <TIMER_1_init+0x2c>)
  400318:	4804      	ldr	r0, [pc, #16]	; (40032c <TIMER_1_init+0x30>)
  40031a:	4b05      	ldr	r3, [pc, #20]	; (400330 <TIMER_1_init+0x34>)
  40031c:	4798      	blx	r3
  40031e:	bd08      	pop	{r3, pc}
  400320:	400e0600 	.word	0x400e0600
  400324:	00401a49 	.word	0x00401a49
  400328:	40010000 	.word	0x40010000
  40032c:	2040011c 	.word	0x2040011c
  400330:	00400ea9 	.word	0x00400ea9

00400334 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400338:	4b05      	ldr	r3, [pc, #20]	; (400350 <ADC_0_PORT_init+0x1c>)
  40033a:	601a      	str	r2, [r3, #0]
  40033c:	2204      	movs	r2, #4
  40033e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400342:	601a      	str	r2, [r3, #0]
  400344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400348:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40034c:	601a      	str	r2, [r3, #0]
  40034e:	4770      	bx	lr
  400350:	400e1400 	.word	0x400e1400

00400354 <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <ADC_0_CLOCK_init+0x14>)
  400356:	699b      	ldr	r3, [r3, #24]
  400358:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40035c:	d103      	bne.n	400366 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40035e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400362:	4b01      	ldr	r3, [pc, #4]	; (400368 <ADC_0_CLOCK_init+0x14>)
  400364:	611a      	str	r2, [r3, #16]
  400366:	4770      	bx	lr
  400368:	400e0600 	.word	0x400e0600

0040036c <ADC_0_init>:
{
  40036c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40036e:	4b05      	ldr	r3, [pc, #20]	; (400384 <ADC_0_init+0x18>)
  400370:	4798      	blx	r3
	ADC_0_PORT_init();
  400372:	4b05      	ldr	r3, [pc, #20]	; (400388 <ADC_0_init+0x1c>)
  400374:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400376:	2200      	movs	r2, #0
  400378:	4904      	ldr	r1, [pc, #16]	; (40038c <ADC_0_init+0x20>)
  40037a:	4805      	ldr	r0, [pc, #20]	; (400390 <ADC_0_init+0x24>)
  40037c:	4b05      	ldr	r3, [pc, #20]	; (400394 <ADC_0_init+0x28>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	00400355 	.word	0x00400355
  400388:	00400335 	.word	0x00400335
  40038c:	4003c000 	.word	0x4003c000
  400390:	20400114 	.word	0x20400114
  400394:	0040084d 	.word	0x0040084d

00400398 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400398:	4b03      	ldr	r3, [pc, #12]	; (4003a8 <EXTERNAL_IRQ_1_init+0x10>)
  40039a:	2202      	movs	r2, #2
  40039c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40039e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4003a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003a4:	601a      	str	r2, [r3, #0]
  4003a6:	4770      	bx	lr
  4003a8:	400e1000 	.word	0x400e1000

004003ac <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4003ac:	4b12      	ldr	r3, [pc, #72]	; (4003f8 <EXTERNAL_IRQ_0_init+0x4c>)
  4003ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003b2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003b4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003ba:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003c0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003c2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003c8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003ce:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003d6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4003dc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003de:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003e4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4003ea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003ec:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003f2:	601a      	str	r2, [r3, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	400e0e00 	.word	0x400e0e00

004003fc <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003fc:	4b17      	ldr	r3, [pc, #92]	; (40045c <PWM_0_PORT_init+0x60>)
  4003fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400404:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400406:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40040c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40040e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400412:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400414:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40041a:	f022 0204 	bic.w	r2, r2, #4
  40041e:	671a      	str	r2, [r3, #112]	; 0x70
  400420:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400422:	f022 0204 	bic.w	r2, r2, #4
  400426:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400428:	2204      	movs	r2, #4
  40042a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40042c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40042e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400432:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400434:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40043a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40043c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400440:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400444:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400448:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40044a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40044c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400450:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400456:	605a      	str	r2, [r3, #4]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e1400 	.word	0x400e1400

00400460 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <PWM_0_CLOCK_init+0x14>)
  400462:	699b      	ldr	r3, [r3, #24]
  400464:	2b00      	cmp	r3, #0
  400466:	db03      	blt.n	400470 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40046c:	4b01      	ldr	r3, [pc, #4]	; (400474 <PWM_0_CLOCK_init+0x14>)
  40046e:	611a      	str	r2, [r3, #16]
  400470:	4770      	bx	lr
  400472:	bf00      	nop
  400474:	400e0600 	.word	0x400e0600

00400478 <PWM_0_init>:
{
  400478:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40047a:	4b06      	ldr	r3, [pc, #24]	; (400494 <PWM_0_init+0x1c>)
  40047c:	4798      	blx	r3
	PWM_0_PORT_init();
  40047e:	4b06      	ldr	r3, [pc, #24]	; (400498 <PWM_0_init+0x20>)
  400480:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400482:	4b06      	ldr	r3, [pc, #24]	; (40049c <PWM_0_init+0x24>)
  400484:	4798      	blx	r3
  400486:	4602      	mov	r2, r0
  400488:	4905      	ldr	r1, [pc, #20]	; (4004a0 <PWM_0_init+0x28>)
  40048a:	4806      	ldr	r0, [pc, #24]	; (4004a4 <PWM_0_init+0x2c>)
  40048c:	4b06      	ldr	r3, [pc, #24]	; (4004a8 <PWM_0_init+0x30>)
  40048e:	4798      	blx	r3
  400490:	bd08      	pop	{r3, pc}
  400492:	bf00      	nop
  400494:	00400461 	.word	0x00400461
  400498:	004003fd 	.word	0x004003fd
  40049c:	004016b1 	.word	0x004016b1
  4004a0:	40020000 	.word	0x40020000
  4004a4:	204000f8 	.word	0x204000f8
  4004a8:	00400bf5 	.word	0x00400bf5

004004ac <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004ac:	4b06      	ldr	r3, [pc, #24]	; (4004c8 <PWM_1_PORT_init+0x1c>)
  4004ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4004b4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4004bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4004c2:	605a      	str	r2, [r3, #4]
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop
  4004c8:	400e0e00 	.word	0x400e0e00

004004cc <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4004cc:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <PWM_1_CLOCK_init+0x18>)
  4004ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4004d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4004d6:	d104      	bne.n	4004e2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4004dc:	4b01      	ldr	r3, [pc, #4]	; (4004e4 <PWM_1_CLOCK_init+0x18>)
  4004de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4004e2:	4770      	bx	lr
  4004e4:	400e0600 	.word	0x400e0600

004004e8 <PWM_1_init>:
{
  4004e8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4004ea:	4b06      	ldr	r3, [pc, #24]	; (400504 <PWM_1_init+0x1c>)
  4004ec:	4798      	blx	r3
	PWM_1_PORT_init();
  4004ee:	4b06      	ldr	r3, [pc, #24]	; (400508 <PWM_1_init+0x20>)
  4004f0:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  4004f2:	4b06      	ldr	r3, [pc, #24]	; (40050c <PWM_1_init+0x24>)
  4004f4:	4798      	blx	r3
  4004f6:	4602      	mov	r2, r0
  4004f8:	4905      	ldr	r1, [pc, #20]	; (400510 <PWM_1_init+0x28>)
  4004fa:	4806      	ldr	r0, [pc, #24]	; (400514 <PWM_1_init+0x2c>)
  4004fc:	4b06      	ldr	r3, [pc, #24]	; (400518 <PWM_1_init+0x30>)
  4004fe:	4798      	blx	r3
  400500:	bd08      	pop	{r3, pc}
  400502:	bf00      	nop
  400504:	004004cd 	.word	0x004004cd
  400508:	004004ad 	.word	0x004004ad
  40050c:	004016b1 	.word	0x004016b1
  400510:	4005c000 	.word	0x4005c000
  400514:	20400150 	.word	0x20400150
  400518:	00400bf5 	.word	0x00400bf5

0040051c <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40051c:	4b11      	ldr	r3, [pc, #68]	; (400564 <SPI_0_PORT_init+0x48>)
  40051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400524:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400526:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400528:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40052c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40052e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400532:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400536:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40053a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40053c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40053e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400542:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400548:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40054a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40054c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400550:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400552:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400554:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400558:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40055a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40055e:	605a      	str	r2, [r3, #4]
  400560:	4770      	bx	lr
  400562:	bf00      	nop
  400564:	400e1400 	.word	0x400e1400

00400568 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400568:	4b04      	ldr	r3, [pc, #16]	; (40057c <SPI_0_CLOCK_init+0x14>)
  40056a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40056c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400570:	d103      	bne.n	40057a <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400572:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400576:	4b01      	ldr	r3, [pc, #4]	; (40057c <SPI_0_CLOCK_init+0x14>)
  400578:	611a      	str	r2, [r3, #16]
  40057a:	4770      	bx	lr
  40057c:	400e0600 	.word	0x400e0600

00400580 <SPI_0_init>:
{
  400580:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400582:	4b08      	ldr	r3, [pc, #32]	; (4005a4 <SPI_0_init+0x24>)
  400584:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400586:	4b08      	ldr	r3, [pc, #32]	; (4005a8 <SPI_0_init+0x28>)
  400588:	4798      	blx	r3
  40058a:	4c08      	ldr	r4, [pc, #32]	; (4005ac <SPI_0_init+0x2c>)
  40058c:	4601      	mov	r1, r0
  40058e:	4620      	mov	r0, r4
  400590:	4b07      	ldr	r3, [pc, #28]	; (4005b0 <SPI_0_init+0x30>)
  400592:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400594:	4907      	ldr	r1, [pc, #28]	; (4005b4 <SPI_0_init+0x34>)
  400596:	4620      	mov	r0, r4
  400598:	4b07      	ldr	r3, [pc, #28]	; (4005b8 <SPI_0_init+0x38>)
  40059a:	4798      	blx	r3
	SPI_0_PORT_init();
  40059c:	4b07      	ldr	r3, [pc, #28]	; (4005bc <SPI_0_init+0x3c>)
  40059e:	4798      	blx	r3
  4005a0:	bd10      	pop	{r4, pc}
  4005a2:	bf00      	nop
  4005a4:	00400569 	.word	0x00400569
  4005a8:	004018b1 	.word	0x004018b1
  4005ac:	20400138 	.word	0x20400138
  4005b0:	00400c75 	.word	0x00400c75
  4005b4:	40008000 	.word	0x40008000
  4005b8:	00400c95 	.word	0x00400c95
  4005bc:	0040051d 	.word	0x0040051d

004005c0 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005c0:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <I2C_0_PORT_init+0x2c>)
  4005c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005c4:	f022 0210 	bic.w	r2, r2, #16
  4005c8:	671a      	str	r2, [r3, #112]	; 0x70
  4005ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005cc:	f022 0210 	bic.w	r2, r2, #16
  4005d0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005d2:	2210      	movs	r2, #16
  4005d4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005d8:	f022 0208 	bic.w	r2, r2, #8
  4005dc:	671a      	str	r2, [r3, #112]	; 0x70
  4005de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005e0:	f022 0208 	bic.w	r2, r2, #8
  4005e4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005e6:	2208      	movs	r2, #8
  4005e8:	605a      	str	r2, [r3, #4]
  4005ea:	4770      	bx	lr
  4005ec:	400e0e00 	.word	0x400e0e00

004005f0 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <I2C_0_CLOCK_init+0x14>)
  4005f2:	699b      	ldr	r3, [r3, #24]
  4005f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4005f8:	d103      	bne.n	400602 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005fe:	4b01      	ldr	r3, [pc, #4]	; (400604 <I2C_0_CLOCK_init+0x14>)
  400600:	611a      	str	r2, [r3, #16]
  400602:	4770      	bx	lr
  400604:	400e0600 	.word	0x400e0600

00400608 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400608:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40060a:	4b04      	ldr	r3, [pc, #16]	; (40061c <I2C_0_init+0x14>)
  40060c:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  40060e:	4904      	ldr	r1, [pc, #16]	; (400620 <I2C_0_init+0x18>)
  400610:	4804      	ldr	r0, [pc, #16]	; (400624 <I2C_0_init+0x1c>)
  400612:	4b05      	ldr	r3, [pc, #20]	; (400628 <I2C_0_init+0x20>)
  400614:	4798      	blx	r3

	I2C_0_PORT_init();
  400616:	4b05      	ldr	r3, [pc, #20]	; (40062c <I2C_0_init+0x24>)
  400618:	4798      	blx	r3
  40061a:	bd08      	pop	{r3, pc}
  40061c:	004005f1 	.word	0x004005f1
  400620:	40018000 	.word	0x40018000
  400624:	2040016c 	.word	0x2040016c
  400628:	00400b41 	.word	0x00400b41
  40062c:	004005c1 	.word	0x004005c1

00400630 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400630:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400632:	4802      	ldr	r0, [pc, #8]	; (40063c <delay_driver_init+0xc>)
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <delay_driver_init+0x10>)
  400636:	4798      	blx	r3
  400638:	bd08      	pop	{r3, pc}
  40063a:	bf00      	nop
  40063c:	e000e010 	.word	0xe000e010
  400640:	00400965 	.word	0x00400965

00400644 <WDT_0_init>:
}

void WDT_0_init(void)
{
  400644:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  400646:	2248      	movs	r2, #72	; 0x48
  400648:	4904      	ldr	r1, [pc, #16]	; (40065c <WDT_0_init+0x18>)
  40064a:	2001      	movs	r0, #1
  40064c:	4b04      	ldr	r3, [pc, #16]	; (400660 <WDT_0_init+0x1c>)
  40064e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  400650:	4804      	ldr	r0, [pc, #16]	; (400664 <WDT_0_init+0x20>)
  400652:	4b05      	ldr	r3, [pc, #20]	; (400668 <WDT_0_init+0x24>)
  400654:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  400656:	4b05      	ldr	r3, [pc, #20]	; (40066c <WDT_0_init+0x28>)
  400658:	4798      	blx	r3
  40065a:	bd08      	pop	{r3, pc}
  40065c:	00403008 	.word	0x00403008
  400660:	00400ee5 	.word	0x00400ee5
  400664:	20400118 	.word	0x20400118
  400668:	400e1850 	.word	0x400e1850
  40066c:	00401c5d 	.word	0x00401c5d

00400670 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  400670:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400672:	4b67      	ldr	r3, [pc, #412]	; (400810 <system_init+0x1a0>)
  400674:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400676:	4b67      	ldr	r3, [pc, #412]	; (400814 <system_init+0x1a4>)
  400678:	699b      	ldr	r3, [r3, #24]
  40067a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40067e:	d103      	bne.n	400688 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400680:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400684:	4b63      	ldr	r3, [pc, #396]	; (400814 <system_init+0x1a4>)
  400686:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400688:	4b62      	ldr	r3, [pc, #392]	; (400814 <system_init+0x1a4>)
  40068a:	699b      	ldr	r3, [r3, #24]
  40068c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400690:	d103      	bne.n	40069a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400692:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400696:	4b5f      	ldr	r3, [pc, #380]	; (400814 <system_init+0x1a4>)
  400698:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40069a:	4b5e      	ldr	r3, [pc, #376]	; (400814 <system_init+0x1a4>)
  40069c:	699b      	ldr	r3, [r3, #24]
  40069e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4006a2:	d103      	bne.n	4006ac <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4006a8:	4b5a      	ldr	r3, [pc, #360]	; (400814 <system_init+0x1a4>)
  4006aa:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  4006ac:	4b5a      	ldr	r3, [pc, #360]	; (400818 <system_init+0x1a8>)
  4006ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006b2:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006b4:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006b6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006ba:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006c2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006c8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4006ce:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006d0:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006d2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006d6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4006dc:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006de:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006e0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4006ea:	2008      	movs	r0, #8
  4006ec:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4006ee:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006f0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4006f6:	2404      	movs	r4, #4
  4006f8:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4006fa:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006fc:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4006fe:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400700:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400702:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400704:	2010      	movs	r0, #16
  400706:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400708:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40070a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40070c:	2020      	movs	r0, #32
  40070e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400710:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400712:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400714:	2040      	movs	r0, #64	; 0x40
  400716:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400718:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40071a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40071c:	2080      	movs	r0, #128	; 0x80
  40071e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400720:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400722:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400724:	f44f 7080 	mov.w	r0, #256	; 0x100
  400728:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40072a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40072c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40072e:	f44f 7000 	mov.w	r0, #512	; 0x200
  400732:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400734:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400736:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400738:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40073c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40073e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400740:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400742:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400746:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400748:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40074a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40074e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  400754:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400756:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400758:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40075c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40075e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400762:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400764:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400766:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40076a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40076c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  400770:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400772:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400774:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400778:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40077a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  40077e:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400780:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400782:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400786:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400788:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  40078c:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40078e:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400790:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400794:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400796:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  40079a:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40079c:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40079e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007a2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4007a8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007aa:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007ac:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007b0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4007b6:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007b8:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ba:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4007c0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007c2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007c4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4007ca:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007cc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ce:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007d0:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007d2:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007d4:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007d6:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007d8:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007da:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4007dc:	4b0f      	ldr	r3, [pc, #60]	; (40081c <system_init+0x1ac>)
  4007de:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  4007e0:	4b0f      	ldr	r3, [pc, #60]	; (400820 <system_init+0x1b0>)
  4007e2:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  4007e4:	4b0f      	ldr	r3, [pc, #60]	; (400824 <system_init+0x1b4>)
  4007e6:	4798      	blx	r3

	PWM_0_init();
  4007e8:	4b0f      	ldr	r3, [pc, #60]	; (400828 <system_init+0x1b8>)
  4007ea:	4798      	blx	r3

	PWM_1_init();
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <system_init+0x1bc>)
  4007ee:	4798      	blx	r3

	SPI_0_init();
  4007f0:	4b0f      	ldr	r3, [pc, #60]	; (400830 <system_init+0x1c0>)
  4007f2:	4798      	blx	r3
	TIMER_0_init();
  4007f4:	4b0f      	ldr	r3, [pc, #60]	; (400834 <system_init+0x1c4>)
  4007f6:	4798      	blx	r3
	TIMER_1_init();
  4007f8:	4b0f      	ldr	r3, [pc, #60]	; (400838 <system_init+0x1c8>)
  4007fa:	4798      	blx	r3

	I2C_0_init();
  4007fc:	4b0f      	ldr	r3, [pc, #60]	; (40083c <system_init+0x1cc>)
  4007fe:	4798      	blx	r3

	delay_driver_init();
  400800:	4b0f      	ldr	r3, [pc, #60]	; (400840 <system_init+0x1d0>)
  400802:	4798      	blx	r3

	WDT_0_init();
  400804:	4b0f      	ldr	r3, [pc, #60]	; (400844 <system_init+0x1d4>)
  400806:	4798      	blx	r3

	ext_irq_init();
  400808:	4b0f      	ldr	r3, [pc, #60]	; (400848 <system_init+0x1d8>)
  40080a:	4798      	blx	r3
  40080c:	bd10      	pop	{r4, pc}
  40080e:	bf00      	nop
  400810:	0040109d 	.word	0x0040109d
  400814:	400e0600 	.word	0x400e0600
  400818:	400e0e00 	.word	0x400e0e00
  40081c:	0040036d 	.word	0x0040036d
  400820:	00400399 	.word	0x00400399
  400824:	004003ad 	.word	0x004003ad
  400828:	00400479 	.word	0x00400479
  40082c:	004004e9 	.word	0x004004e9
  400830:	00400581 	.word	0x00400581
  400834:	004002c5 	.word	0x004002c5
  400838:	004002fd 	.word	0x004002fd
  40083c:	00400609 	.word	0x00400609
  400840:	00400631 	.word	0x00400631
  400844:	00400645 	.word	0x00400645
  400848:	004009dd 	.word	0x004009dd

0040084c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  40084c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40084e:	4604      	mov	r4, r0
  400850:	460d      	mov	r5, r1
  400852:	2800      	cmp	r0, #0
  400854:	bf18      	it	ne
  400856:	2900      	cmpne	r1, #0
  400858:	bf14      	ite	ne
  40085a:	2001      	movne	r0, #1
  40085c:	2000      	moveq	r0, #0
  40085e:	2239      	movs	r2, #57	; 0x39
  400860:	4903      	ldr	r1, [pc, #12]	; (400870 <adc_sync_init+0x24>)
  400862:	4b04      	ldr	r3, [pc, #16]	; (400874 <adc_sync_init+0x28>)
  400864:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400866:	4629      	mov	r1, r5
  400868:	4620      	mov	r0, r4
  40086a:	4b03      	ldr	r3, [pc, #12]	; (400878 <adc_sync_init+0x2c>)
  40086c:	4798      	blx	r3
}
  40086e:	bd38      	pop	{r3, r4, r5, pc}
  400870:	00403024 	.word	0x00403024
  400874:	00400ee5 	.word	0x00400ee5
  400878:	00401021 	.word	0x00401021

0040087c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  40087c:	b538      	push	{r3, r4, r5, lr}
  40087e:	460d      	mov	r5, r1
	ASSERT(descr);
  400880:	4604      	mov	r4, r0
  400882:	224e      	movs	r2, #78	; 0x4e
  400884:	4905      	ldr	r1, [pc, #20]	; (40089c <adc_sync_enable_channel+0x20>)
  400886:	3000      	adds	r0, #0
  400888:	bf18      	it	ne
  40088a:	2001      	movne	r0, #1
  40088c:	4b04      	ldr	r3, [pc, #16]	; (4008a0 <adc_sync_enable_channel+0x24>)
  40088e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400890:	4629      	mov	r1, r5
  400892:	4620      	mov	r0, r4
  400894:	4b03      	ldr	r3, [pc, #12]	; (4008a4 <adc_sync_enable_channel+0x28>)
  400896:	4798      	blx	r3

	return ERR_NONE;
}
  400898:	2000      	movs	r0, #0
  40089a:	bd38      	pop	{r3, r4, r5, pc}
  40089c:	00403024 	.word	0x00403024
  4008a0:	00400ee5 	.word	0x00400ee5
  4008a4:	00401059 	.word	0x00401059

004008a8 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  4008a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008ac:	460d      	mov	r5, r1
  4008ae:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  4008b0:	4607      	mov	r7, r0
  4008b2:	4690      	mov	r8, r2
  4008b4:	2800      	cmp	r0, #0
  4008b6:	bf18      	it	ne
  4008b8:	2a00      	cmpne	r2, #0
  4008ba:	d002      	beq.n	4008c2 <adc_sync_read_channel+0x1a>
  4008bc:	b9cb      	cbnz	r3, 4008f2 <adc_sync_read_channel+0x4a>
  4008be:	2000      	movs	r0, #0
  4008c0:	e000      	b.n	4008c4 <adc_sync_read_channel+0x1c>
  4008c2:	2000      	movs	r0, #0
  4008c4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400944 <adc_sync_read_channel+0x9c>
  4008c8:	2267      	movs	r2, #103	; 0x67
  4008ca:	4651      	mov	r1, sl
  4008cc:	4e18      	ldr	r6, [pc, #96]	; (400930 <adc_sync_read_channel+0x88>)
  4008ce:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  4008d0:	463c      	mov	r4, r7
  4008d2:	4638      	mov	r0, r7
  4008d4:	4b17      	ldr	r3, [pc, #92]	; (400934 <adc_sync_read_channel+0x8c>)
  4008d6:	4798      	blx	r3
  4008d8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  4008da:	fb99 f0f0 	sdiv	r0, r9, r0
  4008de:	fb07 9010 	mls	r0, r7, r0, r9
  4008e2:	2269      	movs	r2, #105	; 0x69
  4008e4:	4651      	mov	r1, sl
  4008e6:	fab0 f080 	clz	r0, r0
  4008ea:	0940      	lsrs	r0, r0, #5
  4008ec:	47b0      	blx	r6
	uint16_t offset = 0;
  4008ee:	2600      	movs	r6, #0
  4008f0:	e005      	b.n	4008fe <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  4008f2:	2001      	movs	r0, #1
  4008f4:	e7e6      	b.n	4008c4 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  4008f6:	443e      	add	r6, r7
  4008f8:	b2b6      	uxth	r6, r6
	} while (offset < length);
  4008fa:	45b1      	cmp	r9, r6
  4008fc:	d915      	bls.n	40092a <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  4008fe:	4620      	mov	r0, r4
  400900:	4b0d      	ldr	r3, [pc, #52]	; (400938 <adc_sync_read_channel+0x90>)
  400902:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  400904:	4629      	mov	r1, r5
  400906:	4620      	mov	r0, r4
  400908:	4b0c      	ldr	r3, [pc, #48]	; (40093c <adc_sync_read_channel+0x94>)
  40090a:	4798      	blx	r3
  40090c:	2800      	cmp	r0, #0
  40090e:	d0f9      	beq.n	400904 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  400910:	4629      	mov	r1, r5
  400912:	4620      	mov	r0, r4
  400914:	4b0a      	ldr	r3, [pc, #40]	; (400940 <adc_sync_read_channel+0x98>)
  400916:	4798      	blx	r3
		buffer[offset] = result;
  400918:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  40091c:	2f01      	cmp	r7, #1
  40091e:	d9ea      	bls.n	4008f6 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  400920:	1c73      	adds	r3, r6, #1
  400922:	0a00      	lsrs	r0, r0, #8
  400924:	f808 0003 	strb.w	r0, [r8, r3]
  400928:	e7e5      	b.n	4008f6 <adc_sync_read_channel+0x4e>

	return offset;
}
  40092a:	4630      	mov	r0, r6
  40092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400930:	00400ee5 	.word	0x00400ee5
  400934:	00401065 	.word	0x00401065
  400938:	0040107d 	.word	0x0040107d
  40093c:	00401069 	.word	0x00401069
  400940:	00401085 	.word	0x00401085
  400944:	00403024 	.word	0x00403024

00400948 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400948:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40094c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40094e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400950:	f3bf 8f5f 	dmb	sy
  400954:	4770      	bx	lr

00400956 <atomic_leave_critical>:
  400956:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40095a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40095c:	f383 8810 	msr	PRIMASK, r3
  400960:	4770      	bx	lr
	...

00400964 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400964:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400966:	4b02      	ldr	r3, [pc, #8]	; (400970 <delay_init+0xc>)
  400968:	6018      	str	r0, [r3, #0]
  40096a:	4b02      	ldr	r3, [pc, #8]	; (400974 <delay_init+0x10>)
  40096c:	4798      	blx	r3
  40096e:	bd08      	pop	{r3, pc}
  400970:	20400078 	.word	0x20400078
  400974:	004018c9 	.word	0x004018c9

00400978 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400978:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40097a:	4b04      	ldr	r3, [pc, #16]	; (40098c <delay_us+0x14>)
  40097c:	681c      	ldr	r4, [r3, #0]
  40097e:	4b04      	ldr	r3, [pc, #16]	; (400990 <delay_us+0x18>)
  400980:	4798      	blx	r3
  400982:	4601      	mov	r1, r0
  400984:	4620      	mov	r0, r4
  400986:	4b03      	ldr	r3, [pc, #12]	; (400994 <delay_us+0x1c>)
  400988:	4798      	blx	r3
  40098a:	bd10      	pop	{r4, pc}
  40098c:	20400078 	.word	0x20400078
  400990:	00401091 	.word	0x00401091
  400994:	004018d5 	.word	0x004018d5

00400998 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400998:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40099a:	2506      	movs	r5, #6
  40099c:	2400      	movs	r4, #0

	while (upper >= lower) {
  40099e:	e007      	b.n	4009b0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4009a0:	4a0d      	ldr	r2, [pc, #52]	; (4009d8 <process_ext_irq+0x40>)
  4009a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4009a6:	b1b3      	cbz	r3, 4009d6 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4009a8:	4798      	blx	r3
  4009aa:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4009ac:	3a01      	subs	r2, #1
  4009ae:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4009b0:	42ac      	cmp	r4, r5
  4009b2:	d810      	bhi.n	4009d6 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4009b4:	192b      	adds	r3, r5, r4
  4009b6:	105b      	asrs	r3, r3, #1
  4009b8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  4009ba:	2a05      	cmp	r2, #5
  4009bc:	d80b      	bhi.n	4009d6 <process_ext_irq+0x3e>
  4009be:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  4009c0:	4905      	ldr	r1, [pc, #20]	; (4009d8 <process_ext_irq+0x40>)
  4009c2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4009c6:	6849      	ldr	r1, [r1, #4]
  4009c8:	4281      	cmp	r1, r0
  4009ca:	d0e9      	beq.n	4009a0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4009cc:	4281      	cmp	r1, r0
  4009ce:	d2ed      	bcs.n	4009ac <process_ext_irq+0x14>
			lower = middle + 1;
  4009d0:	3201      	adds	r2, #1
  4009d2:	b2d4      	uxtb	r4, r2
  4009d4:	e7ec      	b.n	4009b0 <process_ext_irq+0x18>
  4009d6:	bd38      	pop	{r3, r4, r5, pc}
  4009d8:	2040007c 	.word	0x2040007c

004009dc <ext_irq_init>:
{
  4009dc:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4009de:	2300      	movs	r3, #0
  4009e0:	e00a      	b.n	4009f8 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4009e2:	4a08      	ldr	r2, [pc, #32]	; (400a04 <ext_irq_init+0x28>)
  4009e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4009e8:	f04f 30ff 	mov.w	r0, #4294967295
  4009ec:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4009ee:	2100      	movs	r1, #0
  4009f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4009f4:	3301      	adds	r3, #1
  4009f6:	b29b      	uxth	r3, r3
  4009f8:	2b05      	cmp	r3, #5
  4009fa:	d9f2      	bls.n	4009e2 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4009fc:	4802      	ldr	r0, [pc, #8]	; (400a08 <ext_irq_init+0x2c>)
  4009fe:	4b03      	ldr	r3, [pc, #12]	; (400a0c <ext_irq_init+0x30>)
  400a00:	4798      	blx	r3
}
  400a02:	bd08      	pop	{r3, pc}
  400a04:	2040007c 	.word	0x2040007c
  400a08:	00400999 	.word	0x00400999
  400a0c:	00401325 	.word	0x00401325

00400a10 <ext_irq_register>:
{
  400a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a12:	b083      	sub	sp, #12
  400a14:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400a16:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a18:	2b05      	cmp	r3, #5
  400a1a:	d80e      	bhi.n	400a3a <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400a1c:	4618      	mov	r0, r3
  400a1e:	4a2e      	ldr	r2, [pc, #184]	; (400ad8 <ext_irq_register+0xc8>)
  400a20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400a24:	6852      	ldr	r2, [r2, #4]
  400a26:	42aa      	cmp	r2, r5
  400a28:	d002      	beq.n	400a30 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a2a:	3301      	adds	r3, #1
  400a2c:	b2db      	uxtb	r3, r3
  400a2e:	e7f3      	b.n	400a18 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400a30:	4b29      	ldr	r3, [pc, #164]	; (400ad8 <ext_irq_register+0xc8>)
  400a32:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400a36:	2701      	movs	r7, #1
			break;
  400a38:	e000      	b.n	400a3c <ext_irq_register+0x2c>
	bool    found = false;
  400a3a:	2700      	movs	r7, #0
	if (NULL == cb) {
  400a3c:	b159      	cbz	r1, 400a56 <ext_irq_register+0x46>
	if (!found) {
  400a3e:	2f00      	cmp	r7, #0
  400a40:	d13d      	bne.n	400abe <ext_irq_register+0xae>
  400a42:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a44:	2e05      	cmp	r6, #5
  400a46:	d813      	bhi.n	400a70 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400a48:	4b23      	ldr	r3, [pc, #140]	; (400ad8 <ext_irq_register+0xc8>)
  400a4a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  400a4e:	b143      	cbz	r3, 400a62 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a50:	3601      	adds	r6, #1
  400a52:	b2f6      	uxtb	r6, r6
  400a54:	e7f6      	b.n	400a44 <ext_irq_register+0x34>
		if (!found) {
  400a56:	2f00      	cmp	r7, #0
  400a58:	d038      	beq.n	400acc <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  400a5a:	4628      	mov	r0, r5
  400a5c:	4b1f      	ldr	r3, [pc, #124]	; (400adc <ext_irq_register+0xcc>)
  400a5e:	4798      	blx	r3
  400a60:	e032      	b.n	400ac8 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  400a62:	4b1d      	ldr	r3, [pc, #116]	; (400ad8 <ext_irq_register+0xc8>)
  400a64:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  400a68:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
  400a6c:	6055      	str	r5, [r2, #4]
				found           = true;
  400a6e:	2701      	movs	r7, #1
  400a70:	2300      	movs	r3, #0
  400a72:	e001      	b.n	400a78 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400a74:	3301      	adds	r3, #1
  400a76:	b2db      	uxtb	r3, r3
  400a78:	2b05      	cmp	r3, #5
  400a7a:	bf98      	it	ls
  400a7c:	2e05      	cmpls	r6, #5
  400a7e:	d81e      	bhi.n	400abe <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400a80:	46b6      	mov	lr, r6
  400a82:	4a15      	ldr	r2, [pc, #84]	; (400ad8 <ext_irq_register+0xc8>)
  400a84:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400a88:	6848      	ldr	r0, [r1, #4]
  400a8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400a8e:	6852      	ldr	r2, [r2, #4]
  400a90:	4290      	cmp	r0, r2
  400a92:	d2ef      	bcs.n	400a74 <ext_irq_register+0x64>
  400a94:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a98:	d0ec      	beq.n	400a74 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400a9a:	4c0f      	ldr	r4, [pc, #60]	; (400ad8 <ext_irq_register+0xc8>)
  400a9c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
  400aa4:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400aa8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400aac:	e894 0003 	ldmia.w	r4, {r0, r1}
  400ab0:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400ab4:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400ab8:	e884 0003 	stmia.w	r4, {r0, r1}
  400abc:	e7da      	b.n	400a74 <ext_irq_register+0x64>
	if (!found) {
  400abe:	b147      	cbz	r7, 400ad2 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400ac0:	2101      	movs	r1, #1
  400ac2:	4628      	mov	r0, r5
  400ac4:	4b05      	ldr	r3, [pc, #20]	; (400adc <ext_irq_register+0xcc>)
  400ac6:	4798      	blx	r3
}
  400ac8:	b003      	add	sp, #12
  400aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400acc:	f06f 000c 	mvn.w	r0, #12
  400ad0:	e7fa      	b.n	400ac8 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400ad2:	f06f 000c 	mvn.w	r0, #12
  400ad6:	e7f7      	b.n	400ac8 <ext_irq_register+0xb8>
  400ad8:	2040007c 	.word	0x2040007c
  400adc:	0040134d 	.word	0x0040134d

00400ae0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400ae0:	b510      	push	{r4, lr}
  400ae2:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400ae4:	8903      	ldrh	r3, [r0, #8]
  400ae6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400aea:	4614      	mov	r4, r2
  400aec:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  400aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400af2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400af6:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400af8:	a901      	add	r1, sp, #4
  400afa:	3814      	subs	r0, #20
  400afc:	4b03      	ldr	r3, [pc, #12]	; (400b0c <i2c_m_sync_write+0x2c>)
  400afe:	4798      	blx	r3

	if (ret) {
  400b00:	b910      	cbnz	r0, 400b08 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  400b02:	4620      	mov	r0, r4
  400b04:	b004      	add	sp, #16
  400b06:	bd10      	pop	{r4, pc}
		return ret;
  400b08:	4604      	mov	r4, r0
  400b0a:	e7fa      	b.n	400b02 <i2c_m_sync_write+0x22>
  400b0c:	00401af5 	.word	0x00401af5

00400b10 <i2c_m_sync_read>:
{
  400b10:	b510      	push	{r4, lr}
  400b12:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400b14:	8903      	ldrh	r3, [r0, #8]
  400b16:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400b1a:	4614      	mov	r4, r2
  400b1c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400b1e:	f248 0301 	movw	r3, #32769	; 0x8001
  400b22:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  400b26:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400b28:	a901      	add	r1, sp, #4
  400b2a:	3814      	subs	r0, #20
  400b2c:	4b03      	ldr	r3, [pc, #12]	; (400b3c <i2c_m_sync_read+0x2c>)
  400b2e:	4798      	blx	r3
	if (ret) {
  400b30:	b910      	cbnz	r0, 400b38 <i2c_m_sync_read+0x28>
}
  400b32:	4620      	mov	r0, r4
  400b34:	b004      	add	sp, #16
  400b36:	bd10      	pop	{r4, pc}
		return ret;
  400b38:	4604      	mov	r4, r0
  400b3a:	e7fa      	b.n	400b32 <i2c_m_sync_read+0x22>
  400b3c:	00401af5 	.word	0x00401af5

00400b40 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400b40:	b538      	push	{r3, r4, r5, lr}
  400b42:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400b44:	4604      	mov	r4, r0
  400b46:	225e      	movs	r2, #94	; 0x5e
  400b48:	4908      	ldr	r1, [pc, #32]	; (400b6c <i2c_m_sync_init+0x2c>)
  400b4a:	3000      	adds	r0, #0
  400b4c:	bf18      	it	ne
  400b4e:	2001      	movne	r0, #1
  400b50:	4b07      	ldr	r3, [pc, #28]	; (400b70 <i2c_m_sync_init+0x30>)
  400b52:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400b54:	4629      	mov	r1, r5
  400b56:	4620      	mov	r0, r4
  400b58:	4b06      	ldr	r3, [pc, #24]	; (400b74 <i2c_m_sync_init+0x34>)
  400b5a:	4798      	blx	r3
	if (init_status) {
  400b5c:	4603      	mov	r3, r0
  400b5e:	b918      	cbnz	r0, 400b68 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400b60:	4a05      	ldr	r2, [pc, #20]	; (400b78 <i2c_m_sync_init+0x38>)
  400b62:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400b64:	4a05      	ldr	r2, [pc, #20]	; (400b7c <i2c_m_sync_init+0x3c>)
  400b66:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400b68:	4618      	mov	r0, r3
  400b6a:	bd38      	pop	{r3, r4, r5, pc}
  400b6c:	00403040 	.word	0x00403040
  400b70:	00400ee5 	.word	0x00400ee5
  400b74:	00401aad 	.word	0x00401aad
  400b78:	00400b11 	.word	0x00400b11
  400b7c:	00400ae1 	.word	0x00400ae1

00400b80 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400b80:	b570      	push	{r4, r5, r6, lr}
  400b82:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400b84:	4604      	mov	r4, r0
  400b86:	460d      	mov	r5, r1
  400b88:	2800      	cmp	r0, #0
  400b8a:	bf18      	it	ne
  400b8c:	2900      	cmpne	r1, #0
  400b8e:	bf14      	ite	ne
  400b90:	2001      	movne	r0, #1
  400b92:	2000      	moveq	r0, #0
  400b94:	2234      	movs	r2, #52	; 0x34
  400b96:	4904      	ldr	r1, [pc, #16]	; (400ba8 <io_write+0x28>)
  400b98:	4b04      	ldr	r3, [pc, #16]	; (400bac <io_write+0x2c>)
  400b9a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400b9c:	6823      	ldr	r3, [r4, #0]
  400b9e:	4632      	mov	r2, r6
  400ba0:	4629      	mov	r1, r5
  400ba2:	4620      	mov	r0, r4
  400ba4:	4798      	blx	r3
}
  400ba6:	bd70      	pop	{r4, r5, r6, pc}
  400ba8:	0040305c 	.word	0x0040305c
  400bac:	00400ee5 	.word	0x00400ee5

00400bb0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400bb0:	b570      	push	{r4, r5, r6, lr}
  400bb2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400bb4:	4604      	mov	r4, r0
  400bb6:	460d      	mov	r5, r1
  400bb8:	2800      	cmp	r0, #0
  400bba:	bf18      	it	ne
  400bbc:	2900      	cmpne	r1, #0
  400bbe:	bf14      	ite	ne
  400bc0:	2001      	movne	r0, #1
  400bc2:	2000      	moveq	r0, #0
  400bc4:	223d      	movs	r2, #61	; 0x3d
  400bc6:	4904      	ldr	r1, [pc, #16]	; (400bd8 <io_read+0x28>)
  400bc8:	4b04      	ldr	r3, [pc, #16]	; (400bdc <io_read+0x2c>)
  400bca:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400bcc:	6863      	ldr	r3, [r4, #4]
  400bce:	4632      	mov	r2, r6
  400bd0:	4629      	mov	r1, r5
  400bd2:	4620      	mov	r0, r4
  400bd4:	4798      	blx	r3
}
  400bd6:	bd70      	pop	{r4, r5, r6, pc}
  400bd8:	0040305c 	.word	0x0040305c
  400bdc:	00400ee5 	.word	0x00400ee5

00400be0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400be0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400be2:	6943      	ldr	r3, [r0, #20]
  400be4:	b103      	cbz	r3, 400be8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400be6:	4798      	blx	r3
  400be8:	bd08      	pop	{r3, pc}

00400bea <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400bea:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400bec:	6983      	ldr	r3, [r0, #24]
  400bee:	b103      	cbz	r3, 400bf2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400bf0:	4798      	blx	r3
  400bf2:	bd08      	pop	{r3, pc}

00400bf4 <pwm_init>:
{
  400bf4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400bf6:	4604      	mov	r4, r0
  400bf8:	460d      	mov	r5, r1
  400bfa:	2800      	cmp	r0, #0
  400bfc:	bf18      	it	ne
  400bfe:	2900      	cmpne	r1, #0
  400c00:	bf14      	ite	ne
  400c02:	2001      	movne	r0, #1
  400c04:	2000      	moveq	r0, #0
  400c06:	2233      	movs	r2, #51	; 0x33
  400c08:	4906      	ldr	r1, [pc, #24]	; (400c24 <pwm_init+0x30>)
  400c0a:	4b07      	ldr	r3, [pc, #28]	; (400c28 <pwm_init+0x34>)
  400c0c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400c0e:	4629      	mov	r1, r5
  400c10:	4620      	mov	r0, r4
  400c12:	4b06      	ldr	r3, [pc, #24]	; (400c2c <pwm_init+0x38>)
  400c14:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400c16:	4b06      	ldr	r3, [pc, #24]	; (400c30 <pwm_init+0x3c>)
  400c18:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400c1a:	4b06      	ldr	r3, [pc, #24]	; (400c34 <pwm_init+0x40>)
  400c1c:	6063      	str	r3, [r4, #4]
}
  400c1e:	2000      	movs	r0, #0
  400c20:	bd38      	pop	{r3, r4, r5, pc}
  400c22:	bf00      	nop
  400c24:	00403070 	.word	0x00403070
  400c28:	00400ee5 	.word	0x00400ee5
  400c2c:	00401505 	.word	0x00401505
  400c30:	00400be1 	.word	0x00400be1
  400c34:	00400beb 	.word	0x00400beb

00400c38 <pwm_enable>:
{
  400c38:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c3a:	4604      	mov	r4, r0
  400c3c:	224a      	movs	r2, #74	; 0x4a
  400c3e:	4909      	ldr	r1, [pc, #36]	; (400c64 <pwm_enable+0x2c>)
  400c40:	3000      	adds	r0, #0
  400c42:	bf18      	it	ne
  400c44:	2001      	movne	r0, #1
  400c46:	4b08      	ldr	r3, [pc, #32]	; (400c68 <pwm_enable+0x30>)
  400c48:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400c4a:	4620      	mov	r0, r4
  400c4c:	4b07      	ldr	r3, [pc, #28]	; (400c6c <pwm_enable+0x34>)
  400c4e:	4798      	blx	r3
  400c50:	b920      	cbnz	r0, 400c5c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400c52:	4620      	mov	r0, r4
  400c54:	4b06      	ldr	r3, [pc, #24]	; (400c70 <pwm_enable+0x38>)
  400c56:	4798      	blx	r3
	return ERR_NONE;
  400c58:	2000      	movs	r0, #0
  400c5a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400c5c:	f06f 0010 	mvn.w	r0, #16
}
  400c60:	bd10      	pop	{r4, pc}
  400c62:	bf00      	nop
  400c64:	00403070 	.word	0x00403070
  400c68:	00400ee5 	.word	0x00400ee5
  400c6c:	00401681 	.word	0x00401681
  400c70:	0040163d 	.word	0x0040163d

00400c74 <spi_m_sync_set_func_ptr>:
  400c74:	b538      	push	{r3, r4, r5, lr}
  400c76:	460d      	mov	r5, r1
  400c78:	4604      	mov	r4, r0
  400c7a:	2239      	movs	r2, #57	; 0x39
  400c7c:	4903      	ldr	r1, [pc, #12]	; (400c8c <spi_m_sync_set_func_ptr+0x18>)
  400c7e:	3000      	adds	r0, #0
  400c80:	bf18      	it	ne
  400c82:	2001      	movne	r0, #1
  400c84:	4b02      	ldr	r3, [pc, #8]	; (400c90 <spi_m_sync_set_func_ptr+0x1c>)
  400c86:	4798      	blx	r3
  400c88:	6025      	str	r5, [r4, #0]
  400c8a:	bd38      	pop	{r3, r4, r5, pc}
  400c8c:	00403088 	.word	0x00403088
  400c90:	00400ee5 	.word	0x00400ee5

00400c94 <spi_m_sync_init>:
  400c94:	b538      	push	{r3, r4, r5, lr}
  400c96:	4604      	mov	r4, r0
  400c98:	460d      	mov	r5, r1
  400c9a:	2800      	cmp	r0, #0
  400c9c:	bf18      	it	ne
  400c9e:	2900      	cmpne	r1, #0
  400ca0:	bf14      	ite	ne
  400ca2:	2001      	movne	r0, #1
  400ca4:	2000      	moveq	r0, #0
  400ca6:	2240      	movs	r2, #64	; 0x40
  400ca8:	4909      	ldr	r1, [pc, #36]	; (400cd0 <spi_m_sync_init+0x3c>)
  400caa:	4b0a      	ldr	r3, [pc, #40]	; (400cd4 <spi_m_sync_init+0x40>)
  400cac:	4798      	blx	r3
  400cae:	4620      	mov	r0, r4
  400cb0:	f840 5f04 	str.w	r5, [r0, #4]!
  400cb4:	4629      	mov	r1, r5
  400cb6:	4b08      	ldr	r3, [pc, #32]	; (400cd8 <spi_m_sync_init+0x44>)
  400cb8:	4798      	blx	r3
  400cba:	2800      	cmp	r0, #0
  400cbc:	db07      	blt.n	400cce <spi_m_sync_init+0x3a>
  400cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cc2:	82a3      	strh	r3, [r4, #20]
  400cc4:	4b05      	ldr	r3, [pc, #20]	; (400cdc <spi_m_sync_init+0x48>)
  400cc6:	6123      	str	r3, [r4, #16]
  400cc8:	4b05      	ldr	r3, [pc, #20]	; (400ce0 <spi_m_sync_init+0x4c>)
  400cca:	60e3      	str	r3, [r4, #12]
  400ccc:	2000      	movs	r0, #0
  400cce:	bd38      	pop	{r3, r4, r5, pc}
  400cd0:	00403088 	.word	0x00403088
  400cd4:	00400ee5 	.word	0x00400ee5
  400cd8:	004016d5 	.word	0x004016d5
  400cdc:	00400d89 	.word	0x00400d89
  400ce0:	00400d4d 	.word	0x00400d4d

00400ce4 <spi_m_sync_enable>:
  400ce4:	b510      	push	{r4, lr}
  400ce6:	4604      	mov	r4, r0
  400ce8:	2257      	movs	r2, #87	; 0x57
  400cea:	4905      	ldr	r1, [pc, #20]	; (400d00 <spi_m_sync_enable+0x1c>)
  400cec:	3000      	adds	r0, #0
  400cee:	bf18      	it	ne
  400cf0:	2001      	movne	r0, #1
  400cf2:	4b04      	ldr	r3, [pc, #16]	; (400d04 <spi_m_sync_enable+0x20>)
  400cf4:	4798      	blx	r3
  400cf6:	1d20      	adds	r0, r4, #4
  400cf8:	4b03      	ldr	r3, [pc, #12]	; (400d08 <spi_m_sync_enable+0x24>)
  400cfa:	4798      	blx	r3
  400cfc:	bd10      	pop	{r4, pc}
  400cfe:	bf00      	nop
  400d00:	00403088 	.word	0x00403088
  400d04:	00400ee5 	.word	0x00400ee5
  400d08:	0040177d 	.word	0x0040177d

00400d0c <spi_m_sync_transfer>:
  400d0c:	b530      	push	{r4, r5, lr}
  400d0e:	b085      	sub	sp, #20
  400d10:	4605      	mov	r5, r0
  400d12:	460c      	mov	r4, r1
  400d14:	2800      	cmp	r0, #0
  400d16:	bf18      	it	ne
  400d18:	2900      	cmpne	r1, #0
  400d1a:	bf14      	ite	ne
  400d1c:	2001      	movne	r0, #1
  400d1e:	2000      	moveq	r0, #0
  400d20:	22b3      	movs	r2, #179	; 0xb3
  400d22:	4907      	ldr	r1, [pc, #28]	; (400d40 <spi_m_sync_transfer+0x34>)
  400d24:	4b07      	ldr	r3, [pc, #28]	; (400d44 <spi_m_sync_transfer+0x38>)
  400d26:	4798      	blx	r3
  400d28:	6823      	ldr	r3, [r4, #0]
  400d2a:	9301      	str	r3, [sp, #4]
  400d2c:	6863      	ldr	r3, [r4, #4]
  400d2e:	9302      	str	r3, [sp, #8]
  400d30:	68a3      	ldr	r3, [r4, #8]
  400d32:	9303      	str	r3, [sp, #12]
  400d34:	a901      	add	r1, sp, #4
  400d36:	1d28      	adds	r0, r5, #4
  400d38:	4b03      	ldr	r3, [pc, #12]	; (400d48 <spi_m_sync_transfer+0x3c>)
  400d3a:	4798      	blx	r3
  400d3c:	b005      	add	sp, #20
  400d3e:	bd30      	pop	{r4, r5, pc}
  400d40:	00403088 	.word	0x00403088
  400d44:	00400ee5 	.word	0x00400ee5
  400d48:	004017b1 	.word	0x004017b1

00400d4c <_spi_m_sync_io_write>:
  400d4c:	b570      	push	{r4, r5, r6, lr}
  400d4e:	b084      	sub	sp, #16
  400d50:	460e      	mov	r6, r1
  400d52:	4615      	mov	r5, r2
  400d54:	4604      	mov	r4, r0
  400d56:	22a3      	movs	r2, #163	; 0xa3
  400d58:	4908      	ldr	r1, [pc, #32]	; (400d7c <_spi_m_sync_io_write+0x30>)
  400d5a:	3000      	adds	r0, #0
  400d5c:	bf18      	it	ne
  400d5e:	2001      	movne	r0, #1
  400d60:	4b07      	ldr	r3, [pc, #28]	; (400d80 <_spi_m_sync_io_write+0x34>)
  400d62:	4798      	blx	r3
  400d64:	2300      	movs	r3, #0
  400d66:	9302      	str	r3, [sp, #8]
  400d68:	9601      	str	r6, [sp, #4]
  400d6a:	9503      	str	r5, [sp, #12]
  400d6c:	a901      	add	r1, sp, #4
  400d6e:	f1a4 000c 	sub.w	r0, r4, #12
  400d72:	4b04      	ldr	r3, [pc, #16]	; (400d84 <_spi_m_sync_io_write+0x38>)
  400d74:	4798      	blx	r3
  400d76:	b004      	add	sp, #16
  400d78:	bd70      	pop	{r4, r5, r6, pc}
  400d7a:	bf00      	nop
  400d7c:	00403088 	.word	0x00403088
  400d80:	00400ee5 	.word	0x00400ee5
  400d84:	00400d0d 	.word	0x00400d0d

00400d88 <_spi_m_sync_io_read>:
  400d88:	b570      	push	{r4, r5, r6, lr}
  400d8a:	b084      	sub	sp, #16
  400d8c:	460e      	mov	r6, r1
  400d8e:	4615      	mov	r5, r2
  400d90:	4604      	mov	r4, r0
  400d92:	2287      	movs	r2, #135	; 0x87
  400d94:	4908      	ldr	r1, [pc, #32]	; (400db8 <_spi_m_sync_io_read+0x30>)
  400d96:	3000      	adds	r0, #0
  400d98:	bf18      	it	ne
  400d9a:	2001      	movne	r0, #1
  400d9c:	4b07      	ldr	r3, [pc, #28]	; (400dbc <_spi_m_sync_io_read+0x34>)
  400d9e:	4798      	blx	r3
  400da0:	9602      	str	r6, [sp, #8]
  400da2:	2300      	movs	r3, #0
  400da4:	9301      	str	r3, [sp, #4]
  400da6:	9503      	str	r5, [sp, #12]
  400da8:	a901      	add	r1, sp, #4
  400daa:	f1a4 000c 	sub.w	r0, r4, #12
  400dae:	4b04      	ldr	r3, [pc, #16]	; (400dc0 <_spi_m_sync_io_read+0x38>)
  400db0:	4798      	blx	r3
  400db2:	b004      	add	sp, #16
  400db4:	bd70      	pop	{r4, r5, r6, pc}
  400db6:	bf00      	nop
  400db8:	00403088 	.word	0x00403088
  400dbc:	00400ee5 	.word	0x00400ee5
  400dc0:	00400d0d 	.word	0x00400d0d

00400dc4 <spi_m_sync_get_io_descriptor>:
  400dc4:	b538      	push	{r3, r4, r5, lr}
  400dc6:	4604      	mov	r4, r0
  400dc8:	460d      	mov	r5, r1
  400dca:	2800      	cmp	r0, #0
  400dcc:	bf18      	it	ne
  400dce:	2900      	cmpne	r1, #0
  400dd0:	bf14      	ite	ne
  400dd2:	2001      	movne	r0, #1
  400dd4:	2000      	moveq	r0, #0
  400dd6:	22bd      	movs	r2, #189	; 0xbd
  400dd8:	4903      	ldr	r1, [pc, #12]	; (400de8 <spi_m_sync_get_io_descriptor+0x24>)
  400dda:	4b04      	ldr	r3, [pc, #16]	; (400dec <spi_m_sync_get_io_descriptor+0x28>)
  400ddc:	4798      	blx	r3
  400dde:	340c      	adds	r4, #12
  400de0:	602c      	str	r4, [r5, #0]
  400de2:	2000      	movs	r0, #0
  400de4:	bd38      	pop	{r3, r4, r5, pc}
  400de6:	bf00      	nop
  400de8:	00403088 	.word	0x00403088
  400dec:	00400ee5 	.word	0x00400ee5

00400df0 <timer_add_timer_task>:
  400df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400df2:	6807      	ldr	r7, [r0, #0]
  400df4:	b117      	cbz	r7, 400dfc <timer_add_timer_task+0xc>
  400df6:	463c      	mov	r4, r7
  400df8:	2600      	movs	r6, #0
  400dfa:	e00b      	b.n	400e14 <timer_add_timer_task+0x24>
  400dfc:	4b0e      	ldr	r3, [pc, #56]	; (400e38 <timer_add_timer_task+0x48>)
  400dfe:	4798      	blx	r3
  400e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e02:	68a5      	ldr	r5, [r4, #8]
  400e04:	442b      	add	r3, r5
  400e06:	1a9b      	subs	r3, r3, r2
  400e08:	3301      	adds	r3, #1
  400e0a:	688d      	ldr	r5, [r1, #8]
  400e0c:	42ab      	cmp	r3, r5
  400e0e:	d209      	bcs.n	400e24 <timer_add_timer_task+0x34>
  400e10:	4626      	mov	r6, r4
  400e12:	6824      	ldr	r4, [r4, #0]
  400e14:	b134      	cbz	r4, 400e24 <timer_add_timer_task+0x34>
  400e16:	6863      	ldr	r3, [r4, #4]
  400e18:	4293      	cmp	r3, r2
  400e1a:	d8f2      	bhi.n	400e02 <timer_add_timer_task+0x12>
  400e1c:	68a5      	ldr	r5, [r4, #8]
  400e1e:	1a9b      	subs	r3, r3, r2
  400e20:	442b      	add	r3, r5
  400e22:	e7f2      	b.n	400e0a <timer_add_timer_task+0x1a>
  400e24:	42bc      	cmp	r4, r7
  400e26:	d003      	beq.n	400e30 <timer_add_timer_task+0x40>
  400e28:	4630      	mov	r0, r6
  400e2a:	4b04      	ldr	r3, [pc, #16]	; (400e3c <timer_add_timer_task+0x4c>)
  400e2c:	4798      	blx	r3
  400e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e30:	4b01      	ldr	r3, [pc, #4]	; (400e38 <timer_add_timer_task+0x48>)
  400e32:	4798      	blx	r3
  400e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e36:	bf00      	nop
  400e38:	00400f01 	.word	0x00400f01
  400e3c:	00400f2d 	.word	0x00400f2d

00400e40 <timer_process_counted>:
  400e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e42:	6944      	ldr	r4, [r0, #20]
  400e44:	6906      	ldr	r6, [r0, #16]
  400e46:	3601      	adds	r6, #1
  400e48:	6106      	str	r6, [r0, #16]
  400e4a:	7e03      	ldrb	r3, [r0, #24]
  400e4c:	f013 0f01 	tst.w	r3, #1
  400e50:	d105      	bne.n	400e5e <timer_process_counted+0x1e>
  400e52:	7e03      	ldrb	r3, [r0, #24]
  400e54:	f013 0f02 	tst.w	r3, #2
  400e58:	d101      	bne.n	400e5e <timer_process_counted+0x1e>
  400e5a:	4605      	mov	r5, r0
  400e5c:	e009      	b.n	400e72 <timer_process_counted+0x32>
  400e5e:	7e03      	ldrb	r3, [r0, #24]
  400e60:	f043 0302 	orr.w	r3, r3, #2
  400e64:	7603      	strb	r3, [r0, #24]
  400e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e68:	696f      	ldr	r7, [r5, #20]
  400e6a:	68e3      	ldr	r3, [r4, #12]
  400e6c:	4620      	mov	r0, r4
  400e6e:	4798      	blx	r3
  400e70:	463c      	mov	r4, r7
  400e72:	b19c      	cbz	r4, 400e9c <timer_process_counted+0x5c>
  400e74:	6863      	ldr	r3, [r4, #4]
  400e76:	1af3      	subs	r3, r6, r3
  400e78:	68a2      	ldr	r2, [r4, #8]
  400e7a:	4293      	cmp	r3, r2
  400e7c:	d30e      	bcc.n	400e9c <timer_process_counted+0x5c>
  400e7e:	f105 0714 	add.w	r7, r5, #20
  400e82:	4638      	mov	r0, r7
  400e84:	4b06      	ldr	r3, [pc, #24]	; (400ea0 <timer_process_counted+0x60>)
  400e86:	4798      	blx	r3
  400e88:	7c23      	ldrb	r3, [r4, #16]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d1ec      	bne.n	400e68 <timer_process_counted+0x28>
  400e8e:	6066      	str	r6, [r4, #4]
  400e90:	4632      	mov	r2, r6
  400e92:	4621      	mov	r1, r4
  400e94:	4638      	mov	r0, r7
  400e96:	4b03      	ldr	r3, [pc, #12]	; (400ea4 <timer_process_counted+0x64>)
  400e98:	4798      	blx	r3
  400e9a:	e7e5      	b.n	400e68 <timer_process_counted+0x28>
  400e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e9e:	bf00      	nop
  400ea0:	00400f35 	.word	0x00400f35
  400ea4:	00400df1 	.word	0x00400df1

00400ea8 <timer_init>:
  400ea8:	b538      	push	{r3, r4, r5, lr}
  400eaa:	4604      	mov	r4, r0
  400eac:	460d      	mov	r5, r1
  400eae:	2800      	cmp	r0, #0
  400eb0:	bf18      	it	ne
  400eb2:	2900      	cmpne	r1, #0
  400eb4:	bf14      	ite	ne
  400eb6:	2001      	movne	r0, #1
  400eb8:	2000      	moveq	r0, #0
  400eba:	223b      	movs	r2, #59	; 0x3b
  400ebc:	4905      	ldr	r1, [pc, #20]	; (400ed4 <timer_init+0x2c>)
  400ebe:	4b06      	ldr	r3, [pc, #24]	; (400ed8 <timer_init+0x30>)
  400ec0:	4798      	blx	r3
  400ec2:	4629      	mov	r1, r5
  400ec4:	4620      	mov	r0, r4
  400ec6:	4b05      	ldr	r3, [pc, #20]	; (400edc <timer_init+0x34>)
  400ec8:	4798      	blx	r3
  400eca:	2000      	movs	r0, #0
  400ecc:	6120      	str	r0, [r4, #16]
  400ece:	4b04      	ldr	r3, [pc, #16]	; (400ee0 <timer_init+0x38>)
  400ed0:	6023      	str	r3, [r4, #0]
  400ed2:	bd38      	pop	{r3, r4, r5, pc}
  400ed4:	004030a4 	.word	0x004030a4
  400ed8:	00400ee5 	.word	0x00400ee5
  400edc:	0040198d 	.word	0x0040198d
  400ee0:	00400e41 	.word	0x00400e41

00400ee4 <assert>:
  400ee4:	b900      	cbnz	r0, 400ee8 <assert+0x4>
  400ee6:	be00      	bkpt	0x0000
  400ee8:	4770      	bx	lr

00400eea <is_list_element>:
  400eea:	6803      	ldr	r3, [r0, #0]
  400eec:	b11b      	cbz	r3, 400ef6 <is_list_element+0xc>
  400eee:	428b      	cmp	r3, r1
  400ef0:	d003      	beq.n	400efa <is_list_element+0x10>
  400ef2:	681b      	ldr	r3, [r3, #0]
  400ef4:	e7fa      	b.n	400eec <is_list_element+0x2>
  400ef6:	2000      	movs	r0, #0
  400ef8:	4770      	bx	lr
  400efa:	2001      	movs	r0, #1
  400efc:	4770      	bx	lr
	...

00400f00 <list_insert_as_head>:
  400f00:	b538      	push	{r3, r4, r5, lr}
  400f02:	4604      	mov	r4, r0
  400f04:	460d      	mov	r5, r1
  400f06:	4b06      	ldr	r3, [pc, #24]	; (400f20 <list_insert_as_head+0x20>)
  400f08:	4798      	blx	r3
  400f0a:	f080 0001 	eor.w	r0, r0, #1
  400f0e:	2239      	movs	r2, #57	; 0x39
  400f10:	4904      	ldr	r1, [pc, #16]	; (400f24 <list_insert_as_head+0x24>)
  400f12:	b2c0      	uxtb	r0, r0
  400f14:	4b04      	ldr	r3, [pc, #16]	; (400f28 <list_insert_as_head+0x28>)
  400f16:	4798      	blx	r3
  400f18:	6823      	ldr	r3, [r4, #0]
  400f1a:	602b      	str	r3, [r5, #0]
  400f1c:	6025      	str	r5, [r4, #0]
  400f1e:	bd38      	pop	{r3, r4, r5, pc}
  400f20:	00400eeb 	.word	0x00400eeb
  400f24:	004030bc 	.word	0x004030bc
  400f28:	00400ee5 	.word	0x00400ee5

00400f2c <list_insert_after>:
  400f2c:	6803      	ldr	r3, [r0, #0]
  400f2e:	600b      	str	r3, [r1, #0]
  400f30:	6001      	str	r1, [r0, #0]
  400f32:	4770      	bx	lr

00400f34 <list_remove_head>:
  400f34:	6803      	ldr	r3, [r0, #0]
  400f36:	b11b      	cbz	r3, 400f40 <list_remove_head+0xc>
  400f38:	681a      	ldr	r2, [r3, #0]
  400f3a:	6002      	str	r2, [r0, #0]
  400f3c:	4618      	mov	r0, r3
  400f3e:	4770      	bx	lr
  400f40:	2000      	movs	r0, #0
  400f42:	4770      	bx	lr

00400f44 <_afec_init>:
  400f44:	2364      	movs	r3, #100	; 0x64
  400f46:	4a1d      	ldr	r2, [pc, #116]	; (400fbc <_afec_init+0x78>)
  400f48:	fb03 2301 	mla	r3, r3, r1, r2
  400f4c:	685a      	ldr	r2, [r3, #4]
  400f4e:	6042      	str	r2, [r0, #4]
  400f50:	689a      	ldr	r2, [r3, #8]
  400f52:	6082      	str	r2, [r0, #8]
  400f54:	68da      	ldr	r2, [r3, #12]
  400f56:	60c2      	str	r2, [r0, #12]
  400f58:	691a      	ldr	r2, [r3, #16]
  400f5a:	6102      	str	r2, [r0, #16]
  400f5c:	695a      	ldr	r2, [r3, #20]
  400f5e:	6502      	str	r2, [r0, #80]	; 0x50
  400f60:	699a      	ldr	r2, [r3, #24]
  400f62:	6542      	str	r2, [r0, #84]	; 0x54
  400f64:	69da      	ldr	r2, [r3, #28]
  400f66:	6602      	str	r2, [r0, #96]	; 0x60
  400f68:	6a1a      	ldr	r2, [r3, #32]
  400f6a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  400f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  400f70:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  400f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400f76:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
  400f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  400f7c:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  400f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f82:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  400f86:	2200      	movs	r2, #0
  400f88:	2a0b      	cmp	r2, #11
  400f8a:	d814      	bhi.n	400fb6 <_afec_init+0x72>
  400f8c:	b410      	push	{r4}
  400f8e:	6642      	str	r2, [r0, #100]	; 0x64
  400f90:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400f94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400f98:	4413      	add	r3, r2
  400f9a:	330c      	adds	r3, #12
  400f9c:	4c07      	ldr	r4, [pc, #28]	; (400fbc <_afec_init+0x78>)
  400f9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400fa2:	685b      	ldr	r3, [r3, #4]
  400fa4:	66c3      	str	r3, [r0, #108]	; 0x6c
  400fa6:	3201      	adds	r2, #1
  400fa8:	b2d2      	uxtb	r2, r2
  400faa:	2a0b      	cmp	r2, #11
  400fac:	d9ef      	bls.n	400f8e <_afec_init+0x4a>
  400fae:	2000      	movs	r0, #0
  400fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fb4:	4770      	bx	lr
  400fb6:	2000      	movs	r0, #0
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	004030dc 	.word	0x004030dc

00400fc0 <_afec_get_hardware_index>:
  400fc0:	b508      	push	{r3, lr}
  400fc2:	4b09      	ldr	r3, [pc, #36]	; (400fe8 <_afec_get_hardware_index+0x28>)
  400fc4:	4298      	cmp	r0, r3
  400fc6:	d00a      	beq.n	400fde <_afec_get_hardware_index+0x1e>
  400fc8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400fcc:	4298      	cmp	r0, r3
  400fce:	d008      	beq.n	400fe2 <_afec_get_hardware_index+0x22>
  400fd0:	22a3      	movs	r2, #163	; 0xa3
  400fd2:	4906      	ldr	r1, [pc, #24]	; (400fec <_afec_get_hardware_index+0x2c>)
  400fd4:	2000      	movs	r0, #0
  400fd6:	4b06      	ldr	r3, [pc, #24]	; (400ff0 <_afec_get_hardware_index+0x30>)
  400fd8:	4798      	blx	r3
  400fda:	2000      	movs	r0, #0
  400fdc:	bd08      	pop	{r3, pc}
  400fde:	2000      	movs	r0, #0
  400fe0:	bd08      	pop	{r3, pc}
  400fe2:	2001      	movs	r0, #1
  400fe4:	bd08      	pop	{r3, pc}
  400fe6:	bf00      	nop
  400fe8:	4003c000 	.word	0x4003c000
  400fec:	00403140 	.word	0x00403140
  400ff0:	00400ee5 	.word	0x00400ee5

00400ff4 <_afec_get_regs>:
  400ff4:	b508      	push	{r3, lr}
  400ff6:	4b08      	ldr	r3, [pc, #32]	; (401018 <_afec_get_regs+0x24>)
  400ff8:	4798      	blx	r3
  400ffa:	2300      	movs	r3, #0
  400ffc:	b113      	cbz	r3, 401004 <_afec_get_regs+0x10>
  400ffe:	2300      	movs	r3, #0
  401000:	4618      	mov	r0, r3
  401002:	bd08      	pop	{r3, pc}
  401004:	2264      	movs	r2, #100	; 0x64
  401006:	fb02 f203 	mul.w	r2, r2, r3
  40100a:	4904      	ldr	r1, [pc, #16]	; (40101c <_afec_get_regs+0x28>)
  40100c:	5c8a      	ldrb	r2, [r1, r2]
  40100e:	4290      	cmp	r0, r2
  401010:	d0f6      	beq.n	401000 <_afec_get_regs+0xc>
  401012:	3301      	adds	r3, #1
  401014:	b2db      	uxtb	r3, r3
  401016:	e7f1      	b.n	400ffc <_afec_get_regs+0x8>
  401018:	00400fc1 	.word	0x00400fc1
  40101c:	004030dc 	.word	0x004030dc

00401020 <_adc_sync_init>:
  401020:	b538      	push	{r3, r4, r5, lr}
  401022:	460c      	mov	r4, r1
  401024:	4605      	mov	r5, r0
  401026:	f44f 728d 	mov.w	r2, #282	; 0x11a
  40102a:	4907      	ldr	r1, [pc, #28]	; (401048 <_adc_sync_init+0x28>)
  40102c:	3000      	adds	r0, #0
  40102e:	bf18      	it	ne
  401030:	2001      	movne	r0, #1
  401032:	4b06      	ldr	r3, [pc, #24]	; (40104c <_adc_sync_init+0x2c>)
  401034:	4798      	blx	r3
  401036:	602c      	str	r4, [r5, #0]
  401038:	4620      	mov	r0, r4
  40103a:	4b05      	ldr	r3, [pc, #20]	; (401050 <_adc_sync_init+0x30>)
  40103c:	4798      	blx	r3
  40103e:	4601      	mov	r1, r0
  401040:	4620      	mov	r0, r4
  401042:	4b04      	ldr	r3, [pc, #16]	; (401054 <_adc_sync_init+0x34>)
  401044:	4798      	blx	r3
  401046:	bd38      	pop	{r3, r4, r5, pc}
  401048:	00403140 	.word	0x00403140
  40104c:	00400ee5 	.word	0x00400ee5
  401050:	00400ff5 	.word	0x00400ff5
  401054:	00400f45 	.word	0x00400f45

00401058 <_adc_sync_enable_channel>:
  401058:	6802      	ldr	r2, [r0, #0]
  40105a:	2301      	movs	r3, #1
  40105c:	fa03 f101 	lsl.w	r1, r3, r1
  401060:	6151      	str	r1, [r2, #20]
  401062:	4770      	bx	lr

00401064 <_adc_sync_get_data_size>:
  401064:	2002      	movs	r0, #2
  401066:	4770      	bx	lr

00401068 <_adc_sync_is_channel_conversion_done>:
  401068:	6802      	ldr	r2, [r0, #0]
  40106a:	2301      	movs	r3, #1
  40106c:	fa03 f101 	lsl.w	r1, r3, r1
  401070:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401072:	4219      	tst	r1, r3
  401074:	bf14      	ite	ne
  401076:	2001      	movne	r0, #1
  401078:	2000      	moveq	r0, #0
  40107a:	4770      	bx	lr

0040107c <_adc_sync_convert>:
  40107c:	6803      	ldr	r3, [r0, #0]
  40107e:	2202      	movs	r2, #2
  401080:	601a      	str	r2, [r3, #0]
  401082:	4770      	bx	lr

00401084 <_adc_sync_read_channel_data>:
  401084:	6803      	ldr	r3, [r0, #0]
  401086:	6659      	str	r1, [r3, #100]	; 0x64
  401088:	6803      	ldr	r3, [r0, #0]
  40108a:	6e98      	ldr	r0, [r3, #104]	; 0x68
  40108c:	b280      	uxth	r0, r0
  40108e:	4770      	bx	lr

00401090 <_get_cycles_for_us>:
  401090:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401094:	fb03 f000 	mul.w	r0, r3, r0
  401098:	4770      	bx	lr
	...

0040109c <_init_chip>:
  40109c:	b500      	push	{lr}
  40109e:	b083      	sub	sp, #12
  4010a0:	a801      	add	r0, sp, #4
  4010a2:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <_init_chip+0x40>)
  4010a4:	4798      	blx	r3
  4010a6:	4a0e      	ldr	r2, [pc, #56]	; (4010e0 <_init_chip+0x44>)
  4010a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4010b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4010b8:	f3bf 8f6f 	isb	sy
  4010bc:	a801      	add	r0, sp, #4
  4010be:	4b09      	ldr	r3, [pc, #36]	; (4010e4 <_init_chip+0x48>)
  4010c0:	4798      	blx	r3
  4010c2:	4a09      	ldr	r2, [pc, #36]	; (4010e8 <_init_chip+0x4c>)
  4010c4:	6813      	ldr	r3, [r2, #0]
  4010c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  4010ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  4010ce:	6013      	str	r3, [r2, #0]
  4010d0:	4b06      	ldr	r3, [pc, #24]	; (4010ec <_init_chip+0x50>)
  4010d2:	4798      	blx	r3
  4010d4:	b003      	add	sp, #12
  4010d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4010da:	bf00      	nop
  4010dc:	00400949 	.word	0x00400949
  4010e0:	e000ed00 	.word	0xe000ed00
  4010e4:	00400957 	.word	0x00400957
  4010e8:	400e0c00 	.word	0x400e0c00
  4010ec:	00401461 	.word	0x00401461

004010f0 <_ffs>:
  4010f0:	b430      	push	{r4, r5}
  4010f2:	2500      	movs	r5, #0
  4010f4:	428d      	cmp	r5, r1
  4010f6:	d210      	bcs.n	40111a <_ffs+0x2a>
  4010f8:	2201      	movs	r2, #1
  4010fa:	2300      	movs	r3, #0
  4010fc:	2b1f      	cmp	r3, #31
  4010fe:	d80a      	bhi.n	401116 <_ffs+0x26>
  401100:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401104:	4222      	tst	r2, r4
  401106:	d102      	bne.n	40110e <_ffs+0x1e>
  401108:	0052      	lsls	r2, r2, #1
  40110a:	3301      	adds	r3, #1
  40110c:	e7f6      	b.n	4010fc <_ffs+0xc>
  40110e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
  401112:	bc30      	pop	{r4, r5}
  401114:	4770      	bx	lr
  401116:	3501      	adds	r5, #1
  401118:	e7ec      	b.n	4010f4 <_ffs+0x4>
  40111a:	f04f 30ff 	mov.w	r0, #4294967295
  40111e:	e7f8      	b.n	401112 <_ffs+0x22>

00401120 <_ext_irq_handler>:
  401120:	b510      	push	{r4, lr}
  401122:	b086      	sub	sp, #24
  401124:	2300      	movs	r3, #0
  401126:	9301      	str	r3, [sp, #4]
  401128:	9302      	str	r3, [sp, #8]
  40112a:	9303      	str	r3, [sp, #12]
  40112c:	9304      	str	r3, [sp, #16]
  40112e:	9305      	str	r3, [sp, #20]
  401130:	4b21      	ldr	r3, [pc, #132]	; (4011b8 <_ext_irq_handler+0x98>)
  401132:	6818      	ldr	r0, [r3, #0]
  401134:	22f8      	movs	r2, #248	; 0xf8
  401136:	4921      	ldr	r1, [pc, #132]	; (4011bc <_ext_irq_handler+0x9c>)
  401138:	3000      	adds	r0, #0
  40113a:	bf18      	it	ne
  40113c:	2001      	movne	r0, #1
  40113e:	4b20      	ldr	r3, [pc, #128]	; (4011c0 <_ext_irq_handler+0xa0>)
  401140:	4798      	blx	r3
  401142:	4b20      	ldr	r3, [pc, #128]	; (4011c4 <_ext_irq_handler+0xa4>)
  401144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  401146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401148:	4013      	ands	r3, r2
  40114a:	9301      	str	r3, [sp, #4]
  40114c:	491e      	ldr	r1, [pc, #120]	; (4011c8 <_ext_irq_handler+0xa8>)
  40114e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  401150:	6c89      	ldr	r1, [r1, #72]	; 0x48
  401152:	400a      	ands	r2, r1
  401154:	9202      	str	r2, [sp, #8]
  401156:	4313      	orrs	r3, r2
  401158:	e025      	b.n	4011a6 <_ext_irq_handler+0x86>
  40115a:	4b17      	ldr	r3, [pc, #92]	; (4011b8 <_ext_irq_handler+0x98>)
  40115c:	681b      	ldr	r3, [r3, #0]
  40115e:	4620      	mov	r0, r4
  401160:	4798      	blx	r3
  401162:	1163      	asrs	r3, r4, #5
  401164:	f004 041f 	and.w	r4, r4, #31
  401168:	2201      	movs	r2, #1
  40116a:	fa02 f404 	lsl.w	r4, r2, r4
  40116e:	aa06      	add	r2, sp, #24
  401170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401174:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401178:	ea22 0204 	bic.w	r2, r2, r4
  40117c:	f843 2c14 	str.w	r2, [r3, #-20]
  401180:	2105      	movs	r1, #5
  401182:	a801      	add	r0, sp, #4
  401184:	4b11      	ldr	r3, [pc, #68]	; (4011cc <_ext_irq_handler+0xac>)
  401186:	4798      	blx	r3
  401188:	4604      	mov	r4, r0
  40118a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40118e:	d1e4      	bne.n	40115a <_ext_irq_handler+0x3a>
  401190:	4a0c      	ldr	r2, [pc, #48]	; (4011c4 <_ext_irq_handler+0xa4>)
  401192:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  401194:	6c93      	ldr	r3, [r2, #72]	; 0x48
  401196:	400b      	ands	r3, r1
  401198:	9301      	str	r3, [sp, #4]
  40119a:	490b      	ldr	r1, [pc, #44]	; (4011c8 <_ext_irq_handler+0xa8>)
  40119c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
  40119e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  4011a0:	4002      	ands	r2, r0
  4011a2:	9202      	str	r2, [sp, #8]
  4011a4:	4313      	orrs	r3, r2
  4011a6:	b12b      	cbz	r3, 4011b4 <_ext_irq_handler+0x94>
  4011a8:	2105      	movs	r1, #5
  4011aa:	a801      	add	r0, sp, #4
  4011ac:	4b07      	ldr	r3, [pc, #28]	; (4011cc <_ext_irq_handler+0xac>)
  4011ae:	4798      	blx	r3
  4011b0:	4604      	mov	r4, r0
  4011b2:	e7ea      	b.n	40118a <_ext_irq_handler+0x6a>
  4011b4:	b006      	add	sp, #24
  4011b6:	bd10      	pop	{r4, pc}
  4011b8:	204000ac 	.word	0x204000ac
  4011bc:	00403194 	.word	0x00403194
  4011c0:	00400ee5 	.word	0x00400ee5
  4011c4:	400e0e00 	.word	0x400e0e00
  4011c8:	400e1000 	.word	0x400e1000
  4011cc:	004010f1 	.word	0x004010f1

004011d0 <_pio_get_hardware_index>:
  4011d0:	b510      	push	{r4, lr}
  4011d2:	4604      	mov	r4, r0
  4011d4:	22d2      	movs	r2, #210	; 0xd2
  4011d6:	4905      	ldr	r1, [pc, #20]	; (4011ec <_pio_get_hardware_index+0x1c>)
  4011d8:	3000      	adds	r0, #0
  4011da:	bf18      	it	ne
  4011dc:	2001      	movne	r0, #1
  4011de:	4b04      	ldr	r3, [pc, #16]	; (4011f0 <_pio_get_hardware_index+0x20>)
  4011e0:	4798      	blx	r3
  4011e2:	4804      	ldr	r0, [pc, #16]	; (4011f4 <_pio_get_hardware_index+0x24>)
  4011e4:	4420      	add	r0, r4
  4011e6:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4011ea:	bd10      	pop	{r4, pc}
  4011ec:	00403194 	.word	0x00403194
  4011f0:	00400ee5 	.word	0x00400ee5
  4011f4:	bff1f200 	.word	0xbff1f200

004011f8 <_pio_get_index>:
  4011f8:	b510      	push	{r4, lr}
  4011fa:	4604      	mov	r4, r0
  4011fc:	22e0      	movs	r2, #224	; 0xe0
  4011fe:	490d      	ldr	r1, [pc, #52]	; (401234 <_pio_get_index+0x3c>)
  401200:	3000      	adds	r0, #0
  401202:	bf18      	it	ne
  401204:	2001      	movne	r0, #1
  401206:	4b0c      	ldr	r3, [pc, #48]	; (401238 <_pio_get_index+0x40>)
  401208:	4798      	blx	r3
  40120a:	4620      	mov	r0, r4
  40120c:	4b0b      	ldr	r3, [pc, #44]	; (40123c <_pio_get_index+0x44>)
  40120e:	4798      	blx	r3
  401210:	2300      	movs	r3, #0
  401212:	2b01      	cmp	r3, #1
  401214:	d80b      	bhi.n	40122e <_pio_get_index+0x36>
  401216:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40121a:	008a      	lsls	r2, r1, #2
  40121c:	4908      	ldr	r1, [pc, #32]	; (401240 <_pio_get_index+0x48>)
  40121e:	5c8a      	ldrb	r2, [r1, r2]
  401220:	4290      	cmp	r0, r2
  401222:	d002      	beq.n	40122a <_pio_get_index+0x32>
  401224:	3301      	adds	r3, #1
  401226:	b2db      	uxtb	r3, r3
  401228:	e7f3      	b.n	401212 <_pio_get_index+0x1a>
  40122a:	b258      	sxtb	r0, r3
  40122c:	bd10      	pop	{r4, pc}
  40122e:	f04f 30ff 	mov.w	r0, #4294967295
  401232:	bd10      	pop	{r4, pc}
  401234:	00403194 	.word	0x00403194
  401238:	00400ee5 	.word	0x00400ee5
  40123c:	004011d1 	.word	0x004011d1
  401240:	00403158 	.word	0x00403158

00401244 <_pio_init>:
  401244:	b538      	push	{r3, r4, r5, lr}
  401246:	4604      	mov	r4, r0
  401248:	f240 1259 	movw	r2, #345	; 0x159
  40124c:	4929      	ldr	r1, [pc, #164]	; (4012f4 <_pio_init+0xb0>)
  40124e:	3000      	adds	r0, #0
  401250:	bf18      	it	ne
  401252:	2001      	movne	r0, #1
  401254:	4b28      	ldr	r3, [pc, #160]	; (4012f8 <_pio_init+0xb4>)
  401256:	4798      	blx	r3
  401258:	4620      	mov	r0, r4
  40125a:	4b28      	ldr	r3, [pc, #160]	; (4012fc <_pio_init+0xb8>)
  40125c:	4798      	blx	r3
  40125e:	2800      	cmp	r0, #0
  401260:	db43      	blt.n	4012ea <_pio_init+0xa6>
  401262:	4d27      	ldr	r5, [pc, #156]	; (401300 <_pio_init+0xbc>)
  401264:	00c2      	lsls	r2, r0, #3
  401266:	1a11      	subs	r1, r2, r0
  401268:	008b      	lsls	r3, r1, #2
  40126a:	442b      	add	r3, r5
  40126c:	6899      	ldr	r1, [r3, #8]
  40126e:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  401272:	68d9      	ldr	r1, [r3, #12]
  401274:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
  401278:	6919      	ldr	r1, [r3, #16]
  40127a:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
  40127e:	699b      	ldr	r3, [r3, #24]
  401280:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  401284:	1a10      	subs	r0, r2, r0
  401286:	0083      	lsls	r3, r0, #2
  401288:	442b      	add	r3, r5
  40128a:	695b      	ldr	r3, [r3, #20]
  40128c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
  401290:	4620      	mov	r0, r4
  401292:	4b1c      	ldr	r3, [pc, #112]	; (401304 <_pio_init+0xc0>)
  401294:	4798      	blx	r3
  401296:	4428      	add	r0, r5
  401298:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40129c:	2b00      	cmp	r3, #0
  40129e:	db0c      	blt.n	4012ba <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012a0:	095a      	lsrs	r2, r3, #5
  4012a2:	f003 001f 	and.w	r0, r3, #31
  4012a6:	2101      	movs	r1, #1
  4012a8:	4081      	lsls	r1, r0
  4012aa:	3220      	adds	r2, #32
  4012ac:	4816      	ldr	r0, [pc, #88]	; (401308 <_pio_init+0xc4>)
  4012ae:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012b6:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	db08      	blt.n	4012d0 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012be:	095a      	lsrs	r2, r3, #5
  4012c0:	f003 001f 	and.w	r0, r3, #31
  4012c4:	2101      	movs	r1, #1
  4012c6:	4081      	lsls	r1, r0
  4012c8:	3260      	adds	r2, #96	; 0x60
  4012ca:	480f      	ldr	r0, [pc, #60]	; (401308 <_pio_init+0xc4>)
  4012cc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	db0d      	blt.n	4012f0 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012d4:	0959      	lsrs	r1, r3, #5
  4012d6:	f003 031f 	and.w	r3, r3, #31
  4012da:	2201      	movs	r2, #1
  4012dc:	fa02 f303 	lsl.w	r3, r2, r3
  4012e0:	4a09      	ldr	r2, [pc, #36]	; (401308 <_pio_init+0xc4>)
  4012e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  4012e6:	2000      	movs	r0, #0
  4012e8:	bd38      	pop	{r3, r4, r5, pc}
  4012ea:	f06f 0010 	mvn.w	r0, #16
  4012ee:	bd38      	pop	{r3, r4, r5, pc}
  4012f0:	2000      	movs	r0, #0
  4012f2:	bd38      	pop	{r3, r4, r5, pc}
  4012f4:	00403194 	.word	0x00403194
  4012f8:	00400ee5 	.word	0x00400ee5
  4012fc:	004011f9 	.word	0x004011f9
  401300:	00403158 	.word	0x00403158
  401304:	004011d1 	.word	0x004011d1
  401308:	e000e100 	.word	0xe000e100

0040130c <PIOB_Handler>:
  40130c:	b508      	push	{r3, lr}
  40130e:	4b01      	ldr	r3, [pc, #4]	; (401314 <PIOB_Handler+0x8>)
  401310:	4798      	blx	r3
  401312:	bd08      	pop	{r3, pc}
  401314:	00401121 	.word	0x00401121

00401318 <PIOA_Handler>:
  401318:	b508      	push	{r3, lr}
  40131a:	4b01      	ldr	r3, [pc, #4]	; (401320 <PIOA_Handler+0x8>)
  40131c:	4798      	blx	r3
  40131e:	bd08      	pop	{r3, pc}
  401320:	00401121 	.word	0x00401121

00401324 <_ext_irq_init>:
  401324:	b538      	push	{r3, r4, r5, lr}
  401326:	4605      	mov	r5, r0
  401328:	4804      	ldr	r0, [pc, #16]	; (40133c <_ext_irq_init+0x18>)
  40132a:	4c05      	ldr	r4, [pc, #20]	; (401340 <_ext_irq_init+0x1c>)
  40132c:	47a0      	blx	r4
  40132e:	4805      	ldr	r0, [pc, #20]	; (401344 <_ext_irq_init+0x20>)
  401330:	47a0      	blx	r4
  401332:	4b05      	ldr	r3, [pc, #20]	; (401348 <_ext_irq_init+0x24>)
  401334:	601d      	str	r5, [r3, #0]
  401336:	2000      	movs	r0, #0
  401338:	bd38      	pop	{r3, r4, r5, pc}
  40133a:	bf00      	nop
  40133c:	400e0e00 	.word	0x400e0e00
  401340:	00401245 	.word	0x00401245
  401344:	400e1000 	.word	0x400e1000
  401348:	204000ac 	.word	0x204000ac

0040134c <_ext_irq_enable>:
  40134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401350:	4604      	mov	r4, r0
  401352:	460f      	mov	r7, r1
  401354:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4013a8 <_ext_irq_enable+0x5c>
  401358:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  40135c:	4641      	mov	r1, r8
  40135e:	289f      	cmp	r0, #159	; 0x9f
  401360:	bf8c      	ite	hi
  401362:	2000      	movhi	r0, #0
  401364:	2001      	movls	r0, #1
  401366:	4e0e      	ldr	r6, [pc, #56]	; (4013a0 <_ext_irq_enable+0x54>)
  401368:	47b0      	blx	r6
  40136a:	b2e5      	uxtb	r5, r4
  40136c:	22c3      	movs	r2, #195	; 0xc3
  40136e:	4641      	mov	r1, r8
  401370:	2d9f      	cmp	r5, #159	; 0x9f
  401372:	bf8c      	ite	hi
  401374:	2000      	movhi	r0, #0
  401376:	2001      	movls	r0, #1
  401378:	47b0      	blx	r6
  40137a:	096d      	lsrs	r5, r5, #5
  40137c:	4b09      	ldr	r3, [pc, #36]	; (4013a4 <_ext_irq_enable+0x58>)
  40137e:	eb03 2545 	add.w	r5, r3, r5, lsl #9
  401382:	f004 041f 	and.w	r4, r4, #31
  401386:	b937      	cbnz	r7, 401396 <_ext_irq_enable+0x4a>
  401388:	2301      	movs	r3, #1
  40138a:	fa03 f404 	lsl.w	r4, r3, r4
  40138e:	646c      	str	r4, [r5, #68]	; 0x44
  401390:	2000      	movs	r0, #0
  401392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401396:	2301      	movs	r3, #1
  401398:	fa03 f404 	lsl.w	r4, r3, r4
  40139c:	642c      	str	r4, [r5, #64]	; 0x40
  40139e:	e7f7      	b.n	401390 <_ext_irq_enable+0x44>
  4013a0:	00400ee5 	.word	0x00400ee5
  4013a4:	400e0e00 	.word	0x400e0e00
  4013a8:	00403194 	.word	0x00403194

004013ac <_pmc_init_sources>:
  4013ac:	4a14      	ldr	r2, [pc, #80]	; (401400 <_pmc_init_sources+0x54>)
  4013ae:	6a11      	ldr	r1, [r2, #32]
  4013b0:	4b14      	ldr	r3, [pc, #80]	; (401404 <_pmc_init_sources+0x58>)
  4013b2:	430b      	orrs	r3, r1
  4013b4:	6213      	str	r3, [r2, #32]
  4013b6:	4b12      	ldr	r3, [pc, #72]	; (401400 <_pmc_init_sources+0x54>)
  4013b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4013be:	d0fa      	beq.n	4013b6 <_pmc_init_sources+0xa>
  4013c0:	490f      	ldr	r1, [pc, #60]	; (401400 <_pmc_init_sources+0x54>)
  4013c2:	6a0a      	ldr	r2, [r1, #32]
  4013c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4013c8:	4b0f      	ldr	r3, [pc, #60]	; (401408 <_pmc_init_sources+0x5c>)
  4013ca:	4313      	orrs	r3, r2
  4013cc:	620b      	str	r3, [r1, #32]
  4013ce:	4b0c      	ldr	r3, [pc, #48]	; (401400 <_pmc_init_sources+0x54>)
  4013d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4013d6:	d0fa      	beq.n	4013ce <_pmc_init_sources+0x22>
  4013d8:	4b09      	ldr	r3, [pc, #36]	; (401400 <_pmc_init_sources+0x54>)
  4013da:	6a1a      	ldr	r2, [r3, #32]
  4013dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4013e0:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4013e4:	621a      	str	r2, [r3, #32]
  4013e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
  4013e8:	4a08      	ldr	r2, [pc, #32]	; (40140c <_pmc_init_sources+0x60>)
  4013ea:	400a      	ands	r2, r1
  4013ec:	629a      	str	r2, [r3, #40]	; 0x28
  4013ee:	4a08      	ldr	r2, [pc, #32]	; (401410 <_pmc_init_sources+0x64>)
  4013f0:	629a      	str	r2, [r3, #40]	; 0x28
  4013f2:	4b03      	ldr	r3, [pc, #12]	; (401400 <_pmc_init_sources+0x54>)
  4013f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013f6:	f013 0f02 	tst.w	r3, #2
  4013fa:	d0fa      	beq.n	4013f2 <_pmc_init_sources+0x46>
  4013fc:	4770      	bx	lr
  4013fe:	bf00      	nop
  401400:	400e0600 	.word	0x400e0600
  401404:	00370008 	.word	0x00370008
  401408:	00370020 	.word	0x00370020
  40140c:	f800ffff 	.word	0xf800ffff
  401410:	20183f01 	.word	0x20183f01

00401414 <_pmc_init_master_clock>:
  401414:	4a11      	ldr	r2, [pc, #68]	; (40145c <_pmc_init_master_clock+0x48>)
  401416:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40141c:	6313      	str	r3, [r2, #48]	; 0x30
  40141e:	4b0f      	ldr	r3, [pc, #60]	; (40145c <_pmc_init_master_clock+0x48>)
  401420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401422:	f013 0f08 	tst.w	r3, #8
  401426:	d0fa      	beq.n	40141e <_pmc_init_master_clock+0xa>
  401428:	4a0c      	ldr	r2, [pc, #48]	; (40145c <_pmc_init_master_clock+0x48>)
  40142a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40142c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401434:	6313      	str	r3, [r2, #48]	; 0x30
  401436:	4b09      	ldr	r3, [pc, #36]	; (40145c <_pmc_init_master_clock+0x48>)
  401438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40143a:	f013 0f08 	tst.w	r3, #8
  40143e:	d0fa      	beq.n	401436 <_pmc_init_master_clock+0x22>
  401440:	4a06      	ldr	r2, [pc, #24]	; (40145c <_pmc_init_master_clock+0x48>)
  401442:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401444:	f023 0303 	bic.w	r3, r3, #3
  401448:	f043 0302 	orr.w	r3, r3, #2
  40144c:	6313      	str	r3, [r2, #48]	; 0x30
  40144e:	4b03      	ldr	r3, [pc, #12]	; (40145c <_pmc_init_master_clock+0x48>)
  401450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401452:	f013 0f08 	tst.w	r3, #8
  401456:	d0fa      	beq.n	40144e <_pmc_init_master_clock+0x3a>
  401458:	4770      	bx	lr
  40145a:	bf00      	nop
  40145c:	400e0600 	.word	0x400e0600

00401460 <_pmc_init>:
  401460:	b508      	push	{r3, lr}
  401462:	4b02      	ldr	r3, [pc, #8]	; (40146c <_pmc_init+0xc>)
  401464:	4798      	blx	r3
  401466:	4b02      	ldr	r3, [pc, #8]	; (401470 <_pmc_init+0x10>)
  401468:	4798      	blx	r3
  40146a:	bd08      	pop	{r3, pc}
  40146c:	004013ad 	.word	0x004013ad
  401470:	00401415 	.word	0x00401415

00401474 <_pwm_get_cfg>:
  401474:	2300      	movs	r3, #0
  401476:	2b01      	cmp	r3, #1
  401478:	d80f      	bhi.n	40149a <_pwm_get_cfg+0x26>
  40147a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40147e:	008a      	lsls	r2, r1, #2
  401480:	4907      	ldr	r1, [pc, #28]	; (4014a0 <_pwm_get_cfg+0x2c>)
  401482:	588a      	ldr	r2, [r1, r2]
  401484:	4282      	cmp	r2, r0
  401486:	d002      	beq.n	40148e <_pwm_get_cfg+0x1a>
  401488:	3301      	adds	r3, #1
  40148a:	b2db      	uxtb	r3, r3
  40148c:	e7f3      	b.n	401476 <_pwm_get_cfg+0x2>
  40148e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401492:	009a      	lsls	r2, r3, #2
  401494:	4608      	mov	r0, r1
  401496:	4410      	add	r0, r2
  401498:	4770      	bx	lr
  40149a:	2000      	movs	r0, #0
  40149c:	4770      	bx	lr
  40149e:	bf00      	nop
  4014a0:	004031b0 	.word	0x004031b0

004014a4 <_pwm_init_irq_param>:
  4014a4:	4b06      	ldr	r3, [pc, #24]	; (4014c0 <_pwm_init_irq_param+0x1c>)
  4014a6:	4298      	cmp	r0, r3
  4014a8:	d003      	beq.n	4014b2 <_pwm_init_irq_param+0xe>
  4014aa:	4b06      	ldr	r3, [pc, #24]	; (4014c4 <_pwm_init_irq_param+0x20>)
  4014ac:	4298      	cmp	r0, r3
  4014ae:	d003      	beq.n	4014b8 <_pwm_init_irq_param+0x14>
  4014b0:	4770      	bx	lr
  4014b2:	4b05      	ldr	r3, [pc, #20]	; (4014c8 <_pwm_init_irq_param+0x24>)
  4014b4:	6019      	str	r1, [r3, #0]
  4014b6:	e7f8      	b.n	4014aa <_pwm_init_irq_param+0x6>
  4014b8:	4b03      	ldr	r3, [pc, #12]	; (4014c8 <_pwm_init_irq_param+0x24>)
  4014ba:	6059      	str	r1, [r3, #4]
  4014bc:	e7f8      	b.n	4014b0 <_pwm_init_irq_param+0xc>
  4014be:	bf00      	nop
  4014c0:	40020000 	.word	0x40020000
  4014c4:	4005c000 	.word	0x4005c000
  4014c8:	204000b0 	.word	0x204000b0

004014cc <_pwm_interrupt_handler>:
  4014cc:	b508      	push	{r3, lr}
  4014ce:	6903      	ldr	r3, [r0, #16]
  4014d0:	69db      	ldr	r3, [r3, #28]
  4014d2:	b113      	cbz	r3, 4014da <_pwm_interrupt_handler+0xe>
  4014d4:	6803      	ldr	r3, [r0, #0]
  4014d6:	b103      	cbz	r3, 4014da <_pwm_interrupt_handler+0xe>
  4014d8:	4798      	blx	r3
  4014da:	bd08      	pop	{r3, pc}

004014dc <PWM0_Handler>:
  4014dc:	b508      	push	{r3, lr}
  4014de:	4b02      	ldr	r3, [pc, #8]	; (4014e8 <PWM0_Handler+0xc>)
  4014e0:	6818      	ldr	r0, [r3, #0]
  4014e2:	4b02      	ldr	r3, [pc, #8]	; (4014ec <PWM0_Handler+0x10>)
  4014e4:	4798      	blx	r3
  4014e6:	bd08      	pop	{r3, pc}
  4014e8:	204000b0 	.word	0x204000b0
  4014ec:	004014cd 	.word	0x004014cd

004014f0 <PWM1_Handler>:
  4014f0:	b508      	push	{r3, lr}
  4014f2:	4b02      	ldr	r3, [pc, #8]	; (4014fc <PWM1_Handler+0xc>)
  4014f4:	6858      	ldr	r0, [r3, #4]
  4014f6:	4b02      	ldr	r3, [pc, #8]	; (401500 <PWM1_Handler+0x10>)
  4014f8:	4798      	blx	r3
  4014fa:	bd08      	pop	{r3, pc}
  4014fc:	204000b0 	.word	0x204000b0
  401500:	004014cd 	.word	0x004014cd

00401504 <_pwm_init>:
  401504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401506:	4606      	mov	r6, r0
  401508:	460c      	mov	r4, r1
  40150a:	1c08      	adds	r0, r1, #0
  40150c:	bf18      	it	ne
  40150e:	2001      	movne	r0, #1
  401510:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401514:	4944      	ldr	r1, [pc, #272]	; (401628 <_pwm_init+0x124>)
  401516:	4b45      	ldr	r3, [pc, #276]	; (40162c <_pwm_init+0x128>)
  401518:	4798      	blx	r3
  40151a:	4620      	mov	r0, r4
  40151c:	4b44      	ldr	r3, [pc, #272]	; (401630 <_pwm_init+0x12c>)
  40151e:	4798      	blx	r3
  401520:	4605      	mov	r5, r0
  401522:	6134      	str	r4, [r6, #16]
  401524:	6883      	ldr	r3, [r0, #8]
  401526:	6023      	str	r3, [r4, #0]
  401528:	68c3      	ldr	r3, [r0, #12]
  40152a:	67e3      	str	r3, [r4, #124]	; 0x7c
  40152c:	6903      	ldr	r3, [r0, #16]
  40152e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  401532:	6943      	ldr	r3, [r0, #20]
  401534:	65e3      	str	r3, [r4, #92]	; 0x5c
  401536:	6983      	ldr	r3, [r0, #24]
  401538:	66a3      	str	r3, [r4, #104]	; 0x68
  40153a:	69c3      	ldr	r3, [r0, #28]
  40153c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  401540:	6a03      	ldr	r3, [r0, #32]
  401542:	66e3      	str	r3, [r4, #108]	; 0x6c
  401544:	6a43      	ldr	r3, [r0, #36]	; 0x24
  401546:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  40154a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40154c:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  401550:	2300      	movs	r3, #0
  401552:	e019      	b.n	401588 <_pwm_init+0x84>
  401554:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401556:	0118      	lsls	r0, r3, #4
  401558:	eb07 0e00 	add.w	lr, r7, r0
  40155c:	5c3a      	ldrb	r2, [r7, r0]
  40155e:	f8de 1004 	ldr.w	r1, [lr, #4]
  401562:	3210      	adds	r2, #16
  401564:	0152      	lsls	r2, r2, #5
  401566:	50a1      	str	r1, [r4, r2]
  401568:	5c3a      	ldrb	r2, [r7, r0]
  40156a:	f8de 100c 	ldr.w	r1, [lr, #12]
  40156e:	3210      	adds	r2, #16
  401570:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401574:	6051      	str	r1, [r2, #4]
  401576:	5c3a      	ldrb	r2, [r7, r0]
  401578:	f8de 1008 	ldr.w	r1, [lr, #8]
  40157c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401580:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
  401584:	3301      	adds	r3, #1
  401586:	b25b      	sxtb	r3, r3
  401588:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40158a:	4293      	cmp	r3, r2
  40158c:	d3e2      	bcc.n	401554 <_pwm_init+0x50>
  40158e:	2300      	movs	r3, #0
  401590:	e014      	b.n	4015bc <_pwm_init+0xb8>
  401592:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401594:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401598:	0082      	lsls	r2, r0, #2
  40159a:	eb01 0e02 	add.w	lr, r1, r2
  40159e:	5c88      	ldrb	r0, [r1, r2]
  4015a0:	f8de 7004 	ldr.w	r7, [lr, #4]
  4015a4:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4015a8:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
  4015ac:	5c8a      	ldrb	r2, [r1, r2]
  4015ae:	f8de 1008 	ldr.w	r1, [lr, #8]
  4015b2:	3213      	adds	r2, #19
  4015b4:	0112      	lsls	r2, r2, #4
  4015b6:	50a1      	str	r1, [r4, r2]
  4015b8:	3301      	adds	r3, #1
  4015ba:	b25b      	sxtb	r3, r3
  4015bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4015be:	4293      	cmp	r3, r2
  4015c0:	d3e7      	bcc.n	401592 <_pwm_init+0x8e>
  4015c2:	4631      	mov	r1, r6
  4015c4:	4620      	mov	r0, r4
  4015c6:	4b1b      	ldr	r3, [pc, #108]	; (401634 <_pwm_init+0x130>)
  4015c8:	4798      	blx	r3
  4015ca:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015ce:	2b00      	cmp	r3, #0
  4015d0:	db0d      	blt.n	4015ee <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015d2:	095a      	lsrs	r2, r3, #5
  4015d4:	f003 031f 	and.w	r3, r3, #31
  4015d8:	2101      	movs	r1, #1
  4015da:	fa01 f303 	lsl.w	r3, r1, r3
  4015de:	3220      	adds	r2, #32
  4015e0:	4915      	ldr	r1, [pc, #84]	; (401638 <_pwm_init+0x134>)
  4015e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4015e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015ea:	f3bf 8f6f 	isb	sy
  4015ee:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	db09      	blt.n	40160a <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015f6:	095a      	lsrs	r2, r3, #5
  4015f8:	f003 031f 	and.w	r3, r3, #31
  4015fc:	2101      	movs	r1, #1
  4015fe:	fa01 f303 	lsl.w	r3, r1, r3
  401602:	3260      	adds	r2, #96	; 0x60
  401604:	490c      	ldr	r1, [pc, #48]	; (401638 <_pwm_init+0x134>)
  401606:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40160a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40160e:	2b00      	cmp	r3, #0
  401610:	db08      	blt.n	401624 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401612:	0959      	lsrs	r1, r3, #5
  401614:	f003 031f 	and.w	r3, r3, #31
  401618:	2201      	movs	r2, #1
  40161a:	fa02 f303 	lsl.w	r3, r2, r3
  40161e:	4a06      	ldr	r2, [pc, #24]	; (401638 <_pwm_init+0x134>)
  401620:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401624:	2000      	movs	r0, #0
  401626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401628:	00403278 	.word	0x00403278
  40162c:	00400ee5 	.word	0x00400ee5
  401630:	00401475 	.word	0x00401475
  401634:	004014a5 	.word	0x004014a5
  401638:	e000e100 	.word	0xe000e100

0040163c <_pwm_enable>:
  40163c:	b538      	push	{r3, r4, r5, lr}
  40163e:	4604      	mov	r4, r0
  401640:	f240 12b5 	movw	r2, #437	; 0x1b5
  401644:	490b      	ldr	r1, [pc, #44]	; (401674 <_pwm_enable+0x38>)
  401646:	3000      	adds	r0, #0
  401648:	bf18      	it	ne
  40164a:	2001      	movne	r0, #1
  40164c:	4b0a      	ldr	r3, [pc, #40]	; (401678 <_pwm_enable+0x3c>)
  40164e:	4798      	blx	r3
  401650:	6920      	ldr	r0, [r4, #16]
  401652:	4b0a      	ldr	r3, [pc, #40]	; (40167c <_pwm_enable+0x40>)
  401654:	4798      	blx	r3
  401656:	2300      	movs	r3, #0
  401658:	e008      	b.n	40166c <_pwm_enable+0x30>
  40165a:	6921      	ldr	r1, [r4, #16]
  40165c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40165e:	011a      	lsls	r2, r3, #4
  401660:	5cad      	ldrb	r5, [r5, r2]
  401662:	2201      	movs	r2, #1
  401664:	40aa      	lsls	r2, r5
  401666:	604a      	str	r2, [r1, #4]
  401668:	3301      	adds	r3, #1
  40166a:	b25b      	sxtb	r3, r3
  40166c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40166e:	4293      	cmp	r3, r2
  401670:	d3f3      	bcc.n	40165a <_pwm_enable+0x1e>
  401672:	bd38      	pop	{r3, r4, r5, pc}
  401674:	00403278 	.word	0x00403278
  401678:	00400ee5 	.word	0x00400ee5
  40167c:	00401475 	.word	0x00401475

00401680 <_pwm_is_enabled>:
  401680:	b510      	push	{r4, lr}
  401682:	4604      	mov	r4, r0
  401684:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401688:	4907      	ldr	r1, [pc, #28]	; (4016a8 <_pwm_is_enabled+0x28>)
  40168a:	3000      	adds	r0, #0
  40168c:	bf18      	it	ne
  40168e:	2001      	movne	r0, #1
  401690:	4b06      	ldr	r3, [pc, #24]	; (4016ac <_pwm_is_enabled+0x2c>)
  401692:	4798      	blx	r3
  401694:	6923      	ldr	r3, [r4, #16]
  401696:	68db      	ldr	r3, [r3, #12]
  401698:	f013 0f0f 	tst.w	r3, #15
  40169c:	d001      	beq.n	4016a2 <_pwm_is_enabled+0x22>
  40169e:	2001      	movs	r0, #1
  4016a0:	bd10      	pop	{r4, pc}
  4016a2:	2000      	movs	r0, #0
  4016a4:	bd10      	pop	{r4, pc}
  4016a6:	bf00      	nop
  4016a8:	00403278 	.word	0x00403278
  4016ac:	00400ee5 	.word	0x00400ee5

004016b0 <_pwm_get_pwm>:
  4016b0:	2000      	movs	r0, #0
  4016b2:	4770      	bx	lr

004016b4 <_spi_sync_enable>:
  4016b4:	2301      	movs	r3, #1
  4016b6:	6003      	str	r3, [r0, #0]
  4016b8:	2000      	movs	r0, #0
  4016ba:	4770      	bx	lr

004016bc <_spi_get_hardware_index>:
  4016bc:	4b04      	ldr	r3, [pc, #16]	; (4016d0 <_spi_get_hardware_index+0x14>)
  4016be:	4403      	add	r3, r0
  4016c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
  4016c4:	2b05      	cmp	r3, #5
  4016c6:	d001      	beq.n	4016cc <_spi_get_hardware_index+0x10>
  4016c8:	2000      	movs	r0, #0
  4016ca:	4770      	bx	lr
  4016cc:	2001      	movs	r0, #1
  4016ce:	4770      	bx	lr
  4016d0:	bfff8000 	.word	0xbfff8000

004016d4 <_spi_m_sync_init>:
  4016d4:	b570      	push	{r4, r5, r6, lr}
  4016d6:	4606      	mov	r6, r0
  4016d8:	460c      	mov	r4, r1
  4016da:	4608      	mov	r0, r1
  4016dc:	4b20      	ldr	r3, [pc, #128]	; (401760 <_spi_m_sync_init+0x8c>)
  4016de:	4798      	blx	r3
  4016e0:	2300      	movs	r3, #0
  4016e2:	b33b      	cbz	r3, 401734 <_spi_m_sync_init+0x60>
  4016e4:	2500      	movs	r5, #0
  4016e6:	f240 122f 	movw	r2, #303	; 0x12f
  4016ea:	491e      	ldr	r1, [pc, #120]	; (401764 <_spi_m_sync_init+0x90>)
  4016ec:	2e00      	cmp	r6, #0
  4016ee:	bf18      	it	ne
  4016f0:	2c00      	cmpne	r4, #0
  4016f2:	bf14      	ite	ne
  4016f4:	2001      	movne	r0, #1
  4016f6:	2000      	moveq	r0, #0
  4016f8:	4b1b      	ldr	r3, [pc, #108]	; (401768 <_spi_m_sync_init+0x94>)
  4016fa:	4798      	blx	r3
  4016fc:	b355      	cbz	r5, 401754 <_spi_m_sync_init+0x80>
  4016fe:	6923      	ldr	r3, [r4, #16]
  401700:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401704:	d129      	bne.n	40175a <_spi_m_sync_init+0x86>
  401706:	2380      	movs	r3, #128	; 0x80
  401708:	6023      	str	r3, [r4, #0]
  40170a:	6034      	str	r4, [r6, #0]
  40170c:	686a      	ldr	r2, [r5, #4]
  40170e:	4b17      	ldr	r3, [pc, #92]	; (40176c <_spi_m_sync_init+0x98>)
  401710:	4013      	ands	r3, r2
  401712:	6023      	str	r3, [r4, #0]
  401714:	68ab      	ldr	r3, [r5, #8]
  401716:	4a16      	ldr	r2, [pc, #88]	; (401770 <_spi_m_sync_init+0x9c>)
  401718:	401a      	ands	r2, r3
  40171a:	4b16      	ldr	r3, [pc, #88]	; (401774 <_spi_m_sync_init+0xa0>)
  40171c:	4313      	orrs	r3, r2
  40171e:	6063      	str	r3, [r4, #4]
  401720:	68eb      	ldr	r3, [r5, #12]
  401722:	6323      	str	r3, [r4, #48]	; 0x30
  401724:	8a2b      	ldrh	r3, [r5, #16]
  401726:	80f3      	strh	r3, [r6, #6]
  401728:	68eb      	ldr	r3, [r5, #12]
  40172a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40172e:	7133      	strb	r3, [r6, #4]
  401730:	2000      	movs	r0, #0
  401732:	bd70      	pop	{r4, r5, r6, pc}
  401734:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401738:	008a      	lsls	r2, r1, #2
  40173a:	490f      	ldr	r1, [pc, #60]	; (401778 <_spi_m_sync_init+0xa4>)
  40173c:	5c8a      	ldrb	r2, [r1, r2]
  40173e:	4290      	cmp	r0, r2
  401740:	d002      	beq.n	401748 <_spi_m_sync_init+0x74>
  401742:	3301      	adds	r3, #1
  401744:	b2db      	uxtb	r3, r3
  401746:	e7cc      	b.n	4016e2 <_spi_m_sync_init+0xe>
  401748:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  40174c:	00ab      	lsls	r3, r5, #2
  40174e:	460d      	mov	r5, r1
  401750:	441d      	add	r5, r3
  401752:	e7c8      	b.n	4016e6 <_spi_m_sync_init+0x12>
  401754:	f06f 000c 	mvn.w	r0, #12
  401758:	bd70      	pop	{r4, r5, r6, pc}
  40175a:	f06f 0010 	mvn.w	r0, #16
  40175e:	bd70      	pop	{r4, r5, r6, pc}
  401760:	004016bd 	.word	0x004016bd
  401764:	004032a4 	.word	0x004032a4
  401768:	00400ee5 	.word	0x00400ee5
  40176c:	feffff7c 	.word	0xfeffff7c
  401770:	fff1ff6f 	.word	0xfff1ff6f
  401774:	000e0010 	.word	0x000e0010
  401778:	00403290 	.word	0x00403290

0040177c <_spi_m_sync_enable>:
  40177c:	b510      	push	{r4, lr}
  40177e:	4604      	mov	r4, r0
  401780:	b168      	cbz	r0, 40179e <_spi_m_sync_enable+0x22>
  401782:	6803      	ldr	r3, [r0, #0]
  401784:	b14b      	cbz	r3, 40179a <_spi_m_sync_enable+0x1e>
  401786:	2001      	movs	r0, #1
  401788:	f240 126d 	movw	r2, #365	; 0x16d
  40178c:	4905      	ldr	r1, [pc, #20]	; (4017a4 <_spi_m_sync_enable+0x28>)
  40178e:	4b06      	ldr	r3, [pc, #24]	; (4017a8 <_spi_m_sync_enable+0x2c>)
  401790:	4798      	blx	r3
  401792:	6820      	ldr	r0, [r4, #0]
  401794:	4b05      	ldr	r3, [pc, #20]	; (4017ac <_spi_m_sync_enable+0x30>)
  401796:	4798      	blx	r3
  401798:	bd10      	pop	{r4, pc}
  40179a:	2000      	movs	r0, #0
  40179c:	e7f4      	b.n	401788 <_spi_m_sync_enable+0xc>
  40179e:	2000      	movs	r0, #0
  4017a0:	e7f2      	b.n	401788 <_spi_m_sync_enable+0xc>
  4017a2:	bf00      	nop
  4017a4:	004032a4 	.word	0x004032a4
  4017a8:	00400ee5 	.word	0x00400ee5
  4017ac:	004016b5 	.word	0x004016b5

004017b0 <_spi_m_sync_trans>:
  4017b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017b4:	b086      	sub	sp, #24
  4017b6:	4607      	mov	r7, r0
  4017b8:	460d      	mov	r5, r1
  4017ba:	6804      	ldr	r4, [r0, #0]
  4017bc:	680b      	ldr	r3, [r1, #0]
  4017be:	9301      	str	r3, [sp, #4]
  4017c0:	684b      	ldr	r3, [r1, #4]
  4017c2:	9302      	str	r3, [sp, #8]
  4017c4:	2300      	movs	r3, #0
  4017c6:	9303      	str	r3, [sp, #12]
  4017c8:	9304      	str	r3, [sp, #16]
  4017ca:	7903      	ldrb	r3, [r0, #4]
  4017cc:	f88d 3014 	strb.w	r3, [sp, #20]
  4017d0:	1c26      	adds	r6, r4, #0
  4017d2:	bf18      	it	ne
  4017d4:	2601      	movne	r6, #1
  4017d6:	f44f 720b 	mov.w	r2, #556	; 0x22c
  4017da:	4933      	ldr	r1, [pc, #204]	; (4018a8 <_spi_m_sync_trans+0xf8>)
  4017dc:	2800      	cmp	r0, #0
  4017de:	bf0c      	ite	eq
  4017e0:	2000      	moveq	r0, #0
  4017e2:	f006 0001 	andne.w	r0, r6, #1
  4017e6:	4b31      	ldr	r3, [pc, #196]	; (4018ac <_spi_m_sync_trans+0xfc>)
  4017e8:	4798      	blx	r3
  4017ea:	6923      	ldr	r3, [r4, #16]
  4017ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4017f0:	d122      	bne.n	401838 <_spi_m_sync_trans+0x88>
  4017f2:	f06f 0013 	mvn.w	r0, #19
  4017f6:	e053      	b.n	4018a0 <_spi_m_sync_trans+0xf0>
  4017f8:	2300      	movs	r3, #0
  4017fa:	e035      	b.n	401868 <_spi_m_sync_trans+0xb8>
  4017fc:	7850      	ldrb	r0, [r2, #1]
  4017fe:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401802:	3202      	adds	r2, #2
  401804:	9201      	str	r2, [sp, #4]
  401806:	3301      	adds	r3, #1
  401808:	9303      	str	r3, [sp, #12]
  40180a:	60e1      	str	r1, [r4, #12]
  40180c:	f8d4 8010 	ldr.w	r8, [r4, #16]
  401810:	f240 221d 	movw	r2, #541	; 0x21d
  401814:	4924      	ldr	r1, [pc, #144]	; (4018a8 <_spi_m_sync_trans+0xf8>)
  401816:	4630      	mov	r0, r6
  401818:	4b24      	ldr	r3, [pc, #144]	; (4018ac <_spi_m_sync_trans+0xfc>)
  40181a:	4798      	blx	r3
  40181c:	f018 0f08 	tst.w	r8, #8
  401820:	d038      	beq.n	401894 <_spi_m_sync_trans+0xe4>
  401822:	f06f 0012 	mvn.w	r0, #18
  401826:	2800      	cmp	r0, #0
  401828:	db36      	blt.n	401898 <_spi_m_sync_trans+0xe8>
  40182a:	9803      	ldr	r0, [sp, #12]
  40182c:	68ab      	ldr	r3, [r5, #8]
  40182e:	4298      	cmp	r0, r3
  401830:	d302      	bcc.n	401838 <_spi_m_sync_trans+0x88>
  401832:	9a04      	ldr	r2, [sp, #16]
  401834:	4293      	cmp	r3, r2
  401836:	d92f      	bls.n	401898 <_spi_m_sync_trans+0xe8>
  401838:	6923      	ldr	r3, [r4, #16]
  40183a:	f013 0f01 	tst.w	r3, #1
  40183e:	d0db      	beq.n	4017f8 <_spi_m_sync_trans+0x48>
  401840:	68a3      	ldr	r3, [r4, #8]
  401842:	b29b      	uxth	r3, r3
  401844:	9a02      	ldr	r2, [sp, #8]
  401846:	b15a      	cbz	r2, 401860 <_spi_m_sync_trans+0xb0>
  401848:	1c51      	adds	r1, r2, #1
  40184a:	9102      	str	r1, [sp, #8]
  40184c:	7013      	strb	r3, [r2, #0]
  40184e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401852:	2a01      	cmp	r2, #1
  401854:	d904      	bls.n	401860 <_spi_m_sync_trans+0xb0>
  401856:	460a      	mov	r2, r1
  401858:	3101      	adds	r1, #1
  40185a:	9102      	str	r1, [sp, #8]
  40185c:	0a1b      	lsrs	r3, r3, #8
  40185e:	7013      	strb	r3, [r2, #0]
  401860:	9b04      	ldr	r3, [sp, #16]
  401862:	3301      	adds	r3, #1
  401864:	9304      	str	r3, [sp, #16]
  401866:	2301      	movs	r3, #1
  401868:	2b00      	cmp	r3, #0
  40186a:	d1cf      	bne.n	40180c <_spi_m_sync_trans+0x5c>
  40186c:	9b03      	ldr	r3, [sp, #12]
  40186e:	9a04      	ldr	r2, [sp, #16]
  401870:	429a      	cmp	r2, r3
  401872:	d3cb      	bcc.n	40180c <_spi_m_sync_trans+0x5c>
  401874:	88f9      	ldrh	r1, [r7, #6]
  401876:	6922      	ldr	r2, [r4, #16]
  401878:	f012 0f02 	tst.w	r2, #2
  40187c:	d0c6      	beq.n	40180c <_spi_m_sync_trans+0x5c>
  40187e:	9a01      	ldr	r2, [sp, #4]
  401880:	2a00      	cmp	r2, #0
  401882:	d0c0      	beq.n	401806 <_spi_m_sync_trans+0x56>
  401884:	1c51      	adds	r1, r2, #1
  401886:	9101      	str	r1, [sp, #4]
  401888:	7811      	ldrb	r1, [r2, #0]
  40188a:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40188e:	2801      	cmp	r0, #1
  401890:	d8b4      	bhi.n	4017fc <_spi_m_sync_trans+0x4c>
  401892:	e7b8      	b.n	401806 <_spi_m_sync_trans+0x56>
  401894:	2000      	movs	r0, #0
  401896:	e7c6      	b.n	401826 <_spi_m_sync_trans+0x76>
  401898:	6923      	ldr	r3, [r4, #16]
  40189a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40189e:	d0fb      	beq.n	401898 <_spi_m_sync_trans+0xe8>
  4018a0:	b006      	add	sp, #24
  4018a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018a6:	bf00      	nop
  4018a8:	004032a4 	.word	0x004032a4
  4018ac:	00400ee5 	.word	0x00400ee5

004018b0 <_spi_get_spi_m_sync>:
  4018b0:	2000      	movs	r0, #0
  4018b2:	4770      	bx	lr

004018b4 <_system_time_init>:
  4018b4:	4b03      	ldr	r3, [pc, #12]	; (4018c4 <_system_time_init+0x10>)
  4018b6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4018ba:	605a      	str	r2, [r3, #4]
  4018bc:	2205      	movs	r2, #5
  4018be:	601a      	str	r2, [r3, #0]
  4018c0:	4770      	bx	lr
  4018c2:	bf00      	nop
  4018c4:	e000e010 	.word	0xe000e010

004018c8 <_delay_init>:
  4018c8:	b508      	push	{r3, lr}
  4018ca:	4b01      	ldr	r3, [pc, #4]	; (4018d0 <_delay_init+0x8>)
  4018cc:	4798      	blx	r3
  4018ce:	bd08      	pop	{r3, pc}
  4018d0:	004018b5 	.word	0x004018b5

004018d4 <_delay_cycles>:
  4018d4:	0e08      	lsrs	r0, r1, #24
  4018d6:	e00d      	b.n	4018f4 <_delay_cycles+0x20>
  4018d8:	4b0d      	ldr	r3, [pc, #52]	; (401910 <_delay_cycles+0x3c>)
  4018da:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4018de:	6058      	str	r0, [r3, #4]
  4018e0:	6098      	str	r0, [r3, #8]
  4018e2:	4b0b      	ldr	r3, [pc, #44]	; (401910 <_delay_cycles+0x3c>)
  4018e4:	681b      	ldr	r3, [r3, #0]
  4018e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4018ea:	d0fa      	beq.n	4018e2 <_delay_cycles+0xe>
  4018ec:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4018f0:	3101      	adds	r1, #1
  4018f2:	4610      	mov	r0, r2
  4018f4:	1e43      	subs	r3, r0, #1
  4018f6:	b2da      	uxtb	r2, r3
  4018f8:	2800      	cmp	r0, #0
  4018fa:	d1ed      	bne.n	4018d8 <_delay_cycles+0x4>
  4018fc:	4b04      	ldr	r3, [pc, #16]	; (401910 <_delay_cycles+0x3c>)
  4018fe:	6059      	str	r1, [r3, #4]
  401900:	6099      	str	r1, [r3, #8]
  401902:	4b03      	ldr	r3, [pc, #12]	; (401910 <_delay_cycles+0x3c>)
  401904:	681b      	ldr	r3, [r3, #0]
  401906:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40190a:	d0fa      	beq.n	401902 <_delay_cycles+0x2e>
  40190c:	4770      	bx	lr
  40190e:	bf00      	nop
  401910:	e000e010 	.word	0xe000e010

00401914 <get_cfg>:
  401914:	2300      	movs	r3, #0
  401916:	2b01      	cmp	r3, #1
  401918:	d815      	bhi.n	401946 <get_cfg+0x32>
  40191a:	b410      	push	{r4}
  40191c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401920:	008a      	lsls	r2, r1, #2
  401922:	490a      	ldr	r1, [pc, #40]	; (40194c <get_cfg+0x38>)
  401924:	588a      	ldr	r2, [r1, r2]
  401926:	4282      	cmp	r2, r0
  401928:	d007      	beq.n	40193a <get_cfg+0x26>
  40192a:	3301      	adds	r3, #1
  40192c:	b2db      	uxtb	r3, r3
  40192e:	2b01      	cmp	r3, #1
  401930:	d9f4      	bls.n	40191c <get_cfg+0x8>
  401932:	2000      	movs	r0, #0
  401934:	f85d 4b04 	ldr.w	r4, [sp], #4
  401938:	4770      	bx	lr
  40193a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40193e:	00a3      	lsls	r3, r4, #2
  401940:	4608      	mov	r0, r1
  401942:	4418      	add	r0, r3
  401944:	e7f6      	b.n	401934 <get_cfg+0x20>
  401946:	2000      	movs	r0, #0
  401948:	4770      	bx	lr
  40194a:	bf00      	nop
  40194c:	20400000 	.word	0x20400000

00401950 <_tc_init_irq_param>:
  401950:	4b06      	ldr	r3, [pc, #24]	; (40196c <_tc_init_irq_param+0x1c>)
  401952:	4298      	cmp	r0, r3
  401954:	d003      	beq.n	40195e <_tc_init_irq_param+0xe>
  401956:	4b06      	ldr	r3, [pc, #24]	; (401970 <_tc_init_irq_param+0x20>)
  401958:	4298      	cmp	r0, r3
  40195a:	d003      	beq.n	401964 <_tc_init_irq_param+0x14>
  40195c:	4770      	bx	lr
  40195e:	4b05      	ldr	r3, [pc, #20]	; (401974 <_tc_init_irq_param+0x24>)
  401960:	6019      	str	r1, [r3, #0]
  401962:	e7f8      	b.n	401956 <_tc_init_irq_param+0x6>
  401964:	4b03      	ldr	r3, [pc, #12]	; (401974 <_tc_init_irq_param+0x24>)
  401966:	6059      	str	r1, [r3, #4]
  401968:	e7f8      	b.n	40195c <_tc_init_irq_param+0xc>
  40196a:	bf00      	nop
  40196c:	4000c000 	.word	0x4000c000
  401970:	40010000 	.word	0x40010000
  401974:	204000d0 	.word	0x204000d0

00401978 <tc_interrupt_handler>:
  401978:	b508      	push	{r3, lr}
  40197a:	68c3      	ldr	r3, [r0, #12]
  40197c:	6a1b      	ldr	r3, [r3, #32]
  40197e:	f013 0f10 	tst.w	r3, #16
  401982:	d100      	bne.n	401986 <tc_interrupt_handler+0xe>
  401984:	bd08      	pop	{r3, pc}
  401986:	6803      	ldr	r3, [r0, #0]
  401988:	4798      	blx	r3
  40198a:	e7fb      	b.n	401984 <tc_interrupt_handler+0xc>

0040198c <_timer_init>:
  40198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40198e:	4607      	mov	r7, r0
  401990:	460c      	mov	r4, r1
  401992:	4608      	mov	r0, r1
  401994:	4b27      	ldr	r3, [pc, #156]	; (401a34 <_timer_init+0xa8>)
  401996:	4798      	blx	r3
  401998:	4605      	mov	r5, r0
  40199a:	6886      	ldr	r6, [r0, #8]
  40199c:	60fc      	str	r4, [r7, #12]
  40199e:	2296      	movs	r2, #150	; 0x96
  4019a0:	4925      	ldr	r1, [pc, #148]	; (401a38 <_timer_init+0xac>)
  4019a2:	2001      	movs	r0, #1
  4019a4:	4b25      	ldr	r3, [pc, #148]	; (401a3c <_timer_init+0xb0>)
  4019a6:	4798      	blx	r3
  4019a8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  4019ac:	d001      	beq.n	4019b2 <_timer_init+0x26>
  4019ae:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
  4019b2:	6066      	str	r6, [r4, #4]
  4019b4:	696b      	ldr	r3, [r5, #20]
  4019b6:	6163      	str	r3, [r4, #20]
  4019b8:	69ab      	ldr	r3, [r5, #24]
  4019ba:	61a3      	str	r3, [r4, #24]
  4019bc:	68eb      	ldr	r3, [r5, #12]
  4019be:	6323      	str	r3, [r4, #48]	; 0x30
  4019c0:	69eb      	ldr	r3, [r5, #28]
  4019c2:	61e3      	str	r3, [r4, #28]
  4019c4:	2310      	movs	r3, #16
  4019c6:	6263      	str	r3, [r4, #36]	; 0x24
  4019c8:	692b      	ldr	r3, [r5, #16]
  4019ca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  4019ce:	4639      	mov	r1, r7
  4019d0:	4620      	mov	r0, r4
  4019d2:	4b1b      	ldr	r3, [pc, #108]	; (401a40 <_timer_init+0xb4>)
  4019d4:	4798      	blx	r3
  4019d6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4019da:	2b00      	cmp	r3, #0
  4019dc:	db0d      	blt.n	4019fa <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019de:	095a      	lsrs	r2, r3, #5
  4019e0:	f003 031f 	and.w	r3, r3, #31
  4019e4:	2101      	movs	r1, #1
  4019e6:	fa01 f303 	lsl.w	r3, r1, r3
  4019ea:	3220      	adds	r2, #32
  4019ec:	4915      	ldr	r1, [pc, #84]	; (401a44 <_timer_init+0xb8>)
  4019ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4019f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4019f6:	f3bf 8f6f 	isb	sy
  4019fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4019fe:	2b00      	cmp	r3, #0
  401a00:	db09      	blt.n	401a16 <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a02:	095a      	lsrs	r2, r3, #5
  401a04:	f003 031f 	and.w	r3, r3, #31
  401a08:	2101      	movs	r1, #1
  401a0a:	fa01 f303 	lsl.w	r3, r1, r3
  401a0e:	3260      	adds	r2, #96	; 0x60
  401a10:	490c      	ldr	r1, [pc, #48]	; (401a44 <_timer_init+0xb8>)
  401a12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  401a16:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401a1a:	2b00      	cmp	r3, #0
  401a1c:	db08      	blt.n	401a30 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a1e:	0959      	lsrs	r1, r3, #5
  401a20:	f003 031f 	and.w	r3, r3, #31
  401a24:	2201      	movs	r2, #1
  401a26:	fa02 f303 	lsl.w	r3, r2, r3
  401a2a:	4a06      	ldr	r2, [pc, #24]	; (401a44 <_timer_init+0xb8>)
  401a2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401a30:	2000      	movs	r0, #0
  401a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a34:	00401915 	.word	0x00401915
  401a38:	004032bc 	.word	0x004032bc
  401a3c:	00400ee5 	.word	0x00400ee5
  401a40:	00401951 	.word	0x00401951
  401a44:	e000e100 	.word	0xe000e100

00401a48 <_tc_get_timer>:
  401a48:	2000      	movs	r0, #0
  401a4a:	4770      	bx	lr

00401a4c <TC0_Handler>:
  401a4c:	b508      	push	{r3, lr}
  401a4e:	4b02      	ldr	r3, [pc, #8]	; (401a58 <TC0_Handler+0xc>)
  401a50:	6818      	ldr	r0, [r3, #0]
  401a52:	4b02      	ldr	r3, [pc, #8]	; (401a5c <TC0_Handler+0x10>)
  401a54:	4798      	blx	r3
  401a56:	bd08      	pop	{r3, pc}
  401a58:	204000d0 	.word	0x204000d0
  401a5c:	00401979 	.word	0x00401979

00401a60 <TC3_Handler>:
  401a60:	b508      	push	{r3, lr}
  401a62:	4b02      	ldr	r3, [pc, #8]	; (401a6c <TC3_Handler+0xc>)
  401a64:	6858      	ldr	r0, [r3, #4]
  401a66:	4b02      	ldr	r3, [pc, #8]	; (401a70 <TC3_Handler+0x10>)
  401a68:	4798      	blx	r3
  401a6a:	bd08      	pop	{r3, pc}
  401a6c:	204000d0 	.word	0x204000d0
  401a70:	00401979 	.word	0x00401979

00401a74 <_get_i2cm_sync_cfg>:
  401a74:	2300      	movs	r3, #0
  401a76:	b13b      	cbz	r3, 401a88 <_get_i2cm_sync_cfg+0x14>
  401a78:	2000      	movs	r0, #0
  401a7a:	4770      	bx	lr
  401a7c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401a80:	00e3      	lsls	r3, r4, #3
  401a82:	4608      	mov	r0, r1
  401a84:	4418      	add	r0, r3
  401a86:	e00c      	b.n	401aa2 <_get_i2cm_sync_cfg+0x2e>
  401a88:	b410      	push	{r4}
  401a8a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401a8e:	00ca      	lsls	r2, r1, #3
  401a90:	4905      	ldr	r1, [pc, #20]	; (401aa8 <_get_i2cm_sync_cfg+0x34>)
  401a92:	588a      	ldr	r2, [r1, r2]
  401a94:	4282      	cmp	r2, r0
  401a96:	d0f1      	beq.n	401a7c <_get_i2cm_sync_cfg+0x8>
  401a98:	3301      	adds	r3, #1
  401a9a:	b2db      	uxtb	r3, r3
  401a9c:	2b00      	cmp	r3, #0
  401a9e:	d0f4      	beq.n	401a8a <_get_i2cm_sync_cfg+0x16>
  401aa0:	2000      	movs	r0, #0
  401aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  401aa6:	4770      	bx	lr
  401aa8:	004032d0 	.word	0x004032d0

00401aac <_i2c_m_sync_init>:
  401aac:	b538      	push	{r3, r4, r5, lr}
  401aae:	4604      	mov	r4, r0
  401ab0:	460d      	mov	r5, r1
  401ab2:	2800      	cmp	r0, #0
  401ab4:	bf18      	it	ne
  401ab6:	2900      	cmpne	r1, #0
  401ab8:	bf14      	ite	ne
  401aba:	2001      	movne	r0, #1
  401abc:	2000      	moveq	r0, #0
  401abe:	2278      	movs	r2, #120	; 0x78
  401ac0:	4909      	ldr	r1, [pc, #36]	; (401ae8 <_i2c_m_sync_init+0x3c>)
  401ac2:	4b0a      	ldr	r3, [pc, #40]	; (401aec <_i2c_m_sync_init+0x40>)
  401ac4:	4798      	blx	r3
  401ac6:	6125      	str	r5, [r4, #16]
  401ac8:	4628      	mov	r0, r5
  401aca:	4b09      	ldr	r3, [pc, #36]	; (401af0 <_i2c_m_sync_init+0x44>)
  401acc:	4798      	blx	r3
  401ace:	6843      	ldr	r3, [r0, #4]
  401ad0:	602b      	str	r3, [r5, #0]
  401ad2:	6923      	ldr	r3, [r4, #16]
  401ad4:	6882      	ldr	r2, [r0, #8]
  401ad6:	639a      	str	r2, [r3, #56]	; 0x38
  401ad8:	6923      	ldr	r3, [r4, #16]
  401ada:	68c2      	ldr	r2, [r0, #12]
  401adc:	645a      	str	r2, [r3, #68]	; 0x44
  401ade:	6923      	ldr	r3, [r4, #16]
  401ae0:	6902      	ldr	r2, [r0, #16]
  401ae2:	611a      	str	r2, [r3, #16]
  401ae4:	2000      	movs	r0, #0
  401ae6:	bd38      	pop	{r3, r4, r5, pc}
  401ae8:	004032e8 	.word	0x004032e8
  401aec:	00400ee5 	.word	0x00400ee5
  401af0:	00401a75 	.word	0x00401a75

00401af4 <_i2c_m_sync_transfer>:
  401af4:	b538      	push	{r3, r4, r5, lr}
  401af6:	4604      	mov	r4, r0
  401af8:	460d      	mov	r5, r1
  401afa:	2800      	cmp	r0, #0
  401afc:	bf18      	it	ne
  401afe:	2900      	cmpne	r1, #0
  401b00:	bf14      	ite	ne
  401b02:	2001      	movne	r0, #1
  401b04:	2000      	moveq	r0, #0
  401b06:	22ba      	movs	r2, #186	; 0xba
  401b08:	4952      	ldr	r1, [pc, #328]	; (401c54 <_i2c_m_sync_transfer+0x160>)
  401b0a:	4b53      	ldr	r3, [pc, #332]	; (401c58 <_i2c_m_sync_transfer+0x164>)
  401b0c:	4798      	blx	r3
  401b0e:	8863      	ldrh	r3, [r4, #2]
  401b10:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b14:	f040 809a 	bne.w	401c4c <_i2c_m_sync_transfer+0x158>
  401b18:	886b      	ldrh	r3, [r5, #2]
  401b1a:	f013 0f01 	tst.w	r3, #1
  401b1e:	d118      	bne.n	401b52 <_i2c_m_sync_transfer+0x5e>
  401b20:	886b      	ldrh	r3, [r5, #2]
  401b22:	b29b      	uxth	r3, r3
  401b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401b28:	806b      	strh	r3, [r5, #2]
  401b2a:	882b      	ldrh	r3, [r5, #0]
  401b2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b30:	d05f      	beq.n	401bf2 <_i2c_m_sync_transfer+0xfe>
  401b32:	6922      	ldr	r2, [r4, #16]
  401b34:	0a1b      	lsrs	r3, r3, #8
  401b36:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401b3a:	041b      	lsls	r3, r3, #16
  401b3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401b44:	6053      	str	r3, [r2, #4]
  401b46:	6923      	ldr	r3, [r4, #16]
  401b48:	782a      	ldrb	r2, [r5, #0]
  401b4a:	60da      	str	r2, [r3, #12]
  401b4c:	2000      	movs	r0, #0
  401b4e:	4601      	mov	r1, r0
  401b50:	e05c      	b.n	401c0c <_i2c_m_sync_transfer+0x118>
  401b52:	886b      	ldrh	r3, [r5, #2]
  401b54:	b29b      	uxth	r3, r3
  401b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401b5a:	806b      	strh	r3, [r5, #2]
  401b5c:	882b      	ldrh	r3, [r5, #0]
  401b5e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b62:	d022      	beq.n	401baa <_i2c_m_sync_transfer+0xb6>
  401b64:	6922      	ldr	r2, [r4, #16]
  401b66:	0a1b      	lsrs	r3, r3, #8
  401b68:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401b6c:	041b      	lsls	r3, r3, #16
  401b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401b72:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  401b76:	6053      	str	r3, [r2, #4]
  401b78:	6923      	ldr	r3, [r4, #16]
  401b7a:	782a      	ldrb	r2, [r5, #0]
  401b7c:	60da      	str	r2, [r3, #12]
  401b7e:	6923      	ldr	r3, [r4, #16]
  401b80:	686a      	ldr	r2, [r5, #4]
  401b82:	2a01      	cmp	r2, #1
  401b84:	d019      	beq.n	401bba <_i2c_m_sync_transfer+0xc6>
  401b86:	2201      	movs	r2, #1
  401b88:	601a      	str	r2, [r3, #0]
  401b8a:	2100      	movs	r1, #0
  401b8c:	686b      	ldr	r3, [r5, #4]
  401b8e:	4299      	cmp	r1, r3
  401b90:	d222      	bcs.n	401bd8 <_i2c_m_sync_transfer+0xe4>
  401b92:	6923      	ldr	r3, [r4, #16]
  401b94:	6a1a      	ldr	r2, [r3, #32]
  401b96:	f012 0f02 	tst.w	r2, #2
  401b9a:	d110      	bne.n	401bbe <_i2c_m_sync_transfer+0xca>
  401b9c:	6a1b      	ldr	r3, [r3, #32]
  401b9e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ba2:	d0f6      	beq.n	401b92 <_i2c_m_sync_transfer+0x9e>
  401ba4:	f06f 0001 	mvn.w	r0, #1
  401ba8:	bd38      	pop	{r3, r4, r5, pc}
  401baa:	6922      	ldr	r2, [r4, #16]
  401bac:	041b      	lsls	r3, r3, #16
  401bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401bb6:	6053      	str	r3, [r2, #4]
  401bb8:	e7e1      	b.n	401b7e <_i2c_m_sync_transfer+0x8a>
  401bba:	2203      	movs	r2, #3
  401bbc:	e7e4      	b.n	401b88 <_i2c_m_sync_transfer+0x94>
  401bbe:	68aa      	ldr	r2, [r5, #8]
  401bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bc2:	5453      	strb	r3, [r2, r1]
  401bc4:	686b      	ldr	r3, [r5, #4]
  401bc6:	3b02      	subs	r3, #2
  401bc8:	4299      	cmp	r1, r3
  401bca:	d001      	beq.n	401bd0 <_i2c_m_sync_transfer+0xdc>
  401bcc:	3101      	adds	r1, #1
  401bce:	e7dd      	b.n	401b8c <_i2c_m_sync_transfer+0x98>
  401bd0:	6923      	ldr	r3, [r4, #16]
  401bd2:	2202      	movs	r2, #2
  401bd4:	601a      	str	r2, [r3, #0]
  401bd6:	e7f9      	b.n	401bcc <_i2c_m_sync_transfer+0xd8>
  401bd8:	6923      	ldr	r3, [r4, #16]
  401bda:	6a1b      	ldr	r3, [r3, #32]
  401bdc:	f013 0f01 	tst.w	r3, #1
  401be0:	d0fa      	beq.n	401bd8 <_i2c_m_sync_transfer+0xe4>
  401be2:	8863      	ldrh	r3, [r4, #2]
  401be4:	b29b      	uxth	r3, r3
  401be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401bea:	b29b      	uxth	r3, r3
  401bec:	8063      	strh	r3, [r4, #2]
  401bee:	2000      	movs	r0, #0
  401bf0:	bd38      	pop	{r3, r4, r5, pc}
  401bf2:	6922      	ldr	r2, [r4, #16]
  401bf4:	041b      	lsls	r3, r3, #16
  401bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401bfa:	6053      	str	r3, [r2, #4]
  401bfc:	e7a6      	b.n	401b4c <_i2c_m_sync_transfer+0x58>
  401bfe:	f06f 0001 	mvn.w	r0, #1
  401c02:	b978      	cbnz	r0, 401c24 <_i2c_m_sync_transfer+0x130>
  401c04:	68ab      	ldr	r3, [r5, #8]
  401c06:	5c5b      	ldrb	r3, [r3, r1]
  401c08:	6353      	str	r3, [r2, #52]	; 0x34
  401c0a:	3101      	adds	r1, #1
  401c0c:	686b      	ldr	r3, [r5, #4]
  401c0e:	4299      	cmp	r1, r3
  401c10:	d208      	bcs.n	401c24 <_i2c_m_sync_transfer+0x130>
  401c12:	6922      	ldr	r2, [r4, #16]
  401c14:	6a13      	ldr	r3, [r2, #32]
  401c16:	f413 7f80 	tst.w	r3, #256	; 0x100
  401c1a:	d1f0      	bne.n	401bfe <_i2c_m_sync_transfer+0x10a>
  401c1c:	f013 0f04 	tst.w	r3, #4
  401c20:	d0f7      	beq.n	401c12 <_i2c_m_sync_transfer+0x11e>
  401c22:	e7ee      	b.n	401c02 <_i2c_m_sync_transfer+0x10e>
  401c24:	886b      	ldrh	r3, [r5, #2]
  401c26:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401c2a:	d106      	bne.n	401c3a <_i2c_m_sync_transfer+0x146>
  401c2c:	8863      	ldrh	r3, [r4, #2]
  401c2e:	b29b      	uxth	r3, r3
  401c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401c34:	b29b      	uxth	r3, r3
  401c36:	8063      	strh	r3, [r4, #2]
  401c38:	bd38      	pop	{r3, r4, r5, pc}
  401c3a:	6923      	ldr	r3, [r4, #16]
  401c3c:	2202      	movs	r2, #2
  401c3e:	601a      	str	r2, [r3, #0]
  401c40:	6923      	ldr	r3, [r4, #16]
  401c42:	6a1b      	ldr	r3, [r3, #32]
  401c44:	f013 0f01 	tst.w	r3, #1
  401c48:	d0fa      	beq.n	401c40 <_i2c_m_sync_transfer+0x14c>
  401c4a:	e7ef      	b.n	401c2c <_i2c_m_sync_transfer+0x138>
  401c4c:	f06f 0005 	mvn.w	r0, #5
  401c50:	bd38      	pop	{r3, r4, r5, pc}
  401c52:	bf00      	nop
  401c54:	004032e8 	.word	0x004032e8
  401c58:	00400ee5 	.word	0x00400ee5

00401c5c <_wdt_init>:
  401c5c:	b510      	push	{r4, lr}
  401c5e:	4604      	mov	r4, r0
  401c60:	b168      	cbz	r0, 401c7e <_wdt_init+0x22>
  401c62:	6803      	ldr	r3, [r0, #0]
  401c64:	b14b      	cbz	r3, 401c7a <_wdt_init+0x1e>
  401c66:	2001      	movs	r0, #1
  401c68:	2233      	movs	r2, #51	; 0x33
  401c6a:	4906      	ldr	r1, [pc, #24]	; (401c84 <_wdt_init+0x28>)
  401c6c:	4b06      	ldr	r3, [pc, #24]	; (401c88 <_wdt_init+0x2c>)
  401c6e:	4798      	blx	r3
  401c70:	6823      	ldr	r3, [r4, #0]
  401c72:	4a06      	ldr	r2, [pc, #24]	; (401c8c <_wdt_init+0x30>)
  401c74:	605a      	str	r2, [r3, #4]
  401c76:	2000      	movs	r0, #0
  401c78:	bd10      	pop	{r4, pc}
  401c7a:	2000      	movs	r0, #0
  401c7c:	e7f4      	b.n	401c68 <_wdt_init+0xc>
  401c7e:	2000      	movs	r0, #0
  401c80:	e7f2      	b.n	401c68 <_wdt_init+0xc>
  401c82:	bf00      	nop
  401c84:	00403304 	.word	0x00403304
  401c88:	00400ee5 	.word	0x00400ee5
  401c8c:	3fffafff 	.word	0x3fffafff

00401c90 <main>:
#include "esc_calibration.h"
#include "ADC_driver.h"


int main(void)
{
  401c90:	b500      	push	{lr}
  401c92:	b08d      	sub	sp, #52	; 0x34
	atmel_start_init();
  401c94:	4b3b      	ldr	r3, [pc, #236]	; (401d84 <main+0xf4>)
  401c96:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  401c98:	4b3b      	ldr	r3, [pc, #236]	; (401d88 <main+0xf8>)
  401c9a:	2280      	movs	r2, #128	; 0x80
  401c9c:	635a      	str	r2, [r3, #52]	; 0x34
  401c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ca2:	635a      	str	r2, [r3, #52]	; 0x34
  401ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ca8:	635a      	str	r2, [r3, #52]	; 0x34
  401caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cae:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_set_pin_level(LED0, 0);
	gpio_set_pin_level(LED1, 0);
	gpio_set_pin_level(LED2, 0);
	gpio_set_pin_level(LED3, 0);
	
	uint8_t robot_ID = 0;
  401cb0:	2400      	movs	r4, #0
  401cb2:	a80c      	add	r0, sp, #48	; 0x30
  401cb4:	f800 4d01 	strb.w	r4, [r0, #-1]!
	uint8_t data_store[32];
	
	NPP_init(&robot_ID);
  401cb8:	4b34      	ldr	r3, [pc, #208]	; (401d8c <main+0xfc>)
  401cba:	4798      	blx	r3
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  401cbc:	2220      	movs	r2, #32
  401cbe:	4621      	mov	r1, r4
  401cc0:	a803      	add	r0, sp, #12
  401cc2:	4b33      	ldr	r3, [pc, #204]	; (401d90 <main+0x100>)
  401cc4:	4798      	blx	r3
	nRF24_init(data_store);
  401cc6:	a803      	add	r0, sp, #12
  401cc8:	4b32      	ldr	r3, [pc, #200]	; (401d94 <main+0x104>)
  401cca:	4798      	blx	r3
	delay_us(200); //Should be 200 us, setting higher for testing
  401ccc:	20c8      	movs	r0, #200	; 0xc8
  401cce:	4b32      	ldr	r3, [pc, #200]	; (401d98 <main+0x108>)
  401cd0:	4798      	blx	r3
	nRF24_enter_receive();
  401cd2:	4b32      	ldr	r3, [pc, #200]	; (401d9c <main+0x10c>)
  401cd4:	4798      	blx	r3
	
	pwm_enable(&PWM_0);
  401cd6:	4832      	ldr	r0, [pc, #200]	; (401da0 <main+0x110>)
  401cd8:	4d32      	ldr	r5, [pc, #200]	; (401da4 <main+0x114>)
  401cda:	47a8      	blx	r5
	pwm_enable(&PWM_1);
  401cdc:	4832      	ldr	r0, [pc, #200]	; (401da8 <main+0x118>)
  401cde:	47a8      	blx	r5
	
	set_pwm_motor_0(0);
  401ce0:	4620      	mov	r0, r4
  401ce2:	4b32      	ldr	r3, [pc, #200]	; (401dac <main+0x11c>)
  401ce4:	4798      	blx	r3
	set_pwm_motor_1(0);
  401ce6:	4620      	mov	r0, r4
  401ce8:	4b31      	ldr	r3, [pc, #196]	; (401db0 <main+0x120>)
  401cea:	4798      	blx	r3
	set_pwm_motor_2(0);
  401cec:	4620      	mov	r0, r4
  401cee:	4b31      	ldr	r3, [pc, #196]	; (401db4 <main+0x124>)
  401cf0:	4798      	blx	r3
	set_pwm_motor_3(0);
  401cf2:	4620      	mov	r0, r4
  401cf4:	4b30      	ldr	r3, [pc, #192]	; (401db8 <main+0x128>)
  401cf6:	4798      	blx	r3
	set_pwm_dribbler_motor(0);
  401cf8:	4620      	mov	r0, r4
  401cfa:	4b30      	ldr	r3, [pc, #192]	; (401dbc <main+0x12c>)
  401cfc:	4798      	blx	r3
	
	float adc_value_battery_current = 0;
  401cfe:	2300      	movs	r3, #0
  401d00:	9302      	str	r3, [sp, #8]
	float adc_value_battery_voltage = 0;
  401d02:	9301      	str	r3, [sp, #4]
	float adc_value_cap_charge = 0;
  401d04:	9300      	str	r3, [sp, #0]
	
	adc_init();
  401d06:	4b2e      	ldr	r3, [pc, #184]	; (401dc0 <main+0x130>)
  401d08:	4798      	blx	r3
  401d0a:	e013      	b.n	401d34 <main+0xa4>
	
	while (1) {
		if(nRF_24_is_data_available(1)){ //There is data for me to collect :)
			nRF24_receive_data(data_store);
  401d0c:	a803      	add	r0, sp, #12
  401d0e:	4b2d      	ldr	r3, [pc, #180]	; (401dc4 <main+0x134>)
  401d10:	4798      	blx	r3
			NPP_process(&data_store[0], &robot_ID);
  401d12:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d16:	a803      	add	r0, sp, #12
  401d18:	4b2b      	ldr	r3, [pc, #172]	; (401dc8 <main+0x138>)
  401d1a:	4798      	blx	r3
			memset(&data_store[0], 0, sizeof(uint8_t)*32);
  401d1c:	2220      	movs	r2, #32
  401d1e:	2100      	movs	r1, #0
  401d20:	a803      	add	r0, sp, #12
  401d22:	4b1b      	ldr	r3, [pc, #108]	; (401d90 <main+0x100>)
  401d24:	4798      	blx	r3
			
			wheelMotorPID();
  401d26:	4b29      	ldr	r3, [pc, #164]	; (401dcc <main+0x13c>)
  401d28:	4798      	blx	r3
  401d2a:	e008      	b.n	401d3e <main+0xae>
		adc_read(&adc_value_battery_current, ADC_BATTERY_CURRENT);
		adc_read(&adc_value_battery_voltage, ADC_BATTERY_VOLTAGE);
		adc_read(&adc_value_cap_charge, ADC_CAP_CHARGE);
		
		if(gpio_get_pin_level(DipSwitch7)){
			set_pwm_motor_0(878);
  401d2c:	f240 306e 	movw	r0, #878	; 0x36e
  401d30:	4b1e      	ldr	r3, [pc, #120]	; (401dac <main+0x11c>)
  401d32:	4798      	blx	r3
		if(nRF_24_is_data_available(1)){ //There is data for me to collect :)
  401d34:	2001      	movs	r0, #1
  401d36:	4b26      	ldr	r3, [pc, #152]	; (401dd0 <main+0x140>)
  401d38:	4798      	blx	r3
  401d3a:	2800      	cmp	r0, #0
  401d3c:	d1e6      	bne.n	401d0c <main+0x7c>
		adc_read(&adc_value_battery_current, ADC_BATTERY_CURRENT);
  401d3e:	2100      	movs	r1, #0
  401d40:	a802      	add	r0, sp, #8
  401d42:	4c24      	ldr	r4, [pc, #144]	; (401dd4 <main+0x144>)
  401d44:	47a0      	blx	r4
		adc_read(&adc_value_battery_voltage, ADC_BATTERY_VOLTAGE);
  401d46:	2105      	movs	r1, #5
  401d48:	a801      	add	r0, sp, #4
  401d4a:	47a0      	blx	r4
		adc_read(&adc_value_cap_charge, ADC_CAP_CHARGE);
  401d4c:	2107      	movs	r1, #7
  401d4e:	4668      	mov	r0, sp
  401d50:	47a0      	blx	r4
	return ((Pio *)hw)->PIO_PDSR;
  401d52:	4b0d      	ldr	r3, [pc, #52]	; (401d88 <main+0xf8>)
  401d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		if(gpio_get_pin_level(DipSwitch7)){
  401d56:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  401d5a:	d1e7      	bne.n	401d2c <main+0x9c>
  401d5c:	4b0a      	ldr	r3, [pc, #40]	; (401d88 <main+0xf8>)
  401d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		}
		else if(gpio_get_pin_level(DipSwitch6)){
  401d60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  401d64:	d109      	bne.n	401d7a <main+0xea>
  401d66:	4b08      	ldr	r3, [pc, #32]	; (401d88 <main+0xf8>)
  401d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			set_pwm_motor_0(1171);
		}
		else if(gpio_get_pin_level(DipSwitch5)){
  401d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401d6e:	d0e1      	beq.n	401d34 <main+0xa4>
			set_pwm_motor_0(600);
  401d70:	f44f 7016 	mov.w	r0, #600	; 0x258
  401d74:	4b0d      	ldr	r3, [pc, #52]	; (401dac <main+0x11c>)
  401d76:	4798      	blx	r3
  401d78:	e7dc      	b.n	401d34 <main+0xa4>
			set_pwm_motor_0(1171);
  401d7a:	f240 4093 	movw	r0, #1171	; 0x493
  401d7e:	4b0b      	ldr	r3, [pc, #44]	; (401dac <main+0x11c>)
  401d80:	4798      	blx	r3
  401d82:	e7d7      	b.n	401d34 <main+0xa4>
  401d84:	0040024d 	.word	0x0040024d
  401d88:	400e1400 	.word	0x400e1400
  401d8c:	00402281 	.word	0x00402281
  401d90:	00402ff9 	.word	0x00402ff9
  401d94:	004024a9 	.word	0x004024a9
  401d98:	00400979 	.word	0x00400979
  401d9c:	00402585 	.word	0x00402585
  401da0:	204000f8 	.word	0x204000f8
  401da4:	00400c39 	.word	0x00400c39
  401da8:	20400150 	.word	0x20400150
  401dac:	004025f5 	.word	0x004025f5
  401db0:	0040260d 	.word	0x0040260d
  401db4:	00402625 	.word	0x00402625
  401db8:	0040263d 	.word	0x0040263d
  401dbc:	00402655 	.word	0x00402655
  401dc0:	004001c5 	.word	0x004001c5
  401dc4:	00402429 	.word	0x00402429
  401dc8:	004022d9 	.word	0x004022d9
  401dcc:	00401f59 	.word	0x00401f59
  401dd0:	0040255d 	.word	0x0040255d
  401dd4:	004001e9 	.word	0x004001e9

00401dd8 <getEncoder>:
	error_sum3=0;
}
//gets current count of encoder based on wheel
// 0 - FR, 1 - FL, 2- BL, 3 - BR
long int getEncoder(int wheel){
	switch(wheel){
  401dd8:	2803      	cmp	r0, #3
  401dda:	d80f      	bhi.n	401dfc <getEncoder+0x24>
  401ddc:	e8df f000 	tbb	[pc, r0]
  401de0:	0b080502 	.word	0x0b080502
		case 0:
			return front_right_counter;
  401de4:	4b06      	ldr	r3, [pc, #24]	; (401e00 <getEncoder+0x28>)
  401de6:	6818      	ldr	r0, [r3, #0]
  401de8:	4770      	bx	lr
		case 1:
			return front_left_counter;
  401dea:	4b06      	ldr	r3, [pc, #24]	; (401e04 <getEncoder+0x2c>)
  401dec:	6818      	ldr	r0, [r3, #0]
  401dee:	4770      	bx	lr
		case 2:
			return back_left_counter;
  401df0:	4b05      	ldr	r3, [pc, #20]	; (401e08 <getEncoder+0x30>)
  401df2:	6818      	ldr	r0, [r3, #0]
  401df4:	4770      	bx	lr
		case 3:
			return back_right_counter;
  401df6:	4b05      	ldr	r3, [pc, #20]	; (401e0c <getEncoder+0x34>)
  401df8:	6818      	ldr	r0, [r3, #0]
  401dfa:	4770      	bx	lr
	}
}
  401dfc:	4770      	bx	lr
  401dfe:	bf00      	nop
  401e00:	2040006c 	.word	0x2040006c
  401e04:	20400068 	.word	0x20400068
  401e08:	20400070 	.word	0x20400070
  401e0c:	20400074 	.word	0x20400074

00401e10 <getOldEncoder>:

//gets old encoder count before PID update
long int getOldEncoder(int wheel){
	switch(wheel){
  401e10:	2803      	cmp	r0, #3
  401e12:	d80f      	bhi.n	401e34 <getOldEncoder+0x24>
  401e14:	e8df f000 	tbb	[pc, r0]
  401e18:	0b080502 	.word	0x0b080502
		case 0:
			return front_right_counter_old;
  401e1c:	4b06      	ldr	r3, [pc, #24]	; (401e38 <getOldEncoder+0x28>)
  401e1e:	6918      	ldr	r0, [r3, #16]
  401e20:	4770      	bx	lr
		case 1:
			return front_left_counter_old;
  401e22:	4b05      	ldr	r3, [pc, #20]	; (401e38 <getOldEncoder+0x28>)
  401e24:	6958      	ldr	r0, [r3, #20]
  401e26:	4770      	bx	lr
		case 2:
			return back_left_counter_old;
  401e28:	4b03      	ldr	r3, [pc, #12]	; (401e38 <getOldEncoder+0x28>)
  401e2a:	6998      	ldr	r0, [r3, #24]
  401e2c:	4770      	bx	lr
		case 3:
			return back_right_counter_old;
  401e2e:	4b02      	ldr	r3, [pc, #8]	; (401e38 <getOldEncoder+0x28>)
  401e30:	69d8      	ldr	r0, [r3, #28]
  401e32:	4770      	bx	lr
	}
}
  401e34:	4770      	bx	lr
  401e36:	bf00      	nop
  401e38:	204000d8 	.word	0x204000d8

00401e3c <calcWheelSpeed>:

//calculate wheel speeds [rad/s]
float calcWheelSpeed(int wheel){
  401e3c:	b510      	push	{r4, lr}
  401e3e:	ed2d 8b02 	vpush	{d8}
  401e42:	4604      	mov	r4, r0
	float current_speed;
	//get encoder counts new and old
	float enc_n = (float) getEncoder(wheel);
  401e44:	4b0c      	ldr	r3, [pc, #48]	; (401e78 <calcWheelSpeed+0x3c>)
  401e46:	4798      	blx	r3
  401e48:	ee07 0a90 	vmov	s15, r0
  401e4c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	float enc_o = (float) getOldEncoder(wheel);
  401e50:	4620      	mov	r0, r4
  401e52:	4b0a      	ldr	r3, [pc, #40]	; (401e7c <calcWheelSpeed+0x40>)
  401e54:	4798      	blx	r3
  401e56:	ee07 0a90 	vmov	s15, r0
  401e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	current_speed = (float)(enc_n - enc_o)*v_c; //[rad/s]
  401e5e:	ee38 8a67 	vsub.f32	s16, s16, s15
  401e62:	4b07      	ldr	r3, [pc, #28]	; (401e80 <calcWheelSpeed+0x44>)
  401e64:	edd3 7a00 	vldr	s15, [r3]
	return current_speed; // [rad/s]
}
  401e68:	ee68 7a27 	vmul.f32	s15, s16, s15
  401e6c:	ee17 0a90 	vmov	r0, s15
  401e70:	ecbd 8b02 	vpop	{d8}
  401e74:	bd10      	pop	{r4, pc}
  401e76:	bf00      	nop
  401e78:	00401dd9 	.word	0x00401dd9
  401e7c:	00401e11 	.word	0x00401e11
  401e80:	20400048 	.word	0x20400048

00401e84 <setWheelMotorEffort>:
	
}

//handles magnitude and direction of motor
//FIGURE OUT CCW vs CW HIGH/LOW for motor controller
void setWheelMotorEffort(float effort0, float effort1, float effort2, float effort3){
  401e84:	b508      	push	{r3, lr}
  401e86:	ed2d 8b04 	vpush	{d8-d9}
  401e8a:	ee09 0a90 	vmov	s19, r0
  401e8e:	ee09 1a10 	vmov	s18, r1
  401e92:	ee08 2a90 	vmov	s17, r2
  401e96:	ee08 3a10 	vmov	s16, r3
	//set PWM duty cycle
	set_pwm_motor_0(effort0);
  401e9a:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  401e9e:	ee17 0a90 	vmov	r0, s15
  401ea2:	4b27      	ldr	r3, [pc, #156]	; (401f40 <setWheelMotorEffort+0xbc>)
  401ea4:	4798      	blx	r3
	set_pwm_motor_1(effort1);
  401ea6:	eefc 7ac9 	vcvt.u32.f32	s15, s18
  401eaa:	ee17 0a90 	vmov	r0, s15
  401eae:	4b25      	ldr	r3, [pc, #148]	; (401f44 <setWheelMotorEffort+0xc0>)
  401eb0:	4798      	blx	r3
	set_pwm_motor_2(effort2);
  401eb2:	eefc 7ae8 	vcvt.u32.f32	s15, s17
  401eb6:	ee17 0a90 	vmov	r0, s15
  401eba:	4b23      	ldr	r3, [pc, #140]	; (401f48 <setWheelMotorEffort+0xc4>)
  401ebc:	4798      	blx	r3
	set_pwm_motor_3(effort3);
  401ebe:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  401ec2:	ee17 0a90 	vmov	r0, s15
  401ec6:	4b21      	ldr	r3, [pc, #132]	; (401f4c <setWheelMotorEffort+0xc8>)
  401ec8:	4798      	blx	r3
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	void *const hw = port_to_reg(port);
	if (level) {
  401eca:	eef5 9ac0 	vcmpe.f32	s19, #0.0
  401ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401ed2:	dd21      	ble.n	401f18 <setWheelMotorEffort+0x94>
	((Pio *)hw)->PIO_SODR = mask;
  401ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401ed8:	4b1d      	ldr	r3, [pc, #116]	; (401f50 <setWheelMotorEffort+0xcc>)
  401eda:	631a      	str	r2, [r3, #48]	; 0x30
  401edc:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
  401ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401ee4:	dd1d      	ble.n	401f22 <setWheelMotorEffort+0x9e>
  401ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401eea:	4b19      	ldr	r3, [pc, #100]	; (401f50 <setWheelMotorEffort+0xcc>)
  401eec:	631a      	str	r2, [r3, #48]	; 0x30
  401eee:	eef5 8ac0 	vcmpe.f32	s17, #0.0
  401ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401ef6:	dd19      	ble.n	401f2c <setWheelMotorEffort+0xa8>
  401ef8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401efc:	4b14      	ldr	r3, [pc, #80]	; (401f50 <setWheelMotorEffort+0xcc>)
  401efe:	631a      	str	r2, [r3, #48]	; 0x30
  401f00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  401f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401f08:	dd15      	ble.n	401f36 <setWheelMotorEffort+0xb2>
  401f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401f0e:	4b10      	ldr	r3, [pc, #64]	; (401f50 <setWheelMotorEffort+0xcc>)
  401f10:	631a      	str	r2, [r3, #48]	; 0x30
	//set directions for motors based on effort
	gpio_set_pin_level(Motor_0_Dir, ((effort0 > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_1_Dir, ((effort1 > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_2_Dir, ((effort2 > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_3_Dir, ((effort3 > 0) ? CCW : CW));	
}
  401f12:	ecbd 8b04 	vpop	{d8-d9}
  401f16:	bd08      	pop	{r3, pc}
	((Pio *)hw)->PIO_CODR = mask;
  401f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401f1c:	4b0c      	ldr	r3, [pc, #48]	; (401f50 <setWheelMotorEffort+0xcc>)
  401f1e:	635a      	str	r2, [r3, #52]	; 0x34
  401f20:	e7dc      	b.n	401edc <setWheelMotorEffort+0x58>
  401f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401f26:	4b0a      	ldr	r3, [pc, #40]	; (401f50 <setWheelMotorEffort+0xcc>)
  401f28:	635a      	str	r2, [r3, #52]	; 0x34
  401f2a:	e7e0      	b.n	401eee <setWheelMotorEffort+0x6a>
  401f2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f30:	4b07      	ldr	r3, [pc, #28]	; (401f50 <setWheelMotorEffort+0xcc>)
  401f32:	635a      	str	r2, [r3, #52]	; 0x34
  401f34:	e7e4      	b.n	401f00 <setWheelMotorEffort+0x7c>
  401f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401f3a:	4b05      	ldr	r3, [pc, #20]	; (401f50 <setWheelMotorEffort+0xcc>)
  401f3c:	635a      	str	r2, [r3, #52]	; 0x34
  401f3e:	e7e8      	b.n	401f12 <setWheelMotorEffort+0x8e>
  401f40:	004025f5 	.word	0x004025f5
  401f44:	0040260d 	.word	0x0040260d
  401f48:	00402625 	.word	0x00402625
  401f4c:	0040263d 	.word	0x0040263d
  401f50:	400e1400 	.word	0x400e1400
  401f54:	00000000 	.word	0x00000000

00401f58 <wheelMotorPID>:
void wheelMotorPID(){
  401f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f5c:	ed2d 8b08 	vpush	{d8-d11}
	float error0 = velocity_motor_0 - calcWheelSpeed(0);
  401f60:	4bad      	ldr	r3, [pc, #692]	; (402218 <wheelMotorPID+0x2c0>)
  401f62:	ed93 ba00 	vldr	s22, [r3]
  401f66:	2000      	movs	r0, #0
  401f68:	4cac      	ldr	r4, [pc, #688]	; (40221c <wheelMotorPID+0x2c4>)
  401f6a:	47a0      	blx	r4
  401f6c:	ee07 0a90 	vmov	s15, r0
  401f70:	ee3b ba67 	vsub.f32	s22, s22, s15
	float error1 = velocity_motor_1 - calcWheelSpeed(1);
  401f74:	4baa      	ldr	r3, [pc, #680]	; (402220 <wheelMotorPID+0x2c8>)
  401f76:	edd3 aa00 	vldr	s21, [r3]
  401f7a:	2001      	movs	r0, #1
  401f7c:	47a0      	blx	r4
  401f7e:	ee07 0a90 	vmov	s15, r0
  401f82:	ee7a aae7 	vsub.f32	s21, s21, s15
	float error2 = velocity_motor_2 - calcWheelSpeed(2);
  401f86:	4ba7      	ldr	r3, [pc, #668]	; (402224 <wheelMotorPID+0x2cc>)
  401f88:	ed93 aa00 	vldr	s20, [r3]
  401f8c:	2002      	movs	r0, #2
  401f8e:	47a0      	blx	r4
  401f90:	ee07 0a90 	vmov	s15, r0
  401f94:	ee3a aa67 	vsub.f32	s20, s20, s15
	float error3 = velocity_motor_3 - calcWheelSpeed(3);
  401f98:	4ba3      	ldr	r3, [pc, #652]	; (402228 <wheelMotorPID+0x2d0>)
  401f9a:	edd3 9a00 	vldr	s19, [r3]
  401f9e:	2003      	movs	r0, #3
  401fa0:	47a0      	blx	r4
  401fa2:	ee07 0a90 	vmov	s15, r0
  401fa6:	ee79 9ae7 	vsub.f32	s19, s19, s15
	error_sum0 += error0;
  401faa:	4ba0      	ldr	r3, [pc, #640]	; (40222c <wheelMotorPID+0x2d4>)
  401fac:	edd3 7a00 	vldr	s15, [r3]
  401fb0:	ee7b 7a27 	vadd.f32	s15, s22, s15
  401fb4:	edc3 7a00 	vstr	s15, [r3]
	error_sum1 += error1;
  401fb8:	ed93 9a01 	vldr	s18, [r3, #4]
  401fbc:	ee3a 9a89 	vadd.f32	s18, s21, s18
  401fc0:	ed83 9a01 	vstr	s18, [r3, #4]
	error_sum2 += error2;
  401fc4:	edd3 8a02 	vldr	s17, [r3, #8]
  401fc8:	ee7a 8a28 	vadd.f32	s17, s20, s17
  401fcc:	edc3 8a02 	vstr	s17, [r3, #8]
	error_sum3 += error3;
  401fd0:	ed93 8a03 	vldr	s16, [r3, #12]
  401fd4:	ee39 8a88 	vadd.f32	s16, s19, s16
  401fd8:	ed83 8a03 	vstr	s16, [r3, #12]
	if ((error_sum0)> PID_I_Limit) error_sum0= PID_I_Limit;
  401fdc:	ee17 0a90 	vmov	r0, s15
  401fe0:	4b93      	ldr	r3, [pc, #588]	; (402230 <wheelMotorPID+0x2d8>)
  401fe2:	4798      	blx	r3
  401fe4:	a386      	add	r3, pc, #536	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  401fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fea:	4c92      	ldr	r4, [pc, #584]	; (402234 <wheelMotorPID+0x2dc>)
  401fec:	47a0      	blx	r4
  401fee:	b110      	cbz	r0, 401ff6 <wheelMotorPID+0x9e>
  401ff0:	4a91      	ldr	r2, [pc, #580]	; (402238 <wheelMotorPID+0x2e0>)
  401ff2:	4b8e      	ldr	r3, [pc, #568]	; (40222c <wheelMotorPID+0x2d4>)
  401ff4:	601a      	str	r2, [r3, #0]
	if ((error_sum0)< -PID_I_Limit) error_sum0=-PID_I_Limit;
  401ff6:	4b8d      	ldr	r3, [pc, #564]	; (40222c <wheelMotorPID+0x2d4>)
  401ff8:	6818      	ldr	r0, [r3, #0]
  401ffa:	4b8d      	ldr	r3, [pc, #564]	; (402230 <wheelMotorPID+0x2d8>)
  401ffc:	4798      	blx	r3
  401ffe:	a382      	add	r3, pc, #520	; (adr r3, 402208 <wheelMotorPID+0x2b0>)
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	4c8d      	ldr	r4, [pc, #564]	; (40223c <wheelMotorPID+0x2e4>)
  402006:	47a0      	blx	r4
  402008:	b110      	cbz	r0, 402010 <wheelMotorPID+0xb8>
  40200a:	4a8d      	ldr	r2, [pc, #564]	; (402240 <wheelMotorPID+0x2e8>)
  40200c:	4b87      	ldr	r3, [pc, #540]	; (40222c <wheelMotorPID+0x2d4>)
  40200e:	601a      	str	r2, [r3, #0]
	if ((error_sum1)> PID_I_Limit) error_sum1= PID_I_Limit;
  402010:	ee19 0a10 	vmov	r0, s18
  402014:	4b86      	ldr	r3, [pc, #536]	; (402230 <wheelMotorPID+0x2d8>)
  402016:	4798      	blx	r3
  402018:	a379      	add	r3, pc, #484	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  40201a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40201e:	4c85      	ldr	r4, [pc, #532]	; (402234 <wheelMotorPID+0x2dc>)
  402020:	47a0      	blx	r4
  402022:	b110      	cbz	r0, 40202a <wheelMotorPID+0xd2>
  402024:	4a84      	ldr	r2, [pc, #528]	; (402238 <wheelMotorPID+0x2e0>)
  402026:	4b81      	ldr	r3, [pc, #516]	; (40222c <wheelMotorPID+0x2d4>)
  402028:	605a      	str	r2, [r3, #4]
	if ((error_sum1)< -PID_I_Limit) error_sum1=-PID_I_Limit;
  40202a:	4b80      	ldr	r3, [pc, #512]	; (40222c <wheelMotorPID+0x2d4>)
  40202c:	6858      	ldr	r0, [r3, #4]
  40202e:	4b80      	ldr	r3, [pc, #512]	; (402230 <wheelMotorPID+0x2d8>)
  402030:	4798      	blx	r3
  402032:	a375      	add	r3, pc, #468	; (adr r3, 402208 <wheelMotorPID+0x2b0>)
  402034:	e9d3 2300 	ldrd	r2, r3, [r3]
  402038:	4c80      	ldr	r4, [pc, #512]	; (40223c <wheelMotorPID+0x2e4>)
  40203a:	47a0      	blx	r4
  40203c:	b110      	cbz	r0, 402044 <wheelMotorPID+0xec>
  40203e:	4a80      	ldr	r2, [pc, #512]	; (402240 <wheelMotorPID+0x2e8>)
  402040:	4b7a      	ldr	r3, [pc, #488]	; (40222c <wheelMotorPID+0x2d4>)
  402042:	605a      	str	r2, [r3, #4]
	if ((error_sum2)> PID_I_Limit) error_sum2= PID_I_Limit;
  402044:	ee18 0a90 	vmov	r0, s17
  402048:	4b79      	ldr	r3, [pc, #484]	; (402230 <wheelMotorPID+0x2d8>)
  40204a:	4798      	blx	r3
  40204c:	a36c      	add	r3, pc, #432	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  40204e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402052:	4c78      	ldr	r4, [pc, #480]	; (402234 <wheelMotorPID+0x2dc>)
  402054:	47a0      	blx	r4
  402056:	b110      	cbz	r0, 40205e <wheelMotorPID+0x106>
  402058:	4a77      	ldr	r2, [pc, #476]	; (402238 <wheelMotorPID+0x2e0>)
  40205a:	4b74      	ldr	r3, [pc, #464]	; (40222c <wheelMotorPID+0x2d4>)
  40205c:	609a      	str	r2, [r3, #8]
	if ((error_sum2)< -PID_I_Limit) error_sum2=-PID_I_Limit;
  40205e:	4b73      	ldr	r3, [pc, #460]	; (40222c <wheelMotorPID+0x2d4>)
  402060:	6898      	ldr	r0, [r3, #8]
  402062:	4b73      	ldr	r3, [pc, #460]	; (402230 <wheelMotorPID+0x2d8>)
  402064:	4798      	blx	r3
  402066:	a368      	add	r3, pc, #416	; (adr r3, 402208 <wheelMotorPID+0x2b0>)
  402068:	e9d3 2300 	ldrd	r2, r3, [r3]
  40206c:	4c73      	ldr	r4, [pc, #460]	; (40223c <wheelMotorPID+0x2e4>)
  40206e:	47a0      	blx	r4
  402070:	b110      	cbz	r0, 402078 <wheelMotorPID+0x120>
  402072:	4a73      	ldr	r2, [pc, #460]	; (402240 <wheelMotorPID+0x2e8>)
  402074:	4b6d      	ldr	r3, [pc, #436]	; (40222c <wheelMotorPID+0x2d4>)
  402076:	609a      	str	r2, [r3, #8]
	if ((error_sum3)> PID_I_Limit) error_sum3= PID_I_Limit;
  402078:	ee18 0a10 	vmov	r0, s16
  40207c:	4b6c      	ldr	r3, [pc, #432]	; (402230 <wheelMotorPID+0x2d8>)
  40207e:	4798      	blx	r3
  402080:	a35f      	add	r3, pc, #380	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  402082:	e9d3 2300 	ldrd	r2, r3, [r3]
  402086:	4c6b      	ldr	r4, [pc, #428]	; (402234 <wheelMotorPID+0x2dc>)
  402088:	47a0      	blx	r4
  40208a:	b110      	cbz	r0, 402092 <wheelMotorPID+0x13a>
  40208c:	4a6a      	ldr	r2, [pc, #424]	; (402238 <wheelMotorPID+0x2e0>)
  40208e:	4b67      	ldr	r3, [pc, #412]	; (40222c <wheelMotorPID+0x2d4>)
  402090:	60da      	str	r2, [r3, #12]
	if ((error_sum3)< -PID_I_Limit) error_sum3=-PID_I_Limit;
  402092:	4b66      	ldr	r3, [pc, #408]	; (40222c <wheelMotorPID+0x2d4>)
  402094:	68d8      	ldr	r0, [r3, #12]
  402096:	4b66      	ldr	r3, [pc, #408]	; (402230 <wheelMotorPID+0x2d8>)
  402098:	4798      	blx	r3
  40209a:	a35b      	add	r3, pc, #364	; (adr r3, 402208 <wheelMotorPID+0x2b0>)
  40209c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020a0:	4c66      	ldr	r4, [pc, #408]	; (40223c <wheelMotorPID+0x2e4>)
  4020a2:	47a0      	blx	r4
  4020a4:	b110      	cbz	r0, 4020ac <wheelMotorPID+0x154>
  4020a6:	4a66      	ldr	r2, [pc, #408]	; (402240 <wheelMotorPID+0x2e8>)
  4020a8:	4b60      	ldr	r3, [pc, #384]	; (40222c <wheelMotorPID+0x2d4>)
  4020aa:	60da      	str	r2, [r3, #12]
	float effort0 = KP * error0 + KI * error_sum0;
  4020ac:	4d60      	ldr	r5, [pc, #384]	; (402230 <wheelMotorPID+0x2d8>)
  4020ae:	ee1b 0a10 	vmov	r0, s22
  4020b2:	47a8      	blx	r5
  4020b4:	4c63      	ldr	r4, [pc, #396]	; (402244 <wheelMotorPID+0x2ec>)
  4020b6:	a352      	add	r3, pc, #328	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  4020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020bc:	47a0      	blx	r4
  4020be:	4680      	mov	r8, r0
  4020c0:	4689      	mov	r9, r1
  4020c2:	4f5a      	ldr	r7, [pc, #360]	; (40222c <wheelMotorPID+0x2d4>)
  4020c4:	6838      	ldr	r0, [r7, #0]
  4020c6:	47a8      	blx	r5
  4020c8:	a351      	add	r3, pc, #324	; (adr r3, 402210 <wheelMotorPID+0x2b8>)
  4020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ce:	47a0      	blx	r4
  4020d0:	4e5d      	ldr	r6, [pc, #372]	; (402248 <wheelMotorPID+0x2f0>)
  4020d2:	4602      	mov	r2, r0
  4020d4:	460b      	mov	r3, r1
  4020d6:	4640      	mov	r0, r8
  4020d8:	4649      	mov	r1, r9
  4020da:	47b0      	blx	r6
  4020dc:	f8df a174 	ldr.w	sl, [pc, #372]	; 402254 <wheelMotorPID+0x2fc>
  4020e0:	47d0      	blx	sl
  4020e2:	ee08 0a10 	vmov	s16, r0
	float effort1 = KP * error1 + KI * error_sum1;
  4020e6:	ee1a 0a90 	vmov	r0, s21
  4020ea:	47a8      	blx	r5
  4020ec:	a344      	add	r3, pc, #272	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  4020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020f2:	47a0      	blx	r4
  4020f4:	4680      	mov	r8, r0
  4020f6:	4689      	mov	r9, r1
  4020f8:	6878      	ldr	r0, [r7, #4]
  4020fa:	47a8      	blx	r5
  4020fc:	a344      	add	r3, pc, #272	; (adr r3, 402210 <wheelMotorPID+0x2b8>)
  4020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402102:	47a0      	blx	r4
  402104:	4602      	mov	r2, r0
  402106:	460b      	mov	r3, r1
  402108:	4640      	mov	r0, r8
  40210a:	4649      	mov	r1, r9
  40210c:	47b0      	blx	r6
  40210e:	47d0      	blx	sl
  402110:	ee08 0a90 	vmov	s17, r0
	float effort2 = KP * error2 + KI * error_sum2;
  402114:	ee1a 0a10 	vmov	r0, s20
  402118:	47a8      	blx	r5
  40211a:	a339      	add	r3, pc, #228	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  40211c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402120:	47a0      	blx	r4
  402122:	4680      	mov	r8, r0
  402124:	4689      	mov	r9, r1
  402126:	68b8      	ldr	r0, [r7, #8]
  402128:	47a8      	blx	r5
  40212a:	a339      	add	r3, pc, #228	; (adr r3, 402210 <wheelMotorPID+0x2b8>)
  40212c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402130:	47a0      	blx	r4
  402132:	4602      	mov	r2, r0
  402134:	460b      	mov	r3, r1
  402136:	4640      	mov	r0, r8
  402138:	4649      	mov	r1, r9
  40213a:	47b0      	blx	r6
  40213c:	47d0      	blx	sl
  40213e:	ee09 0a10 	vmov	s18, r0
	float effort3 = KP * error3 + KI * error_sum3;
  402142:	ee19 0a90 	vmov	r0, s19
  402146:	47a8      	blx	r5
  402148:	a32d      	add	r3, pc, #180	; (adr r3, 402200 <wheelMotorPID+0x2a8>)
  40214a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40214e:	47a0      	blx	r4
  402150:	4680      	mov	r8, r0
  402152:	4689      	mov	r9, r1
  402154:	68f8      	ldr	r0, [r7, #12]
  402156:	47a8      	blx	r5
  402158:	a32d      	add	r3, pc, #180	; (adr r3, 402210 <wheelMotorPID+0x2b8>)
  40215a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40215e:	47a0      	blx	r4
  402160:	4602      	mov	r2, r0
  402162:	460b      	mov	r3, r1
  402164:	4640      	mov	r0, r8
  402166:	4649      	mov	r1, r9
  402168:	47b0      	blx	r6
  40216a:	47d0      	blx	sl
  40216c:	ee07 0a90 	vmov	s15, r0
	effort0 = (effort0 >= PWM_PER) ? PWM_PER : effort0;
  402170:	ed9f 7a36 	vldr	s14, [pc, #216]	; 40224c <wheelMotorPID+0x2f4>
  402174:	eeb4 8ac7 	vcmpe.f32	s16, s14
  402178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40217c:	db01      	blt.n	402182 <wheelMotorPID+0x22a>
  40217e:	eeb0 8a47 	vmov.f32	s16, s14
	effort0 = (effort0 <= -PWM_PER) ? -PWM_PER : effort0;
  402182:	ed9f 7a33 	vldr	s14, [pc, #204]	; 402250 <wheelMotorPID+0x2f8>
  402186:	eeb4 8ac7 	vcmpe.f32	s16, s14
  40218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40218e:	d801      	bhi.n	402194 <wheelMotorPID+0x23c>
  402190:	eeb0 8a47 	vmov.f32	s16, s14
	effort1 = (effort1 >= PWM_PER) ? PWM_PER : effort1;
  402194:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 40224c <wheelMotorPID+0x2f4>
  402198:	eef4 8ac7 	vcmpe.f32	s17, s14
  40219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021a0:	db01      	blt.n	4021a6 <wheelMotorPID+0x24e>
  4021a2:	eef0 8a47 	vmov.f32	s17, s14
	effort1 = (effort1 <= -PWM_PER) ? -PWM_PER : effort1;
  4021a6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 402250 <wheelMotorPID+0x2f8>
  4021aa:	eef4 8ac7 	vcmpe.f32	s17, s14
  4021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021b2:	d801      	bhi.n	4021b8 <wheelMotorPID+0x260>
  4021b4:	eef0 8a47 	vmov.f32	s17, s14
	effort2 = (effort2 >= PWM_PER) ? PWM_PER : effort2;
  4021b8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 40224c <wheelMotorPID+0x2f4>
  4021bc:	eeb4 9ac7 	vcmpe.f32	s18, s14
  4021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021c4:	db01      	blt.n	4021ca <wheelMotorPID+0x272>
  4021c6:	eeb0 9a47 	vmov.f32	s18, s14
	effort2 = (effort2 <= -PWM_PER) ? -PWM_PER : effort2;
  4021ca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 402250 <wheelMotorPID+0x2f8>
  4021ce:	eeb4 9ac7 	vcmpe.f32	s18, s14
  4021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021d6:	d801      	bhi.n	4021dc <wheelMotorPID+0x284>
  4021d8:	eeb0 9a47 	vmov.f32	s18, s14
	effort3 = (effort3 >= PWM_PER) ? PWM_PER : effort3;
  4021dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 40224c <wheelMotorPID+0x2f4>
  4021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
  4021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021e8:	db01      	blt.n	4021ee <wheelMotorPID+0x296>
  4021ea:	eef0 7a47 	vmov.f32	s15, s14
	effort3 = (effort3 <= -PWM_PER) ? -PWM_PER : effort3;
  4021ee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 402250 <wheelMotorPID+0x2f8>
  4021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
  4021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4021fa:	d93b      	bls.n	402274 <wheelMotorPID+0x31c>
  4021fc:	e02c      	b.n	402258 <wheelMotorPID+0x300>
  4021fe:	bf00      	nop
  402200:	66666666 	.word	0x66666666
  402204:	402f6666 	.word	0x402f6666
  402208:	66666666 	.word	0x66666666
  40220c:	c02f6666 	.word	0xc02f6666
  402210:	33333333 	.word	0x33333333
  402214:	40113333 	.word	0x40113333
  402218:	204001b8 	.word	0x204001b8
  40221c:	00401e3d 	.word	0x00401e3d
  402220:	204001bc 	.word	0x204001bc
  402224:	204001ac 	.word	0x204001ac
  402228:	204001b4 	.word	0x204001b4
  40222c:	204000d8 	.word	0x204000d8
  402230:	00402935 	.word	0x00402935
  402234:	00402efd 	.word	0x00402efd
  402238:	417b3333 	.word	0x417b3333
  40223c:	00402ec1 	.word	0x00402ec1
  402240:	c17b3333 	.word	0xc17b3333
  402244:	004029dd 	.word	0x004029dd
  402248:	00402679 	.word	0x00402679
  40224c:	45370000 	.word	0x45370000
  402250:	c5370000 	.word	0xc5370000
  402254:	00402f11 	.word	0x00402f11
	setWheelMotorEffort(effort0, effort1, effort2, effort3);
  402258:	ee17 3a90 	vmov	r3, s15
  40225c:	ee19 2a10 	vmov	r2, s18
  402260:	ee18 1a90 	vmov	r1, s17
  402264:	ee18 0a10 	vmov	r0, s16
  402268:	4c04      	ldr	r4, [pc, #16]	; (40227c <wheelMotorPID+0x324>)
  40226a:	47a0      	blx	r4
}
  40226c:	ecbd 8b08 	vpop	{d8-d11}
  402270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	effort3 = (effort3 <= -PWM_PER) ? -PWM_PER : effort3;
  402274:	eef0 7a47 	vmov.f32	s15, s14
  402278:	e7ee      	b.n	402258 <wheelMotorPID+0x300>
  40227a:	bf00      	nop
  40227c:	00401e85 	.word	0x00401e85

00402280 <NPP_init>:
	return ((Pio *)hw)->PIO_PDSR;
  402280:	4a0a      	ldr	r2, [pc, #40]	; (4022ac <NPP_init+0x2c>)
  402282:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  402284:	f3c3 3300 	ubfx	r3, r3, #12, #1
  402288:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  40228a:	f3c1 3140 	ubfx	r1, r1, #13, #1
uint8_t kicker; //kicker information
uint8_t chipper; //chipper information


void NPP_init(uint8_t *robot_ID){
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  40228e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  402292:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  402294:	f3c1 3180 	ubfx	r1, r1, #14, #1
				(gpio_get_pin_level(DipSwitch1) << 1) +
  402298:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40229c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  40229e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
				(gpio_get_pin_level(DipSwitch2) << 2) +
				(gpio_get_pin_level(DipSwitch3) << 3);
  4022a2:	00d2      	lsls	r2, r2, #3
				(gpio_get_pin_level(DipSwitch2) << 2) +
  4022a4:	fa52 f383 	uxtab	r3, r2, r3
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  4022a8:	7003      	strb	r3, [r0, #0]
  4022aa:	4770      	bx	lr
  4022ac:	400e1400 	.word	0x400e1400

004022b0 <two_byte_to_float>:
	}
}

//converts two bytes into floating point
void two_byte_to_float(float *velocity, uint8_t *data, uint8_t byte_location){
	int16_t velocity_mod = data[byte_location] + (data[byte_location + 1] << 8);
  4022b0:	5c8b      	ldrb	r3, [r1, r2]
  4022b2:	4411      	add	r1, r2
  4022b4:	784a      	ldrb	r2, [r1, #1]
  4022b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4022ba:	b21b      	sxth	r3, r3
	*velocity =	(float)velocity_mod/VELOCITY_MODIFIER;
  4022bc:	ee07 3a90 	vmov	s15, r3
  4022c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4022c4:	eddf 6a03 	vldr	s13, [pc, #12]	; 4022d4 <two_byte_to_float+0x24>
  4022c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4022cc:	ed80 7a00 	vstr	s14, [r0]
  4022d0:	4770      	bx	lr
  4022d2:	bf00      	nop
  4022d4:	42c80000 	.word	0x42c80000

004022d8 <NPP_process>:
void NPP_process(uint8_t *data, uint8_t *robot_ID){
  4022d8:	b538      	push	{r3, r4, r5, lr}
	if((data[0] & 0xF) == *robot_ID){ //target robot ID number
  4022da:	7803      	ldrb	r3, [r0, #0]
  4022dc:	780a      	ldrb	r2, [r1, #0]
  4022de:	f003 030f 	and.w	r3, r3, #15
  4022e2:	429a      	cmp	r2, r3
  4022e4:	d000      	beq.n	4022e8 <NPP_process+0x10>
  4022e6:	bd38      	pop	{r3, r4, r5, pc}
  4022e8:	4604      	mov	r4, r0
		two_byte_to_float(&velocity_motor_0, data, MOTOR_0_BYTE);
  4022ea:	2201      	movs	r2, #1
  4022ec:	4601      	mov	r1, r0
  4022ee:	480d      	ldr	r0, [pc, #52]	; (402324 <NPP_process+0x4c>)
  4022f0:	4d0d      	ldr	r5, [pc, #52]	; (402328 <NPP_process+0x50>)
  4022f2:	47a8      	blx	r5
		two_byte_to_float(&velocity_motor_1, data, MOTOR_1_BYTE);
  4022f4:	2203      	movs	r2, #3
  4022f6:	4621      	mov	r1, r4
  4022f8:	480c      	ldr	r0, [pc, #48]	; (40232c <NPP_process+0x54>)
  4022fa:	47a8      	blx	r5
		two_byte_to_float(&velocity_motor_2, data, MOTOR_2_BYTE);
  4022fc:	2205      	movs	r2, #5
  4022fe:	4621      	mov	r1, r4
  402300:	480b      	ldr	r0, [pc, #44]	; (402330 <NPP_process+0x58>)
  402302:	47a8      	blx	r5
		two_byte_to_float(&velocity_motor_3, data, MOTOR_3_BYTE);
  402304:	2207      	movs	r2, #7
  402306:	4621      	mov	r1, r4
  402308:	480a      	ldr	r0, [pc, #40]	; (402334 <NPP_process+0x5c>)
  40230a:	47a8      	blx	r5
		two_byte_to_float(&velocity_motor_dribbler, data, MOTOR_DRIBBLER_BYTE);
  40230c:	2209      	movs	r2, #9
  40230e:	4621      	mov	r1, r4
  402310:	4809      	ldr	r0, [pc, #36]	; (402338 <NPP_process+0x60>)
  402312:	47a8      	blx	r5
		kicker = data[KICKER_BYTE];
  402314:	7ae2      	ldrb	r2, [r4, #11]
  402316:	4b09      	ldr	r3, [pc, #36]	; (40233c <NPP_process+0x64>)
  402318:	701a      	strb	r2, [r3, #0]
		chipper = data[CHIPPER_BYTE];
  40231a:	7b22      	ldrb	r2, [r4, #12]
  40231c:	4b08      	ldr	r3, [pc, #32]	; (402340 <NPP_process+0x68>)
  40231e:	701a      	strb	r2, [r3, #0]
}
  402320:	e7e1      	b.n	4022e6 <NPP_process+0xe>
  402322:	bf00      	nop
  402324:	204001b8 	.word	0x204001b8
  402328:	004022b1 	.word	0x004022b1
  40232c:	204001bc 	.word	0x204001bc
  402330:	204001ac 	.word	0x204001ac
  402334:	204001b4 	.word	0x204001b4
  402338:	204001a8 	.word	0x204001a8
  40233c:	204001b0 	.word	0x204001b0
  402340:	204001b1 	.word	0x204001b1

00402344 <nRF24_write_to_register>:
  402344:	b530      	push	{r4, r5, lr}
  402346:	b083      	sub	sp, #12
  402348:	f040 0020 	orr.w	r0, r0, #32
  40234c:	f88d 0004 	strb.w	r0, [sp, #4]
  402350:	f88d 1005 	strb.w	r1, [sp, #5]
  402354:	4c05      	ldr	r4, [pc, #20]	; (40236c <nRF24_write_to_register+0x28>)
  402356:	2508      	movs	r5, #8
  402358:	6365      	str	r5, [r4, #52]	; 0x34
  40235a:	2202      	movs	r2, #2
  40235c:	a901      	add	r1, sp, #4
  40235e:	4b04      	ldr	r3, [pc, #16]	; (402370 <nRF24_write_to_register+0x2c>)
  402360:	6818      	ldr	r0, [r3, #0]
  402362:	4b04      	ldr	r3, [pc, #16]	; (402374 <nRF24_write_to_register+0x30>)
  402364:	4798      	blx	r3
  402366:	6325      	str	r5, [r4, #48]	; 0x30
  402368:	b003      	add	sp, #12
  40236a:	bd30      	pop	{r4, r5, pc}
  40236c:	400e1000 	.word	0x400e1000
  402370:	204001c4 	.word	0x204001c4
  402374:	00400b81 	.word	0x00400b81

00402378 <nRF24_write_to_register_multi_byte>:
  402378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40237c:	b083      	sub	sp, #12
  40237e:	4688      	mov	r8, r1
  402380:	4691      	mov	r9, r2
  402382:	f040 0020 	orr.w	r0, r0, #32
  402386:	a902      	add	r1, sp, #8
  402388:	f801 0d01 	strb.w	r0, [r1, #-1]!
  40238c:	4c08      	ldr	r4, [pc, #32]	; (4023b0 <nRF24_write_to_register_multi_byte+0x38>)
  40238e:	2508      	movs	r5, #8
  402390:	6365      	str	r5, [r4, #52]	; 0x34
  402392:	4f08      	ldr	r7, [pc, #32]	; (4023b4 <nRF24_write_to_register_multi_byte+0x3c>)
  402394:	2201      	movs	r2, #1
  402396:	6838      	ldr	r0, [r7, #0]
  402398:	4e07      	ldr	r6, [pc, #28]	; (4023b8 <nRF24_write_to_register_multi_byte+0x40>)
  40239a:	47b0      	blx	r6
  40239c:	fa1f f289 	uxth.w	r2, r9
  4023a0:	4641      	mov	r1, r8
  4023a2:	6838      	ldr	r0, [r7, #0]
  4023a4:	47b0      	blx	r6
  4023a6:	6325      	str	r5, [r4, #48]	; 0x30
  4023a8:	b003      	add	sp, #12
  4023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4023ae:	bf00      	nop
  4023b0:	400e1000 	.word	0x400e1000
  4023b4:	204001c4 	.word	0x204001c4
  4023b8:	00400b81 	.word	0x00400b81

004023bc <nRF24_read_from_register>:
  4023bc:	b570      	push	{r4, r5, r6, lr}
  4023be:	b082      	sub	sp, #8
  4023c0:	a902      	add	r1, sp, #8
  4023c2:	f801 0d02 	strb.w	r0, [r1, #-2]!
  4023c6:	4c09      	ldr	r4, [pc, #36]	; (4023ec <nRF24_read_from_register+0x30>)
  4023c8:	2508      	movs	r5, #8
  4023ca:	6365      	str	r5, [r4, #52]	; 0x34
  4023cc:	4e08      	ldr	r6, [pc, #32]	; (4023f0 <nRF24_read_from_register+0x34>)
  4023ce:	2201      	movs	r2, #1
  4023d0:	6830      	ldr	r0, [r6, #0]
  4023d2:	4b08      	ldr	r3, [pc, #32]	; (4023f4 <nRF24_read_from_register+0x38>)
  4023d4:	4798      	blx	r3
  4023d6:	2201      	movs	r2, #1
  4023d8:	f10d 0107 	add.w	r1, sp, #7
  4023dc:	6830      	ldr	r0, [r6, #0]
  4023de:	4b06      	ldr	r3, [pc, #24]	; (4023f8 <nRF24_read_from_register+0x3c>)
  4023e0:	4798      	blx	r3
  4023e2:	6325      	str	r5, [r4, #48]	; 0x30
  4023e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4023e8:	b002      	add	sp, #8
  4023ea:	bd70      	pop	{r4, r5, r6, pc}
  4023ec:	400e1000 	.word	0x400e1000
  4023f0:	204001c4 	.word	0x204001c4
  4023f4:	00400b81 	.word	0x00400b81
  4023f8:	00400bb1 	.word	0x00400bb1

004023fc <nRF24_send_SPI_command>:
  4023fc:	b530      	push	{r4, r5, lr}
  4023fe:	b083      	sub	sp, #12
  402400:	a902      	add	r1, sp, #8
  402402:	f801 0d01 	strb.w	r0, [r1, #-1]!
  402406:	4c05      	ldr	r4, [pc, #20]	; (40241c <nRF24_send_SPI_command+0x20>)
  402408:	2508      	movs	r5, #8
  40240a:	6365      	str	r5, [r4, #52]	; 0x34
  40240c:	2201      	movs	r2, #1
  40240e:	4b04      	ldr	r3, [pc, #16]	; (402420 <nRF24_send_SPI_command+0x24>)
  402410:	6818      	ldr	r0, [r3, #0]
  402412:	4b04      	ldr	r3, [pc, #16]	; (402424 <nRF24_send_SPI_command+0x28>)
  402414:	4798      	blx	r3
  402416:	6325      	str	r5, [r4, #48]	; 0x30
  402418:	b003      	add	sp, #12
  40241a:	bd30      	pop	{r4, r5, pc}
  40241c:	400e1000 	.word	0x400e1000
  402420:	204001c4 	.word	0x204001c4
  402424:	00400b81 	.word	0x00400b81

00402428 <nRF24_receive_data>:
  402428:	b570      	push	{r4, r5, r6, lr}
  40242a:	b082      	sub	sp, #8
  40242c:	a902      	add	r1, sp, #8
  40242e:	2361      	movs	r3, #97	; 0x61
  402430:	f801 3d01 	strb.w	r3, [r1, #-1]!
  402434:	4c13      	ldr	r4, [pc, #76]	; (402484 <nRF24_receive_data+0x5c>)
  402436:	2508      	movs	r5, #8
  402438:	6365      	str	r5, [r4, #52]	; 0x34
  40243a:	4e13      	ldr	r6, [pc, #76]	; (402488 <nRF24_receive_data+0x60>)
  40243c:	2201      	movs	r2, #1
  40243e:	6830      	ldr	r0, [r6, #0]
  402440:	4b12      	ldr	r3, [pc, #72]	; (40248c <nRF24_receive_data+0x64>)
  402442:	4798      	blx	r3
  402444:	2220      	movs	r2, #32
  402446:	4b12      	ldr	r3, [pc, #72]	; (402490 <nRF24_receive_data+0x68>)
  402448:	6819      	ldr	r1, [r3, #0]
  40244a:	6830      	ldr	r0, [r6, #0]
  40244c:	4b11      	ldr	r3, [pc, #68]	; (402494 <nRF24_receive_data+0x6c>)
  40244e:	4798      	blx	r3
  402450:	6325      	str	r5, [r4, #48]	; 0x30
  402452:	200b      	movs	r0, #11
  402454:	4b10      	ldr	r3, [pc, #64]	; (402498 <nRF24_receive_data+0x70>)
  402456:	4798      	blx	r3
  402458:	20e2      	movs	r0, #226	; 0xe2
  40245a:	f88d 0007 	strb.w	r0, [sp, #7]
  40245e:	4b0f      	ldr	r3, [pc, #60]	; (40249c <nRF24_receive_data+0x74>)
  402460:	4798      	blx	r3
  402462:	2007      	movs	r0, #7
  402464:	4b0e      	ldr	r3, [pc, #56]	; (4024a0 <nRF24_receive_data+0x78>)
  402466:	4798      	blx	r3
  402468:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  40246c:	b2c9      	uxtb	r1, r1
  40246e:	2007      	movs	r0, #7
  402470:	4b0c      	ldr	r3, [pc, #48]	; (4024a4 <nRF24_receive_data+0x7c>)
  402472:	4798      	blx	r3
  402474:	2300      	movs	r3, #0
  402476:	e000      	b.n	40247a <nRF24_receive_data+0x52>
  402478:	3301      	adds	r3, #1
  40247a:	2b1f      	cmp	r3, #31
  40247c:	ddfc      	ble.n	402478 <nRF24_receive_data+0x50>
  40247e:	b002      	add	sp, #8
  402480:	bd70      	pop	{r4, r5, r6, pc}
  402482:	bf00      	nop
  402484:	400e1000 	.word	0x400e1000
  402488:	204001c4 	.word	0x204001c4
  40248c:	00400b81 	.word	0x00400b81
  402490:	204001c0 	.word	0x204001c0
  402494:	00400bb1 	.word	0x00400bb1
  402498:	00400979 	.word	0x00400979
  40249c:	004023fd 	.word	0x004023fd
  4024a0:	004023bd 	.word	0x004023bd
  4024a4:	00402345 	.word	0x00402345

004024a8 <nRF24_init>:
  4024a8:	b530      	push	{r4, r5, lr}
  4024aa:	b083      	sub	sp, #12
  4024ac:	4605      	mov	r5, r0
  4024ae:	4c1f      	ldr	r4, [pc, #124]	; (40252c <nRF24_init+0x84>)
  4024b0:	491f      	ldr	r1, [pc, #124]	; (402530 <nRF24_init+0x88>)
  4024b2:	4620      	mov	r0, r4
  4024b4:	4b1f      	ldr	r3, [pc, #124]	; (402534 <nRF24_init+0x8c>)
  4024b6:	4798      	blx	r3
  4024b8:	4620      	mov	r0, r4
  4024ba:	4b1f      	ldr	r3, [pc, #124]	; (402538 <nRF24_init+0x90>)
  4024bc:	4798      	blx	r3
  4024be:	4b1f      	ldr	r3, [pc, #124]	; (40253c <nRF24_init+0x94>)
  4024c0:	601d      	str	r5, [r3, #0]
  4024c2:	2504      	movs	r5, #4
  4024c4:	4b1e      	ldr	r3, [pc, #120]	; (402540 <nRF24_init+0x98>)
  4024c6:	635d      	str	r5, [r3, #52]	; 0x34
  4024c8:	2100      	movs	r1, #0
  4024ca:	4608      	mov	r0, r1
  4024cc:	4c1d      	ldr	r4, [pc, #116]	; (402544 <nRF24_init+0x9c>)
  4024ce:	47a0      	blx	r4
  4024d0:	2007      	movs	r0, #7
  4024d2:	4b1d      	ldr	r3, [pc, #116]	; (402548 <nRF24_init+0xa0>)
  4024d4:	4798      	blx	r3
  4024d6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  4024da:	b2c9      	uxtb	r1, r1
  4024dc:	2007      	movs	r0, #7
  4024de:	47a0      	blx	r4
  4024e0:	2100      	movs	r1, #0
  4024e2:	2001      	movs	r0, #1
  4024e4:	47a0      	blx	r4
  4024e6:	2100      	movs	r1, #0
  4024e8:	2002      	movs	r0, #2
  4024ea:	47a0      	blx	r4
  4024ec:	2103      	movs	r1, #3
  4024ee:	4608      	mov	r0, r1
  4024f0:	47a0      	blx	r4
  4024f2:	2100      	movs	r1, #0
  4024f4:	4628      	mov	r0, r5
  4024f6:	47a0      	blx	r4
  4024f8:	2178      	movs	r1, #120	; 0x78
  4024fa:	2005      	movs	r0, #5
  4024fc:	47a0      	blx	r4
  4024fe:	2106      	movs	r1, #6
  402500:	4608      	mov	r0, r1
  402502:	47a0      	blx	r4
  402504:	4b11      	ldr	r3, [pc, #68]	; (40254c <nRF24_init+0xa4>)
  402506:	e893 0003 	ldmia.w	r3, {r0, r1}
  40250a:	9000      	str	r0, [sp, #0]
  40250c:	f88d 1004 	strb.w	r1, [sp, #4]
  402510:	2205      	movs	r2, #5
  402512:	4669      	mov	r1, sp
  402514:	2010      	movs	r0, #16
  402516:	4b0e      	ldr	r3, [pc, #56]	; (402550 <nRF24_init+0xa8>)
  402518:	4798      	blx	r3
  40251a:	2102      	movs	r1, #2
  40251c:	2000      	movs	r0, #0
  40251e:	47a0      	blx	r4
  402520:	490c      	ldr	r1, [pc, #48]	; (402554 <nRF24_init+0xac>)
  402522:	2021      	movs	r0, #33	; 0x21
  402524:	4b0c      	ldr	r3, [pc, #48]	; (402558 <nRF24_init+0xb0>)
  402526:	4798      	blx	r3
  402528:	b003      	add	sp, #12
  40252a:	bd30      	pop	{r4, r5, pc}
  40252c:	20400138 	.word	0x20400138
  402530:	204001c4 	.word	0x204001c4
  402534:	00400dc5 	.word	0x00400dc5
  402538:	00400ce5 	.word	0x00400ce5
  40253c:	204001c0 	.word	0x204001c0
  402540:	400e1400 	.word	0x400e1400
  402544:	00402345 	.word	0x00402345
  402548:	004023bd 	.word	0x004023bd
  40254c:	0040331c 	.word	0x0040331c
  402550:	00402379 	.word	0x00402379
  402554:	00402429 	.word	0x00402429
  402558:	00400a11 	.word	0x00400a11

0040255c <nRF_24_is_data_available>:
  40255c:	b508      	push	{r3, lr}
  40255e:	2007      	movs	r0, #7
  402560:	4b06      	ldr	r3, [pc, #24]	; (40257c <nRF_24_is_data_available+0x20>)
  402562:	4798      	blx	r3
  402564:	f000 0042 	and.w	r0, r0, #66	; 0x42
  402568:	2842      	cmp	r0, #66	; 0x42
  40256a:	d001      	beq.n	402570 <nRF_24_is_data_available+0x14>
  40256c:	2000      	movs	r0, #0
  40256e:	bd08      	pop	{r3, pc}
  402570:	2140      	movs	r1, #64	; 0x40
  402572:	2007      	movs	r0, #7
  402574:	4b02      	ldr	r3, [pc, #8]	; (402580 <nRF_24_is_data_available+0x24>)
  402576:	4798      	blx	r3
  402578:	2001      	movs	r0, #1
  40257a:	bd08      	pop	{r3, pc}
  40257c:	004023bd 	.word	0x004023bd
  402580:	00402345 	.word	0x00402345

00402584 <nRF24_enter_receive>:
  402584:	b510      	push	{r4, lr}
  402586:	b082      	sub	sp, #8
  402588:	2000      	movs	r0, #0
  40258a:	4b0f      	ldr	r3, [pc, #60]	; (4025c8 <nRF24_enter_receive+0x44>)
  40258c:	4798      	blx	r3
  40258e:	f040 0101 	orr.w	r1, r0, #1
  402592:	b2c9      	uxtb	r1, r1
  402594:	2000      	movs	r0, #0
  402596:	4c0d      	ldr	r4, [pc, #52]	; (4025cc <nRF24_enter_receive+0x48>)
  402598:	47a0      	blx	r4
  40259a:	2102      	movs	r1, #2
  40259c:	4608      	mov	r0, r1
  40259e:	47a0      	blx	r4
  4025a0:	4b0b      	ldr	r3, [pc, #44]	; (4025d0 <nRF24_enter_receive+0x4c>)
  4025a2:	e893 0003 	ldmia.w	r3, {r0, r1}
  4025a6:	9000      	str	r0, [sp, #0]
  4025a8:	f88d 1004 	strb.w	r1, [sp, #4]
  4025ac:	2205      	movs	r2, #5
  4025ae:	4669      	mov	r1, sp
  4025b0:	200b      	movs	r0, #11
  4025b2:	4b08      	ldr	r3, [pc, #32]	; (4025d4 <nRF24_enter_receive+0x50>)
  4025b4:	4798      	blx	r3
  4025b6:	2120      	movs	r1, #32
  4025b8:	2012      	movs	r0, #18
  4025ba:	47a0      	blx	r4
  4025bc:	2204      	movs	r2, #4
  4025be:	4b06      	ldr	r3, [pc, #24]	; (4025d8 <nRF24_enter_receive+0x54>)
  4025c0:	631a      	str	r2, [r3, #48]	; 0x30
  4025c2:	b002      	add	sp, #8
  4025c4:	bd10      	pop	{r4, pc}
  4025c6:	bf00      	nop
  4025c8:	004023bd 	.word	0x004023bd
  4025cc:	00402345 	.word	0x00402345
  4025d0:	0040331c 	.word	0x0040331c
  4025d4:	00402379 	.word	0x00402379
  4025d8:	400e1400 	.word	0x400e1400

004025dc <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  4025dc:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CDTYUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cdtyupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4025de:	0149      	lsls	r1, r1, #5
  4025e0:	440b      	add	r3, r1
  4025e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  4025e6:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CPRDUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cprdupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4025e8:	4419      	add	r1, r3
  4025ea:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  4025ee:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  4025f2:	4770      	bx	lr

004025f4 <set_pwm_motor_0>:
}

//motor 0, PA13
void set_pwm_motor_0(uint32_t duty_cycle){
  4025f4:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_0, duty_cycle);
  4025f6:	4602      	mov	r2, r0
  4025f8:	2102      	movs	r1, #2
  4025fa:	4802      	ldr	r0, [pc, #8]	; (402604 <set_pwm_motor_0+0x10>)
  4025fc:	4b02      	ldr	r3, [pc, #8]	; (402608 <set_pwm_motor_0+0x14>)
  4025fe:	4798      	blx	r3
  402600:	bd08      	pop	{r3, pc}
  402602:	bf00      	nop
  402604:	204000f8 	.word	0x204000f8
  402608:	004025dd 	.word	0x004025dd

0040260c <set_pwm_motor_1>:
}
//motor 1, PA17
void set_pwm_motor_1(uint32_t duty_cycle){
  40260c:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_1, duty_cycle);
  40260e:	4602      	mov	r2, r0
  402610:	2103      	movs	r1, #3
  402612:	4802      	ldr	r0, [pc, #8]	; (40261c <set_pwm_motor_1+0x10>)
  402614:	4b02      	ldr	r3, [pc, #8]	; (402620 <set_pwm_motor_1+0x14>)
  402616:	4798      	blx	r3
  402618:	bd08      	pop	{r3, pc}
  40261a:	bf00      	nop
  40261c:	204000f8 	.word	0x204000f8
  402620:	004025dd 	.word	0x004025dd

00402624 <set_pwm_motor_2>:
}
//motor 2, PA2
void set_pwm_motor_2(uint32_t duty_cycle){
  402624:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_2, duty_cycle);
  402626:	4602      	mov	r2, r0
  402628:	2101      	movs	r1, #1
  40262a:	4802      	ldr	r0, [pc, #8]	; (402634 <set_pwm_motor_2+0x10>)
  40262c:	4b02      	ldr	r3, [pc, #8]	; (402638 <set_pwm_motor_2+0x14>)
  40262e:	4798      	blx	r3
  402630:	bd08      	pop	{r3, pc}
  402632:	bf00      	nop
  402634:	204000f8 	.word	0x204000f8
  402638:	004025dd 	.word	0x004025dd

0040263c <set_pwm_motor_3>:
}
//motor 3, PD11
void set_pwm_motor_3(uint32_t duty_cycle){
  40263c:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_3, duty_cycle);
  40263e:	4602      	mov	r2, r0
  402640:	2100      	movs	r1, #0
  402642:	4802      	ldr	r0, [pc, #8]	; (40264c <set_pwm_motor_3+0x10>)
  402644:	4b02      	ldr	r3, [pc, #8]	; (402650 <set_pwm_motor_3+0x14>)
  402646:	4798      	blx	r3
  402648:	bd08      	pop	{r3, pc}
  40264a:	bf00      	nop
  40264c:	204000f8 	.word	0x204000f8
  402650:	004025dd 	.word	0x004025dd

00402654 <set_pwm_dribbler_motor>:
}

//motor dribbler PA12
void set_pwm_dribbler_motor(uint32_t duty_cycle){
  402654:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_1.device), PWM_1_CHANNEL_0, duty_cycle);
  402656:	4602      	mov	r2, r0
  402658:	2100      	movs	r1, #0
  40265a:	4802      	ldr	r0, [pc, #8]	; (402664 <set_pwm_dribbler_motor+0x10>)
  40265c:	4b02      	ldr	r3, [pc, #8]	; (402668 <set_pwm_dribbler_motor+0x14>)
  40265e:	4798      	blx	r3
  402660:	bd08      	pop	{r3, pc}
  402662:	bf00      	nop
  402664:	20400150 	.word	0x20400150
  402668:	004025dd 	.word	0x004025dd

0040266c <__aeabi_drsub>:
  40266c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402670:	e002      	b.n	402678 <__adddf3>
  402672:	bf00      	nop

00402674 <__aeabi_dsub>:
  402674:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402678 <__adddf3>:
  402678:	b530      	push	{r4, r5, lr}
  40267a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40267e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402682:	ea94 0f05 	teq	r4, r5
  402686:	bf08      	it	eq
  402688:	ea90 0f02 	teqeq	r0, r2
  40268c:	bf1f      	itttt	ne
  40268e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402692:	ea55 0c02 	orrsne.w	ip, r5, r2
  402696:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40269a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40269e:	f000 80e2 	beq.w	402866 <__adddf3+0x1ee>
  4026a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4026a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4026aa:	bfb8      	it	lt
  4026ac:	426d      	neglt	r5, r5
  4026ae:	dd0c      	ble.n	4026ca <__adddf3+0x52>
  4026b0:	442c      	add	r4, r5
  4026b2:	ea80 0202 	eor.w	r2, r0, r2
  4026b6:	ea81 0303 	eor.w	r3, r1, r3
  4026ba:	ea82 0000 	eor.w	r0, r2, r0
  4026be:	ea83 0101 	eor.w	r1, r3, r1
  4026c2:	ea80 0202 	eor.w	r2, r0, r2
  4026c6:	ea81 0303 	eor.w	r3, r1, r3
  4026ca:	2d36      	cmp	r5, #54	; 0x36
  4026cc:	bf88      	it	hi
  4026ce:	bd30      	pophi	{r4, r5, pc}
  4026d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4026d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4026d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4026dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4026e0:	d002      	beq.n	4026e8 <__adddf3+0x70>
  4026e2:	4240      	negs	r0, r0
  4026e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4026e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4026ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4026f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4026f4:	d002      	beq.n	4026fc <__adddf3+0x84>
  4026f6:	4252      	negs	r2, r2
  4026f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4026fc:	ea94 0f05 	teq	r4, r5
  402700:	f000 80a7 	beq.w	402852 <__adddf3+0x1da>
  402704:	f1a4 0401 	sub.w	r4, r4, #1
  402708:	f1d5 0e20 	rsbs	lr, r5, #32
  40270c:	db0d      	blt.n	40272a <__adddf3+0xb2>
  40270e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402712:	fa22 f205 	lsr.w	r2, r2, r5
  402716:	1880      	adds	r0, r0, r2
  402718:	f141 0100 	adc.w	r1, r1, #0
  40271c:	fa03 f20e 	lsl.w	r2, r3, lr
  402720:	1880      	adds	r0, r0, r2
  402722:	fa43 f305 	asr.w	r3, r3, r5
  402726:	4159      	adcs	r1, r3
  402728:	e00e      	b.n	402748 <__adddf3+0xd0>
  40272a:	f1a5 0520 	sub.w	r5, r5, #32
  40272e:	f10e 0e20 	add.w	lr, lr, #32
  402732:	2a01      	cmp	r2, #1
  402734:	fa03 fc0e 	lsl.w	ip, r3, lr
  402738:	bf28      	it	cs
  40273a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40273e:	fa43 f305 	asr.w	r3, r3, r5
  402742:	18c0      	adds	r0, r0, r3
  402744:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402748:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40274c:	d507      	bpl.n	40275e <__adddf3+0xe6>
  40274e:	f04f 0e00 	mov.w	lr, #0
  402752:	f1dc 0c00 	rsbs	ip, ip, #0
  402756:	eb7e 0000 	sbcs.w	r0, lr, r0
  40275a:	eb6e 0101 	sbc.w	r1, lr, r1
  40275e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402762:	d31b      	bcc.n	40279c <__adddf3+0x124>
  402764:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402768:	d30c      	bcc.n	402784 <__adddf3+0x10c>
  40276a:	0849      	lsrs	r1, r1, #1
  40276c:	ea5f 0030 	movs.w	r0, r0, rrx
  402770:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402774:	f104 0401 	add.w	r4, r4, #1
  402778:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40277c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402780:	f080 809a 	bcs.w	4028b8 <__adddf3+0x240>
  402784:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402788:	bf08      	it	eq
  40278a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40278e:	f150 0000 	adcs.w	r0, r0, #0
  402792:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402796:	ea41 0105 	orr.w	r1, r1, r5
  40279a:	bd30      	pop	{r4, r5, pc}
  40279c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4027a0:	4140      	adcs	r0, r0
  4027a2:	eb41 0101 	adc.w	r1, r1, r1
  4027a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4027aa:	f1a4 0401 	sub.w	r4, r4, #1
  4027ae:	d1e9      	bne.n	402784 <__adddf3+0x10c>
  4027b0:	f091 0f00 	teq	r1, #0
  4027b4:	bf04      	itt	eq
  4027b6:	4601      	moveq	r1, r0
  4027b8:	2000      	moveq	r0, #0
  4027ba:	fab1 f381 	clz	r3, r1
  4027be:	bf08      	it	eq
  4027c0:	3320      	addeq	r3, #32
  4027c2:	f1a3 030b 	sub.w	r3, r3, #11
  4027c6:	f1b3 0220 	subs.w	r2, r3, #32
  4027ca:	da0c      	bge.n	4027e6 <__adddf3+0x16e>
  4027cc:	320c      	adds	r2, #12
  4027ce:	dd08      	ble.n	4027e2 <__adddf3+0x16a>
  4027d0:	f102 0c14 	add.w	ip, r2, #20
  4027d4:	f1c2 020c 	rsb	r2, r2, #12
  4027d8:	fa01 f00c 	lsl.w	r0, r1, ip
  4027dc:	fa21 f102 	lsr.w	r1, r1, r2
  4027e0:	e00c      	b.n	4027fc <__adddf3+0x184>
  4027e2:	f102 0214 	add.w	r2, r2, #20
  4027e6:	bfd8      	it	le
  4027e8:	f1c2 0c20 	rsble	ip, r2, #32
  4027ec:	fa01 f102 	lsl.w	r1, r1, r2
  4027f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4027f4:	bfdc      	itt	le
  4027f6:	ea41 010c 	orrle.w	r1, r1, ip
  4027fa:	4090      	lslle	r0, r2
  4027fc:	1ae4      	subs	r4, r4, r3
  4027fe:	bfa2      	ittt	ge
  402800:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402804:	4329      	orrge	r1, r5
  402806:	bd30      	popge	{r4, r5, pc}
  402808:	ea6f 0404 	mvn.w	r4, r4
  40280c:	3c1f      	subs	r4, #31
  40280e:	da1c      	bge.n	40284a <__adddf3+0x1d2>
  402810:	340c      	adds	r4, #12
  402812:	dc0e      	bgt.n	402832 <__adddf3+0x1ba>
  402814:	f104 0414 	add.w	r4, r4, #20
  402818:	f1c4 0220 	rsb	r2, r4, #32
  40281c:	fa20 f004 	lsr.w	r0, r0, r4
  402820:	fa01 f302 	lsl.w	r3, r1, r2
  402824:	ea40 0003 	orr.w	r0, r0, r3
  402828:	fa21 f304 	lsr.w	r3, r1, r4
  40282c:	ea45 0103 	orr.w	r1, r5, r3
  402830:	bd30      	pop	{r4, r5, pc}
  402832:	f1c4 040c 	rsb	r4, r4, #12
  402836:	f1c4 0220 	rsb	r2, r4, #32
  40283a:	fa20 f002 	lsr.w	r0, r0, r2
  40283e:	fa01 f304 	lsl.w	r3, r1, r4
  402842:	ea40 0003 	orr.w	r0, r0, r3
  402846:	4629      	mov	r1, r5
  402848:	bd30      	pop	{r4, r5, pc}
  40284a:	fa21 f004 	lsr.w	r0, r1, r4
  40284e:	4629      	mov	r1, r5
  402850:	bd30      	pop	{r4, r5, pc}
  402852:	f094 0f00 	teq	r4, #0
  402856:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40285a:	bf06      	itte	eq
  40285c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402860:	3401      	addeq	r4, #1
  402862:	3d01      	subne	r5, #1
  402864:	e74e      	b.n	402704 <__adddf3+0x8c>
  402866:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40286a:	bf18      	it	ne
  40286c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402870:	d029      	beq.n	4028c6 <__adddf3+0x24e>
  402872:	ea94 0f05 	teq	r4, r5
  402876:	bf08      	it	eq
  402878:	ea90 0f02 	teqeq	r0, r2
  40287c:	d005      	beq.n	40288a <__adddf3+0x212>
  40287e:	ea54 0c00 	orrs.w	ip, r4, r0
  402882:	bf04      	itt	eq
  402884:	4619      	moveq	r1, r3
  402886:	4610      	moveq	r0, r2
  402888:	bd30      	pop	{r4, r5, pc}
  40288a:	ea91 0f03 	teq	r1, r3
  40288e:	bf1e      	ittt	ne
  402890:	2100      	movne	r1, #0
  402892:	2000      	movne	r0, #0
  402894:	bd30      	popne	{r4, r5, pc}
  402896:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40289a:	d105      	bne.n	4028a8 <__adddf3+0x230>
  40289c:	0040      	lsls	r0, r0, #1
  40289e:	4149      	adcs	r1, r1
  4028a0:	bf28      	it	cs
  4028a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4028a6:	bd30      	pop	{r4, r5, pc}
  4028a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4028ac:	bf3c      	itt	cc
  4028ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4028b2:	bd30      	popcc	{r4, r5, pc}
  4028b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4028b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4028bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4028c0:	f04f 0000 	mov.w	r0, #0
  4028c4:	bd30      	pop	{r4, r5, pc}
  4028c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4028ca:	bf1a      	itte	ne
  4028cc:	4619      	movne	r1, r3
  4028ce:	4610      	movne	r0, r2
  4028d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4028d4:	bf1c      	itt	ne
  4028d6:	460b      	movne	r3, r1
  4028d8:	4602      	movne	r2, r0
  4028da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4028de:	bf06      	itte	eq
  4028e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4028e4:	ea91 0f03 	teqeq	r1, r3
  4028e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4028ec:	bd30      	pop	{r4, r5, pc}
  4028ee:	bf00      	nop

004028f0 <__aeabi_ui2d>:
  4028f0:	f090 0f00 	teq	r0, #0
  4028f4:	bf04      	itt	eq
  4028f6:	2100      	moveq	r1, #0
  4028f8:	4770      	bxeq	lr
  4028fa:	b530      	push	{r4, r5, lr}
  4028fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402900:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402904:	f04f 0500 	mov.w	r5, #0
  402908:	f04f 0100 	mov.w	r1, #0
  40290c:	e750      	b.n	4027b0 <__adddf3+0x138>
  40290e:	bf00      	nop

00402910 <__aeabi_i2d>:
  402910:	f090 0f00 	teq	r0, #0
  402914:	bf04      	itt	eq
  402916:	2100      	moveq	r1, #0
  402918:	4770      	bxeq	lr
  40291a:	b530      	push	{r4, r5, lr}
  40291c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402920:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402924:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402928:	bf48      	it	mi
  40292a:	4240      	negmi	r0, r0
  40292c:	f04f 0100 	mov.w	r1, #0
  402930:	e73e      	b.n	4027b0 <__adddf3+0x138>
  402932:	bf00      	nop

00402934 <__aeabi_f2d>:
  402934:	0042      	lsls	r2, r0, #1
  402936:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40293a:	ea4f 0131 	mov.w	r1, r1, rrx
  40293e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402942:	bf1f      	itttt	ne
  402944:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402948:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40294c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402950:	4770      	bxne	lr
  402952:	f092 0f00 	teq	r2, #0
  402956:	bf14      	ite	ne
  402958:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40295c:	4770      	bxeq	lr
  40295e:	b530      	push	{r4, r5, lr}
  402960:	f44f 7460 	mov.w	r4, #896	; 0x380
  402964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402968:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40296c:	e720      	b.n	4027b0 <__adddf3+0x138>
  40296e:	bf00      	nop

00402970 <__aeabi_ul2d>:
  402970:	ea50 0201 	orrs.w	r2, r0, r1
  402974:	bf08      	it	eq
  402976:	4770      	bxeq	lr
  402978:	b530      	push	{r4, r5, lr}
  40297a:	f04f 0500 	mov.w	r5, #0
  40297e:	e00a      	b.n	402996 <__aeabi_l2d+0x16>

00402980 <__aeabi_l2d>:
  402980:	ea50 0201 	orrs.w	r2, r0, r1
  402984:	bf08      	it	eq
  402986:	4770      	bxeq	lr
  402988:	b530      	push	{r4, r5, lr}
  40298a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40298e:	d502      	bpl.n	402996 <__aeabi_l2d+0x16>
  402990:	4240      	negs	r0, r0
  402992:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402996:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40299a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40299e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4029a2:	f43f aedc 	beq.w	40275e <__adddf3+0xe6>
  4029a6:	f04f 0203 	mov.w	r2, #3
  4029aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4029ae:	bf18      	it	ne
  4029b0:	3203      	addne	r2, #3
  4029b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4029b6:	bf18      	it	ne
  4029b8:	3203      	addne	r2, #3
  4029ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4029be:	f1c2 0320 	rsb	r3, r2, #32
  4029c2:	fa00 fc03 	lsl.w	ip, r0, r3
  4029c6:	fa20 f002 	lsr.w	r0, r0, r2
  4029ca:	fa01 fe03 	lsl.w	lr, r1, r3
  4029ce:	ea40 000e 	orr.w	r0, r0, lr
  4029d2:	fa21 f102 	lsr.w	r1, r1, r2
  4029d6:	4414      	add	r4, r2
  4029d8:	e6c1      	b.n	40275e <__adddf3+0xe6>
  4029da:	bf00      	nop

004029dc <__aeabi_dmul>:
  4029dc:	b570      	push	{r4, r5, r6, lr}
  4029de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4029e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4029e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4029ea:	bf1d      	ittte	ne
  4029ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4029f0:	ea94 0f0c 	teqne	r4, ip
  4029f4:	ea95 0f0c 	teqne	r5, ip
  4029f8:	f000 f8de 	bleq	402bb8 <__aeabi_dmul+0x1dc>
  4029fc:	442c      	add	r4, r5
  4029fe:	ea81 0603 	eor.w	r6, r1, r3
  402a02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402a06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402a0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402a0e:	bf18      	it	ne
  402a10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402a1c:	d038      	beq.n	402a90 <__aeabi_dmul+0xb4>
  402a1e:	fba0 ce02 	umull	ip, lr, r0, r2
  402a22:	f04f 0500 	mov.w	r5, #0
  402a26:	fbe1 e502 	umlal	lr, r5, r1, r2
  402a2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402a2e:	fbe0 e503 	umlal	lr, r5, r0, r3
  402a32:	f04f 0600 	mov.w	r6, #0
  402a36:	fbe1 5603 	umlal	r5, r6, r1, r3
  402a3a:	f09c 0f00 	teq	ip, #0
  402a3e:	bf18      	it	ne
  402a40:	f04e 0e01 	orrne.w	lr, lr, #1
  402a44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402a48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402a4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402a50:	d204      	bcs.n	402a5c <__aeabi_dmul+0x80>
  402a52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402a56:	416d      	adcs	r5, r5
  402a58:	eb46 0606 	adc.w	r6, r6, r6
  402a5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402a60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402a64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402a68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402a6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402a70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402a74:	bf88      	it	hi
  402a76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402a7a:	d81e      	bhi.n	402aba <__aeabi_dmul+0xde>
  402a7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402a80:	bf08      	it	eq
  402a82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402a86:	f150 0000 	adcs.w	r0, r0, #0
  402a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402a8e:	bd70      	pop	{r4, r5, r6, pc}
  402a90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402a94:	ea46 0101 	orr.w	r1, r6, r1
  402a98:	ea40 0002 	orr.w	r0, r0, r2
  402a9c:	ea81 0103 	eor.w	r1, r1, r3
  402aa0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402aa4:	bfc2      	ittt	gt
  402aa6:	ebd4 050c 	rsbsgt	r5, r4, ip
  402aaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402aae:	bd70      	popgt	{r4, r5, r6, pc}
  402ab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402ab4:	f04f 0e00 	mov.w	lr, #0
  402ab8:	3c01      	subs	r4, #1
  402aba:	f300 80ab 	bgt.w	402c14 <__aeabi_dmul+0x238>
  402abe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402ac2:	bfde      	ittt	le
  402ac4:	2000      	movle	r0, #0
  402ac6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402aca:	bd70      	pople	{r4, r5, r6, pc}
  402acc:	f1c4 0400 	rsb	r4, r4, #0
  402ad0:	3c20      	subs	r4, #32
  402ad2:	da35      	bge.n	402b40 <__aeabi_dmul+0x164>
  402ad4:	340c      	adds	r4, #12
  402ad6:	dc1b      	bgt.n	402b10 <__aeabi_dmul+0x134>
  402ad8:	f104 0414 	add.w	r4, r4, #20
  402adc:	f1c4 0520 	rsb	r5, r4, #32
  402ae0:	fa00 f305 	lsl.w	r3, r0, r5
  402ae4:	fa20 f004 	lsr.w	r0, r0, r4
  402ae8:	fa01 f205 	lsl.w	r2, r1, r5
  402aec:	ea40 0002 	orr.w	r0, r0, r2
  402af0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402afc:	fa21 f604 	lsr.w	r6, r1, r4
  402b00:	eb42 0106 	adc.w	r1, r2, r6
  402b04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b08:	bf08      	it	eq
  402b0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b0e:	bd70      	pop	{r4, r5, r6, pc}
  402b10:	f1c4 040c 	rsb	r4, r4, #12
  402b14:	f1c4 0520 	rsb	r5, r4, #32
  402b18:	fa00 f304 	lsl.w	r3, r0, r4
  402b1c:	fa20 f005 	lsr.w	r0, r0, r5
  402b20:	fa01 f204 	lsl.w	r2, r1, r4
  402b24:	ea40 0002 	orr.w	r0, r0, r2
  402b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b30:	f141 0100 	adc.w	r1, r1, #0
  402b34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b38:	bf08      	it	eq
  402b3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b3e:	bd70      	pop	{r4, r5, r6, pc}
  402b40:	f1c4 0520 	rsb	r5, r4, #32
  402b44:	fa00 f205 	lsl.w	r2, r0, r5
  402b48:	ea4e 0e02 	orr.w	lr, lr, r2
  402b4c:	fa20 f304 	lsr.w	r3, r0, r4
  402b50:	fa01 f205 	lsl.w	r2, r1, r5
  402b54:	ea43 0302 	orr.w	r3, r3, r2
  402b58:	fa21 f004 	lsr.w	r0, r1, r4
  402b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b60:	fa21 f204 	lsr.w	r2, r1, r4
  402b64:	ea20 0002 	bic.w	r0, r0, r2
  402b68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b70:	bf08      	it	eq
  402b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b76:	bd70      	pop	{r4, r5, r6, pc}
  402b78:	f094 0f00 	teq	r4, #0
  402b7c:	d10f      	bne.n	402b9e <__aeabi_dmul+0x1c2>
  402b7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402b82:	0040      	lsls	r0, r0, #1
  402b84:	eb41 0101 	adc.w	r1, r1, r1
  402b88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402b8c:	bf08      	it	eq
  402b8e:	3c01      	subeq	r4, #1
  402b90:	d0f7      	beq.n	402b82 <__aeabi_dmul+0x1a6>
  402b92:	ea41 0106 	orr.w	r1, r1, r6
  402b96:	f095 0f00 	teq	r5, #0
  402b9a:	bf18      	it	ne
  402b9c:	4770      	bxne	lr
  402b9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402ba2:	0052      	lsls	r2, r2, #1
  402ba4:	eb43 0303 	adc.w	r3, r3, r3
  402ba8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402bac:	bf08      	it	eq
  402bae:	3d01      	subeq	r5, #1
  402bb0:	d0f7      	beq.n	402ba2 <__aeabi_dmul+0x1c6>
  402bb2:	ea43 0306 	orr.w	r3, r3, r6
  402bb6:	4770      	bx	lr
  402bb8:	ea94 0f0c 	teq	r4, ip
  402bbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402bc0:	bf18      	it	ne
  402bc2:	ea95 0f0c 	teqne	r5, ip
  402bc6:	d00c      	beq.n	402be2 <__aeabi_dmul+0x206>
  402bc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402bcc:	bf18      	it	ne
  402bce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402bd2:	d1d1      	bne.n	402b78 <__aeabi_dmul+0x19c>
  402bd4:	ea81 0103 	eor.w	r1, r1, r3
  402bd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402bdc:	f04f 0000 	mov.w	r0, #0
  402be0:	bd70      	pop	{r4, r5, r6, pc}
  402be2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402be6:	bf06      	itte	eq
  402be8:	4610      	moveq	r0, r2
  402bea:	4619      	moveq	r1, r3
  402bec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402bf0:	d019      	beq.n	402c26 <__aeabi_dmul+0x24a>
  402bf2:	ea94 0f0c 	teq	r4, ip
  402bf6:	d102      	bne.n	402bfe <__aeabi_dmul+0x222>
  402bf8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402bfc:	d113      	bne.n	402c26 <__aeabi_dmul+0x24a>
  402bfe:	ea95 0f0c 	teq	r5, ip
  402c02:	d105      	bne.n	402c10 <__aeabi_dmul+0x234>
  402c04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402c08:	bf1c      	itt	ne
  402c0a:	4610      	movne	r0, r2
  402c0c:	4619      	movne	r1, r3
  402c0e:	d10a      	bne.n	402c26 <__aeabi_dmul+0x24a>
  402c10:	ea81 0103 	eor.w	r1, r1, r3
  402c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402c20:	f04f 0000 	mov.w	r0, #0
  402c24:	bd70      	pop	{r4, r5, r6, pc}
  402c26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402c2e:	bd70      	pop	{r4, r5, r6, pc}

00402c30 <__aeabi_ddiv>:
  402c30:	b570      	push	{r4, r5, r6, lr}
  402c32:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402c36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402c3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402c3e:	bf1d      	ittte	ne
  402c40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402c44:	ea94 0f0c 	teqne	r4, ip
  402c48:	ea95 0f0c 	teqne	r5, ip
  402c4c:	f000 f8a7 	bleq	402d9e <__aeabi_ddiv+0x16e>
  402c50:	eba4 0405 	sub.w	r4, r4, r5
  402c54:	ea81 0e03 	eor.w	lr, r1, r3
  402c58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402c5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402c60:	f000 8088 	beq.w	402d74 <__aeabi_ddiv+0x144>
  402c64:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402c68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402c6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402c70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402c74:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402c78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402c7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402c80:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402c84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402c88:	429d      	cmp	r5, r3
  402c8a:	bf08      	it	eq
  402c8c:	4296      	cmpeq	r6, r2
  402c8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402c92:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402c96:	d202      	bcs.n	402c9e <__aeabi_ddiv+0x6e>
  402c98:	085b      	lsrs	r3, r3, #1
  402c9a:	ea4f 0232 	mov.w	r2, r2, rrx
  402c9e:	1ab6      	subs	r6, r6, r2
  402ca0:	eb65 0503 	sbc.w	r5, r5, r3
  402ca4:	085b      	lsrs	r3, r3, #1
  402ca6:	ea4f 0232 	mov.w	r2, r2, rrx
  402caa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402cae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402cb2:	ebb6 0e02 	subs.w	lr, r6, r2
  402cb6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402cba:	bf22      	ittt	cs
  402cbc:	1ab6      	subcs	r6, r6, r2
  402cbe:	4675      	movcs	r5, lr
  402cc0:	ea40 000c 	orrcs.w	r0, r0, ip
  402cc4:	085b      	lsrs	r3, r3, #1
  402cc6:	ea4f 0232 	mov.w	r2, r2, rrx
  402cca:	ebb6 0e02 	subs.w	lr, r6, r2
  402cce:	eb75 0e03 	sbcs.w	lr, r5, r3
  402cd2:	bf22      	ittt	cs
  402cd4:	1ab6      	subcs	r6, r6, r2
  402cd6:	4675      	movcs	r5, lr
  402cd8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402cdc:	085b      	lsrs	r3, r3, #1
  402cde:	ea4f 0232 	mov.w	r2, r2, rrx
  402ce2:	ebb6 0e02 	subs.w	lr, r6, r2
  402ce6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402cea:	bf22      	ittt	cs
  402cec:	1ab6      	subcs	r6, r6, r2
  402cee:	4675      	movcs	r5, lr
  402cf0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402cf4:	085b      	lsrs	r3, r3, #1
  402cf6:	ea4f 0232 	mov.w	r2, r2, rrx
  402cfa:	ebb6 0e02 	subs.w	lr, r6, r2
  402cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d02:	bf22      	ittt	cs
  402d04:	1ab6      	subcs	r6, r6, r2
  402d06:	4675      	movcs	r5, lr
  402d08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402d0c:	ea55 0e06 	orrs.w	lr, r5, r6
  402d10:	d018      	beq.n	402d44 <__aeabi_ddiv+0x114>
  402d12:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402d16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402d1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402d1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402d22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402d26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402d2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402d2e:	d1c0      	bne.n	402cb2 <__aeabi_ddiv+0x82>
  402d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d34:	d10b      	bne.n	402d4e <__aeabi_ddiv+0x11e>
  402d36:	ea41 0100 	orr.w	r1, r1, r0
  402d3a:	f04f 0000 	mov.w	r0, #0
  402d3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402d42:	e7b6      	b.n	402cb2 <__aeabi_ddiv+0x82>
  402d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d48:	bf04      	itt	eq
  402d4a:	4301      	orreq	r1, r0
  402d4c:	2000      	moveq	r0, #0
  402d4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402d52:	bf88      	it	hi
  402d54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402d58:	f63f aeaf 	bhi.w	402aba <__aeabi_dmul+0xde>
  402d5c:	ebb5 0c03 	subs.w	ip, r5, r3
  402d60:	bf04      	itt	eq
  402d62:	ebb6 0c02 	subseq.w	ip, r6, r2
  402d66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402d6a:	f150 0000 	adcs.w	r0, r0, #0
  402d6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402d72:	bd70      	pop	{r4, r5, r6, pc}
  402d74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402d78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402d7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402d80:	bfc2      	ittt	gt
  402d82:	ebd4 050c 	rsbsgt	r5, r4, ip
  402d86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402d8a:	bd70      	popgt	{r4, r5, r6, pc}
  402d8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402d90:	f04f 0e00 	mov.w	lr, #0
  402d94:	3c01      	subs	r4, #1
  402d96:	e690      	b.n	402aba <__aeabi_dmul+0xde>
  402d98:	ea45 0e06 	orr.w	lr, r5, r6
  402d9c:	e68d      	b.n	402aba <__aeabi_dmul+0xde>
  402d9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402da2:	ea94 0f0c 	teq	r4, ip
  402da6:	bf08      	it	eq
  402da8:	ea95 0f0c 	teqeq	r5, ip
  402dac:	f43f af3b 	beq.w	402c26 <__aeabi_dmul+0x24a>
  402db0:	ea94 0f0c 	teq	r4, ip
  402db4:	d10a      	bne.n	402dcc <__aeabi_ddiv+0x19c>
  402db6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402dba:	f47f af34 	bne.w	402c26 <__aeabi_dmul+0x24a>
  402dbe:	ea95 0f0c 	teq	r5, ip
  402dc2:	f47f af25 	bne.w	402c10 <__aeabi_dmul+0x234>
  402dc6:	4610      	mov	r0, r2
  402dc8:	4619      	mov	r1, r3
  402dca:	e72c      	b.n	402c26 <__aeabi_dmul+0x24a>
  402dcc:	ea95 0f0c 	teq	r5, ip
  402dd0:	d106      	bne.n	402de0 <__aeabi_ddiv+0x1b0>
  402dd2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402dd6:	f43f aefd 	beq.w	402bd4 <__aeabi_dmul+0x1f8>
  402dda:	4610      	mov	r0, r2
  402ddc:	4619      	mov	r1, r3
  402dde:	e722      	b.n	402c26 <__aeabi_dmul+0x24a>
  402de0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402de4:	bf18      	it	ne
  402de6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402dea:	f47f aec5 	bne.w	402b78 <__aeabi_dmul+0x19c>
  402dee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402df2:	f47f af0d 	bne.w	402c10 <__aeabi_dmul+0x234>
  402df6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402dfa:	f47f aeeb 	bne.w	402bd4 <__aeabi_dmul+0x1f8>
  402dfe:	e712      	b.n	402c26 <__aeabi_dmul+0x24a>

00402e00 <__gedf2>:
  402e00:	f04f 3cff 	mov.w	ip, #4294967295
  402e04:	e006      	b.n	402e14 <__cmpdf2+0x4>
  402e06:	bf00      	nop

00402e08 <__ledf2>:
  402e08:	f04f 0c01 	mov.w	ip, #1
  402e0c:	e002      	b.n	402e14 <__cmpdf2+0x4>
  402e0e:	bf00      	nop

00402e10 <__cmpdf2>:
  402e10:	f04f 0c01 	mov.w	ip, #1
  402e14:	f84d cd04 	str.w	ip, [sp, #-4]!
  402e18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402e1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402e24:	bf18      	it	ne
  402e26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402e2a:	d01b      	beq.n	402e64 <__cmpdf2+0x54>
  402e2c:	b001      	add	sp, #4
  402e2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402e32:	bf0c      	ite	eq
  402e34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402e38:	ea91 0f03 	teqne	r1, r3
  402e3c:	bf02      	ittt	eq
  402e3e:	ea90 0f02 	teqeq	r0, r2
  402e42:	2000      	moveq	r0, #0
  402e44:	4770      	bxeq	lr
  402e46:	f110 0f00 	cmn.w	r0, #0
  402e4a:	ea91 0f03 	teq	r1, r3
  402e4e:	bf58      	it	pl
  402e50:	4299      	cmppl	r1, r3
  402e52:	bf08      	it	eq
  402e54:	4290      	cmpeq	r0, r2
  402e56:	bf2c      	ite	cs
  402e58:	17d8      	asrcs	r0, r3, #31
  402e5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402e5e:	f040 0001 	orr.w	r0, r0, #1
  402e62:	4770      	bx	lr
  402e64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402e68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e6c:	d102      	bne.n	402e74 <__cmpdf2+0x64>
  402e6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402e72:	d107      	bne.n	402e84 <__cmpdf2+0x74>
  402e74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402e78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e7c:	d1d6      	bne.n	402e2c <__cmpdf2+0x1c>
  402e7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402e82:	d0d3      	beq.n	402e2c <__cmpdf2+0x1c>
  402e84:	f85d 0b04 	ldr.w	r0, [sp], #4
  402e88:	4770      	bx	lr
  402e8a:	bf00      	nop

00402e8c <__aeabi_cdrcmple>:
  402e8c:	4684      	mov	ip, r0
  402e8e:	4610      	mov	r0, r2
  402e90:	4662      	mov	r2, ip
  402e92:	468c      	mov	ip, r1
  402e94:	4619      	mov	r1, r3
  402e96:	4663      	mov	r3, ip
  402e98:	e000      	b.n	402e9c <__aeabi_cdcmpeq>
  402e9a:	bf00      	nop

00402e9c <__aeabi_cdcmpeq>:
  402e9c:	b501      	push	{r0, lr}
  402e9e:	f7ff ffb7 	bl	402e10 <__cmpdf2>
  402ea2:	2800      	cmp	r0, #0
  402ea4:	bf48      	it	mi
  402ea6:	f110 0f00 	cmnmi.w	r0, #0
  402eaa:	bd01      	pop	{r0, pc}

00402eac <__aeabi_dcmpeq>:
  402eac:	f84d ed08 	str.w	lr, [sp, #-8]!
  402eb0:	f7ff fff4 	bl	402e9c <__aeabi_cdcmpeq>
  402eb4:	bf0c      	ite	eq
  402eb6:	2001      	moveq	r0, #1
  402eb8:	2000      	movne	r0, #0
  402eba:	f85d fb08 	ldr.w	pc, [sp], #8
  402ebe:	bf00      	nop

00402ec0 <__aeabi_dcmplt>:
  402ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
  402ec4:	f7ff ffea 	bl	402e9c <__aeabi_cdcmpeq>
  402ec8:	bf34      	ite	cc
  402eca:	2001      	movcc	r0, #1
  402ecc:	2000      	movcs	r0, #0
  402ece:	f85d fb08 	ldr.w	pc, [sp], #8
  402ed2:	bf00      	nop

00402ed4 <__aeabi_dcmple>:
  402ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
  402ed8:	f7ff ffe0 	bl	402e9c <__aeabi_cdcmpeq>
  402edc:	bf94      	ite	ls
  402ede:	2001      	movls	r0, #1
  402ee0:	2000      	movhi	r0, #0
  402ee2:	f85d fb08 	ldr.w	pc, [sp], #8
  402ee6:	bf00      	nop

00402ee8 <__aeabi_dcmpge>:
  402ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
  402eec:	f7ff ffce 	bl	402e8c <__aeabi_cdrcmple>
  402ef0:	bf94      	ite	ls
  402ef2:	2001      	movls	r0, #1
  402ef4:	2000      	movhi	r0, #0
  402ef6:	f85d fb08 	ldr.w	pc, [sp], #8
  402efa:	bf00      	nop

00402efc <__aeabi_dcmpgt>:
  402efc:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f00:	f7ff ffc4 	bl	402e8c <__aeabi_cdrcmple>
  402f04:	bf34      	ite	cc
  402f06:	2001      	movcc	r0, #1
  402f08:	2000      	movcs	r0, #0
  402f0a:	f85d fb08 	ldr.w	pc, [sp], #8
  402f0e:	bf00      	nop

00402f10 <__aeabi_d2f>:
  402f10:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402f14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402f18:	bf24      	itt	cs
  402f1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402f1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402f22:	d90d      	bls.n	402f40 <__aeabi_d2f+0x30>
  402f24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402f28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402f2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402f30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402f34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402f38:	bf08      	it	eq
  402f3a:	f020 0001 	biceq.w	r0, r0, #1
  402f3e:	4770      	bx	lr
  402f40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402f44:	d121      	bne.n	402f8a <__aeabi_d2f+0x7a>
  402f46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402f4a:	bfbc      	itt	lt
  402f4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402f50:	4770      	bxlt	lr
  402f52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f56:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402f5a:	f1c2 0218 	rsb	r2, r2, #24
  402f5e:	f1c2 0c20 	rsb	ip, r2, #32
  402f62:	fa10 f30c 	lsls.w	r3, r0, ip
  402f66:	fa20 f002 	lsr.w	r0, r0, r2
  402f6a:	bf18      	it	ne
  402f6c:	f040 0001 	orrne.w	r0, r0, #1
  402f70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402f74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402f78:	fa03 fc0c 	lsl.w	ip, r3, ip
  402f7c:	ea40 000c 	orr.w	r0, r0, ip
  402f80:	fa23 f302 	lsr.w	r3, r3, r2
  402f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402f88:	e7cc      	b.n	402f24 <__aeabi_d2f+0x14>
  402f8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402f8e:	d107      	bne.n	402fa0 <__aeabi_d2f+0x90>
  402f90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402f94:	bf1e      	ittt	ne
  402f96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402f9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402f9e:	4770      	bxne	lr
  402fa0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402fa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402fa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402fac:	4770      	bx	lr
  402fae:	bf00      	nop

00402fb0 <__libc_init_array>:
  402fb0:	b570      	push	{r4, r5, r6, lr}
  402fb2:	4e0d      	ldr	r6, [pc, #52]	; (402fe8 <__libc_init_array+0x38>)
  402fb4:	4c0d      	ldr	r4, [pc, #52]	; (402fec <__libc_init_array+0x3c>)
  402fb6:	1ba4      	subs	r4, r4, r6
  402fb8:	10a4      	asrs	r4, r4, #2
  402fba:	2500      	movs	r5, #0
  402fbc:	42a5      	cmp	r5, r4
  402fbe:	d109      	bne.n	402fd4 <__libc_init_array+0x24>
  402fc0:	4e0b      	ldr	r6, [pc, #44]	; (402ff0 <__libc_init_array+0x40>)
  402fc2:	4c0c      	ldr	r4, [pc, #48]	; (402ff4 <__libc_init_array+0x44>)
  402fc4:	f000 f9ae 	bl	403324 <_init>
  402fc8:	1ba4      	subs	r4, r4, r6
  402fca:	10a4      	asrs	r4, r4, #2
  402fcc:	2500      	movs	r5, #0
  402fce:	42a5      	cmp	r5, r4
  402fd0:	d105      	bne.n	402fde <__libc_init_array+0x2e>
  402fd2:	bd70      	pop	{r4, r5, r6, pc}
  402fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402fd8:	4798      	blx	r3
  402fda:	3501      	adds	r5, #1
  402fdc:	e7ee      	b.n	402fbc <__libc_init_array+0xc>
  402fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402fe2:	4798      	blx	r3
  402fe4:	3501      	adds	r5, #1
  402fe6:	e7f2      	b.n	402fce <__libc_init_array+0x1e>
  402fe8:	00403330 	.word	0x00403330
  402fec:	00403330 	.word	0x00403330
  402ff0:	00403330 	.word	0x00403330
  402ff4:	00403334 	.word	0x00403334

00402ff8 <memset>:
  402ff8:	4402      	add	r2, r0
  402ffa:	4603      	mov	r3, r0
  402ffc:	4293      	cmp	r3, r2
  402ffe:	d100      	bne.n	403002 <memset+0xa>
  403000:	4770      	bx	lr
  403002:	f803 1b01 	strb.w	r1, [r3], #1
  403006:	e7f9      	b.n	402ffc <memset+0x4>
  403008:	682f2e2e 	.word	0x682f2e2e
  40300c:	692f6c61 	.word	0x692f6c61
  403010:	756c636e 	.word	0x756c636e
  403014:	682f6564 	.word	0x682f6564
  403018:	775f6c61 	.word	0x775f6c61
  40301c:	682e7464 	.word	0x682e7464
  403020:	00000000 	.word	0x00000000
  403024:	682f2e2e 	.word	0x682f2e2e
  403028:	732f6c61 	.word	0x732f6c61
  40302c:	682f6372 	.word	0x682f6372
  403030:	615f6c61 	.word	0x615f6c61
  403034:	735f6364 	.word	0x735f6364
  403038:	2e636e79 	.word	0x2e636e79
  40303c:	00000063 	.word	0x00000063
  403040:	682f2e2e 	.word	0x682f2e2e
  403044:	732f6c61 	.word	0x732f6c61
  403048:	682f6372 	.word	0x682f6372
  40304c:	695f6c61 	.word	0x695f6c61
  403050:	6d5f6332 	.word	0x6d5f6332
  403054:	6e79735f 	.word	0x6e79735f
  403058:	00632e63 	.word	0x00632e63
  40305c:	682f2e2e 	.word	0x682f2e2e
  403060:	732f6c61 	.word	0x732f6c61
  403064:	682f6372 	.word	0x682f6372
  403068:	695f6c61 	.word	0x695f6c61
  40306c:	00632e6f 	.word	0x00632e6f
  403070:	682f2e2e 	.word	0x682f2e2e
  403074:	732f6c61 	.word	0x732f6c61
  403078:	682f6372 	.word	0x682f6372
  40307c:	705f6c61 	.word	0x705f6c61
  403080:	632e6d77 	.word	0x632e6d77
  403084:	00000000 	.word	0x00000000
  403088:	682f2e2e 	.word	0x682f2e2e
  40308c:	732f6c61 	.word	0x732f6c61
  403090:	682f6372 	.word	0x682f6372
  403094:	735f6c61 	.word	0x735f6c61
  403098:	6d5f6970 	.word	0x6d5f6970
  40309c:	6e79735f 	.word	0x6e79735f
  4030a0:	00632e63 	.word	0x00632e63
  4030a4:	682f2e2e 	.word	0x682f2e2e
  4030a8:	732f6c61 	.word	0x732f6c61
  4030ac:	682f6372 	.word	0x682f6372
  4030b0:	745f6c61 	.word	0x745f6c61
  4030b4:	72656d69 	.word	0x72656d69
  4030b8:	0000632e 	.word	0x0000632e
  4030bc:	682f2e2e 	.word	0x682f2e2e
  4030c0:	752f6c61 	.word	0x752f6c61
  4030c4:	736c6974 	.word	0x736c6974
  4030c8:	6372732f 	.word	0x6372732f
  4030cc:	6974752f 	.word	0x6974752f
  4030d0:	6c5f736c 	.word	0x6c5f736c
  4030d4:	2e747369 	.word	0x2e747369
  4030d8:	00000063 	.word	0x00000063

004030dc <_afecs>:
  4030dc:	00000000 2f843100 03000000 ffffffff     .....1./........
  4030ec:	0000ffff 00000000 00000000 00000000     ................
  4030fc:	0000010c 00000000 00000000 00000000     ................
  40310c:	00000000 00000200 00000200 00000200     ................
  40311c:	00000200 00000200 00000200 00000200     ................
  40312c:	00000200 00000200 00000200 00000200     ................
  40313c:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  40314c:	5f6c7068 63656661 0000632e              hpl_afec.c..

00403158 <_ext_irq>:
  403158:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  403168:	00000000 03c00000 00008020 00000001     ........ .......
  403178:	00000002 000000f2 000000f2 00000000     ................
  403188:	000000f0 00000002                       ........

00403190 <_pio_irq_n>:
  403190:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  4031a0:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

004031b0 <_pwms>:
  4031b0:	40020000 0000001f 00010001 00000001     ...@............
  4031c0:	00000001 000000ff 00000000 00000004     ................
	...
  4031dc:	00000004 00403238 00000000 204000c4     ....82@.......@ 
  4031ec:	4005c000 0000003c 00010001 00000001     ...@<...........
  4031fc:	00000001 000000ff 00000000 00000004     ................
	...
  403218:	00000001 00403228 00000000 204000b8     ....(2@.......@ 

00403228 <_ch_cfg1>:
  403228:	00000000 00000208 00000400 00000200     ................

00403238 <_ch_cfg0>:
  403238:	00000000 00000208 00000400 00000200     ................
  403248:	00000001 00000208 00000400 00000200     ................
  403258:	00000002 00000208 00000400 00000200     ................
  403268:	00000003 00000208 00000400 00000200     ................
  403278:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  403288:	632e6d77 00000000                       wm.c....

00403290 <spi_regs>:
  403290:	00000000 80000000 00000001 0496fa02     ................
  4032a0:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  4032b0:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  4032c0:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

004032d0 <_i2cm_sync_cfgs>:
  4032d0:	40018000 00000020 00000000 00000000     ...@ ...........
  4032e0:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  4032f0:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  403300:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  403310:	775f6c70 632e7464 00000000 bbccddee     pl_wdt.c........
  403320:	000000aa                                ....

00403324 <_init>:
  403324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403326:	bf00      	nop
  403328:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40332a:	bc08      	pop	{r3}
  40332c:	469e      	mov	lr, r3
  40332e:	4770      	bx	lr

00403330 <__init_array_start>:
  403330:	0040017d 	.word	0x0040017d

00403334 <_fini>:
  403334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403336:	bf00      	nop
  403338:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40333a:	bc08      	pop	{r3}
  40333c:	469e      	mov	lr, r3
  40333e:	4770      	bx	lr

00403340 <__fini_array_start>:
  403340:	00400159 	.word	0x00400159
