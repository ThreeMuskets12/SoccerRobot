
TimerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c6c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20400000  00401c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  20400024  00401c90  00020024  2**2
                  ALLOC
  3 .heap         00000200  20400148  00401db4  00020024  2**0
                  ALLOC
  4 .stack        00000400  20400348  00401fb4  00020024  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019486  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003594  00000000  00000000  00039531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b04f  00000000  00000000  0003cac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b88  00000000  00000000  00047b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ad8  00000000  00000000  0004869c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000374f7  00000000  00000000  00049174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015088  00000000  00000000  0008066b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0011ea7d  00000000  00000000  000956f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c38  00000000  00000000  001b4170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 07 40 20 d5 01 40 00 d1 01 40 00 d1 01 40 00     H.@ ..@...@...@.
  400010:	d1 01 40 00 d1 01 40 00 d1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  40003c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40004c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40005c:	d1 01 40 00 d1 01 40 00 00 00 00 00 65 10 40 00     ..@...@.....e.@.
  40006c:	59 10 40 00 00 00 00 00 d1 01 40 00 d1 01 40 00     Y.@.......@...@.
  40007c:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  40008c:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  40009c:	61 16 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     a.@...@...@...@.
  4000ac:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  4000bc:	c9 11 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
	...
  4000e0:	d1 01 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  4000f0:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400100:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400110:	d1 01 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	d1 01 40 00 d1 01 40 00 d1 01 40 00 d1 01 40 00     ..@...@...@...@.
  400130:	dd 11 40 00 d1 01 40 00 00 00 00 00 d1 01 40 00     ..@...@.......@.
  400140:	d1 01 40 00 d1 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400150:	d1 01 40 00 d1 01 40 00                             ..@...@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	20400024 	.word	0x20400024
  400174:	00000000 	.word	0x00000000
  400178:	00401c6c 	.word	0x00401c6c

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	00401c6c 	.word	0x00401c6c
  4001b8:	20400028 	.word	0x20400028
  4001bc:	00401c6c 	.word	0x00401c6c
  4001c0:	00000000 	.word	0x00000000

004001c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001c4:	b508      	push	{r3, lr}
	system_init();
  4001c6:	4b01      	ldr	r3, [pc, #4]	; (4001cc <atmel_start_init+0x8>)
  4001c8:	4798      	blx	r3
  4001ca:	bd08      	pop	{r3, pc}
  4001cc:	004005b1 	.word	0x004005b1

004001d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001d0:	e7fe      	b.n	4001d0 <Dummy_Handler>
	...

004001d4 <Reset_Handler>:
{
  4001d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001d6:	4b10      	ldr	r3, [pc, #64]	; (400218 <Reset_Handler+0x44>)
  4001d8:	4a10      	ldr	r2, [pc, #64]	; (40021c <Reset_Handler+0x48>)
  4001da:	429a      	cmp	r2, r3
  4001dc:	d009      	beq.n	4001f2 <Reset_Handler+0x1e>
  4001de:	4b0e      	ldr	r3, [pc, #56]	; (400218 <Reset_Handler+0x44>)
  4001e0:	4a0e      	ldr	r2, [pc, #56]	; (40021c <Reset_Handler+0x48>)
  4001e2:	e003      	b.n	4001ec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001e4:	6811      	ldr	r1, [r2, #0]
  4001e6:	6019      	str	r1, [r3, #0]
  4001e8:	3304      	adds	r3, #4
  4001ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001ec:	490c      	ldr	r1, [pc, #48]	; (400220 <Reset_Handler+0x4c>)
  4001ee:	428b      	cmp	r3, r1
  4001f0:	d3f8      	bcc.n	4001e4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4001f2:	4b0c      	ldr	r3, [pc, #48]	; (400224 <Reset_Handler+0x50>)
  4001f4:	e002      	b.n	4001fc <Reset_Handler+0x28>
                *pDest++ = 0;
  4001f6:	2200      	movs	r2, #0
  4001f8:	601a      	str	r2, [r3, #0]
  4001fa:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4001fc:	4a0a      	ldr	r2, [pc, #40]	; (400228 <Reset_Handler+0x54>)
  4001fe:	4293      	cmp	r3, r2
  400200:	d3f9      	bcc.n	4001f6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400202:	4a0a      	ldr	r2, [pc, #40]	; (40022c <Reset_Handler+0x58>)
  400204:	4b0a      	ldr	r3, [pc, #40]	; (400230 <Reset_Handler+0x5c>)
  400206:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40020a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40020c:	4b09      	ldr	r3, [pc, #36]	; (400234 <Reset_Handler+0x60>)
  40020e:	4798      	blx	r3
        main();
  400210:	4b09      	ldr	r3, [pc, #36]	; (400238 <Reset_Handler+0x64>)
  400212:	4798      	blx	r3
  400214:	e7fe      	b.n	400214 <Reset_Handler+0x40>
  400216:	bf00      	nop
  400218:	20400000 	.word	0x20400000
  40021c:	00401c6c 	.word	0x00401c6c
  400220:	20400024 	.word	0x20400024
  400224:	20400024 	.word	0x20400024
  400228:	20400148 	.word	0x20400148
  40022c:	e000ed00 	.word	0xe000ed00
  400230:	00400000 	.word	0x00400000
  400234:	00401905 	.word	0x00401905
  400238:	004018a1 	.word	0x004018a1

0040023c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40023c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40023e:	4b08      	ldr	r3, [pc, #32]	; (400260 <TIMER_0_init+0x24>)
  400240:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400242:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400246:	d103      	bne.n	400250 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	4b04      	ldr	r3, [pc, #16]	; (400260 <TIMER_0_init+0x24>)
  40024e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400250:	4b04      	ldr	r3, [pc, #16]	; (400264 <TIMER_0_init+0x28>)
  400252:	4798      	blx	r3
  400254:	4602      	mov	r2, r0
  400256:	4904      	ldr	r1, [pc, #16]	; (400268 <TIMER_0_init+0x2c>)
  400258:	4804      	ldr	r0, [pc, #16]	; (40026c <TIMER_0_init+0x30>)
  40025a:	4b05      	ldr	r3, [pc, #20]	; (400270 <TIMER_0_init+0x34>)
  40025c:	4798      	blx	r3
  40025e:	bd08      	pop	{r3, pc}
  400260:	400e0600 	.word	0x400e0600
  400264:	0040165d 	.word	0x0040165d
  400268:	4000c000 	.word	0x4000c000
  40026c:	2040012c 	.word	0x2040012c
  400270:	00400b35 	.word	0x00400b35

00400274 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400278:	4b05      	ldr	r3, [pc, #20]	; (400290 <ADC_0_PORT_init+0x1c>)
  40027a:	601a      	str	r2, [r3, #0]
  40027c:	2204      	movs	r2, #4
  40027e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400282:	601a      	str	r2, [r3, #0]
  400284:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400288:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40028c:	601a      	str	r2, [r3, #0]
  40028e:	4770      	bx	lr
  400290:	400e1400 	.word	0x400e1400

00400294 <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400294:	4b04      	ldr	r3, [pc, #16]	; (4002a8 <ADC_0_CLOCK_init+0x14>)
  400296:	699b      	ldr	r3, [r3, #24]
  400298:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40029c:	d103      	bne.n	4002a6 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40029e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4002a2:	4b01      	ldr	r3, [pc, #4]	; (4002a8 <ADC_0_CLOCK_init+0x14>)
  4002a4:	611a      	str	r2, [r3, #16]
  4002a6:	4770      	bx	lr
  4002a8:	400e0600 	.word	0x400e0600

004002ac <ADC_0_init>:
{
  4002ac:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  4002ae:	4b05      	ldr	r3, [pc, #20]	; (4002c4 <ADC_0_init+0x18>)
  4002b0:	4798      	blx	r3
	ADC_0_PORT_init();
  4002b2:	4b05      	ldr	r3, [pc, #20]	; (4002c8 <ADC_0_init+0x1c>)
  4002b4:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  4002b6:	2200      	movs	r2, #0
  4002b8:	4904      	ldr	r1, [pc, #16]	; (4002cc <ADC_0_init+0x20>)
  4002ba:	4805      	ldr	r0, [pc, #20]	; (4002d0 <ADC_0_init+0x24>)
  4002bc:	4b05      	ldr	r3, [pc, #20]	; (4002d4 <ADC_0_init+0x28>)
  4002be:	4798      	blx	r3
  4002c0:	bd08      	pop	{r3, pc}
  4002c2:	bf00      	nop
  4002c4:	00400295 	.word	0x00400295
  4002c8:	00400275 	.word	0x00400275
  4002cc:	4003c000 	.word	0x4003c000
  4002d0:	204000d0 	.word	0x204000d0
  4002d4:	00400785 	.word	0x00400785

004002d8 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4002d8:	4b03      	ldr	r3, [pc, #12]	; (4002e8 <EXTERNAL_IRQ_1_init+0x10>)
  4002da:	2202      	movs	r2, #2
  4002dc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4002de:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4002e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002e4:	601a      	str	r2, [r3, #0]
  4002e6:	4770      	bx	lr
  4002e8:	400e1000 	.word	0x400e1000

004002ec <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <EXTERNAL_IRQ_0_init+0x4c>)
  4002ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002f2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4002f4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4002f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002fa:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400300:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400302:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400308:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40030a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40030e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400310:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400316:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40031c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40031e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400324:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40032a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40032c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40032e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400332:	601a      	str	r2, [r3, #0]
  400334:	4770      	bx	lr
  400336:	bf00      	nop
  400338:	400e0e00 	.word	0x400e0e00

0040033c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40033c:	4b17      	ldr	r3, [pc, #92]	; (40039c <PWM_0_PORT_init+0x60>)
  40033e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400344:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400346:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40034c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40034e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400352:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400354:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400358:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40035a:	f022 0204 	bic.w	r2, r2, #4
  40035e:	671a      	str	r2, [r3, #112]	; 0x70
  400360:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400362:	f022 0204 	bic.w	r2, r2, #4
  400366:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400368:	2204      	movs	r2, #4
  40036a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40036c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40036e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400372:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400374:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40037a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40037c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400380:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400384:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400388:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40038a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40038c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400390:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400392:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400396:	605a      	str	r2, [r3, #4]
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	400e1400 	.word	0x400e1400

004003a0 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003a0:	4b04      	ldr	r3, [pc, #16]	; (4003b4 <PWM_0_CLOCK_init+0x14>)
  4003a2:	699b      	ldr	r3, [r3, #24]
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	db03      	blt.n	4003b0 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003ac:	4b01      	ldr	r3, [pc, #4]	; (4003b4 <PWM_0_CLOCK_init+0x14>)
  4003ae:	611a      	str	r2, [r3, #16]
  4003b0:	4770      	bx	lr
  4003b2:	bf00      	nop
  4003b4:	400e0600 	.word	0x400e0600

004003b8 <PWM_0_init>:
{
  4003b8:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4003ba:	4b06      	ldr	r3, [pc, #24]	; (4003d4 <PWM_0_init+0x1c>)
  4003bc:	4798      	blx	r3
	PWM_0_PORT_init();
  4003be:	4b06      	ldr	r3, [pc, #24]	; (4003d8 <PWM_0_init+0x20>)
  4003c0:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <PWM_0_init+0x24>)
  4003c4:	4798      	blx	r3
  4003c6:	4602      	mov	r2, r0
  4003c8:	4905      	ldr	r1, [pc, #20]	; (4003e0 <PWM_0_init+0x28>)
  4003ca:	4806      	ldr	r0, [pc, #24]	; (4003e4 <PWM_0_init+0x2c>)
  4003cc:	4b06      	ldr	r3, [pc, #24]	; (4003e8 <PWM_0_init+0x30>)
  4003ce:	4798      	blx	r3
  4003d0:	bd08      	pop	{r3, pc}
  4003d2:	bf00      	nop
  4003d4:	004003a1 	.word	0x004003a1
  4003d8:	0040033d 	.word	0x0040033d
  4003dc:	00401329 	.word	0x00401329
  4003e0:	40020000 	.word	0x40020000
  4003e4:	204000b4 	.word	0x204000b4
  4003e8:	00400911 	.word	0x00400911

004003ec <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ec:	4b06      	ldr	r3, [pc, #24]	; (400408 <PWM_1_PORT_init+0x1c>)
  4003ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4003f4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4003fc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400402:	605a      	str	r2, [r3, #4]
  400404:	4770      	bx	lr
  400406:	bf00      	nop
  400408:	400e0e00 	.word	0x400e0e00

0040040c <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40040c:	4b05      	ldr	r3, [pc, #20]	; (400424 <PWM_1_CLOCK_init+0x18>)
  40040e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400412:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400416:	d104      	bne.n	400422 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40041c:	4b01      	ldr	r3, [pc, #4]	; (400424 <PWM_1_CLOCK_init+0x18>)
  40041e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400422:	4770      	bx	lr
  400424:	400e0600 	.word	0x400e0600

00400428 <PWM_1_init>:
{
  400428:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40042a:	4b06      	ldr	r3, [pc, #24]	; (400444 <PWM_1_init+0x1c>)
  40042c:	4798      	blx	r3
	PWM_1_PORT_init();
  40042e:	4b06      	ldr	r3, [pc, #24]	; (400448 <PWM_1_init+0x20>)
  400430:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <PWM_1_init+0x24>)
  400434:	4798      	blx	r3
  400436:	4602      	mov	r2, r0
  400438:	4905      	ldr	r1, [pc, #20]	; (400450 <PWM_1_init+0x28>)
  40043a:	4806      	ldr	r0, [pc, #24]	; (400454 <PWM_1_init+0x2c>)
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <PWM_1_init+0x30>)
  40043e:	4798      	blx	r3
  400440:	bd08      	pop	{r3, pc}
  400442:	bf00      	nop
  400444:	0040040d 	.word	0x0040040d
  400448:	004003ed 	.word	0x004003ed
  40044c:	00401329 	.word	0x00401329
  400450:	4005c000 	.word	0x4005c000
  400454:	204000f0 	.word	0x204000f0
  400458:	00400911 	.word	0x00400911

0040045c <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40045c:	4b11      	ldr	r3, [pc, #68]	; (4004a4 <SPI_0_PORT_init+0x48>)
  40045e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400460:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400464:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400468:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40046c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40046e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400472:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400476:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40047a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40047c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40047e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400482:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400488:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40048a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40048c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400490:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400492:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400494:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400498:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40049a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40049e:	605a      	str	r2, [r3, #4]
  4004a0:	4770      	bx	lr
  4004a2:	bf00      	nop
  4004a4:	400e1400 	.word	0x400e1400

004004a8 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004a8:	4b04      	ldr	r3, [pc, #16]	; (4004bc <SPI_0_CLOCK_init+0x14>)
  4004aa:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4004ac:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4004b0:	d103      	bne.n	4004ba <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004b6:	4b01      	ldr	r3, [pc, #4]	; (4004bc <SPI_0_CLOCK_init+0x14>)
  4004b8:	611a      	str	r2, [r3, #16]
  4004ba:	4770      	bx	lr
  4004bc:	400e0600 	.word	0x400e0600

004004c0 <SPI_0_init>:
{
  4004c0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4004c2:	4b08      	ldr	r3, [pc, #32]	; (4004e4 <SPI_0_init+0x24>)
  4004c4:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4004c6:	4b08      	ldr	r3, [pc, #32]	; (4004e8 <SPI_0_init+0x28>)
  4004c8:	4798      	blx	r3
  4004ca:	4c08      	ldr	r4, [pc, #32]	; (4004ec <SPI_0_init+0x2c>)
  4004cc:	4601      	mov	r1, r0
  4004ce:	4620      	mov	r0, r4
  4004d0:	4b07      	ldr	r3, [pc, #28]	; (4004f0 <SPI_0_init+0x30>)
  4004d2:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4004d4:	4907      	ldr	r1, [pc, #28]	; (4004f4 <SPI_0_init+0x34>)
  4004d6:	4620      	mov	r0, r4
  4004d8:	4b07      	ldr	r3, [pc, #28]	; (4004f8 <SPI_0_init+0x38>)
  4004da:	4798      	blx	r3
	SPI_0_PORT_init();
  4004dc:	4b07      	ldr	r3, [pc, #28]	; (4004fc <SPI_0_init+0x3c>)
  4004de:	4798      	blx	r3
  4004e0:	bd10      	pop	{r4, pc}
  4004e2:	bf00      	nop
  4004e4:	004004a9 	.word	0x004004a9
  4004e8:	004014ed 	.word	0x004014ed
  4004ec:	204000d8 	.word	0x204000d8
  4004f0:	00400955 	.word	0x00400955
  4004f4:	40008000 	.word	0x40008000
  4004f8:	00400975 	.word	0x00400975
  4004fc:	0040045d 	.word	0x0040045d

00400500 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400500:	4b0a      	ldr	r3, [pc, #40]	; (40052c <I2C_0_PORT_init+0x2c>)
  400502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400504:	f022 0210 	bic.w	r2, r2, #16
  400508:	671a      	str	r2, [r3, #112]	; 0x70
  40050a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40050c:	f022 0210 	bic.w	r2, r2, #16
  400510:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400512:	2210      	movs	r2, #16
  400514:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400518:	f022 0208 	bic.w	r2, r2, #8
  40051c:	671a      	str	r2, [r3, #112]	; 0x70
  40051e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400520:	f022 0208 	bic.w	r2, r2, #8
  400524:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400526:	2208      	movs	r2, #8
  400528:	605a      	str	r2, [r3, #4]
  40052a:	4770      	bx	lr
  40052c:	400e0e00 	.word	0x400e0e00

00400530 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400530:	4b04      	ldr	r3, [pc, #16]	; (400544 <I2C_0_CLOCK_init+0x14>)
  400532:	699b      	ldr	r3, [r3, #24]
  400534:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400538:	d103      	bne.n	400542 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40053a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40053e:	4b01      	ldr	r3, [pc, #4]	; (400544 <I2C_0_CLOCK_init+0x14>)
  400540:	611a      	str	r2, [r3, #16]
  400542:	4770      	bx	lr
  400544:	400e0600 	.word	0x400e0600

00400548 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400548:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40054a:	4b04      	ldr	r3, [pc, #16]	; (40055c <I2C_0_init+0x14>)
  40054c:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  40054e:	4904      	ldr	r1, [pc, #16]	; (400560 <I2C_0_init+0x18>)
  400550:	4804      	ldr	r0, [pc, #16]	; (400564 <I2C_0_init+0x1c>)
  400552:	4b05      	ldr	r3, [pc, #20]	; (400568 <I2C_0_init+0x20>)
  400554:	4798      	blx	r3

	I2C_0_PORT_init();
  400556:	4b05      	ldr	r3, [pc, #20]	; (40056c <I2C_0_init+0x24>)
  400558:	4798      	blx	r3
  40055a:	bd08      	pop	{r3, pc}
  40055c:	00400531 	.word	0x00400531
  400560:	40018000 	.word	0x40018000
  400564:	2040010c 	.word	0x2040010c
  400568:	004008bd 	.word	0x004008bd
  40056c:	00400501 	.word	0x00400501

00400570 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400570:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400572:	4802      	ldr	r0, [pc, #8]	; (40057c <delay_driver_init+0xc>)
  400574:	4b02      	ldr	r3, [pc, #8]	; (400580 <delay_driver_init+0x10>)
  400576:	4798      	blx	r3
  400578:	bd08      	pop	{r3, pc}
  40057a:	bf00      	nop
  40057c:	e000e010 	.word	0xe000e010
  400580:	004007d1 	.word	0x004007d1

00400584 <WDT_0_init>:
}

void WDT_0_init(void)
{
  400584:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  400586:	2248      	movs	r2, #72	; 0x48
  400588:	4904      	ldr	r1, [pc, #16]	; (40059c <WDT_0_init+0x18>)
  40058a:	2001      	movs	r0, #1
  40058c:	4b04      	ldr	r3, [pc, #16]	; (4005a0 <WDT_0_init+0x1c>)
  40058e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  400590:	4804      	ldr	r0, [pc, #16]	; (4005a4 <WDT_0_init+0x20>)
  400592:	4b05      	ldr	r3, [pc, #20]	; (4005a8 <WDT_0_init+0x24>)
  400594:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  400596:	4b05      	ldr	r3, [pc, #20]	; (4005ac <WDT_0_init+0x28>)
  400598:	4798      	blx	r3
  40059a:	bd08      	pop	{r3, pc}
  40059c:	0040194c 	.word	0x0040194c
  4005a0:	00400c55 	.word	0x00400c55
  4005a4:	204000d4 	.word	0x204000d4
  4005a8:	400e1850 	.word	0x400e1850
  4005ac:	0040185d 	.word	0x0040185d

004005b0 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  4005b0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4005b2:	4b66      	ldr	r3, [pc, #408]	; (40074c <system_init+0x19c>)
  4005b4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005b6:	4b66      	ldr	r3, [pc, #408]	; (400750 <system_init+0x1a0>)
  4005b8:	699b      	ldr	r3, [r3, #24]
  4005ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4005be:	d103      	bne.n	4005c8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005c4:	4b62      	ldr	r3, [pc, #392]	; (400750 <system_init+0x1a0>)
  4005c6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005c8:	4b61      	ldr	r3, [pc, #388]	; (400750 <system_init+0x1a0>)
  4005ca:	699b      	ldr	r3, [r3, #24]
  4005cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4005d0:	d103      	bne.n	4005da <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005d6:	4b5e      	ldr	r3, [pc, #376]	; (400750 <system_init+0x1a0>)
  4005d8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005da:	4b5d      	ldr	r3, [pc, #372]	; (400750 <system_init+0x1a0>)
  4005dc:	699b      	ldr	r3, [r3, #24]
  4005de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4005e2:	d103      	bne.n	4005ec <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4005e8:	4b59      	ldr	r3, [pc, #356]	; (400750 <system_init+0x1a0>)
  4005ea:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  4005ec:	4b59      	ldr	r3, [pc, #356]	; (400754 <system_init+0x1a4>)
  4005ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005f2:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4005f4:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4005f6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005fa:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4005fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400600:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400602:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400608:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40060a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40060e:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400610:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400612:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400616:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400618:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  40061c:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40061e:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400620:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400624:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400626:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40062a:	2008      	movs	r0, #8
  40062c:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40062e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400630:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400636:	2404      	movs	r4, #4
  400638:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40063a:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40063c:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40063e:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400640:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400642:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400644:	2010      	movs	r0, #16
  400646:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400648:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40064a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40064c:	2020      	movs	r0, #32
  40064e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400650:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400652:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400654:	2040      	movs	r0, #64	; 0x40
  400656:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400658:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40065a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40065c:	2080      	movs	r0, #128	; 0x80
  40065e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400660:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400662:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400664:	f44f 7080 	mov.w	r0, #256	; 0x100
  400668:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40066a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40066c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40066e:	f44f 7000 	mov.w	r0, #512	; 0x200
  400672:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400674:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400676:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400678:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40067c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40067e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400680:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400682:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400686:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400688:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40068a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40068e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400690:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  400694:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400696:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400698:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40069c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40069e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4006a2:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006a4:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006a6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006aa:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4006b0:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006b2:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006b4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006b8:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4006be:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006c0:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006c2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006c6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  4006cc:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006ce:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006d0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006d4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4006da:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006dc:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006de:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4006e8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006ea:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006ec:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006f0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006f2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4006f6:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006f8:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006fa:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  400700:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400702:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400704:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400706:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40070a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40070c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40070e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400710:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400712:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400714:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400716:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400718:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40071a:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40071c:	4b0e      	ldr	r3, [pc, #56]	; (400758 <system_init+0x1a8>)
  40071e:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  400720:	4b0e      	ldr	r3, [pc, #56]	; (40075c <system_init+0x1ac>)
  400722:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400724:	4b0e      	ldr	r3, [pc, #56]	; (400760 <system_init+0x1b0>)
  400726:	4798      	blx	r3

	PWM_0_init();
  400728:	4b0e      	ldr	r3, [pc, #56]	; (400764 <system_init+0x1b4>)
  40072a:	4798      	blx	r3

	PWM_1_init();
  40072c:	4b0e      	ldr	r3, [pc, #56]	; (400768 <system_init+0x1b8>)
  40072e:	4798      	blx	r3

	SPI_0_init();
  400730:	4b0e      	ldr	r3, [pc, #56]	; (40076c <system_init+0x1bc>)
  400732:	4798      	blx	r3
	TIMER_0_init();
  400734:	4b0e      	ldr	r3, [pc, #56]	; (400770 <system_init+0x1c0>)
  400736:	4798      	blx	r3

	I2C_0_init();
  400738:	4b0e      	ldr	r3, [pc, #56]	; (400774 <system_init+0x1c4>)
  40073a:	4798      	blx	r3

	delay_driver_init();
  40073c:	4b0e      	ldr	r3, [pc, #56]	; (400778 <system_init+0x1c8>)
  40073e:	4798      	blx	r3

	WDT_0_init();
  400740:	4b0e      	ldr	r3, [pc, #56]	; (40077c <system_init+0x1cc>)
  400742:	4798      	blx	r3

	ext_irq_init();
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <system_init+0x1d0>)
  400746:	4798      	blx	r3
  400748:	bd10      	pop	{r4, pc}
  40074a:	bf00      	nop
  40074c:	00400de9 	.word	0x00400de9
  400750:	400e0600 	.word	0x400e0600
  400754:	400e0e00 	.word	0x400e0e00
  400758:	004002ad 	.word	0x004002ad
  40075c:	004002d9 	.word	0x004002d9
  400760:	004002ed 	.word	0x004002ed
  400764:	004003b9 	.word	0x004003b9
  400768:	00400429 	.word	0x00400429
  40076c:	004004c1 	.word	0x004004c1
  400770:	0040023d 	.word	0x0040023d
  400774:	00400549 	.word	0x00400549
  400778:	00400571 	.word	0x00400571
  40077c:	00400585 	.word	0x00400585
  400780:	00400829 	.word	0x00400829

00400784 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400784:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400786:	4604      	mov	r4, r0
  400788:	460d      	mov	r5, r1
  40078a:	2800      	cmp	r0, #0
  40078c:	bf18      	it	ne
  40078e:	2900      	cmpne	r1, #0
  400790:	bf14      	ite	ne
  400792:	2001      	movne	r0, #1
  400794:	2000      	moveq	r0, #0
  400796:	2239      	movs	r2, #57	; 0x39
  400798:	4903      	ldr	r1, [pc, #12]	; (4007a8 <adc_sync_init+0x24>)
  40079a:	4b04      	ldr	r3, [pc, #16]	; (4007ac <adc_sync_init+0x28>)
  40079c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  40079e:	4629      	mov	r1, r5
  4007a0:	4620      	mov	r0, r4
  4007a2:	4b03      	ldr	r3, [pc, #12]	; (4007b0 <adc_sync_init+0x2c>)
  4007a4:	4798      	blx	r3
}
  4007a6:	bd38      	pop	{r3, r4, r5, pc}
  4007a8:	00401968 	.word	0x00401968
  4007ac:	00400c55 	.word	0x00400c55
  4007b0:	00400d91 	.word	0x00400d91

004007b4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4007b4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4007b8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4007ba:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4007bc:	f3bf 8f5f 	dmb	sy
  4007c0:	4770      	bx	lr

004007c2 <atomic_leave_critical>:
  4007c2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4007c6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4007c8:	f383 8810 	msr	PRIMASK, r3
  4007cc:	4770      	bx	lr
	...

004007d0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4007d0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4007d2:	4b02      	ldr	r3, [pc, #8]	; (4007dc <delay_init+0xc>)
  4007d4:	6018      	str	r0, [r3, #0]
  4007d6:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <delay_init+0x10>)
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}
  4007dc:	20400040 	.word	0x20400040
  4007e0:	00401505 	.word	0x00401505

004007e4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4007e4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4007e6:	2506      	movs	r5, #6
  4007e8:	2400      	movs	r4, #0

	while (upper >= lower) {
  4007ea:	e007      	b.n	4007fc <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4007ec:	4a0d      	ldr	r2, [pc, #52]	; (400824 <process_ext_irq+0x40>)
  4007ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4007f2:	b1b3      	cbz	r3, 400822 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4007f4:	4798      	blx	r3
  4007f6:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4007f8:	3a01      	subs	r2, #1
  4007fa:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4007fc:	42ac      	cmp	r4, r5
  4007fe:	d810      	bhi.n	400822 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400800:	192b      	adds	r3, r5, r4
  400802:	105b      	asrs	r3, r3, #1
  400804:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400806:	2a05      	cmp	r2, #5
  400808:	d80b      	bhi.n	400822 <process_ext_irq+0x3e>
  40080a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40080c:	4905      	ldr	r1, [pc, #20]	; (400824 <process_ext_irq+0x40>)
  40080e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400812:	6849      	ldr	r1, [r1, #4]
  400814:	4281      	cmp	r1, r0
  400816:	d0e9      	beq.n	4007ec <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400818:	4281      	cmp	r1, r0
  40081a:	d2ed      	bcs.n	4007f8 <process_ext_irq+0x14>
			lower = middle + 1;
  40081c:	3201      	adds	r2, #1
  40081e:	b2d4      	uxtb	r4, r2
  400820:	e7ec      	b.n	4007fc <process_ext_irq+0x18>
  400822:	bd38      	pop	{r3, r4, r5, pc}
  400824:	20400044 	.word	0x20400044

00400828 <ext_irq_init>:
{
  400828:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40082a:	2300      	movs	r3, #0
  40082c:	e00a      	b.n	400844 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40082e:	4a08      	ldr	r2, [pc, #32]	; (400850 <ext_irq_init+0x28>)
  400830:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400834:	f04f 30ff 	mov.w	r0, #4294967295
  400838:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40083a:	2100      	movs	r1, #0
  40083c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400840:	3301      	adds	r3, #1
  400842:	b29b      	uxth	r3, r3
  400844:	2b05      	cmp	r3, #5
  400846:	d9f2      	bls.n	40082e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400848:	4802      	ldr	r0, [pc, #8]	; (400854 <ext_irq_init+0x2c>)
  40084a:	4b03      	ldr	r3, [pc, #12]	; (400858 <ext_irq_init+0x30>)
  40084c:	4798      	blx	r3
}
  40084e:	bd08      	pop	{r3, pc}
  400850:	20400044 	.word	0x20400044
  400854:	004007e5 	.word	0x004007e5
  400858:	00401071 	.word	0x00401071

0040085c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  40085c:	b510      	push	{r4, lr}
  40085e:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400860:	8903      	ldrh	r3, [r0, #8]
  400862:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400866:	4614      	mov	r4, r2
  400868:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  40086a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40086e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400872:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400874:	a901      	add	r1, sp, #4
  400876:	3814      	subs	r0, #20
  400878:	4b03      	ldr	r3, [pc, #12]	; (400888 <i2c_m_sync_write+0x2c>)
  40087a:	4798      	blx	r3

	if (ret) {
  40087c:	b910      	cbnz	r0, 400884 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  40087e:	4620      	mov	r0, r4
  400880:	b004      	add	sp, #16
  400882:	bd10      	pop	{r4, pc}
		return ret;
  400884:	4604      	mov	r4, r0
  400886:	e7fa      	b.n	40087e <i2c_m_sync_write+0x22>
  400888:	004016f5 	.word	0x004016f5

0040088c <i2c_m_sync_read>:
{
  40088c:	b510      	push	{r4, lr}
  40088e:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400890:	8903      	ldrh	r3, [r0, #8]
  400892:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400896:	4614      	mov	r4, r2
  400898:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  40089a:	f248 0301 	movw	r3, #32769	; 0x8001
  40089e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  4008a2:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4008a4:	a901      	add	r1, sp, #4
  4008a6:	3814      	subs	r0, #20
  4008a8:	4b03      	ldr	r3, [pc, #12]	; (4008b8 <i2c_m_sync_read+0x2c>)
  4008aa:	4798      	blx	r3
	if (ret) {
  4008ac:	b910      	cbnz	r0, 4008b4 <i2c_m_sync_read+0x28>
}
  4008ae:	4620      	mov	r0, r4
  4008b0:	b004      	add	sp, #16
  4008b2:	bd10      	pop	{r4, pc}
		return ret;
  4008b4:	4604      	mov	r4, r0
  4008b6:	e7fa      	b.n	4008ae <i2c_m_sync_read+0x22>
  4008b8:	004016f5 	.word	0x004016f5

004008bc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4008bc:	b538      	push	{r3, r4, r5, lr}
  4008be:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  4008c0:	4604      	mov	r4, r0
  4008c2:	225e      	movs	r2, #94	; 0x5e
  4008c4:	4908      	ldr	r1, [pc, #32]	; (4008e8 <i2c_m_sync_init+0x2c>)
  4008c6:	3000      	adds	r0, #0
  4008c8:	bf18      	it	ne
  4008ca:	2001      	movne	r0, #1
  4008cc:	4b07      	ldr	r3, [pc, #28]	; (4008ec <i2c_m_sync_init+0x30>)
  4008ce:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  4008d0:	4629      	mov	r1, r5
  4008d2:	4620      	mov	r0, r4
  4008d4:	4b06      	ldr	r3, [pc, #24]	; (4008f0 <i2c_m_sync_init+0x34>)
  4008d6:	4798      	blx	r3
	if (init_status) {
  4008d8:	4603      	mov	r3, r0
  4008da:	b918      	cbnz	r0, 4008e4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  4008dc:	4a05      	ldr	r2, [pc, #20]	; (4008f4 <i2c_m_sync_init+0x38>)
  4008de:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  4008e0:	4a05      	ldr	r2, [pc, #20]	; (4008f8 <i2c_m_sync_init+0x3c>)
  4008e2:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  4008e4:	4618      	mov	r0, r3
  4008e6:	bd38      	pop	{r3, r4, r5, pc}
  4008e8:	00401984 	.word	0x00401984
  4008ec:	00400c55 	.word	0x00400c55
  4008f0:	004016ad 	.word	0x004016ad
  4008f4:	0040088d 	.word	0x0040088d
  4008f8:	0040085d 	.word	0x0040085d

004008fc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4008fc:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4008fe:	6943      	ldr	r3, [r0, #20]
  400900:	b103      	cbz	r3, 400904 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400902:	4798      	blx	r3
  400904:	bd08      	pop	{r3, pc}

00400906 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400906:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400908:	6983      	ldr	r3, [r0, #24]
  40090a:	b103      	cbz	r3, 40090e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  40090c:	4798      	blx	r3
  40090e:	bd08      	pop	{r3, pc}

00400910 <pwm_init>:
{
  400910:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400912:	4604      	mov	r4, r0
  400914:	460d      	mov	r5, r1
  400916:	2800      	cmp	r0, #0
  400918:	bf18      	it	ne
  40091a:	2900      	cmpne	r1, #0
  40091c:	bf14      	ite	ne
  40091e:	2001      	movne	r0, #1
  400920:	2000      	moveq	r0, #0
  400922:	2233      	movs	r2, #51	; 0x33
  400924:	4906      	ldr	r1, [pc, #24]	; (400940 <pwm_init+0x30>)
  400926:	4b07      	ldr	r3, [pc, #28]	; (400944 <pwm_init+0x34>)
  400928:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40092a:	4629      	mov	r1, r5
  40092c:	4620      	mov	r0, r4
  40092e:	4b06      	ldr	r3, [pc, #24]	; (400948 <pwm_init+0x38>)
  400930:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400932:	4b06      	ldr	r3, [pc, #24]	; (40094c <pwm_init+0x3c>)
  400934:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400936:	4b06      	ldr	r3, [pc, #24]	; (400950 <pwm_init+0x40>)
  400938:	6063      	str	r3, [r4, #4]
}
  40093a:	2000      	movs	r0, #0
  40093c:	bd38      	pop	{r3, r4, r5, pc}
  40093e:	bf00      	nop
  400940:	004019a0 	.word	0x004019a0
  400944:	00400c55 	.word	0x00400c55
  400948:	004011f1 	.word	0x004011f1
  40094c:	004008fd 	.word	0x004008fd
  400950:	00400907 	.word	0x00400907

00400954 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400954:	b538      	push	{r3, r4, r5, lr}
  400956:	460d      	mov	r5, r1
	ASSERT(spi);
  400958:	4604      	mov	r4, r0
  40095a:	2239      	movs	r2, #57	; 0x39
  40095c:	4903      	ldr	r1, [pc, #12]	; (40096c <spi_m_sync_set_func_ptr+0x18>)
  40095e:	3000      	adds	r0, #0
  400960:	bf18      	it	ne
  400962:	2001      	movne	r0, #1
  400964:	4b02      	ldr	r3, [pc, #8]	; (400970 <spi_m_sync_set_func_ptr+0x1c>)
  400966:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400968:	6025      	str	r5, [r4, #0]
  40096a:	bd38      	pop	{r3, r4, r5, pc}
  40096c:	004019b8 	.word	0x004019b8
  400970:	00400c55 	.word	0x00400c55

00400974 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400974:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400976:	4604      	mov	r4, r0
  400978:	460d      	mov	r5, r1
  40097a:	2800      	cmp	r0, #0
  40097c:	bf18      	it	ne
  40097e:	2900      	cmpne	r1, #0
  400980:	bf14      	ite	ne
  400982:	2001      	movne	r0, #1
  400984:	2000      	moveq	r0, #0
  400986:	2240      	movs	r2, #64	; 0x40
  400988:	4909      	ldr	r1, [pc, #36]	; (4009b0 <spi_m_sync_init+0x3c>)
  40098a:	4b0a      	ldr	r3, [pc, #40]	; (4009b4 <spi_m_sync_init+0x40>)
  40098c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  40098e:	4620      	mov	r0, r4
  400990:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400994:	4629      	mov	r1, r5
  400996:	4b08      	ldr	r3, [pc, #32]	; (4009b8 <spi_m_sync_init+0x44>)
  400998:	4798      	blx	r3

	if (rc < 0) {
  40099a:	2800      	cmp	r0, #0
  40099c:	db07      	blt.n	4009ae <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  40099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009a2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4009a4:	4b05      	ldr	r3, [pc, #20]	; (4009bc <spi_m_sync_init+0x48>)
  4009a6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4009a8:	4b05      	ldr	r3, [pc, #20]	; (4009c0 <spi_m_sync_init+0x4c>)
  4009aa:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4009ac:	2000      	movs	r0, #0
}
  4009ae:	bd38      	pop	{r3, r4, r5, pc}
  4009b0:	004019b8 	.word	0x004019b8
  4009b4:	00400c55 	.word	0x00400c55
  4009b8:	00401345 	.word	0x00401345
  4009bc:	00400a41 	.word	0x00400a41
  4009c0:	00400a05 	.word	0x00400a05

004009c4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  4009c4:	b530      	push	{r4, r5, lr}
  4009c6:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  4009c8:	4605      	mov	r5, r0
  4009ca:	460c      	mov	r4, r1
  4009cc:	2800      	cmp	r0, #0
  4009ce:	bf18      	it	ne
  4009d0:	2900      	cmpne	r1, #0
  4009d2:	bf14      	ite	ne
  4009d4:	2001      	movne	r0, #1
  4009d6:	2000      	moveq	r0, #0
  4009d8:	22b3      	movs	r2, #179	; 0xb3
  4009da:	4907      	ldr	r1, [pc, #28]	; (4009f8 <spi_m_sync_transfer+0x34>)
  4009dc:	4b07      	ldr	r3, [pc, #28]	; (4009fc <spi_m_sync_transfer+0x38>)
  4009de:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4009e0:	6823      	ldr	r3, [r4, #0]
  4009e2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4009e4:	6863      	ldr	r3, [r4, #4]
  4009e6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4009e8:	68a3      	ldr	r3, [r4, #8]
  4009ea:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4009ec:	a901      	add	r1, sp, #4
  4009ee:	1d28      	adds	r0, r5, #4
  4009f0:	4b03      	ldr	r3, [pc, #12]	; (400a00 <spi_m_sync_transfer+0x3c>)
  4009f2:	4798      	blx	r3
}
  4009f4:	b005      	add	sp, #20
  4009f6:	bd30      	pop	{r4, r5, pc}
  4009f8:	004019b8 	.word	0x004019b8
  4009fc:	00400c55 	.word	0x00400c55
  400a00:	004013ed 	.word	0x004013ed

00400a04 <_spi_m_sync_io_write>:
{
  400a04:	b570      	push	{r4, r5, r6, lr}
  400a06:	b084      	sub	sp, #16
  400a08:	460e      	mov	r6, r1
  400a0a:	4615      	mov	r5, r2
	ASSERT(io);
  400a0c:	4604      	mov	r4, r0
  400a0e:	22a3      	movs	r2, #163	; 0xa3
  400a10:	4908      	ldr	r1, [pc, #32]	; (400a34 <_spi_m_sync_io_write+0x30>)
  400a12:	3000      	adds	r0, #0
  400a14:	bf18      	it	ne
  400a16:	2001      	movne	r0, #1
  400a18:	4b07      	ldr	r3, [pc, #28]	; (400a38 <_spi_m_sync_io_write+0x34>)
  400a1a:	4798      	blx	r3
	xfer.rxbuf = 0;
  400a1c:	2300      	movs	r3, #0
  400a1e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400a20:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400a22:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400a24:	a901      	add	r1, sp, #4
  400a26:	f1a4 000c 	sub.w	r0, r4, #12
  400a2a:	4b04      	ldr	r3, [pc, #16]	; (400a3c <_spi_m_sync_io_write+0x38>)
  400a2c:	4798      	blx	r3
}
  400a2e:	b004      	add	sp, #16
  400a30:	bd70      	pop	{r4, r5, r6, pc}
  400a32:	bf00      	nop
  400a34:	004019b8 	.word	0x004019b8
  400a38:	00400c55 	.word	0x00400c55
  400a3c:	004009c5 	.word	0x004009c5

00400a40 <_spi_m_sync_io_read>:
{
  400a40:	b570      	push	{r4, r5, r6, lr}
  400a42:	b084      	sub	sp, #16
  400a44:	460e      	mov	r6, r1
  400a46:	4615      	mov	r5, r2
	ASSERT(io);
  400a48:	4604      	mov	r4, r0
  400a4a:	2287      	movs	r2, #135	; 0x87
  400a4c:	4908      	ldr	r1, [pc, #32]	; (400a70 <_spi_m_sync_io_read+0x30>)
  400a4e:	3000      	adds	r0, #0
  400a50:	bf18      	it	ne
  400a52:	2001      	movne	r0, #1
  400a54:	4b07      	ldr	r3, [pc, #28]	; (400a74 <_spi_m_sync_io_read+0x34>)
  400a56:	4798      	blx	r3
	xfer.rxbuf = buf;
  400a58:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400a5a:	2300      	movs	r3, #0
  400a5c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400a5e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400a60:	a901      	add	r1, sp, #4
  400a62:	f1a4 000c 	sub.w	r0, r4, #12
  400a66:	4b04      	ldr	r3, [pc, #16]	; (400a78 <_spi_m_sync_io_read+0x38>)
  400a68:	4798      	blx	r3
}
  400a6a:	b004      	add	sp, #16
  400a6c:	bd70      	pop	{r4, r5, r6, pc}
  400a6e:	bf00      	nop
  400a70:	004019b8 	.word	0x004019b8
  400a74:	00400c55 	.word	0x00400c55
  400a78:	004009c5 	.word	0x004009c5

00400a7c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400a7e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400a80:	b117      	cbz	r7, 400a88 <timer_add_timer_task+0xc>
  400a82:	463c      	mov	r4, r7
  400a84:	2600      	movs	r6, #0
  400a86:	e00b      	b.n	400aa0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400a88:	4b0e      	ldr	r3, [pc, #56]	; (400ac4 <timer_add_timer_task+0x48>)
  400a8a:	4798      	blx	r3
		return;
  400a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400a8e:	68a5      	ldr	r5, [r4, #8]
  400a90:	442b      	add	r3, r5
  400a92:	1a9b      	subs	r3, r3, r2
  400a94:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400a96:	688d      	ldr	r5, [r1, #8]
  400a98:	42ab      	cmp	r3, r5
  400a9a:	d209      	bcs.n	400ab0 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400a9c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400a9e:	6824      	ldr	r4, [r4, #0]
  400aa0:	b134      	cbz	r4, 400ab0 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	4293      	cmp	r3, r2
  400aa6:	d8f2      	bhi.n	400a8e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400aa8:	68a5      	ldr	r5, [r4, #8]
  400aaa:	1a9b      	subs	r3, r3, r2
  400aac:	442b      	add	r3, r5
  400aae:	e7f2      	b.n	400a96 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400ab0:	42bc      	cmp	r4, r7
  400ab2:	d003      	beq.n	400abc <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400ab4:	4630      	mov	r0, r6
  400ab6:	4b04      	ldr	r3, [pc, #16]	; (400ac8 <timer_add_timer_task+0x4c>)
  400ab8:	4798      	blx	r3
  400aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400abc:	4b01      	ldr	r3, [pc, #4]	; (400ac4 <timer_add_timer_task+0x48>)
  400abe:	4798      	blx	r3
  400ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ac2:	bf00      	nop
  400ac4:	00400c71 	.word	0x00400c71
  400ac8:	00400c9d 	.word	0x00400c9d

00400acc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ace:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400ad0:	6906      	ldr	r6, [r0, #16]
  400ad2:	3601      	adds	r6, #1
  400ad4:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400ad6:	7e03      	ldrb	r3, [r0, #24]
  400ad8:	f013 0f01 	tst.w	r3, #1
  400adc:	d105      	bne.n	400aea <timer_process_counted+0x1e>
  400ade:	7e03      	ldrb	r3, [r0, #24]
  400ae0:	f013 0f02 	tst.w	r3, #2
  400ae4:	d101      	bne.n	400aea <timer_process_counted+0x1e>
  400ae6:	4605      	mov	r5, r0
  400ae8:	e009      	b.n	400afe <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400aea:	7e03      	ldrb	r3, [r0, #24]
  400aec:	f043 0302 	orr.w	r3, r3, #2
  400af0:	7603      	strb	r3, [r0, #24]
		return;
  400af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400af4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400af6:	68e3      	ldr	r3, [r4, #12]
  400af8:	4620      	mov	r0, r4
  400afa:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400afc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400afe:	b19c      	cbz	r4, 400b28 <timer_process_counted+0x5c>
  400b00:	6863      	ldr	r3, [r4, #4]
  400b02:	1af3      	subs	r3, r6, r3
  400b04:	68a2      	ldr	r2, [r4, #8]
  400b06:	4293      	cmp	r3, r2
  400b08:	d30e      	bcc.n	400b28 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400b0a:	f105 0714 	add.w	r7, r5, #20
  400b0e:	4638      	mov	r0, r7
  400b10:	4b06      	ldr	r3, [pc, #24]	; (400b2c <timer_process_counted+0x60>)
  400b12:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400b14:	7c23      	ldrb	r3, [r4, #16]
  400b16:	2b01      	cmp	r3, #1
  400b18:	d1ec      	bne.n	400af4 <timer_process_counted+0x28>
			tmp->time_label = time;
  400b1a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400b1c:	4632      	mov	r2, r6
  400b1e:	4621      	mov	r1, r4
  400b20:	4638      	mov	r0, r7
  400b22:	4b03      	ldr	r3, [pc, #12]	; (400b30 <timer_process_counted+0x64>)
  400b24:	4798      	blx	r3
  400b26:	e7e5      	b.n	400af4 <timer_process_counted+0x28>
  400b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b2a:	bf00      	nop
  400b2c:	00400ca5 	.word	0x00400ca5
  400b30:	00400a7d 	.word	0x00400a7d

00400b34 <timer_init>:
{
  400b34:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b36:	4604      	mov	r4, r0
  400b38:	460d      	mov	r5, r1
  400b3a:	2800      	cmp	r0, #0
  400b3c:	bf18      	it	ne
  400b3e:	2900      	cmpne	r1, #0
  400b40:	bf14      	ite	ne
  400b42:	2001      	movne	r0, #1
  400b44:	2000      	moveq	r0, #0
  400b46:	223b      	movs	r2, #59	; 0x3b
  400b48:	4905      	ldr	r1, [pc, #20]	; (400b60 <timer_init+0x2c>)
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <timer_init+0x30>)
  400b4c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400b4e:	4629      	mov	r1, r5
  400b50:	4620      	mov	r0, r4
  400b52:	4b05      	ldr	r3, [pc, #20]	; (400b68 <timer_init+0x34>)
  400b54:	4798      	blx	r3
	descr->time                           = 0;
  400b56:	2000      	movs	r0, #0
  400b58:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400b5a:	4b04      	ldr	r3, [pc, #16]	; (400b6c <timer_init+0x38>)
  400b5c:	6023      	str	r3, [r4, #0]
}
  400b5e:	bd38      	pop	{r3, r4, r5, pc}
  400b60:	004019d4 	.word	0x004019d4
  400b64:	00400c55 	.word	0x00400c55
  400b68:	00401575 	.word	0x00401575
  400b6c:	00400acd 	.word	0x00400acd

00400b70 <timer_start>:
{
  400b70:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b72:	4604      	mov	r4, r0
  400b74:	2253      	movs	r2, #83	; 0x53
  400b76:	4909      	ldr	r1, [pc, #36]	; (400b9c <timer_start+0x2c>)
  400b78:	3000      	adds	r0, #0
  400b7a:	bf18      	it	ne
  400b7c:	2001      	movne	r0, #1
  400b7e:	4b08      	ldr	r3, [pc, #32]	; (400ba0 <timer_start+0x30>)
  400b80:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400b82:	4620      	mov	r0, r4
  400b84:	4b07      	ldr	r3, [pc, #28]	; (400ba4 <timer_start+0x34>)
  400b86:	4798      	blx	r3
  400b88:	b920      	cbnz	r0, 400b94 <timer_start+0x24>
	_timer_start(&descr->device);
  400b8a:	4620      	mov	r0, r4
  400b8c:	4b06      	ldr	r3, [pc, #24]	; (400ba8 <timer_start+0x38>)
  400b8e:	4798      	blx	r3
	return ERR_NONE;
  400b90:	2000      	movs	r0, #0
  400b92:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400b94:	f06f 0010 	mvn.w	r0, #16
}
  400b98:	bd10      	pop	{r4, pc}
  400b9a:	bf00      	nop
  400b9c:	004019d4 	.word	0x004019d4
  400ba0:	00400c55 	.word	0x00400c55
  400ba4:	00401639 	.word	0x00401639
  400ba8:	00401631 	.word	0x00401631

00400bac <timer_add_task>:
{
  400bac:	b570      	push	{r4, r5, r6, lr}
  400bae:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400bb0:	4604      	mov	r4, r0
  400bb2:	460d      	mov	r5, r1
  400bb4:	2800      	cmp	r0, #0
  400bb6:	bf18      	it	ne
  400bb8:	2900      	cmpne	r1, #0
  400bba:	bf14      	ite	ne
  400bbc:	2001      	movne	r0, #1
  400bbe:	2000      	moveq	r0, #0
  400bc0:	227a      	movs	r2, #122	; 0x7a
  400bc2:	491d      	ldr	r1, [pc, #116]	; (400c38 <timer_add_task+0x8c>)
  400bc4:	4b1d      	ldr	r3, [pc, #116]	; (400c3c <timer_add_task+0x90>)
  400bc6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400bc8:	7e23      	ldrb	r3, [r4, #24]
  400bca:	f043 0301 	orr.w	r3, r3, #1
  400bce:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400bd0:	f104 0614 	add.w	r6, r4, #20
  400bd4:	4629      	mov	r1, r5
  400bd6:	4630      	mov	r0, r6
  400bd8:	4b19      	ldr	r3, [pc, #100]	; (400c40 <timer_add_task+0x94>)
  400bda:	4798      	blx	r3
  400bdc:	b988      	cbnz	r0, 400c02 <timer_add_task+0x56>
	task->time_label = descr->time;
  400bde:	6923      	ldr	r3, [r4, #16]
  400be0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400be2:	6922      	ldr	r2, [r4, #16]
  400be4:	4629      	mov	r1, r5
  400be6:	4630      	mov	r0, r6
  400be8:	4b16      	ldr	r3, [pc, #88]	; (400c44 <timer_add_task+0x98>)
  400bea:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400bec:	7e23      	ldrb	r3, [r4, #24]
  400bee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400bf2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400bf4:	7e23      	ldrb	r3, [r4, #24]
  400bf6:	f013 0f02 	tst.w	r3, #2
  400bfa:	d10e      	bne.n	400c1a <timer_add_task+0x6e>
	return ERR_NONE;
  400bfc:	2000      	movs	r0, #0
}
  400bfe:	b002      	add	sp, #8
  400c00:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400c02:	7e23      	ldrb	r3, [r4, #24]
  400c04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400c08:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  400c0a:	227f      	movs	r2, #127	; 0x7f
  400c0c:	490a      	ldr	r1, [pc, #40]	; (400c38 <timer_add_task+0x8c>)
  400c0e:	2000      	movs	r0, #0
  400c10:	4b0a      	ldr	r3, [pc, #40]	; (400c3c <timer_add_task+0x90>)
  400c12:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400c14:	f06f 0011 	mvn.w	r0, #17
  400c18:	e7f1      	b.n	400bfe <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  400c1a:	a801      	add	r0, sp, #4
  400c1c:	4b0a      	ldr	r3, [pc, #40]	; (400c48 <timer_add_task+0x9c>)
  400c1e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400c20:	7e23      	ldrb	r3, [r4, #24]
  400c22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400c26:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400c28:	4620      	mov	r0, r4
  400c2a:	4b08      	ldr	r3, [pc, #32]	; (400c4c <timer_add_task+0xa0>)
  400c2c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400c2e:	a801      	add	r0, sp, #4
  400c30:	4b07      	ldr	r3, [pc, #28]	; (400c50 <timer_add_task+0xa4>)
  400c32:	4798      	blx	r3
	return ERR_NONE;
  400c34:	2000      	movs	r0, #0
  400c36:	e7e2      	b.n	400bfe <timer_add_task+0x52>
  400c38:	004019d4 	.word	0x004019d4
  400c3c:	00400c55 	.word	0x00400c55
  400c40:	00400c5b 	.word	0x00400c5b
  400c44:	00400a7d 	.word	0x00400a7d
  400c48:	004007b5 	.word	0x004007b5
  400c4c:	00401645 	.word	0x00401645
  400c50:	004007c3 	.word	0x004007c3

00400c54 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400c54:	b900      	cbnz	r0, 400c58 <assert+0x4>
		__asm("BKPT #0");
  400c56:	be00      	bkpt	0x0000
  400c58:	4770      	bx	lr

00400c5a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400c5a:	6803      	ldr	r3, [r0, #0]
  400c5c:	b11b      	cbz	r3, 400c66 <is_list_element+0xc>
		if (it == element) {
  400c5e:	428b      	cmp	r3, r1
  400c60:	d003      	beq.n	400c6a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400c62:	681b      	ldr	r3, [r3, #0]
  400c64:	e7fa      	b.n	400c5c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400c66:	2000      	movs	r0, #0
  400c68:	4770      	bx	lr
			return true;
  400c6a:	2001      	movs	r0, #1
}
  400c6c:	4770      	bx	lr
	...

00400c70 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400c70:	b538      	push	{r3, r4, r5, lr}
  400c72:	4604      	mov	r4, r0
  400c74:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400c76:	4b06      	ldr	r3, [pc, #24]	; (400c90 <list_insert_as_head+0x20>)
  400c78:	4798      	blx	r3
  400c7a:	f080 0001 	eor.w	r0, r0, #1
  400c7e:	2239      	movs	r2, #57	; 0x39
  400c80:	4904      	ldr	r1, [pc, #16]	; (400c94 <list_insert_as_head+0x24>)
  400c82:	b2c0      	uxtb	r0, r0
  400c84:	4b04      	ldr	r3, [pc, #16]	; (400c98 <list_insert_as_head+0x28>)
  400c86:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400c88:	6823      	ldr	r3, [r4, #0]
  400c8a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400c8c:	6025      	str	r5, [r4, #0]
  400c8e:	bd38      	pop	{r3, r4, r5, pc}
  400c90:	00400c5b 	.word	0x00400c5b
  400c94:	004019ec 	.word	0x004019ec
  400c98:	00400c55 	.word	0x00400c55

00400c9c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400c9c:	6803      	ldr	r3, [r0, #0]
  400c9e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400ca0:	6001      	str	r1, [r0, #0]
  400ca2:	4770      	bx	lr

00400ca4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400ca4:	6803      	ldr	r3, [r0, #0]
  400ca6:	b11b      	cbz	r3, 400cb0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400ca8:	681a      	ldr	r2, [r3, #0]
  400caa:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400cac:	4618      	mov	r0, r3
  400cae:	4770      	bx	lr
	}

	return NULL;
  400cb0:	2000      	movs	r0, #0
}
  400cb2:	4770      	bx	lr

00400cb4 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400cb4:	2364      	movs	r3, #100	; 0x64
  400cb6:	4a1d      	ldr	r2, [pc, #116]	; (400d2c <_afec_init+0x78>)
  400cb8:	fb03 2301 	mla	r3, r3, r1, r2
  400cbc:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400cbe:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400cc0:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400cc2:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400cc4:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400cc6:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400cc8:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400cca:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400ccc:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400cce:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400cd0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400cd2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400cd4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400cd6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400cd8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400cda:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400ce0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400ce6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400cec:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400cf2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400cf6:	2200      	movs	r2, #0
  400cf8:	2a0b      	cmp	r2, #11
  400cfa:	d814      	bhi.n	400d26 <_afec_init+0x72>
{
  400cfc:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400cfe:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400d00:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400d04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400d08:	4413      	add	r3, r2
  400d0a:	330c      	adds	r3, #12
  400d0c:	4c07      	ldr	r4, [pc, #28]	; (400d2c <_afec_init+0x78>)
  400d0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400d12:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400d14:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400d16:	3201      	adds	r2, #1
  400d18:	b2d2      	uxtb	r2, r2
  400d1a:	2a0b      	cmp	r2, #11
  400d1c:	d9ef      	bls.n	400cfe <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400d1e:	2000      	movs	r0, #0
  400d20:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d24:	4770      	bx	lr
  400d26:	2000      	movs	r0, #0
  400d28:	4770      	bx	lr
  400d2a:	bf00      	nop
  400d2c:	00401a0c 	.word	0x00401a0c

00400d30 <_afec_get_hardware_index>:
{
  400d30:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400d32:	4b09      	ldr	r3, [pc, #36]	; (400d58 <_afec_get_hardware_index+0x28>)
  400d34:	4298      	cmp	r0, r3
  400d36:	d00a      	beq.n	400d4e <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400d38:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400d3c:	4298      	cmp	r0, r3
  400d3e:	d008      	beq.n	400d52 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400d40:	22a3      	movs	r2, #163	; 0xa3
  400d42:	4906      	ldr	r1, [pc, #24]	; (400d5c <_afec_get_hardware_index+0x2c>)
  400d44:	2000      	movs	r0, #0
  400d46:	4b06      	ldr	r3, [pc, #24]	; (400d60 <_afec_get_hardware_index+0x30>)
  400d48:	4798      	blx	r3
	return 0;
  400d4a:	2000      	movs	r0, #0
  400d4c:	bd08      	pop	{r3, pc}
		return 0;
  400d4e:	2000      	movs	r0, #0
  400d50:	bd08      	pop	{r3, pc}
		return 1;
  400d52:	2001      	movs	r0, #1
}
  400d54:	bd08      	pop	{r3, pc}
  400d56:	bf00      	nop
  400d58:	4003c000 	.word	0x4003c000
  400d5c:	00401a70 	.word	0x00401a70
  400d60:	00400c55 	.word	0x00400c55

00400d64 <_afec_get_regs>:
{
  400d64:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400d66:	4b08      	ldr	r3, [pc, #32]	; (400d88 <_afec_get_regs+0x24>)
  400d68:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d6a:	2300      	movs	r3, #0
  400d6c:	b113      	cbz	r3, 400d74 <_afec_get_regs+0x10>
	return 0;
  400d6e:	2300      	movs	r3, #0
}
  400d70:	4618      	mov	r0, r3
  400d72:	bd08      	pop	{r3, pc}
		if (_afecs[i].number == n) {
  400d74:	2264      	movs	r2, #100	; 0x64
  400d76:	fb02 f203 	mul.w	r2, r2, r3
  400d7a:	4904      	ldr	r1, [pc, #16]	; (400d8c <_afec_get_regs+0x28>)
  400d7c:	5c8a      	ldrb	r2, [r1, r2]
  400d7e:	4290      	cmp	r0, r2
  400d80:	d0f6      	beq.n	400d70 <_afec_get_regs+0xc>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400d82:	3301      	adds	r3, #1
  400d84:	b2db      	uxtb	r3, r3
  400d86:	e7f1      	b.n	400d6c <_afec_get_regs+0x8>
  400d88:	00400d31 	.word	0x00400d31
  400d8c:	00401a0c 	.word	0x00401a0c

00400d90 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400d90:	b538      	push	{r3, r4, r5, lr}
  400d92:	460c      	mov	r4, r1
	ASSERT(device);
  400d94:	4605      	mov	r5, r0
  400d96:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400d9a:	4907      	ldr	r1, [pc, #28]	; (400db8 <_adc_sync_init+0x28>)
  400d9c:	3000      	adds	r0, #0
  400d9e:	bf18      	it	ne
  400da0:	2001      	movne	r0, #1
  400da2:	4b06      	ldr	r3, [pc, #24]	; (400dbc <_adc_sync_init+0x2c>)
  400da4:	4798      	blx	r3

	device->hw = hw;
  400da6:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400da8:	4620      	mov	r0, r4
  400daa:	4b05      	ldr	r3, [pc, #20]	; (400dc0 <_adc_sync_init+0x30>)
  400dac:	4798      	blx	r3
  400dae:	4601      	mov	r1, r0
  400db0:	4620      	mov	r0, r4
  400db2:	4b04      	ldr	r3, [pc, #16]	; (400dc4 <_adc_sync_init+0x34>)
  400db4:	4798      	blx	r3
}
  400db6:	bd38      	pop	{r3, r4, r5, pc}
  400db8:	00401a70 	.word	0x00401a70
  400dbc:	00400c55 	.word	0x00400c55
  400dc0:	00400d65 	.word	0x00400d65
  400dc4:	00400cb5 	.word	0x00400cb5

00400dc8 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400dc8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400dca:	2b00      	cmp	r3, #0
  400dcc:	db09      	blt.n	400de2 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dce:	095b      	lsrs	r3, r3, #5
  400dd0:	f000 001f 	and.w	r0, r0, #31
  400dd4:	2201      	movs	r2, #1
  400dd6:	fa02 f000 	lsl.w	r0, r2, r0
  400dda:	3340      	adds	r3, #64	; 0x40
  400ddc:	4a01      	ldr	r2, [pc, #4]	; (400de4 <_irq_set+0x1c>)
  400dde:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400de2:	4770      	bx	lr
  400de4:	e000e100 	.word	0xe000e100

00400de8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400de8:	b500      	push	{lr}
  400dea:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400dec:	a801      	add	r0, sp, #4
  400dee:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <_init_chip+0x40>)
  400df0:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400df2:	4a0e      	ldr	r2, [pc, #56]	; (400e2c <_init_chip+0x44>)
  400df4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e04:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400e08:	a801      	add	r0, sp, #4
  400e0a:	4b09      	ldr	r3, [pc, #36]	; (400e30 <_init_chip+0x48>)
  400e0c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400e0e:	4a09      	ldr	r2, [pc, #36]	; (400e34 <_init_chip+0x4c>)
  400e10:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400e12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400e16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400e1a:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400e1c:	4b06      	ldr	r3, [pc, #24]	; (400e38 <_init_chip+0x50>)
  400e1e:	4798      	blx	r3
}
  400e20:	b003      	add	sp, #12
  400e22:	f85d fb04 	ldr.w	pc, [sp], #4
  400e26:	bf00      	nop
  400e28:	004007b5 	.word	0x004007b5
  400e2c:	e000ed00 	.word	0xe000ed00
  400e30:	004007c3 	.word	0x004007c3
  400e34:	400e0c00 	.word	0x400e0c00
  400e38:	0040114d 	.word	0x0040114d

00400e3c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400e3c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400e3e:	2500      	movs	r5, #0
  400e40:	428d      	cmp	r5, r1
  400e42:	d210      	bcs.n	400e66 <_ffs+0x2a>
  400e44:	2201      	movs	r2, #1
  400e46:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e48:	2b1f      	cmp	r3, #31
  400e4a:	d80a      	bhi.n	400e62 <_ffs+0x26>
			if (v[i] & bit) {
  400e4c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400e50:	4222      	tst	r2, r4
  400e52:	d102      	bne.n	400e5a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400e54:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400e56:	3301      	adds	r3, #1
  400e58:	e7f6      	b.n	400e48 <_ffs+0xc>
				return i * 32 + j;
  400e5a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400e5e:	bc30      	pop	{r4, r5}
  400e60:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400e62:	3501      	adds	r5, #1
  400e64:	e7ec      	b.n	400e40 <_ffs+0x4>
	return -1;
  400e66:	f04f 30ff 	mov.w	r0, #4294967295
  400e6a:	e7f8      	b.n	400e5e <_ffs+0x22>

00400e6c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400e6c:	b510      	push	{r4, lr}
  400e6e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400e70:	2300      	movs	r3, #0
  400e72:	9301      	str	r3, [sp, #4]
  400e74:	9302      	str	r3, [sp, #8]
  400e76:	9303      	str	r3, [sp, #12]
  400e78:	9304      	str	r3, [sp, #16]
  400e7a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400e7c:	4b21      	ldr	r3, [pc, #132]	; (400f04 <_ext_irq_handler+0x98>)
  400e7e:	6818      	ldr	r0, [r3, #0]
  400e80:	22f8      	movs	r2, #248	; 0xf8
  400e82:	4921      	ldr	r1, [pc, #132]	; (400f08 <_ext_irq_handler+0x9c>)
  400e84:	3000      	adds	r0, #0
  400e86:	bf18      	it	ne
  400e88:	2001      	movne	r0, #1
  400e8a:	4b20      	ldr	r3, [pc, #128]	; (400f0c <_ext_irq_handler+0xa0>)
  400e8c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400e8e:	4b20      	ldr	r3, [pc, #128]	; (400f10 <_ext_irq_handler+0xa4>)
  400e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400e94:	4013      	ands	r3, r2
  400e96:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400e98:	491e      	ldr	r1, [pc, #120]	; (400f14 <_ext_irq_handler+0xa8>)
  400e9a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400e9c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400e9e:	400a      	ands	r2, r1
  400ea0:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  400ea2:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400ea4:	e025      	b.n	400ef2 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400ea6:	4b17      	ldr	r3, [pc, #92]	; (400f04 <_ext_irq_handler+0x98>)
  400ea8:	681b      	ldr	r3, [r3, #0]
  400eaa:	4620      	mov	r0, r4
  400eac:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400eae:	1163      	asrs	r3, r4, #5
  400eb0:	f004 041f 	and.w	r4, r4, #31
  400eb4:	2201      	movs	r2, #1
  400eb6:	fa02 f404 	lsl.w	r4, r2, r4
  400eba:	aa06      	add	r2, sp, #24
  400ebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400ec0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400ec4:	ea22 0204 	bic.w	r2, r2, r4
  400ec8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400ecc:	2105      	movs	r1, #5
  400ece:	a801      	add	r0, sp, #4
  400ed0:	4b11      	ldr	r3, [pc, #68]	; (400f18 <_ext_irq_handler+0xac>)
  400ed2:	4798      	blx	r3
  400ed4:	4604      	mov	r4, r0
		while (-1 != pos) {
  400ed6:	f1b4 3fff 	cmp.w	r4, #4294967295
  400eda:	d1e4      	bne.n	400ea6 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400edc:	4a0c      	ldr	r2, [pc, #48]	; (400f10 <_ext_irq_handler+0xa4>)
  400ede:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ee0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400ee2:	400b      	ands	r3, r1
  400ee4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400ee6:	490b      	ldr	r1, [pc, #44]	; (400f14 <_ext_irq_handler+0xa8>)
  400ee8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400eea:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400eec:	4002      	ands	r2, r0
  400eee:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  400ef0:	4313      	orrs	r3, r2
	while (flag_total) {
  400ef2:	b12b      	cbz	r3, 400f00 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400ef4:	2105      	movs	r1, #5
  400ef6:	a801      	add	r0, sp, #4
  400ef8:	4b07      	ldr	r3, [pc, #28]	; (400f18 <_ext_irq_handler+0xac>)
  400efa:	4798      	blx	r3
  400efc:	4604      	mov	r4, r0
		while (-1 != pos) {
  400efe:	e7ea      	b.n	400ed6 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400f00:	b006      	add	sp, #24
  400f02:	bd10      	pop	{r4, pc}
  400f04:	20400074 	.word	0x20400074
  400f08:	00401ac4 	.word	0x00401ac4
  400f0c:	00400c55 	.word	0x00400c55
  400f10:	400e0e00 	.word	0x400e0e00
  400f14:	400e1000 	.word	0x400e1000
  400f18:	00400e3d 	.word	0x00400e3d

00400f1c <_pio_get_hardware_index>:
{
  400f1c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f1e:	4604      	mov	r4, r0
  400f20:	22d2      	movs	r2, #210	; 0xd2
  400f22:	4905      	ldr	r1, [pc, #20]	; (400f38 <_pio_get_hardware_index+0x1c>)
  400f24:	3000      	adds	r0, #0
  400f26:	bf18      	it	ne
  400f28:	2001      	movne	r0, #1
  400f2a:	4b04      	ldr	r3, [pc, #16]	; (400f3c <_pio_get_hardware_index+0x20>)
  400f2c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400f2e:	4804      	ldr	r0, [pc, #16]	; (400f40 <_pio_get_hardware_index+0x24>)
  400f30:	4420      	add	r0, r4
}
  400f32:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400f36:	bd10      	pop	{r4, pc}
  400f38:	00401ac4 	.word	0x00401ac4
  400f3c:	00400c55 	.word	0x00400c55
  400f40:	bff1f200 	.word	0xbff1f200

00400f44 <_pio_get_index>:
{
  400f44:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f46:	4604      	mov	r4, r0
  400f48:	22e0      	movs	r2, #224	; 0xe0
  400f4a:	490d      	ldr	r1, [pc, #52]	; (400f80 <_pio_get_index+0x3c>)
  400f4c:	3000      	adds	r0, #0
  400f4e:	bf18      	it	ne
  400f50:	2001      	movne	r0, #1
  400f52:	4b0c      	ldr	r3, [pc, #48]	; (400f84 <_pio_get_index+0x40>)
  400f54:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400f56:	4620      	mov	r0, r4
  400f58:	4b0b      	ldr	r3, [pc, #44]	; (400f88 <_pio_get_index+0x44>)
  400f5a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f5c:	2300      	movs	r3, #0
  400f5e:	2b01      	cmp	r3, #1
  400f60:	d80b      	bhi.n	400f7a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400f62:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400f66:	008a      	lsls	r2, r1, #2
  400f68:	4908      	ldr	r1, [pc, #32]	; (400f8c <_pio_get_index+0x48>)
  400f6a:	5c8a      	ldrb	r2, [r1, r2]
  400f6c:	4290      	cmp	r0, r2
  400f6e:	d002      	beq.n	400f76 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400f70:	3301      	adds	r3, #1
  400f72:	b2db      	uxtb	r3, r3
  400f74:	e7f3      	b.n	400f5e <_pio_get_index+0x1a>
			return i;
  400f76:	b258      	sxtb	r0, r3
  400f78:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400f7a:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f7e:	bd10      	pop	{r4, pc}
  400f80:	00401ac4 	.word	0x00401ac4
  400f84:	00400c55 	.word	0x00400c55
  400f88:	00400f1d 	.word	0x00400f1d
  400f8c:	00401a88 	.word	0x00401a88

00400f90 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400f90:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400f92:	4604      	mov	r4, r0
  400f94:	f240 1259 	movw	r2, #345	; 0x159
  400f98:	4929      	ldr	r1, [pc, #164]	; (401040 <_pio_init+0xb0>)
  400f9a:	3000      	adds	r0, #0
  400f9c:	bf18      	it	ne
  400f9e:	2001      	movne	r0, #1
  400fa0:	4b28      	ldr	r3, [pc, #160]	; (401044 <_pio_init+0xb4>)
  400fa2:	4798      	blx	r3

	i = _pio_get_index(hw);
  400fa4:	4620      	mov	r0, r4
  400fa6:	4b28      	ldr	r3, [pc, #160]	; (401048 <_pio_init+0xb8>)
  400fa8:	4798      	blx	r3
	if (i < 0) {
  400faa:	2800      	cmp	r0, #0
  400fac:	db43      	blt.n	401036 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400fae:	4d27      	ldr	r5, [pc, #156]	; (40104c <_pio_init+0xbc>)
  400fb0:	00c2      	lsls	r2, r0, #3
  400fb2:	1a11      	subs	r1, r2, r0
  400fb4:	008b      	lsls	r3, r1, #2
  400fb6:	442b      	add	r3, r5
  400fb8:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400fba:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400fbe:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400fc0:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400fc4:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400fc6:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400fca:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400fcc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400fd0:	1a10      	subs	r0, r2, r0
  400fd2:	0083      	lsls	r3, r0, #2
  400fd4:	442b      	add	r3, r5
  400fd6:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400fd8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400fdc:	4620      	mov	r0, r4
  400fde:	4b1c      	ldr	r3, [pc, #112]	; (401050 <_pio_init+0xc0>)
  400fe0:	4798      	blx	r3
  400fe2:	4428      	add	r0, r5
  400fe4:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  400fe8:	2b00      	cmp	r3, #0
  400fea:	db0c      	blt.n	401006 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fec:	095a      	lsrs	r2, r3, #5
  400fee:	f003 001f 	and.w	r0, r3, #31
  400ff2:	2101      	movs	r1, #1
  400ff4:	4081      	lsls	r1, r0
  400ff6:	3220      	adds	r2, #32
  400ff8:	4816      	ldr	r0, [pc, #88]	; (401054 <_pio_init+0xc4>)
  400ffa:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401002:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401006:	2b00      	cmp	r3, #0
  401008:	db08      	blt.n	40101c <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40100a:	095a      	lsrs	r2, r3, #5
  40100c:	f003 001f 	and.w	r0, r3, #31
  401010:	2101      	movs	r1, #1
  401012:	4081      	lsls	r1, r0
  401014:	3260      	adds	r2, #96	; 0x60
  401016:	480f      	ldr	r0, [pc, #60]	; (401054 <_pio_init+0xc4>)
  401018:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  40101c:	2b00      	cmp	r3, #0
  40101e:	db0d      	blt.n	40103c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401020:	0959      	lsrs	r1, r3, #5
  401022:	f003 031f 	and.w	r3, r3, #31
  401026:	2201      	movs	r2, #1
  401028:	fa02 f303 	lsl.w	r3, r2, r3
  40102c:	4a09      	ldr	r2, [pc, #36]	; (401054 <_pio_init+0xc4>)
  40102e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401032:	2000      	movs	r0, #0
  401034:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401036:	f06f 0010 	mvn.w	r0, #16
  40103a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  40103c:	2000      	movs	r0, #0
}
  40103e:	bd38      	pop	{r3, r4, r5, pc}
  401040:	00401ac4 	.word	0x00401ac4
  401044:	00400c55 	.word	0x00400c55
  401048:	00400f45 	.word	0x00400f45
  40104c:	00401a88 	.word	0x00401a88
  401050:	00400f1d 	.word	0x00400f1d
  401054:	e000e100 	.word	0xe000e100

00401058 <PIOB_Handler>:
{
  401058:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40105a:	4b01      	ldr	r3, [pc, #4]	; (401060 <PIOB_Handler+0x8>)
  40105c:	4798      	blx	r3
  40105e:	bd08      	pop	{r3, pc}
  401060:	00400e6d 	.word	0x00400e6d

00401064 <PIOA_Handler>:
{
  401064:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401066:	4b01      	ldr	r3, [pc, #4]	; (40106c <PIOA_Handler+0x8>)
  401068:	4798      	blx	r3
  40106a:	bd08      	pop	{r3, pc}
  40106c:	00400e6d 	.word	0x00400e6d

00401070 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401070:	b538      	push	{r3, r4, r5, lr}
  401072:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401074:	4804      	ldr	r0, [pc, #16]	; (401088 <_ext_irq_init+0x18>)
  401076:	4c05      	ldr	r4, [pc, #20]	; (40108c <_ext_irq_init+0x1c>)
  401078:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40107a:	4805      	ldr	r0, [pc, #20]	; (401090 <_ext_irq_init+0x20>)
  40107c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  40107e:	4b05      	ldr	r3, [pc, #20]	; (401094 <_ext_irq_init+0x24>)
  401080:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401082:	2000      	movs	r0, #0
  401084:	bd38      	pop	{r3, r4, r5, pc}
  401086:	bf00      	nop
  401088:	400e0e00 	.word	0x400e0e00
  40108c:	00400f91 	.word	0x00400f91
  401090:	400e1000 	.word	0x400e1000
  401094:	20400074 	.word	0x20400074

00401098 <_pmc_init_sources>:
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  401098:	4a14      	ldr	r2, [pc, #80]	; (4010ec <_pmc_init_sources+0x54>)
  40109a:	6a11      	ldr	r1, [r2, #32]
  40109c:	4b14      	ldr	r3, [pc, #80]	; (4010f0 <_pmc_init_sources+0x58>)
  40109e:	430b      	orrs	r3, r1
  4010a0:	6213      	str	r3, [r2, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  4010a2:	4b12      	ldr	r3, [pc, #72]	; (4010ec <_pmc_init_sources+0x54>)
  4010a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68

#if (CONF_CLK_MAINCK_ENABLE == 1)
#if (CONF_OSC12M_ENABLE && (CONF_CLK_GEN_MAINCK_SRC == CLK_SRC_OPTION_OSC12M))
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	hri_pmc_set_CKGR_MOR_reg(PMC, (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN));
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  4010a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4010aa:	d0fa      	beq.n	4010a2 <_pmc_init_sources+0xa>
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4010ac:	490f      	ldr	r1, [pc, #60]	; (4010ec <_pmc_init_sources+0x54>)
  4010ae:	6a0a      	ldr	r2, [r1, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Change Fast RC oscillator frequency */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCRCF_Msk;
  4010b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCF(CONF_OSC12M_SELECTOR);
  4010b4:	4b0f      	ldr	r3, [pc, #60]	; (4010f4 <_pmc_init_sources+0x5c>)
  4010b6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4010b8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCRCS) > 0;
  4010ba:	4b0c      	ldr	r3, [pc, #48]	; (4010ec <_pmc_init_sources+0x54>)
  4010bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCRCS_bit(PMC)) {
  4010be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4010c2:	d0fa      	beq.n	4010ba <_pmc_init_sources+0x22>
	return ((Pmc *)hw)->CKGR_MOR;
  4010c4:	4b09      	ldr	r3, [pc, #36]	; (4010ec <_pmc_init_sources+0x54>)
  4010c6:	6a1a      	ldr	r2, [r3, #32]
		/* Wait until the Fast RC to stabilize */
	}
	/* Switch to Fast RC */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCSEL;
  4010c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
	data |= CKGR_MOR_KEY_PASSWD;
  4010cc:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
	((Pmc *)hw)->CKGR_MOR = data;
  4010d0:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4010d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4010d4:	4a08      	ldr	r2, [pc, #32]	; (4010f8 <_pmc_init_sources+0x60>)
  4010d6:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4010d8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4010da:	4a08      	ldr	r2, [pc, #32]	; (4010fc <_pmc_init_sources+0x64>)
  4010dc:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4010de:	4b03      	ldr	r3, [pc, #12]	; (4010ec <_pmc_init_sources+0x54>)
  4010e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4010e2:	f013 0f02 	tst.w	r3, #2
  4010e6:	d0fa      	beq.n	4010de <_pmc_init_sources+0x46>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4010e8:	4770      	bx	lr
  4010ea:	bf00      	nop
  4010ec:	400e0600 	.word	0x400e0600
  4010f0:	00370008 	.word	0x00370008
  4010f4:	00370020 	.word	0x00370020
  4010f8:	f800ffff 	.word	0xf800ffff
  4010fc:	20183f01 	.word	0x20183f01

00401100 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401100:	4a11      	ldr	r2, [pc, #68]	; (401148 <_pmc_init_master_clock+0x48>)
  401102:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401108:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40110a:	4b0f      	ldr	r3, [pc, #60]	; (401148 <_pmc_init_master_clock+0x48>)
  40110c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40110e:	f013 0f08 	tst.w	r3, #8
  401112:	d0fa      	beq.n	40110a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401114:	4a0c      	ldr	r2, [pc, #48]	; (401148 <_pmc_init_master_clock+0x48>)
  401116:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401120:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401122:	4b09      	ldr	r3, [pc, #36]	; (401148 <_pmc_init_master_clock+0x48>)
  401124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401126:	f013 0f08 	tst.w	r3, #8
  40112a:	d0fa      	beq.n	401122 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40112c:	4a06      	ldr	r2, [pc, #24]	; (401148 <_pmc_init_master_clock+0x48>)
  40112e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401130:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401134:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401138:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40113a:	4b03      	ldr	r3, [pc, #12]	; (401148 <_pmc_init_master_clock+0x48>)
  40113c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40113e:	f013 0f08 	tst.w	r3, #8
  401142:	d0fa      	beq.n	40113a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401144:	4770      	bx	lr
  401146:	bf00      	nop
  401148:	400e0600 	.word	0x400e0600

0040114c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40114c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40114e:	4b02      	ldr	r3, [pc, #8]	; (401158 <_pmc_init+0xc>)
  401150:	4798      	blx	r3
	_pmc_init_master_clock();
  401152:	4b02      	ldr	r3, [pc, #8]	; (40115c <_pmc_init+0x10>)
  401154:	4798      	blx	r3
  401156:	bd08      	pop	{r3, pc}
  401158:	00401099 	.word	0x00401099
  40115c:	00401101 	.word	0x00401101

00401160 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401160:	2300      	movs	r3, #0
  401162:	2b01      	cmp	r3, #1
  401164:	d80f      	bhi.n	401186 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401166:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40116a:	008a      	lsls	r2, r1, #2
  40116c:	4907      	ldr	r1, [pc, #28]	; (40118c <_pwm_get_cfg+0x2c>)
  40116e:	588a      	ldr	r2, [r1, r2]
  401170:	4282      	cmp	r2, r0
  401172:	d002      	beq.n	40117a <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401174:	3301      	adds	r3, #1
  401176:	b2db      	uxtb	r3, r3
  401178:	e7f3      	b.n	401162 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  40117a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40117e:	009a      	lsls	r2, r3, #2
  401180:	4608      	mov	r0, r1
  401182:	4410      	add	r0, r2
  401184:	4770      	bx	lr
		}
	}

	return NULL;
  401186:	2000      	movs	r0, #0
}
  401188:	4770      	bx	lr
  40118a:	bf00      	nop
  40118c:	00401ae0 	.word	0x00401ae0

00401190 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401190:	4b06      	ldr	r3, [pc, #24]	; (4011ac <_pwm_init_irq_param+0x1c>)
  401192:	4298      	cmp	r0, r3
  401194:	d003      	beq.n	40119e <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401196:	4b06      	ldr	r3, [pc, #24]	; (4011b0 <_pwm_init_irq_param+0x20>)
  401198:	4298      	cmp	r0, r3
  40119a:	d003      	beq.n	4011a4 <_pwm_init_irq_param+0x14>
  40119c:	4770      	bx	lr
		_pwm0_dev = dev;
  40119e:	4b05      	ldr	r3, [pc, #20]	; (4011b4 <_pwm_init_irq_param+0x24>)
  4011a0:	6019      	str	r1, [r3, #0]
  4011a2:	e7f8      	b.n	401196 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4011a4:	4b03      	ldr	r3, [pc, #12]	; (4011b4 <_pwm_init_irq_param+0x24>)
  4011a6:	6059      	str	r1, [r3, #4]
	}
}
  4011a8:	e7f8      	b.n	40119c <_pwm_init_irq_param+0xc>
  4011aa:	bf00      	nop
  4011ac:	40020000 	.word	0x40020000
  4011b0:	4005c000 	.word	0x4005c000
  4011b4:	20400078 	.word	0x20400078

004011b8 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  4011b8:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  4011ba:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  4011bc:	69db      	ldr	r3, [r3, #28]
  4011be:	b113      	cbz	r3, 4011c6 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  4011c0:	6803      	ldr	r3, [r0, #0]
  4011c2:	b103      	cbz	r3, 4011c6 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  4011c4:	4798      	blx	r3
  4011c6:	bd08      	pop	{r3, pc}

004011c8 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  4011c8:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  4011ca:	4b02      	ldr	r3, [pc, #8]	; (4011d4 <PWM0_Handler+0xc>)
  4011cc:	6818      	ldr	r0, [r3, #0]
  4011ce:	4b02      	ldr	r3, [pc, #8]	; (4011d8 <PWM0_Handler+0x10>)
  4011d0:	4798      	blx	r3
  4011d2:	bd08      	pop	{r3, pc}
  4011d4:	20400078 	.word	0x20400078
  4011d8:	004011b9 	.word	0x004011b9

004011dc <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  4011dc:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  4011de:	4b02      	ldr	r3, [pc, #8]	; (4011e8 <PWM1_Handler+0xc>)
  4011e0:	6858      	ldr	r0, [r3, #4]
  4011e2:	4b02      	ldr	r3, [pc, #8]	; (4011ec <PWM1_Handler+0x10>)
  4011e4:	4798      	blx	r3
  4011e6:	bd08      	pop	{r3, pc}
  4011e8:	20400078 	.word	0x20400078
  4011ec:	004011b9 	.word	0x004011b9

004011f0 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011f2:	4606      	mov	r6, r0
	ASSERT(hw);
  4011f4:	460c      	mov	r4, r1
  4011f6:	1c08      	adds	r0, r1, #0
  4011f8:	bf18      	it	ne
  4011fa:	2001      	movne	r0, #1
  4011fc:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401200:	4944      	ldr	r1, [pc, #272]	; (401314 <_pwm_init+0x124>)
  401202:	4b45      	ldr	r3, [pc, #276]	; (401318 <_pwm_init+0x128>)
  401204:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401206:	4620      	mov	r0, r4
  401208:	4b44      	ldr	r3, [pc, #272]	; (40131c <_pwm_init+0x12c>)
  40120a:	4798      	blx	r3
  40120c:	4605      	mov	r5, r0

	device->hw = hw;
  40120e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401210:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401212:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401214:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401216:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401218:	6903      	ldr	r3, [r0, #16]
  40121a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40121e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401220:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401222:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401224:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401226:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401228:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40122c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40122e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401230:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401232:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401236:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401238:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40123c:	2300      	movs	r3, #0
  40123e:	e019      	b.n	401274 <_pwm_init+0x84>
		ch = cfg->ch + i;
  401240:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401242:	0118      	lsls	r0, r3, #4
  401244:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401248:	5c3a      	ldrb	r2, [r7, r0]
  40124a:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40124e:	3210      	adds	r2, #16
  401250:	0152      	lsls	r2, r2, #5
  401252:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401254:	5c3a      	ldrb	r2, [r7, r0]
  401256:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40125a:	3210      	adds	r2, #16
  40125c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401260:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401262:	5c3a      	ldrb	r2, [r7, r0]
  401264:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401268:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40126c:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401270:	3301      	adds	r3, #1
  401272:	b25b      	sxtb	r3, r3
  401274:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401276:	4293      	cmp	r3, r2
  401278:	d3e2      	bcc.n	401240 <_pwm_init+0x50>
  40127a:	2300      	movs	r3, #0
  40127c:	e014      	b.n	4012a8 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40127e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401280:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401284:	0082      	lsls	r2, r0, #2
  401286:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  40128a:	5c88      	ldrb	r0, [r1, r2]
  40128c:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401290:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401294:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401298:	5c8a      	ldrb	r2, [r1, r2]
  40129a:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  40129e:	3213      	adds	r2, #19
  4012a0:	0112      	lsls	r2, r2, #4
  4012a2:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4012a4:	3301      	adds	r3, #1
  4012a6:	b25b      	sxtb	r3, r3
  4012a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4012aa:	4293      	cmp	r3, r2
  4012ac:	d3e7      	bcc.n	40127e <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4012ae:	4631      	mov	r1, r6
  4012b0:	4620      	mov	r0, r4
  4012b2:	4b1b      	ldr	r3, [pc, #108]	; (401320 <_pwm_init+0x130>)
  4012b4:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4012b6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	db0d      	blt.n	4012da <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012be:	095a      	lsrs	r2, r3, #5
  4012c0:	f003 031f 	and.w	r3, r3, #31
  4012c4:	2101      	movs	r1, #1
  4012c6:	fa01 f303 	lsl.w	r3, r1, r3
  4012ca:	3220      	adds	r2, #32
  4012cc:	4915      	ldr	r1, [pc, #84]	; (401324 <_pwm_init+0x134>)
  4012ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012d6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4012da:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012de:	2b00      	cmp	r3, #0
  4012e0:	db09      	blt.n	4012f6 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012e2:	095a      	lsrs	r2, r3, #5
  4012e4:	f003 031f 	and.w	r3, r3, #31
  4012e8:	2101      	movs	r1, #1
  4012ea:	fa01 f303 	lsl.w	r3, r1, r3
  4012ee:	3260      	adds	r2, #96	; 0x60
  4012f0:	490c      	ldr	r1, [pc, #48]	; (401324 <_pwm_init+0x134>)
  4012f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4012f6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4012fa:	2b00      	cmp	r3, #0
  4012fc:	db08      	blt.n	401310 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012fe:	0959      	lsrs	r1, r3, #5
  401300:	f003 031f 	and.w	r3, r3, #31
  401304:	2201      	movs	r2, #1
  401306:	fa02 f303 	lsl.w	r3, r2, r3
  40130a:	4a06      	ldr	r2, [pc, #24]	; (401324 <_pwm_init+0x134>)
  40130c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401310:	2000      	movs	r0, #0
  401312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401314:	00401ba8 	.word	0x00401ba8
  401318:	00400c55 	.word	0x00400c55
  40131c:	00401161 	.word	0x00401161
  401320:	00401191 	.word	0x00401191
  401324:	e000e100 	.word	0xe000e100

00401328 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401328:	2000      	movs	r0, #0
  40132a:	4770      	bx	lr

0040132c <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  40132c:	4b04      	ldr	r3, [pc, #16]	; (401340 <_spi_get_hardware_index+0x14>)
  40132e:	4403      	add	r3, r0
  401330:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  401334:	2b05      	cmp	r3, #5
  401336:	d001      	beq.n	40133c <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401338:	2000      	movs	r0, #0
	}
}
  40133a:	4770      	bx	lr
		return 1;
  40133c:	2001      	movs	r0, #1
  40133e:	4770      	bx	lr
  401340:	bfff8000 	.word	0xbfff8000

00401344 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  401344:	b570      	push	{r4, r5, r6, lr}
  401346:	4606      	mov	r6, r0
  401348:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  40134a:	4608      	mov	r0, r1
  40134c:	4b20      	ldr	r3, [pc, #128]	; (4013d0 <_spi_m_sync_init+0x8c>)
  40134e:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401350:	2300      	movs	r3, #0
  401352:	b33b      	cbz	r3, 4013a4 <_spi_m_sync_init+0x60>
	return NULL;
  401354:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  401356:	f240 122f 	movw	r2, #303	; 0x12f
  40135a:	491e      	ldr	r1, [pc, #120]	; (4013d4 <_spi_m_sync_init+0x90>)
  40135c:	2e00      	cmp	r6, #0
  40135e:	bf18      	it	ne
  401360:	2c00      	cmpne	r4, #0
  401362:	bf14      	ite	ne
  401364:	2001      	movne	r0, #1
  401366:	2000      	moveq	r0, #0
  401368:	4b1b      	ldr	r3, [pc, #108]	; (4013d8 <_spi_m_sync_init+0x94>)
  40136a:	4798      	blx	r3

	if (regs == NULL) {
  40136c:	b355      	cbz	r5, 4013c4 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  40136e:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401370:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401374:	d129      	bne.n	4013ca <_spi_m_sync_init+0x86>
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  401376:	2380      	movs	r3, #128	; 0x80
  401378:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  40137a:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  40137c:	686a      	ldr	r2, [r5, #4]
  40137e:	4b17      	ldr	r3, [pc, #92]	; (4013dc <_spi_m_sync_init+0x98>)
  401380:	4013      	ands	r3, r2
  401382:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401384:	68ab      	ldr	r3, [r5, #8]
  401386:	4a16      	ldr	r2, [pc, #88]	; (4013e0 <_spi_m_sync_init+0x9c>)
  401388:	401a      	ands	r2, r3
  40138a:	4b16      	ldr	r3, [pc, #88]	; (4013e4 <_spi_m_sync_init+0xa0>)
  40138c:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  40138e:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401390:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  401392:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401394:	8a2b      	ldrh	r3, [r5, #16]
  401396:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  401398:	68eb      	ldr	r3, [r5, #12]
  40139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40139e:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4013a0:	2000      	movs	r0, #0
  4013a2:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  4013a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4013a8:	008a      	lsls	r2, r1, #2
  4013aa:	490f      	ldr	r1, [pc, #60]	; (4013e8 <_spi_m_sync_init+0xa4>)
  4013ac:	5c8a      	ldrb	r2, [r1, r2]
  4013ae:	4290      	cmp	r0, r2
  4013b0:	d002      	beq.n	4013b8 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4013b2:	3301      	adds	r3, #1
  4013b4:	b2db      	uxtb	r3, r3
  4013b6:	e7cc      	b.n	401352 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  4013b8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  4013bc:	00ab      	lsls	r3, r5, #2
  4013be:	460d      	mov	r5, r1
  4013c0:	441d      	add	r5, r3
  4013c2:	e7c8      	b.n	401356 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  4013c4:	f06f 000c 	mvn.w	r0, #12
  4013c8:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  4013ca:	f06f 0010 	mvn.w	r0, #16
}
  4013ce:	bd70      	pop	{r4, r5, r6, pc}
  4013d0:	0040132d 	.word	0x0040132d
  4013d4:	00401bd4 	.word	0x00401bd4
  4013d8:	00400c55 	.word	0x00400c55
  4013dc:	feffff7c 	.word	0xfeffff7c
  4013e0:	fff1ff6f 	.word	0xfff1ff6f
  4013e4:	000e0010 	.word	0x000e0010
  4013e8:	00401bc0 	.word	0x00401bc0

004013ec <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  4013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013f0:	b086      	sub	sp, #24
  4013f2:	4607      	mov	r7, r0
  4013f4:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  4013f6:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  4013f8:	680b      	ldr	r3, [r1, #0]
  4013fa:	9301      	str	r3, [sp, #4]
  4013fc:	684b      	ldr	r3, [r1, #4]
  4013fe:	9302      	str	r3, [sp, #8]
  401400:	2300      	movs	r3, #0
  401402:	9303      	str	r3, [sp, #12]
  401404:	9304      	str	r3, [sp, #16]
  401406:	7903      	ldrb	r3, [r0, #4]
  401408:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  40140c:	1c26      	adds	r6, r4, #0
  40140e:	bf18      	it	ne
  401410:	2601      	movne	r6, #1
  401412:	f44f 720b 	mov.w	r2, #556	; 0x22c
  401416:	4933      	ldr	r1, [pc, #204]	; (4014e4 <_spi_m_sync_trans+0xf8>)
  401418:	2800      	cmp	r0, #0
  40141a:	bf0c      	ite	eq
  40141c:	2000      	moveq	r0, #0
  40141e:	f006 0001 	andne.w	r0, r6, #1
  401422:	4b31      	ldr	r3, [pc, #196]	; (4014e8 <_spi_m_sync_trans+0xfc>)
  401424:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401426:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401428:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40142c:	d122      	bne.n	401474 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  40142e:	f06f 0013 	mvn.w	r0, #19
  401432:	e053      	b.n	4014dc <_spi_m_sync_trans+0xf0>
		return false;
  401434:	2300      	movs	r3, #0
  401436:	e035      	b.n	4014a4 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401438:	7850      	ldrb	r0, [r2, #1]
  40143a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  40143e:	3202      	adds	r2, #2
  401440:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  401442:	3301      	adds	r3, #1
  401444:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  401446:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  401448:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  40144c:	f240 221d 	movw	r2, #541	; 0x21d
  401450:	4924      	ldr	r1, [pc, #144]	; (4014e4 <_spi_m_sync_trans+0xf8>)
  401452:	4630      	mov	r0, r6
  401454:	4b24      	ldr	r3, [pc, #144]	; (4014e8 <_spi_m_sync_trans+0xfc>)
  401456:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  401458:	f018 0f08 	tst.w	r8, #8
  40145c:	d038      	beq.n	4014d0 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  40145e:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  401462:	2800      	cmp	r0, #0
  401464:	db36      	blt.n	4014d4 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  401466:	9803      	ldr	r0, [sp, #12]
  401468:	68ab      	ldr	r3, [r5, #8]
  40146a:	4298      	cmp	r0, r3
  40146c:	d302      	bcc.n	401474 <_spi_m_sync_trans+0x88>
  40146e:	9a04      	ldr	r2, [sp, #16]
  401470:	4293      	cmp	r3, r2
  401472:	d92f      	bls.n	4014d4 <_spi_m_sync_trans+0xe8>
  401474:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  401476:	f013 0f01 	tst.w	r3, #1
  40147a:	d0db      	beq.n	401434 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  40147c:	68a3      	ldr	r3, [r4, #8]
  40147e:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401480:	9a02      	ldr	r2, [sp, #8]
  401482:	b15a      	cbz	r2, 40149c <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401484:	1c51      	adds	r1, r2, #1
  401486:	9102      	str	r1, [sp, #8]
  401488:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  40148a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  40148e:	2a01      	cmp	r2, #1
  401490:	d904      	bls.n	40149c <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  401492:	460a      	mov	r2, r1
  401494:	3101      	adds	r1, #1
  401496:	9102      	str	r1, [sp, #8]
  401498:	0a1b      	lsrs	r3, r3, #8
  40149a:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  40149c:	9b04      	ldr	r3, [sp, #16]
  40149e:	3301      	adds	r3, #1
  4014a0:	9304      	str	r3, [sp, #16]
	return true;
  4014a2:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d1cf      	bne.n	401448 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  4014a8:	9b03      	ldr	r3, [sp, #12]
  4014aa:	9a04      	ldr	r2, [sp, #16]
  4014ac:	429a      	cmp	r2, r3
  4014ae:	d3cb      	bcc.n	401448 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  4014b0:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  4014b2:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  4014b4:	f012 0f02 	tst.w	r2, #2
  4014b8:	d0c6      	beq.n	401448 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  4014ba:	9a01      	ldr	r2, [sp, #4]
  4014bc:	2a00      	cmp	r2, #0
  4014be:	d0c0      	beq.n	401442 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  4014c0:	1c51      	adds	r1, r2, #1
  4014c2:	9101      	str	r1, [sp, #4]
  4014c4:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  4014c6:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4014ca:	2801      	cmp	r0, #1
  4014cc:	d8b4      	bhi.n	401438 <_spi_m_sync_trans+0x4c>
  4014ce:	e7b8      	b.n	401442 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  4014d0:	2000      	movs	r0, #0
  4014d2:	e7c6      	b.n	401462 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  4014d4:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  4014d6:	f413 7f00 	tst.w	r3, #512	; 0x200
  4014da:	d0fb      	beq.n	4014d4 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  4014dc:	b006      	add	sp, #24
  4014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014e2:	bf00      	nop
  4014e4:	00401bd4 	.word	0x00401bd4
  4014e8:	00400c55 	.word	0x00400c55

004014ec <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  4014ec:	2000      	movs	r0, #0
  4014ee:	4770      	bx	lr

004014f0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4014f0:	4b03      	ldr	r3, [pc, #12]	; (401500 <_system_time_init+0x10>)
  4014f2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4014f6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4014f8:	2205      	movs	r2, #5
  4014fa:	601a      	str	r2, [r3, #0]
  4014fc:	4770      	bx	lr
  4014fe:	bf00      	nop
  401500:	e000e010 	.word	0xe000e010

00401504 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401504:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401506:	4b01      	ldr	r3, [pc, #4]	; (40150c <_delay_init+0x8>)
  401508:	4798      	blx	r3
  40150a:	bd08      	pop	{r3, pc}
  40150c:	004014f1 	.word	0x004014f1

00401510 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401510:	2300      	movs	r3, #0
  401512:	b13b      	cbz	r3, 401524 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  401514:	2000      	movs	r0, #0
  401516:	4770      	bx	lr
			return &(_tcs[i]);
  401518:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40151c:	00a3      	lsls	r3, r4, #2
  40151e:	4608      	mov	r0, r1
  401520:	4418      	add	r0, r3
  401522:	e00c      	b.n	40153e <get_cfg+0x2e>
{
  401524:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401526:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  40152a:	008a      	lsls	r2, r1, #2
  40152c:	4905      	ldr	r1, [pc, #20]	; (401544 <get_cfg+0x34>)
  40152e:	588a      	ldr	r2, [r1, r2]
  401530:	4282      	cmp	r2, r0
  401532:	d0f1      	beq.n	401518 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401534:	3301      	adds	r3, #1
  401536:	b2db      	uxtb	r3, r3
  401538:	2b00      	cmp	r3, #0
  40153a:	d0f4      	beq.n	401526 <get_cfg+0x16>
	return NULL;
  40153c:	2000      	movs	r0, #0
}
  40153e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401542:	4770      	bx	lr
  401544:	20400000 	.word	0x20400000

00401548 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401548:	4b03      	ldr	r3, [pc, #12]	; (401558 <_tc_init_irq_param+0x10>)
  40154a:	4298      	cmp	r0, r3
  40154c:	d000      	beq.n	401550 <_tc_init_irq_param+0x8>
  40154e:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401550:	4b02      	ldr	r3, [pc, #8]	; (40155c <_tc_init_irq_param+0x14>)
  401552:	6019      	str	r1, [r3, #0]
	}
}
  401554:	e7fb      	b.n	40154e <_tc_init_irq_param+0x6>
  401556:	bf00      	nop
  401558:	4000c000 	.word	0x4000c000
  40155c:	20400098 	.word	0x20400098

00401560 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401560:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401562:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401564:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401566:	f013 0f10 	tst.w	r3, #16
  40156a:	d100      	bne.n	40156e <tc_interrupt_handler+0xe>
  40156c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40156e:	6803      	ldr	r3, [r0, #0]
  401570:	4798      	blx	r3
	}
}
  401572:	e7fb      	b.n	40156c <tc_interrupt_handler+0xc>

00401574 <_timer_init>:
{
  401574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401576:	4607      	mov	r7, r0
  401578:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  40157a:	4608      	mov	r0, r1
  40157c:	4b27      	ldr	r3, [pc, #156]	; (40161c <_timer_init+0xa8>)
  40157e:	4798      	blx	r3
  401580:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  401582:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  401584:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  401586:	2291      	movs	r2, #145	; 0x91
  401588:	4925      	ldr	r1, [pc, #148]	; (401620 <_timer_init+0xac>)
  40158a:	2001      	movs	r0, #1
  40158c:	4b25      	ldr	r3, [pc, #148]	; (401624 <_timer_init+0xb0>)
  40158e:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  401590:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401594:	d001      	beq.n	40159a <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401596:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40159a:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  40159c:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40159e:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  4015a0:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4015a2:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  4015a4:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4015a6:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  4015a8:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4015aa:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4015ac:	2310      	movs	r3, #16
  4015ae:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  4015b0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4015b2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  4015b6:	4639      	mov	r1, r7
  4015b8:	4620      	mov	r0, r4
  4015ba:	4b1b      	ldr	r3, [pc, #108]	; (401628 <_timer_init+0xb4>)
  4015bc:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4015be:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015c2:	2b00      	cmp	r3, #0
  4015c4:	db0d      	blt.n	4015e2 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015c6:	095a      	lsrs	r2, r3, #5
  4015c8:	f003 031f 	and.w	r3, r3, #31
  4015cc:	2101      	movs	r1, #1
  4015ce:	fa01 f303 	lsl.w	r3, r1, r3
  4015d2:	3220      	adds	r2, #32
  4015d4:	4915      	ldr	r1, [pc, #84]	; (40162c <_timer_init+0xb8>)
  4015d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4015da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015de:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4015e2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	db09      	blt.n	4015fe <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015ea:	095a      	lsrs	r2, r3, #5
  4015ec:	f003 031f 	and.w	r3, r3, #31
  4015f0:	2101      	movs	r1, #1
  4015f2:	fa01 f303 	lsl.w	r3, r1, r3
  4015f6:	3260      	adds	r2, #96	; 0x60
  4015f8:	490c      	ldr	r1, [pc, #48]	; (40162c <_timer_init+0xb8>)
  4015fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4015fe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401602:	2b00      	cmp	r3, #0
  401604:	db08      	blt.n	401618 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401606:	0959      	lsrs	r1, r3, #5
  401608:	f003 031f 	and.w	r3, r3, #31
  40160c:	2201      	movs	r2, #1
  40160e:	fa02 f303 	lsl.w	r3, r2, r3
  401612:	4a06      	ldr	r2, [pc, #24]	; (40162c <_timer_init+0xb8>)
  401614:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401618:	2000      	movs	r0, #0
  40161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40161c:	00401511 	.word	0x00401511
  401620:	00401bec 	.word	0x00401bec
  401624:	00400c55 	.word	0x00400c55
  401628:	00401549 	.word	0x00401549
  40162c:	e000e100 	.word	0xe000e100

00401630 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401630:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401632:	2205      	movs	r2, #5
  401634:	601a      	str	r2, [r3, #0]
  401636:	4770      	bx	lr

00401638 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  401638:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40163a:	6a18      	ldr	r0, [r3, #32]
}
  40163c:	f3c0 4000 	ubfx	r0, r0, #16, #1
  401640:	4770      	bx	lr
	...

00401644 <_timer_set_irq>:
{
  401644:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  401646:	68c0      	ldr	r0, [r0, #12]
  401648:	4b02      	ldr	r3, [pc, #8]	; (401654 <_timer_set_irq+0x10>)
  40164a:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  40164c:	7900      	ldrb	r0, [r0, #4]
  40164e:	4b02      	ldr	r3, [pc, #8]	; (401658 <_timer_set_irq+0x14>)
  401650:	4798      	blx	r3
  401652:	bd08      	pop	{r3, pc}
  401654:	00401511 	.word	0x00401511
  401658:	00400dc9 	.word	0x00400dc9

0040165c <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40165c:	2000      	movs	r0, #0
  40165e:	4770      	bx	lr

00401660 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401660:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401662:	4b02      	ldr	r3, [pc, #8]	; (40166c <TC0_Handler+0xc>)
  401664:	6818      	ldr	r0, [r3, #0]
  401666:	4b02      	ldr	r3, [pc, #8]	; (401670 <TC0_Handler+0x10>)
  401668:	4798      	blx	r3
  40166a:	bd08      	pop	{r3, pc}
  40166c:	20400098 	.word	0x20400098
  401670:	00401561 	.word	0x00401561

00401674 <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401674:	2300      	movs	r3, #0
  401676:	b13b      	cbz	r3, 401688 <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  401678:	2000      	movs	r0, #0
  40167a:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  40167c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401680:	00e3      	lsls	r3, r4, #3
  401682:	4608      	mov	r0, r1
  401684:	4418      	add	r0, r3
  401686:	e00c      	b.n	4016a2 <_get_i2cm_sync_cfg+0x2e>
{
  401688:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  40168a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  40168e:	00ca      	lsls	r2, r1, #3
  401690:	4905      	ldr	r1, [pc, #20]	; (4016a8 <_get_i2cm_sync_cfg+0x34>)
  401692:	588a      	ldr	r2, [r1, r2]
  401694:	4282      	cmp	r2, r0
  401696:	d0f1      	beq.n	40167c <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401698:	3301      	adds	r3, #1
  40169a:	b2db      	uxtb	r3, r3
  40169c:	2b00      	cmp	r3, #0
  40169e:	d0f4      	beq.n	40168a <_get_i2cm_sync_cfg+0x16>
	return NULL;
  4016a0:	2000      	movs	r0, #0
}
  4016a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016a6:	4770      	bx	lr
  4016a8:	00401c00 	.word	0x00401c00

004016ac <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  4016ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  4016ae:	4604      	mov	r4, r0
  4016b0:	460d      	mov	r5, r1
  4016b2:	2800      	cmp	r0, #0
  4016b4:	bf18      	it	ne
  4016b6:	2900      	cmpne	r1, #0
  4016b8:	bf14      	ite	ne
  4016ba:	2001      	movne	r0, #1
  4016bc:	2000      	moveq	r0, #0
  4016be:	2278      	movs	r2, #120	; 0x78
  4016c0:	4909      	ldr	r1, [pc, #36]	; (4016e8 <_i2c_m_sync_init+0x3c>)
  4016c2:	4b0a      	ldr	r3, [pc, #40]	; (4016ec <_i2c_m_sync_init+0x40>)
  4016c4:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  4016c6:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  4016c8:	4628      	mov	r0, r5
  4016ca:	4b09      	ldr	r3, [pc, #36]	; (4016f0 <_i2c_m_sync_init+0x44>)
  4016cc:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  4016ce:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  4016d0:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  4016d2:	6923      	ldr	r3, [r4, #16]
  4016d4:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  4016d6:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  4016d8:	6923      	ldr	r3, [r4, #16]
  4016da:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  4016dc:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  4016de:	6923      	ldr	r3, [r4, #16]
  4016e0:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  4016e2:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  4016e4:	2000      	movs	r0, #0
  4016e6:	bd38      	pop	{r3, r4, r5, pc}
  4016e8:	00401c18 	.word	0x00401c18
  4016ec:	00400c55 	.word	0x00400c55
  4016f0:	00401675 	.word	0x00401675

004016f4 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  4016f4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  4016f6:	4604      	mov	r4, r0
  4016f8:	460d      	mov	r5, r1
  4016fa:	2800      	cmp	r0, #0
  4016fc:	bf18      	it	ne
  4016fe:	2900      	cmpne	r1, #0
  401700:	bf14      	ite	ne
  401702:	2001      	movne	r0, #1
  401704:	2000      	moveq	r0, #0
  401706:	22ba      	movs	r2, #186	; 0xba
  401708:	4952      	ldr	r1, [pc, #328]	; (401854 <_i2c_m_sync_transfer+0x160>)
  40170a:	4b53      	ldr	r3, [pc, #332]	; (401858 <_i2c_m_sync_transfer+0x164>)
  40170c:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  40170e:	8863      	ldrh	r3, [r4, #2]
  401710:	f413 7f80 	tst.w	r3, #256	; 0x100
  401714:	f040 809a 	bne.w	40184c <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401718:	886b      	ldrh	r3, [r5, #2]
  40171a:	f013 0f01 	tst.w	r3, #1
  40171e:	d118      	bne.n	401752 <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401720:	886b      	ldrh	r3, [r5, #2]
  401722:	b29b      	uxth	r3, r3
  401724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401728:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  40172a:	882b      	ldrh	r3, [r5, #0]
  40172c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401730:	d05f      	beq.n	4017f2 <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  401732:	6922      	ldr	r2, [r4, #16]
  401734:	0a1b      	lsrs	r3, r3, #8
  401736:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40173a:	041b      	lsls	r3, r3, #16
  40173c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  401744:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401746:	6923      	ldr	r3, [r4, #16]
  401748:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  40174a:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  40174c:	2000      	movs	r0, #0
  40174e:	4601      	mov	r1, r0
  401750:	e05c      	b.n	40180c <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  401752:	886b      	ldrh	r3, [r5, #2]
  401754:	b29b      	uxth	r3, r3
  401756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40175a:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  40175c:	882b      	ldrh	r3, [r5, #0]
  40175e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401762:	d022      	beq.n	4017aa <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  401764:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  401766:	0a1b      	lsrs	r3, r3, #8
  401768:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40176c:	041b      	lsls	r3, r3, #16
  40176e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401772:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  401776:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401778:	6923      	ldr	r3, [r4, #16]
  40177a:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  40177c:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  40177e:	6923      	ldr	r3, [r4, #16]
  401780:	686a      	ldr	r2, [r5, #4]
  401782:	2a01      	cmp	r2, #1
  401784:	d019      	beq.n	4017ba <_i2c_m_sync_transfer+0xc6>
  401786:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  401788:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  40178a:	2100      	movs	r1, #0
  40178c:	686b      	ldr	r3, [r5, #4]
  40178e:	4299      	cmp	r1, r3
  401790:	d222      	bcs.n	4017d8 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  401792:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  401794:	6a1a      	ldr	r2, [r3, #32]
  401796:	f012 0f02 	tst.w	r2, #2
  40179a:	d110      	bne.n	4017be <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  40179c:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  40179e:	f413 7f80 	tst.w	r3, #256	; 0x100
  4017a2:	d0f6      	beq.n	401792 <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  4017a4:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  4017a8:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  4017aa:	6922      	ldr	r2, [r4, #16]
  4017ac:	041b      	lsls	r3, r3, #16
  4017ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4017b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  4017b6:	6053      	str	r3, [r2, #4]
  4017b8:	e7e1      	b.n	40177e <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4017ba:	2203      	movs	r2, #3
  4017bc:	e7e4      	b.n	401788 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  4017be:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  4017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017c2:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  4017c4:	686b      	ldr	r3, [r5, #4]
  4017c6:	3b02      	subs	r3, #2
  4017c8:	4299      	cmp	r1, r3
  4017ca:	d001      	beq.n	4017d0 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  4017cc:	3101      	adds	r1, #1
  4017ce:	e7dd      	b.n	40178c <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  4017d0:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  4017d2:	2202      	movs	r2, #2
  4017d4:	601a      	str	r2, [r3, #0]
  4017d6:	e7f9      	b.n	4017cc <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  4017d8:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  4017da:	6a1b      	ldr	r3, [r3, #32]
  4017dc:	f013 0f01 	tst.w	r3, #1
  4017e0:	d0fa      	beq.n	4017d8 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  4017e2:	8863      	ldrh	r3, [r4, #2]
  4017e4:	b29b      	uxth	r3, r3
  4017e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4017ea:	b29b      	uxth	r3, r3
  4017ec:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  4017ee:	2000      	movs	r0, #0
  4017f0:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  4017f2:	6922      	ldr	r2, [r4, #16]
  4017f4:	041b      	lsls	r3, r3, #16
  4017f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  4017fa:	6053      	str	r3, [r2, #4]
  4017fc:	e7a6      	b.n	40174c <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  4017fe:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  401802:	b978      	cbnz	r0, 401824 <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  401804:	68ab      	ldr	r3, [r5, #8]
  401806:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  401808:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  40180a:	3101      	adds	r1, #1
  40180c:	686b      	ldr	r3, [r5, #4]
  40180e:	4299      	cmp	r1, r3
  401810:	d208      	bcs.n	401824 <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  401812:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  401814:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  401816:	f413 7f80 	tst.w	r3, #256	; 0x100
  40181a:	d1f0      	bne.n	4017fe <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  40181c:	f013 0f04 	tst.w	r3, #4
  401820:	d0f7      	beq.n	401812 <_i2c_m_sync_transfer+0x11e>
  401822:	e7ee      	b.n	401802 <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  401824:	886b      	ldrh	r3, [r5, #2]
  401826:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40182a:	d106      	bne.n	40183a <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  40182c:	8863      	ldrh	r3, [r4, #2]
  40182e:	b29b      	uxth	r3, r3
  401830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401834:	b29b      	uxth	r3, r3
  401836:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  401838:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  40183a:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  40183c:	2202      	movs	r2, #2
  40183e:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401840:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401842:	6a1b      	ldr	r3, [r3, #32]
  401844:	f013 0f01 	tst.w	r3, #1
  401848:	d0fa      	beq.n	401840 <_i2c_m_sync_transfer+0x14c>
  40184a:	e7ef      	b.n	40182c <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  40184c:	f06f 0005 	mvn.w	r0, #5
}
  401850:	bd38      	pop	{r3, r4, r5, pc}
  401852:	bf00      	nop
  401854:	00401c18 	.word	0x00401c18
  401858:	00400c55 	.word	0x00400c55

0040185c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
  40185c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
  40185e:	4604      	mov	r4, r0
  401860:	b168      	cbz	r0, 40187e <_wdt_init+0x22>
  401862:	6803      	ldr	r3, [r0, #0]
  401864:	b14b      	cbz	r3, 40187a <_wdt_init+0x1e>
  401866:	2001      	movs	r0, #1
  401868:	2233      	movs	r2, #51	; 0x33
  40186a:	4906      	ldr	r1, [pc, #24]	; (401884 <_wdt_init+0x28>)
  40186c:	4b06      	ldr	r3, [pc, #24]	; (401888 <_wdt_init+0x2c>)
  40186e:	4798      	blx	r3

	hri_wdt_write_MR_reg(dev->hw, (hri_wdt_mr_reg_t)WDT_CONFIGURATION);
  401870:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_wdt_write_MR_reg(const void *const hw, hri_wdt_mr_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR = data;
  401872:	4a06      	ldr	r2, [pc, #24]	; (40188c <_wdt_init+0x30>)
  401874:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
  401876:	2000      	movs	r0, #0
  401878:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
  40187a:	2000      	movs	r0, #0
  40187c:	e7f4      	b.n	401868 <_wdt_init+0xc>
  40187e:	2000      	movs	r0, #0
  401880:	e7f2      	b.n	401868 <_wdt_init+0xc>
  401882:	bf00      	nop
  401884:	00401c34 	.word	0x00401c34
  401888:	00400c55 	.word	0x00400c55
  40188c:	3fffafff 	.word	0x3fffafff

00401890 <timer_task_cb>:
static struct timer_task task_0;

int x=0;

static void timer_task_cb(const struct timer_task *const timer_task){
	x++;
  401890:	4a02      	ldr	r2, [pc, #8]	; (40189c <timer_task_cb+0xc>)
  401892:	6813      	ldr	r3, [r2, #0]
  401894:	3301      	adds	r3, #1
  401896:	6013      	str	r3, [r2, #0]
  401898:	4770      	bx	lr
  40189a:	bf00      	nop
  40189c:	2040009c 	.word	0x2040009c

004018a0 <main>:
}

int main(void)
{
  4018a0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4018a2:	4b11      	ldr	r3, [pc, #68]	; (4018e8 <main+0x48>)
  4018a4:	4798      	blx	r3
	
	task_0.interval = 1;
  4018a6:	4911      	ldr	r1, [pc, #68]	; (4018ec <main+0x4c>)
  4018a8:	2301      	movs	r3, #1
  4018aa:	60cb      	str	r3, [r1, #12]
	task_0.cb = timer_task_cb;
  4018ac:	4a10      	ldr	r2, [pc, #64]	; (4018f0 <main+0x50>)
  4018ae:	610a      	str	r2, [r1, #16]
	task_0.mode = TIMER_TASK_REPEAT;
  4018b0:	750b      	strb	r3, [r1, #20]
	
	timer_add_task(&TIMER_0, &task_0);
  4018b2:	4c10      	ldr	r4, [pc, #64]	; (4018f4 <main+0x54>)
  4018b4:	3104      	adds	r1, #4
  4018b6:	4620      	mov	r0, r4
  4018b8:	4b0f      	ldr	r3, [pc, #60]	; (4018f8 <main+0x58>)
  4018ba:	4798      	blx	r3
	timer_start(&TIMER_0);
  4018bc:	4620      	mov	r0, r4
  4018be:	4b0f      	ldr	r3, [pc, #60]	; (4018fc <main+0x5c>)
  4018c0:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		if(x == 1000){
  4018c2:	4b0a      	ldr	r3, [pc, #40]	; (4018ec <main+0x4c>)
  4018c4:	681b      	ldr	r3, [r3, #0]
  4018c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4018ca:	d1fa      	bne.n	4018c2 <main+0x22>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4018cc:	4a0c      	ldr	r2, [pc, #48]	; (401900 <main+0x60>)
  4018ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  4018d4:	43d9      	mvns	r1, r3
  4018d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  4018da:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4018dc:	6353      	str	r3, [r2, #52]	; 0x34
			gpio_toggle_pin_level(LED0);
			x=0;
  4018de:	2200      	movs	r2, #0
  4018e0:	4b02      	ldr	r3, [pc, #8]	; (4018ec <main+0x4c>)
  4018e2:	601a      	str	r2, [r3, #0]
  4018e4:	e7ed      	b.n	4018c2 <main+0x22>
  4018e6:	bf00      	nop
  4018e8:	004001c5 	.word	0x004001c5
  4018ec:	2040009c 	.word	0x2040009c
  4018f0:	00401891 	.word	0x00401891
  4018f4:	2040012c 	.word	0x2040012c
  4018f8:	00400bad 	.word	0x00400bad
  4018fc:	00400b71 	.word	0x00400b71
  401900:	400e1400 	.word	0x400e1400

00401904 <__libc_init_array>:
  401904:	b570      	push	{r4, r5, r6, lr}
  401906:	4e0d      	ldr	r6, [pc, #52]	; (40193c <__libc_init_array+0x38>)
  401908:	4c0d      	ldr	r4, [pc, #52]	; (401940 <__libc_init_array+0x3c>)
  40190a:	1ba4      	subs	r4, r4, r6
  40190c:	10a4      	asrs	r4, r4, #2
  40190e:	2500      	movs	r5, #0
  401910:	42a5      	cmp	r5, r4
  401912:	d109      	bne.n	401928 <__libc_init_array+0x24>
  401914:	4e0b      	ldr	r6, [pc, #44]	; (401944 <__libc_init_array+0x40>)
  401916:	4c0c      	ldr	r4, [pc, #48]	; (401948 <__libc_init_array+0x44>)
  401918:	f000 f998 	bl	401c4c <_init>
  40191c:	1ba4      	subs	r4, r4, r6
  40191e:	10a4      	asrs	r4, r4, #2
  401920:	2500      	movs	r5, #0
  401922:	42a5      	cmp	r5, r4
  401924:	d105      	bne.n	401932 <__libc_init_array+0x2e>
  401926:	bd70      	pop	{r4, r5, r6, pc}
  401928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40192c:	4798      	blx	r3
  40192e:	3501      	adds	r5, #1
  401930:	e7ee      	b.n	401910 <__libc_init_array+0xc>
  401932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401936:	4798      	blx	r3
  401938:	3501      	adds	r5, #1
  40193a:	e7f2      	b.n	401922 <__libc_init_array+0x1e>
  40193c:	00401c58 	.word	0x00401c58
  401940:	00401c58 	.word	0x00401c58
  401944:	00401c58 	.word	0x00401c58
  401948:	00401c5c 	.word	0x00401c5c
  40194c:	682f2e2e 	.word	0x682f2e2e
  401950:	692f6c61 	.word	0x692f6c61
  401954:	756c636e 	.word	0x756c636e
  401958:	682f6564 	.word	0x682f6564
  40195c:	775f6c61 	.word	0x775f6c61
  401960:	682e7464 	.word	0x682e7464
  401964:	00000000 	.word	0x00000000
  401968:	682f2e2e 	.word	0x682f2e2e
  40196c:	732f6c61 	.word	0x732f6c61
  401970:	682f6372 	.word	0x682f6372
  401974:	615f6c61 	.word	0x615f6c61
  401978:	735f6364 	.word	0x735f6364
  40197c:	2e636e79 	.word	0x2e636e79
  401980:	00000063 	.word	0x00000063
  401984:	682f2e2e 	.word	0x682f2e2e
  401988:	732f6c61 	.word	0x732f6c61
  40198c:	682f6372 	.word	0x682f6372
  401990:	695f6c61 	.word	0x695f6c61
  401994:	6d5f6332 	.word	0x6d5f6332
  401998:	6e79735f 	.word	0x6e79735f
  40199c:	00632e63 	.word	0x00632e63
  4019a0:	682f2e2e 	.word	0x682f2e2e
  4019a4:	732f6c61 	.word	0x732f6c61
  4019a8:	682f6372 	.word	0x682f6372
  4019ac:	705f6c61 	.word	0x705f6c61
  4019b0:	632e6d77 	.word	0x632e6d77
  4019b4:	00000000 	.word	0x00000000
  4019b8:	682f2e2e 	.word	0x682f2e2e
  4019bc:	732f6c61 	.word	0x732f6c61
  4019c0:	682f6372 	.word	0x682f6372
  4019c4:	735f6c61 	.word	0x735f6c61
  4019c8:	6d5f6970 	.word	0x6d5f6970
  4019cc:	6e79735f 	.word	0x6e79735f
  4019d0:	00632e63 	.word	0x00632e63
  4019d4:	682f2e2e 	.word	0x682f2e2e
  4019d8:	732f6c61 	.word	0x732f6c61
  4019dc:	682f6372 	.word	0x682f6372
  4019e0:	745f6c61 	.word	0x745f6c61
  4019e4:	72656d69 	.word	0x72656d69
  4019e8:	0000632e 	.word	0x0000632e
  4019ec:	682f2e2e 	.word	0x682f2e2e
  4019f0:	752f6c61 	.word	0x752f6c61
  4019f4:	736c6974 	.word	0x736c6974
  4019f8:	6372732f 	.word	0x6372732f
  4019fc:	6974752f 	.word	0x6974752f
  401a00:	6c5f736c 	.word	0x6c5f736c
  401a04:	2e747369 	.word	0x2e747369
  401a08:	00000063 	.word	0x00000063

00401a0c <_afecs>:
  401a0c:	00000000 2f843100 03000000 ffffffff     .....1./........
  401a1c:	0000ffff 00000000 00000000 00000000     ................
  401a2c:	0000010c 00000000 00000000 00000000     ................
  401a3c:	00000000 00000200 00000200 00000200     ................
  401a4c:	00000200 00000200 00000200 00000200     ................
  401a5c:	00000200 00000200 00000200 00000200     ................
  401a6c:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  401a7c:	5f6c7068 63656661 0000632e              hpl_afec.c..

00401a88 <_ext_irq>:
  401a88:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  401a98:	00000000 03c00000 00008020 00000001     ........ .......
  401aa8:	00000002 000000f2 000000f2 00000000     ................
  401ab8:	000000f0 00000002                       ........

00401ac0 <_pio_irq_n>:
  401ac0:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  401ad0:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

00401ae0 <_pwms>:
  401ae0:	40020000 0000001f 00010001 00000001     ...@............
  401af0:	00000001 000000ff 00000000 00000004     ................
	...
  401b0c:	00000004 00401b68 00000000 2040008c     ....h.@.......@ 
  401b1c:	4005c000 0000003c 00010001 00000001     ...@<...........
  401b2c:	00000001 000000ff 00000000 00000004     ................
	...
  401b48:	00000001 00401b58 00000000 20400080     ....X.@.......@ 

00401b58 <_ch_cfg1>:
  401b58:	00000000 00000208 00000400 00000200     ................

00401b68 <_ch_cfg0>:
  401b68:	00000000 00000208 00000400 00000200     ................
  401b78:	00000001 00000208 00000400 00000200     ................
  401b88:	00000002 00000208 00000400 00000200     ................
  401b98:	00000003 00000208 00000400 00000200     ................
  401ba8:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  401bb8:	632e6d77 00000000                       wm.c....

00401bc0 <spi_regs>:
  401bc0:	00000000 80000000 00000001 0496fa02     ................
  401bd0:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401be0:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401bf0:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00401c00 <_i2cm_sync_cfgs>:
  401c00:	40018000 00000020 00000000 00000000     ...@ ...........
  401c10:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  401c20:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  401c30:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  401c40:	775f6c70 632e7464 00000000              pl_wdt.c....

00401c4c <_init>:
  401c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c4e:	bf00      	nop
  401c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401c52:	bc08      	pop	{r3}
  401c54:	469e      	mov	lr, r3
  401c56:	4770      	bx	lr

00401c58 <__init_array_start>:
  401c58:	0040017d 	.word	0x0040017d

00401c5c <_fini>:
  401c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c5e:	bf00      	nop
  401c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401c62:	bc08      	pop	{r3}
  401c64:	469e      	mov	lr, r3
  401c66:	4770      	bx	lr

00401c68 <__fini_array_start>:
  401c68:	00400159 	.word	0x00400159
