
Robot_Firmware_v17.8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003298  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20400000  00403298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b4  20400050  004032e8  00020050  2**3
                  ALLOC
  3 .heap         00000204  20400204  0040349c  00020050  2**0
                  ALLOC
  4 .stack        00000400  20400408  004036a0  00020050  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024b45  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b95  00000000  00000000  00044c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cd13  00000000  00000000  000497b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000de8  00000000  00000000  000564c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d08  00000000  00000000  000572ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003ccb9  00000000  00000000  00057fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d7a2  00000000  00000000  00094c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00123cf9  00000000  00000000  000b240f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002358  00000000  00000000  001d6108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 08 40 20 5d 02 40 00 59 02 40 00 59 02 40 00     ..@ ].@.Y.@.Y.@.
  400010:	59 02 40 00 59 02 40 00 59 02 40 00 00 00 00 00     Y.@.Y.@.Y.@.....
	...
  40002c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40003c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40004c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40005c:	59 02 40 00 59 02 40 00 00 00 00 00 7d 16 40 00     Y.@.Y.@.....}.@.
  40006c:	71 16 40 00 00 00 00 00 59 02 40 00 59 02 40 00     q.@.....Y.@.Y.@.
  40007c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40008c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40009c:	dd 1d 40 00 59 02 40 00 59 02 40 00 f1 1d 40 00     ..@.Y.@.Y.@...@.
  4000ac:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  4000bc:	41 18 40 00 59 02 40 00 59 02 40 00 59 02 40 00     A.@.Y.@.Y.@.Y.@.
	...
  4000e0:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  4000f0:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400100:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400110:	59 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00     Y.@.............
  400120:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400130:	55 18 40 00 59 02 40 00 00 00 00 00 59 02 40 00     U.@.Y.@.....Y.@.
  400140:	59 02 40 00 59 02 40 00 00 00 00 00 00 00 00 00     Y.@.Y.@.........
  400150:	59 02 40 00 59 02 40 00                             Y.@.Y.@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	20400050 	.word	0x20400050
  400174:	00000000 	.word	0x00000000
  400178:	00403298 	.word	0x00403298

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	00403298 	.word	0x00403298
  4001b8:	20400054 	.word	0x20400054
  4001bc:	00403298 	.word	0x00403298
  4001c0:	00000000 	.word	0x00000000

004001c4 <adc_init>:
 *  Author: bensc
 */ 

#include "ADC_driver.h"

void adc_init(){ //initializes the ADCs
  4001c4:	b538      	push	{r3, r4, r5, lr}
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_CURRENT);
  4001c6:	4d06      	ldr	r5, [pc, #24]	; (4001e0 <adc_init+0x1c>)
  4001c8:	2100      	movs	r1, #0
  4001ca:	4628      	mov	r0, r5
  4001cc:	4c05      	ldr	r4, [pc, #20]	; (4001e4 <adc_init+0x20>)
  4001ce:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_VOLTAGE);
  4001d0:	2105      	movs	r1, #5
  4001d2:	4628      	mov	r0, r5
  4001d4:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_CAP_CHARGE);
  4001d6:	2107      	movs	r1, #7
  4001d8:	4628      	mov	r0, r5
  4001da:	47a0      	blx	r4
  4001dc:	bd38      	pop	{r3, r4, r5, pc}
  4001de:	bf00      	nop
  4001e0:	20400140 	.word	0x20400140
  4001e4:	00400aad 	.word	0x00400aad

004001e8 <adc_read>:
}

void adc_read(float *adc_value, uint8_t channel){ //reads chosen ADC channel and stores in float
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
  4001ec:	4604      	mov	r4, r0
	uint8_t adc_buff[2];
	adc_sync_read_channel(&ADC_0, channel, &adc_buff[0], 2);
  4001ee:	2302      	movs	r3, #2
  4001f0:	aa01      	add	r2, sp, #4
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <adc_read+0x50>)
  4001f4:	4d11      	ldr	r5, [pc, #68]	; (40023c <adc_read+0x54>)
  4001f6:	47a8      	blx	r5
	*adc_value = (3.3/4095) * (float)(adc_buff[0] + ((adc_buff[1] & 0x0F) << 8)); //converts 12-bit ADC value to Voltage
  4001f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4001fc:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400200:	0200      	lsls	r0, r0, #8
  400202:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  400206:	4418      	add	r0, r3
  400208:	ee07 0a90 	vmov	s15, r0
  40020c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400210:	ee17 0a90 	vmov	r0, s15
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <adc_read+0x58>)
  400216:	4798      	blx	r3
  400218:	a305      	add	r3, pc, #20	; (adr r3, 400230 <adc_read+0x48>)
  40021a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <adc_read+0x5c>)
  400220:	47a8      	blx	r5
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <adc_read+0x60>)
  400224:	4798      	blx	r3
  400226:	6020      	str	r0, [r4, #0]
  400228:	b003      	add	sp, #12
  40022a:	bd30      	pop	{r4, r5, pc}
  40022c:	f3af 8000 	nop.w
  400230:	e734d9b4 	.word	0xe734d9b4
  400234:	3f4a680c 	.word	0x3f4a680c
  400238:	20400140 	.word	0x20400140
  40023c:	00400ad9 	.word	0x00400ad9
  400240:	00402999 	.word	0x00402999
  400244:	00402a41 	.word	0x00402a41
  400248:	00402e65 	.word	0x00402e65

0040024c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  40024c:	b508      	push	{r3, lr}
	system_init();
  40024e:	4b01      	ldr	r3, [pc, #4]	; (400254 <atmel_start_init+0x8>)
  400250:	4798      	blx	r3
  400252:	bd08      	pop	{r3, pc}
  400254:	0040074d 	.word	0x0040074d

00400258 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400258:	e7fe      	b.n	400258 <Dummy_Handler>
	...

0040025c <Reset_Handler>:
{
  40025c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40025e:	4b10      	ldr	r3, [pc, #64]	; (4002a0 <Reset_Handler+0x44>)
  400260:	4a10      	ldr	r2, [pc, #64]	; (4002a4 <Reset_Handler+0x48>)
  400262:	429a      	cmp	r2, r3
  400264:	d009      	beq.n	40027a <Reset_Handler+0x1e>
  400266:	4b0e      	ldr	r3, [pc, #56]	; (4002a0 <Reset_Handler+0x44>)
  400268:	4a0e      	ldr	r2, [pc, #56]	; (4002a4 <Reset_Handler+0x48>)
  40026a:	e003      	b.n	400274 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40026c:	6811      	ldr	r1, [r2, #0]
  40026e:	6019      	str	r1, [r3, #0]
  400270:	3304      	adds	r3, #4
  400272:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400274:	490c      	ldr	r1, [pc, #48]	; (4002a8 <Reset_Handler+0x4c>)
  400276:	428b      	cmp	r3, r1
  400278:	d3f8      	bcc.n	40026c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40027a:	4b0c      	ldr	r3, [pc, #48]	; (4002ac <Reset_Handler+0x50>)
  40027c:	e002      	b.n	400284 <Reset_Handler+0x28>
                *pDest++ = 0;
  40027e:	2200      	movs	r2, #0
  400280:	601a      	str	r2, [r3, #0]
  400282:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400284:	4a0a      	ldr	r2, [pc, #40]	; (4002b0 <Reset_Handler+0x54>)
  400286:	4293      	cmp	r3, r2
  400288:	d3f9      	bcc.n	40027e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40028a:	4a0a      	ldr	r2, [pc, #40]	; (4002b4 <Reset_Handler+0x58>)
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <Reset_Handler+0x5c>)
  40028e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400292:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400294:	4b09      	ldr	r3, [pc, #36]	; (4002bc <Reset_Handler+0x60>)
  400296:	4798      	blx	r3
        main();
  400298:	4b09      	ldr	r3, [pc, #36]	; (4002c0 <Reset_Handler+0x64>)
  40029a:	4798      	blx	r3
  40029c:	e7fe      	b.n	40029c <Reset_Handler+0x40>
  40029e:	bf00      	nop
  4002a0:	20400000 	.word	0x20400000
  4002a4:	00403298 	.word	0x00403298
  4002a8:	20400050 	.word	0x20400050
  4002ac:	20400050 	.word	0x20400050
  4002b0:	20400204 	.word	0x20400204
  4002b4:	e000ed00 	.word	0xe000ed00
  4002b8:	00400000 	.word	0x00400000
  4002bc:	00402f05 	.word	0x00402f05
  4002c0:	00402021 	.word	0x00402021

004002c4 <read_dipswitch>:
	return tmp;
}

static inline hri_pio_pdsr_reg_t hri_pio_read_PDSR_reg(const void *const hw)
{
	return ((Pio *)hw)->PIO_PDSR;
  4002c4:	4b1c      	ldr	r3, [pc, #112]	; (400338 <read_dipswitch+0x74>)
  4002c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

#include "dipswitch_and_LEDs.h"

uint8_t read_dipswitch(){
	uint8_t total_state = 0;
	if(gpio_get_pin_level(DipSwitch0)){
  4002c8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4002cc:	d132      	bne.n	400334 <read_dipswitch+0x70>
	uint8_t total_state = 0;
  4002ce:	2000      	movs	r0, #0
  4002d0:	4b19      	ldr	r3, [pc, #100]	; (400338 <read_dipswitch+0x74>)
  4002d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		total_state |= 0b00000001;
	}
	if(gpio_get_pin_level(DipSwitch1)){
  4002d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4002d8:	d001      	beq.n	4002de <read_dipswitch+0x1a>
		total_state |= 0b00000010;
  4002da:	f040 0002 	orr.w	r0, r0, #2
  4002de:	4b16      	ldr	r3, [pc, #88]	; (400338 <read_dipswitch+0x74>)
  4002e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch2)){
  4002e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4002e6:	d001      	beq.n	4002ec <read_dipswitch+0x28>
		total_state |= 0b00000100;
  4002e8:	f040 0004 	orr.w	r0, r0, #4
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <read_dipswitch+0x74>)
  4002ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch3)){
  4002f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4002f4:	d001      	beq.n	4002fa <read_dipswitch+0x36>
		total_state |= 0b00001000;
  4002f6:	f040 0008 	orr.w	r0, r0, #8
  4002fa:	4b0f      	ldr	r3, [pc, #60]	; (400338 <read_dipswitch+0x74>)
  4002fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch4)){
  4002fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400302:	d001      	beq.n	400308 <read_dipswitch+0x44>
		total_state |= 0b00010000;
  400304:	f040 0010 	orr.w	r0, r0, #16
  400308:	4b0b      	ldr	r3, [pc, #44]	; (400338 <read_dipswitch+0x74>)
  40030a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch5)){
  40030c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400310:	d001      	beq.n	400316 <read_dipswitch+0x52>
		total_state |= 0b00100000;
  400312:	f040 0020 	orr.w	r0, r0, #32
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <read_dipswitch+0x74>)
  400318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch6)){
  40031a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  40031e:	d001      	beq.n	400324 <read_dipswitch+0x60>
		total_state |= 0b01000000;
  400320:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  400324:	4b04      	ldr	r3, [pc, #16]	; (400338 <read_dipswitch+0x74>)
  400326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
	if(gpio_get_pin_level(DipSwitch7)){
  400328:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  40032c:	d001      	beq.n	400332 <read_dipswitch+0x6e>
		total_state |= 0b10000000;
  40032e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	}
	
	return total_state;
}
  400332:	4770      	bx	lr
		total_state |= 0b00000001;
  400334:	2001      	movs	r0, #1
  400336:	e7cb      	b.n	4002d0 <read_dipswitch+0xc>
  400338:	400e1400 	.word	0x400e1400

0040033c <set_LEDs>:
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	void *const hw = port_to_reg(port);
	if (level) {
  40033c:	f010 0f01 	tst.w	r0, #1
  400340:	d018      	beq.n	400374 <set_LEDs+0x38>
	((Pio *)hw)->PIO_SODR = mask;
  400342:	2280      	movs	r2, #128	; 0x80
  400344:	4b15      	ldr	r3, [pc, #84]	; (40039c <set_LEDs+0x60>)
  400346:	631a      	str	r2, [r3, #48]	; 0x30
  400348:	f010 0f02 	tst.w	r0, #2
  40034c:	d016      	beq.n	40037c <set_LEDs+0x40>
  40034e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400352:	4b12      	ldr	r3, [pc, #72]	; (40039c <set_LEDs+0x60>)
  400354:	631a      	str	r2, [r3, #48]	; 0x30
  400356:	f010 0f04 	tst.w	r0, #4
  40035a:	d014      	beq.n	400386 <set_LEDs+0x4a>
  40035c:	f44f 7200 	mov.w	r2, #512	; 0x200
  400360:	4b0e      	ldr	r3, [pc, #56]	; (40039c <set_LEDs+0x60>)
  400362:	631a      	str	r2, [r3, #48]	; 0x30
  400364:	f010 0f08 	tst.w	r0, #8
  400368:	d112      	bne.n	400390 <set_LEDs+0x54>
	((Pio *)hw)->PIO_CODR = mask;
  40036a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40036e:	4b0b      	ldr	r3, [pc, #44]	; (40039c <set_LEDs+0x60>)
  400370:	635a      	str	r2, [r3, #52]	; 0x34
  400372:	4770      	bx	lr
  400374:	2280      	movs	r2, #128	; 0x80
  400376:	4b09      	ldr	r3, [pc, #36]	; (40039c <set_LEDs+0x60>)
  400378:	635a      	str	r2, [r3, #52]	; 0x34
  40037a:	e7e5      	b.n	400348 <set_LEDs+0xc>
  40037c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400380:	4b06      	ldr	r3, [pc, #24]	; (40039c <set_LEDs+0x60>)
  400382:	635a      	str	r2, [r3, #52]	; 0x34
  400384:	e7e7      	b.n	400356 <set_LEDs+0x1a>
  400386:	f44f 7200 	mov.w	r2, #512	; 0x200
  40038a:	4b04      	ldr	r3, [pc, #16]	; (40039c <set_LEDs+0x60>)
  40038c:	635a      	str	r2, [r3, #52]	; 0x34
  40038e:	e7e9      	b.n	400364 <set_LEDs+0x28>
	((Pio *)hw)->PIO_SODR = mask;
  400390:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400394:	4b01      	ldr	r3, [pc, #4]	; (40039c <set_LEDs+0x60>)
  400396:	631a      	str	r2, [r3, #48]	; 0x30
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	400e1400 	.word	0x400e1400

004003a0 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  4003a0:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003a2:	4b08      	ldr	r3, [pc, #32]	; (4003c4 <TIMER_0_init+0x24>)
  4003a4:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4003a6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4003aa:	d103      	bne.n	4003b4 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003b0:	4b04      	ldr	r3, [pc, #16]	; (4003c4 <TIMER_0_init+0x24>)
  4003b2:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  4003b4:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <TIMER_0_init+0x28>)
  4003b6:	4798      	blx	r3
  4003b8:	4602      	mov	r2, r0
  4003ba:	4904      	ldr	r1, [pc, #16]	; (4003cc <TIMER_0_init+0x2c>)
  4003bc:	4804      	ldr	r0, [pc, #16]	; (4003d0 <TIMER_0_init+0x30>)
  4003be:	4b05      	ldr	r3, [pc, #20]	; (4003d4 <TIMER_0_init+0x34>)
  4003c0:	4798      	blx	r3
  4003c2:	bd08      	pop	{r3, pc}
  4003c4:	400e0600 	.word	0x400e0600
  4003c8:	00401dd9 	.word	0x00401dd9
  4003cc:	4000c000 	.word	0x4000c000
  4003d0:	204001b8 	.word	0x204001b8
  4003d4:	004010f9 	.word	0x004010f9

004003d8 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
  4003d8:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003da:	4b08      	ldr	r3, [pc, #32]	; (4003fc <TIMER_1_init+0x24>)
  4003dc:	699b      	ldr	r3, [r3, #24]
  4003de:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4003e2:	d103      	bne.n	4003ec <TIMER_1_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4003e8:	4b04      	ldr	r3, [pc, #16]	; (4003fc <TIMER_1_init+0x24>)
  4003ea:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	TIMER_1_PORT_init();
	timer_init(&TIMER_1, TC1, _tc_get_timer());
  4003ec:	4b04      	ldr	r3, [pc, #16]	; (400400 <TIMER_1_init+0x28>)
  4003ee:	4798      	blx	r3
  4003f0:	4602      	mov	r2, r0
  4003f2:	4904      	ldr	r1, [pc, #16]	; (400404 <TIMER_1_init+0x2c>)
  4003f4:	4804      	ldr	r0, [pc, #16]	; (400408 <TIMER_1_init+0x30>)
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <TIMER_1_init+0x34>)
  4003f8:	4798      	blx	r3
  4003fa:	bd08      	pop	{r3, pc}
  4003fc:	400e0600 	.word	0x400e0600
  400400:	00401dd9 	.word	0x00401dd9
  400404:	40010000 	.word	0x40010000
  400408:	20400148 	.word	0x20400148
  40040c:	004010f9 	.word	0x004010f9

00400410 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PER = mask;
  400410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400414:	4b05      	ldr	r3, [pc, #20]	; (40042c <ADC_0_PORT_init+0x1c>)
  400416:	601a      	str	r2, [r3, #0]
  400418:	2204      	movs	r2, #4
  40041a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40041e:	601a      	str	r2, [r3, #0]
  400420:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400424:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  400428:	601a      	str	r2, [r3, #0]
  40042a:	4770      	bx	lr
  40042c:	400e1400 	.word	0x400e1400

00400430 <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400430:	4b04      	ldr	r3, [pc, #16]	; (400444 <ADC_0_CLOCK_init+0x14>)
  400432:	699b      	ldr	r3, [r3, #24]
  400434:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400438:	d103      	bne.n	400442 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40043a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40043e:	4b01      	ldr	r3, [pc, #4]	; (400444 <ADC_0_CLOCK_init+0x14>)
  400440:	611a      	str	r2, [r3, #16]
  400442:	4770      	bx	lr
  400444:	400e0600 	.word	0x400e0600

00400448 <ADC_0_init>:
{
  400448:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40044a:	4b05      	ldr	r3, [pc, #20]	; (400460 <ADC_0_init+0x18>)
  40044c:	4798      	blx	r3
	ADC_0_PORT_init();
  40044e:	4b05      	ldr	r3, [pc, #20]	; (400464 <ADC_0_init+0x1c>)
  400450:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400452:	2200      	movs	r2, #0
  400454:	4904      	ldr	r1, [pc, #16]	; (400468 <ADC_0_init+0x20>)
  400456:	4805      	ldr	r0, [pc, #20]	; (40046c <ADC_0_init+0x24>)
  400458:	4b05      	ldr	r3, [pc, #20]	; (400470 <ADC_0_init+0x28>)
  40045a:	4798      	blx	r3
  40045c:	bd08      	pop	{r3, pc}
  40045e:	bf00      	nop
  400460:	00400431 	.word	0x00400431
  400464:	00400411 	.word	0x00400411
  400468:	4003c000 	.word	0x4003c000
  40046c:	20400140 	.word	0x20400140
  400470:	00400a7d 	.word	0x00400a7d

00400474 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400474:	4b03      	ldr	r3, [pc, #12]	; (400484 <EXTERNAL_IRQ_1_init+0x10>)
  400476:	2202      	movs	r2, #2
  400478:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40047a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400480:	601a      	str	r2, [r3, #0]
  400482:	4770      	bx	lr
  400484:	400e1000 	.word	0x400e1000

00400488 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400488:	4b12      	ldr	r3, [pc, #72]	; (4004d4 <EXTERNAL_IRQ_0_init+0x4c>)
  40048a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40048e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400490:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400496:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40049c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40049e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004a4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4004a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4004aa:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4004ac:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004b2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4004b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4004b8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4004ba:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004c0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4004c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004c6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4004c8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004ce:	601a      	str	r2, [r3, #0]
  4004d0:	4770      	bx	lr
  4004d2:	bf00      	nop
  4004d4:	400e0e00 	.word	0x400e0e00

004004d8 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004d8:	4b17      	ldr	r3, [pc, #92]	; (400538 <PWM_0_PORT_init+0x60>)
  4004da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4004e0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4004e8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4004ee:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004f0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4004f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004f6:	f022 0204 	bic.w	r2, r2, #4
  4004fa:	671a      	str	r2, [r3, #112]	; 0x70
  4004fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004fe:	f022 0204 	bic.w	r2, r2, #4
  400502:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400504:	2204      	movs	r2, #4
  400506:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40050a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40050e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400510:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400516:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40051c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400520:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400524:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400526:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400528:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40052c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40052e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400532:	605a      	str	r2, [r3, #4]
  400534:	4770      	bx	lr
  400536:	bf00      	nop
  400538:	400e1400 	.word	0x400e1400

0040053c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40053c:	4b04      	ldr	r3, [pc, #16]	; (400550 <PWM_0_CLOCK_init+0x14>)
  40053e:	699b      	ldr	r3, [r3, #24]
  400540:	2b00      	cmp	r3, #0
  400542:	db03      	blt.n	40054c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400544:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400548:	4b01      	ldr	r3, [pc, #4]	; (400550 <PWM_0_CLOCK_init+0x14>)
  40054a:	611a      	str	r2, [r3, #16]
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	400e0600 	.word	0x400e0600

00400554 <PWM_0_init>:
{
  400554:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400556:	4b06      	ldr	r3, [pc, #24]	; (400570 <PWM_0_init+0x1c>)
  400558:	4798      	blx	r3
	PWM_0_PORT_init();
  40055a:	4b06      	ldr	r3, [pc, #24]	; (400574 <PWM_0_init+0x20>)
  40055c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40055e:	4b06      	ldr	r3, [pc, #24]	; (400578 <PWM_0_init+0x24>)
  400560:	4798      	blx	r3
  400562:	4602      	mov	r2, r0
  400564:	4905      	ldr	r1, [pc, #20]	; (40057c <PWM_0_init+0x28>)
  400566:	4806      	ldr	r0, [pc, #24]	; (400580 <PWM_0_init+0x2c>)
  400568:	4b06      	ldr	r3, [pc, #24]	; (400584 <PWM_0_init+0x30>)
  40056a:	4798      	blx	r3
  40056c:	bd08      	pop	{r3, pc}
  40056e:	bf00      	nop
  400570:	0040053d 	.word	0x0040053d
  400574:	004004d9 	.word	0x004004d9
  400578:	00401a15 	.word	0x00401a15
  40057c:	40020000 	.word	0x40020000
  400580:	20400124 	.word	0x20400124
  400584:	00400e45 	.word	0x00400e45

00400588 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400588:	4b06      	ldr	r3, [pc, #24]	; (4005a4 <PWM_1_PORT_init+0x1c>)
  40058a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40058c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400590:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400592:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400598:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40059a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40059e:	605a      	str	r2, [r3, #4]
  4005a0:	4770      	bx	lr
  4005a2:	bf00      	nop
  4005a4:	400e0e00 	.word	0x400e0e00

004005a8 <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005a8:	4b05      	ldr	r3, [pc, #20]	; (4005c0 <PWM_1_CLOCK_init+0x18>)
  4005aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4005ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4005b2:	d104      	bne.n	4005be <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4005b8:	4b01      	ldr	r3, [pc, #4]	; (4005c0 <PWM_1_CLOCK_init+0x18>)
  4005ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4005be:	4770      	bx	lr
  4005c0:	400e0600 	.word	0x400e0600

004005c4 <PWM_1_init>:
{
  4005c4:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <PWM_1_init+0x1c>)
  4005c8:	4798      	blx	r3
	PWM_1_PORT_init();
  4005ca:	4b06      	ldr	r3, [pc, #24]	; (4005e4 <PWM_1_init+0x20>)
  4005cc:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  4005ce:	4b06      	ldr	r3, [pc, #24]	; (4005e8 <PWM_1_init+0x24>)
  4005d0:	4798      	blx	r3
  4005d2:	4602      	mov	r2, r0
  4005d4:	4905      	ldr	r1, [pc, #20]	; (4005ec <PWM_1_init+0x28>)
  4005d6:	4806      	ldr	r0, [pc, #24]	; (4005f0 <PWM_1_init+0x2c>)
  4005d8:	4b06      	ldr	r3, [pc, #24]	; (4005f4 <PWM_1_init+0x30>)
  4005da:	4798      	blx	r3
  4005dc:	bd08      	pop	{r3, pc}
  4005de:	bf00      	nop
  4005e0:	004005a9 	.word	0x004005a9
  4005e4:	00400589 	.word	0x00400589
  4005e8:	00401a15 	.word	0x00401a15
  4005ec:	4005c000 	.word	0x4005c000
  4005f0:	2040017c 	.word	0x2040017c
  4005f4:	00400e45 	.word	0x00400e45

004005f8 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005f8:	4b11      	ldr	r3, [pc, #68]	; (400640 <SPI_0_PORT_init+0x48>)
  4005fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400600:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400602:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400604:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400608:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40060a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40060e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400612:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  400616:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400618:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40061a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40061e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400620:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400624:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400628:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  40062c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40062e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400630:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400634:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400636:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40063a:	605a      	str	r2, [r3, #4]
  40063c:	4770      	bx	lr
  40063e:	bf00      	nop
  400640:	400e1400 	.word	0x400e1400

00400644 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400644:	4b04      	ldr	r3, [pc, #16]	; (400658 <SPI_0_CLOCK_init+0x14>)
  400646:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400648:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  40064c:	d103      	bne.n	400656 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40064e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400652:	4b01      	ldr	r3, [pc, #4]	; (400658 <SPI_0_CLOCK_init+0x14>)
  400654:	611a      	str	r2, [r3, #16]
  400656:	4770      	bx	lr
  400658:	400e0600 	.word	0x400e0600

0040065c <SPI_0_init>:
{
  40065c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  40065e:	4b08      	ldr	r3, [pc, #32]	; (400680 <SPI_0_init+0x24>)
  400660:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400662:	4b08      	ldr	r3, [pc, #32]	; (400684 <SPI_0_init+0x28>)
  400664:	4798      	blx	r3
  400666:	4c08      	ldr	r4, [pc, #32]	; (400688 <SPI_0_init+0x2c>)
  400668:	4601      	mov	r1, r0
  40066a:	4620      	mov	r0, r4
  40066c:	4b07      	ldr	r3, [pc, #28]	; (40068c <SPI_0_init+0x30>)
  40066e:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400670:	4907      	ldr	r1, [pc, #28]	; (400690 <SPI_0_init+0x34>)
  400672:	4620      	mov	r0, r4
  400674:	4b07      	ldr	r3, [pc, #28]	; (400694 <SPI_0_init+0x38>)
  400676:	4798      	blx	r3
	SPI_0_PORT_init();
  400678:	4b07      	ldr	r3, [pc, #28]	; (400698 <SPI_0_init+0x3c>)
  40067a:	4798      	blx	r3
  40067c:	bd10      	pop	{r4, pc}
  40067e:	bf00      	nop
  400680:	00400645 	.word	0x00400645
  400684:	00401c15 	.word	0x00401c15
  400688:	20400164 	.word	0x20400164
  40068c:	00400ec5 	.word	0x00400ec5
  400690:	40008000 	.word	0x40008000
  400694:	00400ee5 	.word	0x00400ee5
  400698:	004005f9 	.word	0x004005f9

0040069c <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40069c:	4b0a      	ldr	r3, [pc, #40]	; (4006c8 <I2C_0_PORT_init+0x2c>)
  40069e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006a0:	f022 0210 	bic.w	r2, r2, #16
  4006a4:	671a      	str	r2, [r3, #112]	; 0x70
  4006a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006a8:	f022 0210 	bic.w	r2, r2, #16
  4006ac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006ae:	2210      	movs	r2, #16
  4006b0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b4:	f022 0208 	bic.w	r2, r2, #8
  4006b8:	671a      	str	r2, [r3, #112]	; 0x70
  4006ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006bc:	f022 0208 	bic.w	r2, r2, #8
  4006c0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006c2:	2208      	movs	r2, #8
  4006c4:	605a      	str	r2, [r3, #4]
  4006c6:	4770      	bx	lr
  4006c8:	400e0e00 	.word	0x400e0e00

004006cc <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <I2C_0_CLOCK_init+0x14>)
  4006ce:	699b      	ldr	r3, [r3, #24]
  4006d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4006d4:	d103      	bne.n	4006de <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006da:	4b01      	ldr	r3, [pc, #4]	; (4006e0 <I2C_0_CLOCK_init+0x14>)
  4006dc:	611a      	str	r2, [r3, #16]
  4006de:	4770      	bx	lr
  4006e0:	400e0600 	.word	0x400e0600

004006e4 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  4006e4:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <I2C_0_init+0x14>)
  4006e8:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  4006ea:	4904      	ldr	r1, [pc, #16]	; (4006fc <I2C_0_init+0x18>)
  4006ec:	4804      	ldr	r0, [pc, #16]	; (400700 <I2C_0_init+0x1c>)
  4006ee:	4b05      	ldr	r3, [pc, #20]	; (400704 <I2C_0_init+0x20>)
  4006f0:	4798      	blx	r3

	I2C_0_PORT_init();
  4006f2:	4b05      	ldr	r3, [pc, #20]	; (400708 <I2C_0_init+0x24>)
  4006f4:	4798      	blx	r3
  4006f6:	bd08      	pop	{r3, pc}
  4006f8:	004006cd 	.word	0x004006cd
  4006fc:	40018000 	.word	0x40018000
  400700:	20400198 	.word	0x20400198
  400704:	00400d91 	.word	0x00400d91
  400708:	0040069d 	.word	0x0040069d

0040070c <delay_driver_init>:
}

void delay_driver_init(void)
{
  40070c:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40070e:	4802      	ldr	r0, [pc, #8]	; (400718 <delay_driver_init+0xc>)
  400710:	4b02      	ldr	r3, [pc, #8]	; (40071c <delay_driver_init+0x10>)
  400712:	4798      	blx	r3
  400714:	bd08      	pop	{r3, pc}
  400716:	bf00      	nop
  400718:	e000e010 	.word	0xe000e010
  40071c:	00400b95 	.word	0x00400b95

00400720 <WDT_0_init>:
}

void WDT_0_init(void)
{
  400720:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  400722:	2248      	movs	r2, #72	; 0x48
  400724:	4904      	ldr	r1, [pc, #16]	; (400738 <WDT_0_init+0x18>)
  400726:	2001      	movs	r0, #1
  400728:	4b04      	ldr	r3, [pc, #16]	; (40073c <WDT_0_init+0x1c>)
  40072a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  40072c:	4804      	ldr	r0, [pc, #16]	; (400740 <WDT_0_init+0x20>)
  40072e:	4b05      	ldr	r3, [pc, #20]	; (400744 <WDT_0_init+0x24>)
  400730:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  400732:	4b05      	ldr	r3, [pc, #20]	; (400748 <WDT_0_init+0x28>)
  400734:	4798      	blx	r3
  400736:	bd08      	pop	{r3, pc}
  400738:	00402f5c 	.word	0x00402f5c
  40073c:	00401219 	.word	0x00401219
  400740:	20400144 	.word	0x20400144
  400744:	400e1850 	.word	0x400e1850
  400748:	00401fed 	.word	0x00401fed

0040074c <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  40074c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40074e:	4b67      	ldr	r3, [pc, #412]	; (4008ec <system_init+0x1a0>)
  400750:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400752:	4b67      	ldr	r3, [pc, #412]	; (4008f0 <system_init+0x1a4>)
  400754:	699b      	ldr	r3, [r3, #24]
  400756:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40075a:	d103      	bne.n	400764 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400760:	4b63      	ldr	r3, [pc, #396]	; (4008f0 <system_init+0x1a4>)
  400762:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400764:	4b62      	ldr	r3, [pc, #392]	; (4008f0 <system_init+0x1a4>)
  400766:	699b      	ldr	r3, [r3, #24]
  400768:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40076c:	d103      	bne.n	400776 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40076e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400772:	4b5f      	ldr	r3, [pc, #380]	; (4008f0 <system_init+0x1a4>)
  400774:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400776:	4b5e      	ldr	r3, [pc, #376]	; (4008f0 <system_init+0x1a4>)
  400778:	699b      	ldr	r3, [r3, #24]
  40077a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40077e:	d103      	bne.n	400788 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400780:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400784:	4b5a      	ldr	r3, [pc, #360]	; (4008f0 <system_init+0x1a4>)
  400786:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  400788:	4b5a      	ldr	r3, [pc, #360]	; (4008f4 <system_init+0x1a8>)
  40078a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40078e:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400790:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400792:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400796:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40079c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40079e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007a4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4007aa:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007ac:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007ae:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007b2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4007b8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007ba:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007bc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007c0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4007c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4007c6:	2008      	movs	r0, #8
  4007c8:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4007ca:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007cc:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4007ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4007d2:	2404      	movs	r4, #4
  4007d4:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4007d6:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007d8:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4007da:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4007dc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007de:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007e0:	2010      	movs	r0, #16
  4007e2:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007e4:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007e6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007e8:	2020      	movs	r0, #32
  4007ea:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007ec:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ee:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007f0:	2040      	movs	r0, #64	; 0x40
  4007f2:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007f4:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007f6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007f8:	2080      	movs	r0, #128	; 0x80
  4007fa:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007fc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007fe:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400800:	f44f 7080 	mov.w	r0, #256	; 0x100
  400804:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400806:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400808:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40080a:	f44f 7000 	mov.w	r0, #512	; 0x200
  40080e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400810:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400812:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400814:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400818:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40081a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40081c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40081e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400822:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400824:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400826:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40082a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40082c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  400830:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400832:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400834:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400838:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40083a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40083e:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400840:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400842:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400846:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400848:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  40084c:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40084e:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400850:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400854:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400856:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  40085a:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40085c:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40085e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400862:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400864:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  400868:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40086a:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40086c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400870:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400872:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  400876:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400878:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40087a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40087e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400880:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  400884:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400886:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400888:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40088c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40088e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  400892:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400894:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400896:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400898:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40089c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40089e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008a0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4008a6:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008a8:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008aa:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008ac:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008ae:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008b0:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008b2:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008b4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008b6:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4008b8:	4b0f      	ldr	r3, [pc, #60]	; (4008f8 <system_init+0x1ac>)
  4008ba:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  4008bc:	4b0f      	ldr	r3, [pc, #60]	; (4008fc <system_init+0x1b0>)
  4008be:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  4008c0:	4b0f      	ldr	r3, [pc, #60]	; (400900 <system_init+0x1b4>)
  4008c2:	4798      	blx	r3

	PWM_0_init();
  4008c4:	4b0f      	ldr	r3, [pc, #60]	; (400904 <system_init+0x1b8>)
  4008c6:	4798      	blx	r3

	PWM_1_init();
  4008c8:	4b0f      	ldr	r3, [pc, #60]	; (400908 <system_init+0x1bc>)
  4008ca:	4798      	blx	r3

	SPI_0_init();
  4008cc:	4b0f      	ldr	r3, [pc, #60]	; (40090c <system_init+0x1c0>)
  4008ce:	4798      	blx	r3
	TIMER_0_init();
  4008d0:	4b0f      	ldr	r3, [pc, #60]	; (400910 <system_init+0x1c4>)
  4008d2:	4798      	blx	r3
	TIMER_1_init();
  4008d4:	4b0f      	ldr	r3, [pc, #60]	; (400914 <system_init+0x1c8>)
  4008d6:	4798      	blx	r3

	I2C_0_init();
  4008d8:	4b0f      	ldr	r3, [pc, #60]	; (400918 <system_init+0x1cc>)
  4008da:	4798      	blx	r3

	delay_driver_init();
  4008dc:	4b0f      	ldr	r3, [pc, #60]	; (40091c <system_init+0x1d0>)
  4008de:	4798      	blx	r3

	WDT_0_init();
  4008e0:	4b0f      	ldr	r3, [pc, #60]	; (400920 <system_init+0x1d4>)
  4008e2:	4798      	blx	r3

	ext_irq_init();
  4008e4:	4b0f      	ldr	r3, [pc, #60]	; (400924 <system_init+0x1d8>)
  4008e6:	4798      	blx	r3
  4008e8:	bd10      	pop	{r4, pc}
  4008ea:	bf00      	nop
  4008ec:	00401401 	.word	0x00401401
  4008f0:	400e0600 	.word	0x400e0600
  4008f4:	400e0e00 	.word	0x400e0e00
  4008f8:	00400449 	.word	0x00400449
  4008fc:	00400475 	.word	0x00400475
  400900:	00400489 	.word	0x00400489
  400904:	00400555 	.word	0x00400555
  400908:	004005c5 	.word	0x004005c5
  40090c:	0040065d 	.word	0x0040065d
  400910:	004003a1 	.word	0x004003a1
  400914:	004003d9 	.word	0x004003d9
  400918:	004006e5 	.word	0x004006e5
  40091c:	0040070d 	.word	0x0040070d
  400920:	00400721 	.word	0x00400721
  400924:	00400c2d 	.word	0x00400c2d

00400928 <interrupt_front_left>:
 ext_irq_register(Encoder3_A, interrupt_back_right);
 ext_irq_register(Encoder4_A, interrupt_front_right);
}

void interrupt_front_left()
{
  400928:	b538      	push	{r3, r4, r5, lr}
	return ((Pio *)hw)->PIO_PDSR;
  40092a:	4b0c      	ldr	r3, [pc, #48]	; (40095c <interrupt_front_left+0x34>)
  40092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(gpio_get_pin_level(encoder2_B))
  40092e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400932:	d109      	bne.n	400948 <interrupt_front_left+0x20>
	{
		front_left_counter++;
	}
    else front_left_counter--;
  400934:	4c0a      	ldr	r4, [pc, #40]	; (400960 <interrupt_front_left+0x38>)
  400936:	2200      	movs	r2, #0
  400938:	4b0a      	ldr	r3, [pc, #40]	; (400964 <interrupt_front_left+0x3c>)
  40093a:	e9d4 0100 	ldrd	r0, r1, [r4]
  40093e:	4d0a      	ldr	r5, [pc, #40]	; (400968 <interrupt_front_left+0x40>)
  400940:	47a8      	blx	r5
  400942:	e9c4 0100 	strd	r0, r1, [r4]
  400946:	bd38      	pop	{r3, r4, r5, pc}
		front_left_counter++;
  400948:	4c05      	ldr	r4, [pc, #20]	; (400960 <interrupt_front_left+0x38>)
  40094a:	2200      	movs	r2, #0
  40094c:	4b05      	ldr	r3, [pc, #20]	; (400964 <interrupt_front_left+0x3c>)
  40094e:	e9d4 0100 	ldrd	r0, r1, [r4]
  400952:	4d06      	ldr	r5, [pc, #24]	; (40096c <interrupt_front_left+0x44>)
  400954:	47a8      	blx	r5
  400956:	e9c4 0100 	strd	r0, r1, [r4]
  40095a:	bd38      	pop	{r3, r4, r5, pc}
  40095c:	400e0e00 	.word	0x400e0e00
  400960:	20400070 	.word	0x20400070
  400964:	3ff00000 	.word	0x3ff00000
  400968:	004026d9 	.word	0x004026d9
  40096c:	004026dd 	.word	0x004026dd

00400970 <interrupt_front_right>:
}

void interrupt_front_right()
{
  400970:	b538      	push	{r3, r4, r5, lr}
  400972:	4b0c      	ldr	r3, [pc, #48]	; (4009a4 <interrupt_front_right+0x34>)
  400974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder4_B))
  400976:	2b00      	cmp	r3, #0
  400978:	db09      	blt.n	40098e <interrupt_front_right+0x1e>
    {
        front_right_counter++;
        }
        else{
        front_right_counter--;
  40097a:	4c0b      	ldr	r4, [pc, #44]	; (4009a8 <interrupt_front_right+0x38>)
  40097c:	2200      	movs	r2, #0
  40097e:	4b0b      	ldr	r3, [pc, #44]	; (4009ac <interrupt_front_right+0x3c>)
  400980:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
  400984:	4d0a      	ldr	r5, [pc, #40]	; (4009b0 <interrupt_front_right+0x40>)
  400986:	47a8      	blx	r5
  400988:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40098c:	bd38      	pop	{r3, r4, r5, pc}
        front_right_counter++;
  40098e:	4c06      	ldr	r4, [pc, #24]	; (4009a8 <interrupt_front_right+0x38>)
  400990:	2200      	movs	r2, #0
  400992:	4b06      	ldr	r3, [pc, #24]	; (4009ac <interrupt_front_right+0x3c>)
  400994:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
  400998:	4d06      	ldr	r5, [pc, #24]	; (4009b4 <interrupt_front_right+0x44>)
  40099a:	47a8      	blx	r5
  40099c:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4009a0:	bd38      	pop	{r3, r4, r5, pc}
  4009a2:	bf00      	nop
  4009a4:	400e0e00 	.word	0x400e0e00
  4009a8:	20400070 	.word	0x20400070
  4009ac:	3ff00000 	.word	0x3ff00000
  4009b0:	004026d9 	.word	0x004026d9
  4009b4:	004026dd 	.word	0x004026dd

004009b8 <interrupt_back_left>:
    }
}

void interrupt_back_left()
{
  4009b8:	b538      	push	{r3, r4, r5, lr}
  4009ba:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <interrupt_back_left+0x34>)
  4009bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder1_B))
  4009be:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4009c2:	d109      	bne.n	4009d8 <interrupt_back_left+0x20>
    {
        back_left_counter++;
        }
        else{
        back_left_counter--;
  4009c4:	4c0a      	ldr	r4, [pc, #40]	; (4009f0 <interrupt_back_left+0x38>)
  4009c6:	2200      	movs	r2, #0
  4009c8:	4b0a      	ldr	r3, [pc, #40]	; (4009f4 <interrupt_back_left+0x3c>)
  4009ca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  4009ce:	4d0a      	ldr	r5, [pc, #40]	; (4009f8 <interrupt_back_left+0x40>)
  4009d0:	47a8      	blx	r5
  4009d2:	e9c4 0104 	strd	r0, r1, [r4, #16]
  4009d6:	bd38      	pop	{r3, r4, r5, pc}
        back_left_counter++;
  4009d8:	4c05      	ldr	r4, [pc, #20]	; (4009f0 <interrupt_back_left+0x38>)
  4009da:	2200      	movs	r2, #0
  4009dc:	4b05      	ldr	r3, [pc, #20]	; (4009f4 <interrupt_back_left+0x3c>)
  4009de:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  4009e2:	4d06      	ldr	r5, [pc, #24]	; (4009fc <interrupt_back_left+0x44>)
  4009e4:	47a8      	blx	r5
  4009e6:	e9c4 0104 	strd	r0, r1, [r4, #16]
  4009ea:	bd38      	pop	{r3, r4, r5, pc}
  4009ec:	400e0e00 	.word	0x400e0e00
  4009f0:	20400070 	.word	0x20400070
  4009f4:	3ff00000 	.word	0x3ff00000
  4009f8:	004026d9 	.word	0x004026d9
  4009fc:	004026dd 	.word	0x004026dd

00400a00 <interrupt_back_right>:
    }
}

void interrupt_back_right()
{
  400a00:	b538      	push	{r3, r4, r5, lr}
  400a02:	4b0c      	ldr	r3, [pc, #48]	; (400a34 <interrupt_back_right+0x34>)
  400a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder3_B))
  400a06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400a0a:	d109      	bne.n	400a20 <interrupt_back_right+0x20>
    {
        back_right_counter++;
        }
        else{
        back_right_counter--;
  400a0c:	4c0a      	ldr	r4, [pc, #40]	; (400a38 <interrupt_back_right+0x38>)
  400a0e:	2200      	movs	r2, #0
  400a10:	4b0a      	ldr	r3, [pc, #40]	; (400a3c <interrupt_back_right+0x3c>)
  400a12:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400a16:	4d0a      	ldr	r5, [pc, #40]	; (400a40 <interrupt_back_right+0x40>)
  400a18:	47a8      	blx	r5
  400a1a:	e9c4 0106 	strd	r0, r1, [r4, #24]
  400a1e:	bd38      	pop	{r3, r4, r5, pc}
        back_right_counter++;
  400a20:	4c05      	ldr	r4, [pc, #20]	; (400a38 <interrupt_back_right+0x38>)
  400a22:	2200      	movs	r2, #0
  400a24:	4b05      	ldr	r3, [pc, #20]	; (400a3c <interrupt_back_right+0x3c>)
  400a26:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  400a2a:	4d06      	ldr	r5, [pc, #24]	; (400a44 <interrupt_back_right+0x44>)
  400a2c:	47a8      	blx	r5
  400a2e:	e9c4 0106 	strd	r0, r1, [r4, #24]
  400a32:	bd38      	pop	{r3, r4, r5, pc}
  400a34:	400e0e00 	.word	0x400e0e00
  400a38:	20400070 	.word	0x20400070
  400a3c:	3ff00000 	.word	0x3ff00000
  400a40:	004026d9 	.word	0x004026d9
  400a44:	004026dd 	.word	0x004026dd

00400a48 <encoders_init>:
{
  400a48:	b510      	push	{r4, lr}
 ext_irq_register(encoder1_A, interrupt_back_left);
  400a4a:	4907      	ldr	r1, [pc, #28]	; (400a68 <encoders_init+0x20>)
  400a4c:	2016      	movs	r0, #22
  400a4e:	4c07      	ldr	r4, [pc, #28]	; (400a6c <encoders_init+0x24>)
  400a50:	47a0      	blx	r4
 ext_irq_register(encoder2_A, interrupt_front_left);
  400a52:	4907      	ldr	r1, [pc, #28]	; (400a70 <encoders_init+0x28>)
  400a54:	2017      	movs	r0, #23
  400a56:	47a0      	blx	r4
 ext_irq_register(Encoder3_A, interrupt_back_right);
  400a58:	4906      	ldr	r1, [pc, #24]	; (400a74 <encoders_init+0x2c>)
  400a5a:	2018      	movs	r0, #24
  400a5c:	47a0      	blx	r4
 ext_irq_register(Encoder4_A, interrupt_front_right);
  400a5e:	4906      	ldr	r1, [pc, #24]	; (400a78 <encoders_init+0x30>)
  400a60:	2019      	movs	r0, #25
  400a62:	47a0      	blx	r4
  400a64:	bd10      	pop	{r4, pc}
  400a66:	bf00      	nop
  400a68:	004009b9 	.word	0x004009b9
  400a6c:	00400c61 	.word	0x00400c61
  400a70:	00400929 	.word	0x00400929
  400a74:	00400a01 	.word	0x00400a01
  400a78:	00400971 	.word	0x00400971

00400a7c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400a7c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400a7e:	4604      	mov	r4, r0
  400a80:	460d      	mov	r5, r1
  400a82:	2800      	cmp	r0, #0
  400a84:	bf18      	it	ne
  400a86:	2900      	cmpne	r1, #0
  400a88:	bf14      	ite	ne
  400a8a:	2001      	movne	r0, #1
  400a8c:	2000      	moveq	r0, #0
  400a8e:	2239      	movs	r2, #57	; 0x39
  400a90:	4903      	ldr	r1, [pc, #12]	; (400aa0 <adc_sync_init+0x24>)
  400a92:	4b04      	ldr	r3, [pc, #16]	; (400aa4 <adc_sync_init+0x28>)
  400a94:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400a96:	4629      	mov	r1, r5
  400a98:	4620      	mov	r0, r4
  400a9a:	4b03      	ldr	r3, [pc, #12]	; (400aa8 <adc_sync_init+0x2c>)
  400a9c:	4798      	blx	r3
}
  400a9e:	bd38      	pop	{r3, r4, r5, pc}
  400aa0:	00402f78 	.word	0x00402f78
  400aa4:	00401219 	.word	0x00401219
  400aa8:	00401355 	.word	0x00401355

00400aac <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400aac:	b538      	push	{r3, r4, r5, lr}
  400aae:	460d      	mov	r5, r1
	ASSERT(descr);
  400ab0:	4604      	mov	r4, r0
  400ab2:	224e      	movs	r2, #78	; 0x4e
  400ab4:	4905      	ldr	r1, [pc, #20]	; (400acc <adc_sync_enable_channel+0x20>)
  400ab6:	3000      	adds	r0, #0
  400ab8:	bf18      	it	ne
  400aba:	2001      	movne	r0, #1
  400abc:	4b04      	ldr	r3, [pc, #16]	; (400ad0 <adc_sync_enable_channel+0x24>)
  400abe:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400ac0:	4629      	mov	r1, r5
  400ac2:	4620      	mov	r0, r4
  400ac4:	4b03      	ldr	r3, [pc, #12]	; (400ad4 <adc_sync_enable_channel+0x28>)
  400ac6:	4798      	blx	r3

	return ERR_NONE;
}
  400ac8:	2000      	movs	r0, #0
  400aca:	bd38      	pop	{r3, r4, r5, pc}
  400acc:	00402f78 	.word	0x00402f78
  400ad0:	00401219 	.word	0x00401219
  400ad4:	0040138d 	.word	0x0040138d

00400ad8 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  400ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400adc:	460d      	mov	r5, r1
  400ade:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  400ae0:	4607      	mov	r7, r0
  400ae2:	4690      	mov	r8, r2
  400ae4:	2800      	cmp	r0, #0
  400ae6:	bf18      	it	ne
  400ae8:	2a00      	cmpne	r2, #0
  400aea:	d002      	beq.n	400af2 <adc_sync_read_channel+0x1a>
  400aec:	b9cb      	cbnz	r3, 400b22 <adc_sync_read_channel+0x4a>
  400aee:	2000      	movs	r0, #0
  400af0:	e000      	b.n	400af4 <adc_sync_read_channel+0x1c>
  400af2:	2000      	movs	r0, #0
  400af4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400b74 <adc_sync_read_channel+0x9c>
  400af8:	2267      	movs	r2, #103	; 0x67
  400afa:	4651      	mov	r1, sl
  400afc:	4e18      	ldr	r6, [pc, #96]	; (400b60 <adc_sync_read_channel+0x88>)
  400afe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  400b00:	463c      	mov	r4, r7
  400b02:	4638      	mov	r0, r7
  400b04:	4b17      	ldr	r3, [pc, #92]	; (400b64 <adc_sync_read_channel+0x8c>)
  400b06:	4798      	blx	r3
  400b08:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  400b0a:	fb99 f0f0 	sdiv	r0, r9, r0
  400b0e:	fb07 9010 	mls	r0, r7, r0, r9
  400b12:	2269      	movs	r2, #105	; 0x69
  400b14:	4651      	mov	r1, sl
  400b16:	fab0 f080 	clz	r0, r0
  400b1a:	0940      	lsrs	r0, r0, #5
  400b1c:	47b0      	blx	r6
	uint16_t offset = 0;
  400b1e:	2600      	movs	r6, #0
  400b20:	e005      	b.n	400b2e <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  400b22:	2001      	movs	r0, #1
  400b24:	e7e6      	b.n	400af4 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  400b26:	443e      	add	r6, r7
  400b28:	b2b6      	uxth	r6, r6
	} while (offset < length);
  400b2a:	45b1      	cmp	r9, r6
  400b2c:	d915      	bls.n	400b5a <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  400b2e:	4620      	mov	r0, r4
  400b30:	4b0d      	ldr	r3, [pc, #52]	; (400b68 <adc_sync_read_channel+0x90>)
  400b32:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  400b34:	4629      	mov	r1, r5
  400b36:	4620      	mov	r0, r4
  400b38:	4b0c      	ldr	r3, [pc, #48]	; (400b6c <adc_sync_read_channel+0x94>)
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	d0f9      	beq.n	400b34 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  400b40:	4629      	mov	r1, r5
  400b42:	4620      	mov	r0, r4
  400b44:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <adc_sync_read_channel+0x98>)
  400b46:	4798      	blx	r3
		buffer[offset] = result;
  400b48:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  400b4c:	2f01      	cmp	r7, #1
  400b4e:	d9ea      	bls.n	400b26 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  400b50:	1c73      	adds	r3, r6, #1
  400b52:	0a00      	lsrs	r0, r0, #8
  400b54:	f808 0003 	strb.w	r0, [r8, r3]
  400b58:	e7e5      	b.n	400b26 <adc_sync_read_channel+0x4e>

	return offset;
}
  400b5a:	4630      	mov	r0, r6
  400b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b60:	00401219 	.word	0x00401219
  400b64:	00401399 	.word	0x00401399
  400b68:	004013b1 	.word	0x004013b1
  400b6c:	0040139d 	.word	0x0040139d
  400b70:	004013b9 	.word	0x004013b9
  400b74:	00402f78 	.word	0x00402f78

00400b78 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b78:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400b7c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400b7e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400b80:	f3bf 8f5f 	dmb	sy
  400b84:	4770      	bx	lr

00400b86 <atomic_leave_critical>:
  400b86:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400b8a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400b8c:	f383 8810 	msr	PRIMASK, r3
  400b90:	4770      	bx	lr
	...

00400b94 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400b94:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400b96:	4b02      	ldr	r3, [pc, #8]	; (400ba0 <delay_init+0xc>)
  400b98:	6018      	str	r0, [r3, #0]
  400b9a:	4b02      	ldr	r3, [pc, #8]	; (400ba4 <delay_init+0x10>)
  400b9c:	4798      	blx	r3
  400b9e:	bd08      	pop	{r3, pc}
  400ba0:	20400090 	.word	0x20400090
  400ba4:	00401c2d 	.word	0x00401c2d

00400ba8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400ba8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  400baa:	4b04      	ldr	r3, [pc, #16]	; (400bbc <delay_us+0x14>)
  400bac:	681c      	ldr	r4, [r3, #0]
  400bae:	4b04      	ldr	r3, [pc, #16]	; (400bc0 <delay_us+0x18>)
  400bb0:	4798      	blx	r3
  400bb2:	4601      	mov	r1, r0
  400bb4:	4620      	mov	r0, r4
  400bb6:	4b03      	ldr	r3, [pc, #12]	; (400bc4 <delay_us+0x1c>)
  400bb8:	4798      	blx	r3
  400bba:	bd10      	pop	{r4, pc}
  400bbc:	20400090 	.word	0x20400090
  400bc0:	004013e5 	.word	0x004013e5
  400bc4:	00401c39 	.word	0x00401c39

00400bc8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400bc8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400bca:	4b04      	ldr	r3, [pc, #16]	; (400bdc <delay_ms+0x14>)
  400bcc:	681c      	ldr	r4, [r3, #0]
  400bce:	4b04      	ldr	r3, [pc, #16]	; (400be0 <delay_ms+0x18>)
  400bd0:	4798      	blx	r3
  400bd2:	4601      	mov	r1, r0
  400bd4:	4620      	mov	r0, r4
  400bd6:	4b03      	ldr	r3, [pc, #12]	; (400be4 <delay_ms+0x1c>)
  400bd8:	4798      	blx	r3
  400bda:	bd10      	pop	{r4, pc}
  400bdc:	20400090 	.word	0x20400090
  400be0:	004013ef 	.word	0x004013ef
  400be4:	00401c39 	.word	0x00401c39

00400be8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400be8:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400bea:	2506      	movs	r5, #6
  400bec:	2400      	movs	r4, #0

	while (upper >= lower) {
  400bee:	e007      	b.n	400c00 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400bf0:	4a0d      	ldr	r2, [pc, #52]	; (400c28 <process_ext_irq+0x40>)
  400bf2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400bf6:	b1b3      	cbz	r3, 400c26 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400bf8:	4798      	blx	r3
  400bfa:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400bfc:	3a01      	subs	r2, #1
  400bfe:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400c00:	42ac      	cmp	r4, r5
  400c02:	d810      	bhi.n	400c26 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400c04:	192b      	adds	r3, r5, r4
  400c06:	105b      	asrs	r3, r3, #1
  400c08:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400c0a:	2a05      	cmp	r2, #5
  400c0c:	d80b      	bhi.n	400c26 <process_ext_irq+0x3e>
  400c0e:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400c10:	4905      	ldr	r1, [pc, #20]	; (400c28 <process_ext_irq+0x40>)
  400c12:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400c16:	6849      	ldr	r1, [r1, #4]
  400c18:	4281      	cmp	r1, r0
  400c1a:	d0e9      	beq.n	400bf0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400c1c:	4281      	cmp	r1, r0
  400c1e:	d2ed      	bcs.n	400bfc <process_ext_irq+0x14>
			lower = middle + 1;
  400c20:	3201      	adds	r2, #1
  400c22:	b2d4      	uxtb	r4, r2
  400c24:	e7ec      	b.n	400c00 <process_ext_irq+0x18>
  400c26:	bd38      	pop	{r3, r4, r5, pc}
  400c28:	20400094 	.word	0x20400094

00400c2c <ext_irq_init>:
{
  400c2c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c2e:	2300      	movs	r3, #0
  400c30:	e00a      	b.n	400c48 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400c32:	4a08      	ldr	r2, [pc, #32]	; (400c54 <ext_irq_init+0x28>)
  400c34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400c38:	f04f 30ff 	mov.w	r0, #4294967295
  400c3c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400c3e:	2100      	movs	r1, #0
  400c40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c44:	3301      	adds	r3, #1
  400c46:	b29b      	uxth	r3, r3
  400c48:	2b05      	cmp	r3, #5
  400c4a:	d9f2      	bls.n	400c32 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400c4c:	4802      	ldr	r0, [pc, #8]	; (400c58 <ext_irq_init+0x2c>)
  400c4e:	4b03      	ldr	r3, [pc, #12]	; (400c5c <ext_irq_init+0x30>)
  400c50:	4798      	blx	r3
}
  400c52:	bd08      	pop	{r3, pc}
  400c54:	20400094 	.word	0x20400094
  400c58:	00400be9 	.word	0x00400be9
  400c5c:	00401689 	.word	0x00401689

00400c60 <ext_irq_register>:
{
  400c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c62:	b083      	sub	sp, #12
  400c64:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400c66:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400c68:	2b05      	cmp	r3, #5
  400c6a:	d80e      	bhi.n	400c8a <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400c6c:	4618      	mov	r0, r3
  400c6e:	4a2e      	ldr	r2, [pc, #184]	; (400d28 <ext_irq_register+0xc8>)
  400c70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400c74:	6852      	ldr	r2, [r2, #4]
  400c76:	42aa      	cmp	r2, r5
  400c78:	d002      	beq.n	400c80 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400c7a:	3301      	adds	r3, #1
  400c7c:	b2db      	uxtb	r3, r3
  400c7e:	e7f3      	b.n	400c68 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400c80:	4b29      	ldr	r3, [pc, #164]	; (400d28 <ext_irq_register+0xc8>)
  400c82:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400c86:	2701      	movs	r7, #1
			break;
  400c88:	e000      	b.n	400c8c <ext_irq_register+0x2c>
	bool    found = false;
  400c8a:	2700      	movs	r7, #0
	if (NULL == cb) {
  400c8c:	b159      	cbz	r1, 400ca6 <ext_irq_register+0x46>
	if (!found) {
  400c8e:	2f00      	cmp	r7, #0
  400c90:	d13d      	bne.n	400d0e <ext_irq_register+0xae>
  400c92:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c94:	2e05      	cmp	r6, #5
  400c96:	d813      	bhi.n	400cc0 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400c98:	4b23      	ldr	r3, [pc, #140]	; (400d28 <ext_irq_register+0xc8>)
  400c9a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  400c9e:	b143      	cbz	r3, 400cb2 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400ca0:	3601      	adds	r6, #1
  400ca2:	b2f6      	uxtb	r6, r6
  400ca4:	e7f6      	b.n	400c94 <ext_irq_register+0x34>
		if (!found) {
  400ca6:	2f00      	cmp	r7, #0
  400ca8:	d038      	beq.n	400d1c <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  400caa:	4628      	mov	r0, r5
  400cac:	4b1f      	ldr	r3, [pc, #124]	; (400d2c <ext_irq_register+0xcc>)
  400cae:	4798      	blx	r3
  400cb0:	e032      	b.n	400d18 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  400cb2:	4b1d      	ldr	r3, [pc, #116]	; (400d28 <ext_irq_register+0xc8>)
  400cb4:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  400cb8:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
  400cbc:	6055      	str	r5, [r2, #4]
				found           = true;
  400cbe:	2701      	movs	r7, #1
  400cc0:	2300      	movs	r3, #0
  400cc2:	e001      	b.n	400cc8 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400cc4:	3301      	adds	r3, #1
  400cc6:	b2db      	uxtb	r3, r3
  400cc8:	2b05      	cmp	r3, #5
  400cca:	bf98      	it	ls
  400ccc:	2e05      	cmpls	r6, #5
  400cce:	d81e      	bhi.n	400d0e <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400cd0:	46b6      	mov	lr, r6
  400cd2:	4a15      	ldr	r2, [pc, #84]	; (400d28 <ext_irq_register+0xc8>)
  400cd4:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400cd8:	6848      	ldr	r0, [r1, #4]
  400cda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400cde:	6852      	ldr	r2, [r2, #4]
  400ce0:	4290      	cmp	r0, r2
  400ce2:	d2ef      	bcs.n	400cc4 <ext_irq_register+0x64>
  400ce4:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ce8:	d0ec      	beq.n	400cc4 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400cea:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <ext_irq_register+0xc8>)
  400cec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
  400cf4:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400cf8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
  400d00:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400d04:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400d08:	e884 0003 	stmia.w	r4, {r0, r1}
  400d0c:	e7da      	b.n	400cc4 <ext_irq_register+0x64>
	if (!found) {
  400d0e:	b147      	cbz	r7, 400d22 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400d10:	2101      	movs	r1, #1
  400d12:	4628      	mov	r0, r5
  400d14:	4b05      	ldr	r3, [pc, #20]	; (400d2c <ext_irq_register+0xcc>)
  400d16:	4798      	blx	r3
}
  400d18:	b003      	add	sp, #12
  400d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400d1c:	f06f 000c 	mvn.w	r0, #12
  400d20:	e7fa      	b.n	400d18 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400d22:	f06f 000c 	mvn.w	r0, #12
  400d26:	e7f7      	b.n	400d18 <ext_irq_register+0xb8>
  400d28:	20400094 	.word	0x20400094
  400d2c:	004016b1 	.word	0x004016b1

00400d30 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400d30:	b510      	push	{r4, lr}
  400d32:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400d34:	8903      	ldrh	r3, [r0, #8]
  400d36:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400d3a:	4614      	mov	r4, r2
  400d3c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  400d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d42:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400d46:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400d48:	a901      	add	r1, sp, #4
  400d4a:	3814      	subs	r0, #20
  400d4c:	4b03      	ldr	r3, [pc, #12]	; (400d5c <i2c_m_sync_write+0x2c>)
  400d4e:	4798      	blx	r3

	if (ret) {
  400d50:	b910      	cbnz	r0, 400d58 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  400d52:	4620      	mov	r0, r4
  400d54:	b004      	add	sp, #16
  400d56:	bd10      	pop	{r4, pc}
		return ret;
  400d58:	4604      	mov	r4, r0
  400d5a:	e7fa      	b.n	400d52 <i2c_m_sync_write+0x22>
  400d5c:	00401e85 	.word	0x00401e85

00400d60 <i2c_m_sync_read>:
{
  400d60:	b510      	push	{r4, lr}
  400d62:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400d64:	8903      	ldrh	r3, [r0, #8]
  400d66:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400d6a:	4614      	mov	r4, r2
  400d6c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400d6e:	f248 0301 	movw	r3, #32769	; 0x8001
  400d72:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  400d76:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400d78:	a901      	add	r1, sp, #4
  400d7a:	3814      	subs	r0, #20
  400d7c:	4b03      	ldr	r3, [pc, #12]	; (400d8c <i2c_m_sync_read+0x2c>)
  400d7e:	4798      	blx	r3
	if (ret) {
  400d80:	b910      	cbnz	r0, 400d88 <i2c_m_sync_read+0x28>
}
  400d82:	4620      	mov	r0, r4
  400d84:	b004      	add	sp, #16
  400d86:	bd10      	pop	{r4, pc}
		return ret;
  400d88:	4604      	mov	r4, r0
  400d8a:	e7fa      	b.n	400d82 <i2c_m_sync_read+0x22>
  400d8c:	00401e85 	.word	0x00401e85

00400d90 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400d90:	b538      	push	{r3, r4, r5, lr}
  400d92:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400d94:	4604      	mov	r4, r0
  400d96:	225e      	movs	r2, #94	; 0x5e
  400d98:	4908      	ldr	r1, [pc, #32]	; (400dbc <i2c_m_sync_init+0x2c>)
  400d9a:	3000      	adds	r0, #0
  400d9c:	bf18      	it	ne
  400d9e:	2001      	movne	r0, #1
  400da0:	4b07      	ldr	r3, [pc, #28]	; (400dc0 <i2c_m_sync_init+0x30>)
  400da2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400da4:	4629      	mov	r1, r5
  400da6:	4620      	mov	r0, r4
  400da8:	4b06      	ldr	r3, [pc, #24]	; (400dc4 <i2c_m_sync_init+0x34>)
  400daa:	4798      	blx	r3
	if (init_status) {
  400dac:	4603      	mov	r3, r0
  400dae:	b918      	cbnz	r0, 400db8 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400db0:	4a05      	ldr	r2, [pc, #20]	; (400dc8 <i2c_m_sync_init+0x38>)
  400db2:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400db4:	4a05      	ldr	r2, [pc, #20]	; (400dcc <i2c_m_sync_init+0x3c>)
  400db6:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400db8:	4618      	mov	r0, r3
  400dba:	bd38      	pop	{r3, r4, r5, pc}
  400dbc:	00402f94 	.word	0x00402f94
  400dc0:	00401219 	.word	0x00401219
  400dc4:	00401e3d 	.word	0x00401e3d
  400dc8:	00400d61 	.word	0x00400d61
  400dcc:	00400d31 	.word	0x00400d31

00400dd0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400dd0:	b570      	push	{r4, r5, r6, lr}
  400dd2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400dd4:	4604      	mov	r4, r0
  400dd6:	460d      	mov	r5, r1
  400dd8:	2800      	cmp	r0, #0
  400dda:	bf18      	it	ne
  400ddc:	2900      	cmpne	r1, #0
  400dde:	bf14      	ite	ne
  400de0:	2001      	movne	r0, #1
  400de2:	2000      	moveq	r0, #0
  400de4:	2234      	movs	r2, #52	; 0x34
  400de6:	4904      	ldr	r1, [pc, #16]	; (400df8 <io_write+0x28>)
  400de8:	4b04      	ldr	r3, [pc, #16]	; (400dfc <io_write+0x2c>)
  400dea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400dec:	6823      	ldr	r3, [r4, #0]
  400dee:	4632      	mov	r2, r6
  400df0:	4629      	mov	r1, r5
  400df2:	4620      	mov	r0, r4
  400df4:	4798      	blx	r3
}
  400df6:	bd70      	pop	{r4, r5, r6, pc}
  400df8:	00402fb0 	.word	0x00402fb0
  400dfc:	00401219 	.word	0x00401219

00400e00 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400e00:	b570      	push	{r4, r5, r6, lr}
  400e02:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400e04:	4604      	mov	r4, r0
  400e06:	460d      	mov	r5, r1
  400e08:	2800      	cmp	r0, #0
  400e0a:	bf18      	it	ne
  400e0c:	2900      	cmpne	r1, #0
  400e0e:	bf14      	ite	ne
  400e10:	2001      	movne	r0, #1
  400e12:	2000      	moveq	r0, #0
  400e14:	223d      	movs	r2, #61	; 0x3d
  400e16:	4904      	ldr	r1, [pc, #16]	; (400e28 <io_read+0x28>)
  400e18:	4b04      	ldr	r3, [pc, #16]	; (400e2c <io_read+0x2c>)
  400e1a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400e1c:	6863      	ldr	r3, [r4, #4]
  400e1e:	4632      	mov	r2, r6
  400e20:	4629      	mov	r1, r5
  400e22:	4620      	mov	r0, r4
  400e24:	4798      	blx	r3
}
  400e26:	bd70      	pop	{r4, r5, r6, pc}
  400e28:	00402fb0 	.word	0x00402fb0
  400e2c:	00401219 	.word	0x00401219

00400e30 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400e30:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400e32:	6943      	ldr	r3, [r0, #20]
  400e34:	b103      	cbz	r3, 400e38 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400e36:	4798      	blx	r3
  400e38:	bd08      	pop	{r3, pc}

00400e3a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400e3a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400e3c:	6983      	ldr	r3, [r0, #24]
  400e3e:	b103      	cbz	r3, 400e42 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400e40:	4798      	blx	r3
  400e42:	bd08      	pop	{r3, pc}

00400e44 <pwm_init>:
{
  400e44:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400e46:	4604      	mov	r4, r0
  400e48:	460d      	mov	r5, r1
  400e4a:	2800      	cmp	r0, #0
  400e4c:	bf18      	it	ne
  400e4e:	2900      	cmpne	r1, #0
  400e50:	bf14      	ite	ne
  400e52:	2001      	movne	r0, #1
  400e54:	2000      	moveq	r0, #0
  400e56:	2233      	movs	r2, #51	; 0x33
  400e58:	4906      	ldr	r1, [pc, #24]	; (400e74 <pwm_init+0x30>)
  400e5a:	4b07      	ldr	r3, [pc, #28]	; (400e78 <pwm_init+0x34>)
  400e5c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400e5e:	4629      	mov	r1, r5
  400e60:	4620      	mov	r0, r4
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <pwm_init+0x38>)
  400e64:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400e66:	4b06      	ldr	r3, [pc, #24]	; (400e80 <pwm_init+0x3c>)
  400e68:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400e6a:	4b06      	ldr	r3, [pc, #24]	; (400e84 <pwm_init+0x40>)
  400e6c:	6063      	str	r3, [r4, #4]
}
  400e6e:	2000      	movs	r0, #0
  400e70:	bd38      	pop	{r3, r4, r5, pc}
  400e72:	bf00      	nop
  400e74:	00402fc4 	.word	0x00402fc4
  400e78:	00401219 	.word	0x00401219
  400e7c:	00401869 	.word	0x00401869
  400e80:	00400e31 	.word	0x00400e31
  400e84:	00400e3b 	.word	0x00400e3b

00400e88 <pwm_enable>:
{
  400e88:	b510      	push	{r4, lr}
	ASSERT(descr);
  400e8a:	4604      	mov	r4, r0
  400e8c:	224a      	movs	r2, #74	; 0x4a
  400e8e:	4909      	ldr	r1, [pc, #36]	; (400eb4 <pwm_enable+0x2c>)
  400e90:	3000      	adds	r0, #0
  400e92:	bf18      	it	ne
  400e94:	2001      	movne	r0, #1
  400e96:	4b08      	ldr	r3, [pc, #32]	; (400eb8 <pwm_enable+0x30>)
  400e98:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400e9a:	4620      	mov	r0, r4
  400e9c:	4b07      	ldr	r3, [pc, #28]	; (400ebc <pwm_enable+0x34>)
  400e9e:	4798      	blx	r3
  400ea0:	b920      	cbnz	r0, 400eac <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400ea2:	4620      	mov	r0, r4
  400ea4:	4b06      	ldr	r3, [pc, #24]	; (400ec0 <pwm_enable+0x38>)
  400ea6:	4798      	blx	r3
	return ERR_NONE;
  400ea8:	2000      	movs	r0, #0
  400eaa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400eac:	f06f 0010 	mvn.w	r0, #16
}
  400eb0:	bd10      	pop	{r4, pc}
  400eb2:	bf00      	nop
  400eb4:	00402fc4 	.word	0x00402fc4
  400eb8:	00401219 	.word	0x00401219
  400ebc:	004019e5 	.word	0x004019e5
  400ec0:	004019a1 	.word	0x004019a1

00400ec4 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400ec4:	b538      	push	{r3, r4, r5, lr}
  400ec6:	460d      	mov	r5, r1
	ASSERT(spi);
  400ec8:	4604      	mov	r4, r0
  400eca:	2239      	movs	r2, #57	; 0x39
  400ecc:	4903      	ldr	r1, [pc, #12]	; (400edc <spi_m_sync_set_func_ptr+0x18>)
  400ece:	3000      	adds	r0, #0
  400ed0:	bf18      	it	ne
  400ed2:	2001      	movne	r0, #1
  400ed4:	4b02      	ldr	r3, [pc, #8]	; (400ee0 <spi_m_sync_set_func_ptr+0x1c>)
  400ed6:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400ed8:	6025      	str	r5, [r4, #0]
  400eda:	bd38      	pop	{r3, r4, r5, pc}
  400edc:	00402fdc 	.word	0x00402fdc
  400ee0:	00401219 	.word	0x00401219

00400ee4 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400ee4:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400ee6:	4604      	mov	r4, r0
  400ee8:	460d      	mov	r5, r1
  400eea:	2800      	cmp	r0, #0
  400eec:	bf18      	it	ne
  400eee:	2900      	cmpne	r1, #0
  400ef0:	bf14      	ite	ne
  400ef2:	2001      	movne	r0, #1
  400ef4:	2000      	moveq	r0, #0
  400ef6:	2240      	movs	r2, #64	; 0x40
  400ef8:	4909      	ldr	r1, [pc, #36]	; (400f20 <spi_m_sync_init+0x3c>)
  400efa:	4b0a      	ldr	r3, [pc, #40]	; (400f24 <spi_m_sync_init+0x40>)
  400efc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400efe:	4620      	mov	r0, r4
  400f00:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400f04:	4629      	mov	r1, r5
  400f06:	4b08      	ldr	r3, [pc, #32]	; (400f28 <spi_m_sync_init+0x44>)
  400f08:	4798      	blx	r3

	if (rc < 0) {
  400f0a:	2800      	cmp	r0, #0
  400f0c:	db07      	blt.n	400f1e <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f12:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400f14:	4b05      	ldr	r3, [pc, #20]	; (400f2c <spi_m_sync_init+0x48>)
  400f16:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400f18:	4b05      	ldr	r3, [pc, #20]	; (400f30 <spi_m_sync_init+0x4c>)
  400f1a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400f1c:	2000      	movs	r0, #0
}
  400f1e:	bd38      	pop	{r3, r4, r5, pc}
  400f20:	00402fdc 	.word	0x00402fdc
  400f24:	00401219 	.word	0x00401219
  400f28:	00401a39 	.word	0x00401a39
  400f2c:	00400fd9 	.word	0x00400fd9
  400f30:	00400f9d 	.word	0x00400f9d

00400f34 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400f34:	b510      	push	{r4, lr}
	ASSERT(spi);
  400f36:	4604      	mov	r4, r0
  400f38:	2257      	movs	r2, #87	; 0x57
  400f3a:	4905      	ldr	r1, [pc, #20]	; (400f50 <spi_m_sync_enable+0x1c>)
  400f3c:	3000      	adds	r0, #0
  400f3e:	bf18      	it	ne
  400f40:	2001      	movne	r0, #1
  400f42:	4b04      	ldr	r3, [pc, #16]	; (400f54 <spi_m_sync_enable+0x20>)
  400f44:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400f46:	1d20      	adds	r0, r4, #4
  400f48:	4b03      	ldr	r3, [pc, #12]	; (400f58 <spi_m_sync_enable+0x24>)
  400f4a:	4798      	blx	r3
  400f4c:	bd10      	pop	{r4, pc}
  400f4e:	bf00      	nop
  400f50:	00402fdc 	.word	0x00402fdc
  400f54:	00401219 	.word	0x00401219
  400f58:	00401ae1 	.word	0x00401ae1

00400f5c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400f5c:	b530      	push	{r4, r5, lr}
  400f5e:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400f60:	4605      	mov	r5, r0
  400f62:	460c      	mov	r4, r1
  400f64:	2800      	cmp	r0, #0
  400f66:	bf18      	it	ne
  400f68:	2900      	cmpne	r1, #0
  400f6a:	bf14      	ite	ne
  400f6c:	2001      	movne	r0, #1
  400f6e:	2000      	moveq	r0, #0
  400f70:	22b3      	movs	r2, #179	; 0xb3
  400f72:	4907      	ldr	r1, [pc, #28]	; (400f90 <spi_m_sync_transfer+0x34>)
  400f74:	4b07      	ldr	r3, [pc, #28]	; (400f94 <spi_m_sync_transfer+0x38>)
  400f76:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400f78:	6823      	ldr	r3, [r4, #0]
  400f7a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400f7c:	6863      	ldr	r3, [r4, #4]
  400f7e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400f80:	68a3      	ldr	r3, [r4, #8]
  400f82:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400f84:	a901      	add	r1, sp, #4
  400f86:	1d28      	adds	r0, r5, #4
  400f88:	4b03      	ldr	r3, [pc, #12]	; (400f98 <spi_m_sync_transfer+0x3c>)
  400f8a:	4798      	blx	r3
}
  400f8c:	b005      	add	sp, #20
  400f8e:	bd30      	pop	{r4, r5, pc}
  400f90:	00402fdc 	.word	0x00402fdc
  400f94:	00401219 	.word	0x00401219
  400f98:	00401b15 	.word	0x00401b15

00400f9c <_spi_m_sync_io_write>:
{
  400f9c:	b570      	push	{r4, r5, r6, lr}
  400f9e:	b084      	sub	sp, #16
  400fa0:	460e      	mov	r6, r1
  400fa2:	4615      	mov	r5, r2
	ASSERT(io);
  400fa4:	4604      	mov	r4, r0
  400fa6:	22a3      	movs	r2, #163	; 0xa3
  400fa8:	4908      	ldr	r1, [pc, #32]	; (400fcc <_spi_m_sync_io_write+0x30>)
  400faa:	3000      	adds	r0, #0
  400fac:	bf18      	it	ne
  400fae:	2001      	movne	r0, #1
  400fb0:	4b07      	ldr	r3, [pc, #28]	; (400fd0 <_spi_m_sync_io_write+0x34>)
  400fb2:	4798      	blx	r3
	xfer.rxbuf = 0;
  400fb4:	2300      	movs	r3, #0
  400fb6:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400fb8:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400fba:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400fbc:	a901      	add	r1, sp, #4
  400fbe:	f1a4 000c 	sub.w	r0, r4, #12
  400fc2:	4b04      	ldr	r3, [pc, #16]	; (400fd4 <_spi_m_sync_io_write+0x38>)
  400fc4:	4798      	blx	r3
}
  400fc6:	b004      	add	sp, #16
  400fc8:	bd70      	pop	{r4, r5, r6, pc}
  400fca:	bf00      	nop
  400fcc:	00402fdc 	.word	0x00402fdc
  400fd0:	00401219 	.word	0x00401219
  400fd4:	00400f5d 	.word	0x00400f5d

00400fd8 <_spi_m_sync_io_read>:
{
  400fd8:	b570      	push	{r4, r5, r6, lr}
  400fda:	b084      	sub	sp, #16
  400fdc:	460e      	mov	r6, r1
  400fde:	4615      	mov	r5, r2
	ASSERT(io);
  400fe0:	4604      	mov	r4, r0
  400fe2:	2287      	movs	r2, #135	; 0x87
  400fe4:	4908      	ldr	r1, [pc, #32]	; (401008 <_spi_m_sync_io_read+0x30>)
  400fe6:	3000      	adds	r0, #0
  400fe8:	bf18      	it	ne
  400fea:	2001      	movne	r0, #1
  400fec:	4b07      	ldr	r3, [pc, #28]	; (40100c <_spi_m_sync_io_read+0x34>)
  400fee:	4798      	blx	r3
	xfer.rxbuf = buf;
  400ff0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400ff2:	2300      	movs	r3, #0
  400ff4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400ff6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400ff8:	a901      	add	r1, sp, #4
  400ffa:	f1a4 000c 	sub.w	r0, r4, #12
  400ffe:	4b04      	ldr	r3, [pc, #16]	; (401010 <_spi_m_sync_io_read+0x38>)
  401000:	4798      	blx	r3
}
  401002:	b004      	add	sp, #16
  401004:	bd70      	pop	{r4, r5, r6, pc}
  401006:	bf00      	nop
  401008:	00402fdc 	.word	0x00402fdc
  40100c:	00401219 	.word	0x00401219
  401010:	00400f5d 	.word	0x00400f5d

00401014 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  401014:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  401016:	4604      	mov	r4, r0
  401018:	460d      	mov	r5, r1
  40101a:	2800      	cmp	r0, #0
  40101c:	bf18      	it	ne
  40101e:	2900      	cmpne	r1, #0
  401020:	bf14      	ite	ne
  401022:	2001      	movne	r0, #1
  401024:	2000      	moveq	r0, #0
  401026:	22bd      	movs	r2, #189	; 0xbd
  401028:	4903      	ldr	r1, [pc, #12]	; (401038 <spi_m_sync_get_io_descriptor+0x24>)
  40102a:	4b04      	ldr	r3, [pc, #16]	; (40103c <spi_m_sync_get_io_descriptor+0x28>)
  40102c:	4798      	blx	r3
	*io = &spi->io;
  40102e:	340c      	adds	r4, #12
  401030:	602c      	str	r4, [r5, #0]
	return 0;
}
  401032:	2000      	movs	r0, #0
  401034:	bd38      	pop	{r3, r4, r5, pc}
  401036:	bf00      	nop
  401038:	00402fdc 	.word	0x00402fdc
  40103c:	00401219 	.word	0x00401219

00401040 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  401042:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401044:	b117      	cbz	r7, 40104c <timer_add_timer_task+0xc>
  401046:	463c      	mov	r4, r7
  401048:	2600      	movs	r6, #0
  40104a:	e00b      	b.n	401064 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  40104c:	4b0e      	ldr	r3, [pc, #56]	; (401088 <timer_add_timer_task+0x48>)
  40104e:	4798      	blx	r3
		return;
  401050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  401052:	68a5      	ldr	r5, [r4, #8]
  401054:	442b      	add	r3, r5
  401056:	1a9b      	subs	r3, r3, r2
  401058:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40105a:	688d      	ldr	r5, [r1, #8]
  40105c:	42ab      	cmp	r3, r5
  40105e:	d209      	bcs.n	401074 <timer_add_timer_task+0x34>
			break;
		prev = it;
  401060:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  401062:	6824      	ldr	r4, [r4, #0]
  401064:	b134      	cbz	r4, 401074 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  401066:	6863      	ldr	r3, [r4, #4]
  401068:	4293      	cmp	r3, r2
  40106a:	d8f2      	bhi.n	401052 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  40106c:	68a5      	ldr	r5, [r4, #8]
  40106e:	1a9b      	subs	r3, r3, r2
  401070:	442b      	add	r3, r5
  401072:	e7f2      	b.n	40105a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401074:	42bc      	cmp	r4, r7
  401076:	d003      	beq.n	401080 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401078:	4630      	mov	r0, r6
  40107a:	4b04      	ldr	r3, [pc, #16]	; (40108c <timer_add_timer_task+0x4c>)
  40107c:	4798      	blx	r3
  40107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401080:	4b01      	ldr	r3, [pc, #4]	; (401088 <timer_add_timer_task+0x48>)
  401082:	4798      	blx	r3
  401084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401086:	bf00      	nop
  401088:	00401235 	.word	0x00401235
  40108c:	00401261 	.word	0x00401261

00401090 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401092:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401094:	6906      	ldr	r6, [r0, #16]
  401096:	3601      	adds	r6, #1
  401098:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40109a:	7e03      	ldrb	r3, [r0, #24]
  40109c:	f013 0f01 	tst.w	r3, #1
  4010a0:	d105      	bne.n	4010ae <timer_process_counted+0x1e>
  4010a2:	7e03      	ldrb	r3, [r0, #24]
  4010a4:	f013 0f02 	tst.w	r3, #2
  4010a8:	d101      	bne.n	4010ae <timer_process_counted+0x1e>
  4010aa:	4605      	mov	r5, r0
  4010ac:	e009      	b.n	4010c2 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4010ae:	7e03      	ldrb	r3, [r0, #24]
  4010b0:	f043 0302 	orr.w	r3, r3, #2
  4010b4:	7603      	strb	r3, [r0, #24]
		return;
  4010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010b8:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4010ba:	68e3      	ldr	r3, [r4, #12]
  4010bc:	4620      	mov	r0, r4
  4010be:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4010c0:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4010c2:	b19c      	cbz	r4, 4010ec <timer_process_counted+0x5c>
  4010c4:	6863      	ldr	r3, [r4, #4]
  4010c6:	1af3      	subs	r3, r6, r3
  4010c8:	68a2      	ldr	r2, [r4, #8]
  4010ca:	4293      	cmp	r3, r2
  4010cc:	d30e      	bcc.n	4010ec <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4010ce:	f105 0714 	add.w	r7, r5, #20
  4010d2:	4638      	mov	r0, r7
  4010d4:	4b06      	ldr	r3, [pc, #24]	; (4010f0 <timer_process_counted+0x60>)
  4010d6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4010d8:	7c23      	ldrb	r3, [r4, #16]
  4010da:	2b01      	cmp	r3, #1
  4010dc:	d1ec      	bne.n	4010b8 <timer_process_counted+0x28>
			tmp->time_label = time;
  4010de:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4010e0:	4632      	mov	r2, r6
  4010e2:	4621      	mov	r1, r4
  4010e4:	4638      	mov	r0, r7
  4010e6:	4b03      	ldr	r3, [pc, #12]	; (4010f4 <timer_process_counted+0x64>)
  4010e8:	4798      	blx	r3
  4010ea:	e7e5      	b.n	4010b8 <timer_process_counted+0x28>
  4010ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00401269 	.word	0x00401269
  4010f4:	00401041 	.word	0x00401041

004010f8 <timer_init>:
{
  4010f8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4010fa:	4604      	mov	r4, r0
  4010fc:	460d      	mov	r5, r1
  4010fe:	2800      	cmp	r0, #0
  401100:	bf18      	it	ne
  401102:	2900      	cmpne	r1, #0
  401104:	bf14      	ite	ne
  401106:	2001      	movne	r0, #1
  401108:	2000      	moveq	r0, #0
  40110a:	223b      	movs	r2, #59	; 0x3b
  40110c:	4905      	ldr	r1, [pc, #20]	; (401124 <timer_init+0x2c>)
  40110e:	4b06      	ldr	r3, [pc, #24]	; (401128 <timer_init+0x30>)
  401110:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401112:	4629      	mov	r1, r5
  401114:	4620      	mov	r0, r4
  401116:	4b05      	ldr	r3, [pc, #20]	; (40112c <timer_init+0x34>)
  401118:	4798      	blx	r3
	descr->time                           = 0;
  40111a:	2000      	movs	r0, #0
  40111c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40111e:	4b04      	ldr	r3, [pc, #16]	; (401130 <timer_init+0x38>)
  401120:	6023      	str	r3, [r4, #0]
}
  401122:	bd38      	pop	{r3, r4, r5, pc}
  401124:	00402ff8 	.word	0x00402ff8
  401128:	00401219 	.word	0x00401219
  40112c:	00401cf1 	.word	0x00401cf1
  401130:	00401091 	.word	0x00401091

00401134 <timer_start>:
{
  401134:	b510      	push	{r4, lr}
	ASSERT(descr);
  401136:	4604      	mov	r4, r0
  401138:	2253      	movs	r2, #83	; 0x53
  40113a:	4909      	ldr	r1, [pc, #36]	; (401160 <timer_start+0x2c>)
  40113c:	3000      	adds	r0, #0
  40113e:	bf18      	it	ne
  401140:	2001      	movne	r0, #1
  401142:	4b08      	ldr	r3, [pc, #32]	; (401164 <timer_start+0x30>)
  401144:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  401146:	4620      	mov	r0, r4
  401148:	4b07      	ldr	r3, [pc, #28]	; (401168 <timer_start+0x34>)
  40114a:	4798      	blx	r3
  40114c:	b920      	cbnz	r0, 401158 <timer_start+0x24>
	_timer_start(&descr->device);
  40114e:	4620      	mov	r0, r4
  401150:	4b06      	ldr	r3, [pc, #24]	; (40116c <timer_start+0x38>)
  401152:	4798      	blx	r3
	return ERR_NONE;
  401154:	2000      	movs	r0, #0
  401156:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401158:	f06f 0010 	mvn.w	r0, #16
}
  40115c:	bd10      	pop	{r4, pc}
  40115e:	bf00      	nop
  401160:	00402ff8 	.word	0x00402ff8
  401164:	00401219 	.word	0x00401219
  401168:	00401db5 	.word	0x00401db5
  40116c:	00401dad 	.word	0x00401dad

00401170 <timer_add_task>:
{
  401170:	b570      	push	{r4, r5, r6, lr}
  401172:	b082      	sub	sp, #8
	ASSERT(descr && task);
  401174:	4604      	mov	r4, r0
  401176:	460d      	mov	r5, r1
  401178:	2800      	cmp	r0, #0
  40117a:	bf18      	it	ne
  40117c:	2900      	cmpne	r1, #0
  40117e:	bf14      	ite	ne
  401180:	2001      	movne	r0, #1
  401182:	2000      	moveq	r0, #0
  401184:	227a      	movs	r2, #122	; 0x7a
  401186:	491d      	ldr	r1, [pc, #116]	; (4011fc <timer_add_task+0x8c>)
  401188:	4b1d      	ldr	r3, [pc, #116]	; (401200 <timer_add_task+0x90>)
  40118a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  40118c:	7e23      	ldrb	r3, [r4, #24]
  40118e:	f043 0301 	orr.w	r3, r3, #1
  401192:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  401194:	f104 0614 	add.w	r6, r4, #20
  401198:	4629      	mov	r1, r5
  40119a:	4630      	mov	r0, r6
  40119c:	4b19      	ldr	r3, [pc, #100]	; (401204 <timer_add_task+0x94>)
  40119e:	4798      	blx	r3
  4011a0:	b988      	cbnz	r0, 4011c6 <timer_add_task+0x56>
	task->time_label = descr->time;
  4011a2:	6923      	ldr	r3, [r4, #16]
  4011a4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  4011a6:	6922      	ldr	r2, [r4, #16]
  4011a8:	4629      	mov	r1, r5
  4011aa:	4630      	mov	r0, r6
  4011ac:	4b16      	ldr	r3, [pc, #88]	; (401208 <timer_add_task+0x98>)
  4011ae:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4011b0:	7e23      	ldrb	r3, [r4, #24]
  4011b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4011b6:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4011b8:	7e23      	ldrb	r3, [r4, #24]
  4011ba:	f013 0f02 	tst.w	r3, #2
  4011be:	d10e      	bne.n	4011de <timer_add_task+0x6e>
	return ERR_NONE;
  4011c0:	2000      	movs	r0, #0
}
  4011c2:	b002      	add	sp, #8
  4011c4:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4011c6:	7e23      	ldrb	r3, [r4, #24]
  4011c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4011cc:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4011ce:	227f      	movs	r2, #127	; 0x7f
  4011d0:	490a      	ldr	r1, [pc, #40]	; (4011fc <timer_add_task+0x8c>)
  4011d2:	2000      	movs	r0, #0
  4011d4:	4b0a      	ldr	r3, [pc, #40]	; (401200 <timer_add_task+0x90>)
  4011d6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4011d8:	f06f 0011 	mvn.w	r0, #17
  4011dc:	e7f1      	b.n	4011c2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  4011de:	a801      	add	r0, sp, #4
  4011e0:	4b0a      	ldr	r3, [pc, #40]	; (40120c <timer_add_task+0x9c>)
  4011e2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  4011e4:	7e23      	ldrb	r3, [r4, #24]
  4011e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4011ea:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  4011ec:	4620      	mov	r0, r4
  4011ee:	4b08      	ldr	r3, [pc, #32]	; (401210 <timer_add_task+0xa0>)
  4011f0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  4011f2:	a801      	add	r0, sp, #4
  4011f4:	4b07      	ldr	r3, [pc, #28]	; (401214 <timer_add_task+0xa4>)
  4011f6:	4798      	blx	r3
	return ERR_NONE;
  4011f8:	2000      	movs	r0, #0
  4011fa:	e7e2      	b.n	4011c2 <timer_add_task+0x52>
  4011fc:	00402ff8 	.word	0x00402ff8
  401200:	00401219 	.word	0x00401219
  401204:	0040121f 	.word	0x0040121f
  401208:	00401041 	.word	0x00401041
  40120c:	00400b79 	.word	0x00400b79
  401210:	00401dc1 	.word	0x00401dc1
  401214:	00400b87 	.word	0x00400b87

00401218 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401218:	b900      	cbnz	r0, 40121c <assert+0x4>
		__asm("BKPT #0");
  40121a:	be00      	bkpt	0x0000
  40121c:	4770      	bx	lr

0040121e <is_list_element>:
  40121e:	6803      	ldr	r3, [r0, #0]
  401220:	b11b      	cbz	r3, 40122a <is_list_element+0xc>
  401222:	428b      	cmp	r3, r1
  401224:	d003      	beq.n	40122e <is_list_element+0x10>
  401226:	681b      	ldr	r3, [r3, #0]
  401228:	e7fa      	b.n	401220 <is_list_element+0x2>
  40122a:	2000      	movs	r0, #0
  40122c:	4770      	bx	lr
  40122e:	2001      	movs	r0, #1
  401230:	4770      	bx	lr
	...

00401234 <list_insert_as_head>:
  401234:	b538      	push	{r3, r4, r5, lr}
  401236:	4604      	mov	r4, r0
  401238:	460d      	mov	r5, r1
  40123a:	4b06      	ldr	r3, [pc, #24]	; (401254 <list_insert_as_head+0x20>)
  40123c:	4798      	blx	r3
  40123e:	f080 0001 	eor.w	r0, r0, #1
  401242:	2239      	movs	r2, #57	; 0x39
  401244:	4904      	ldr	r1, [pc, #16]	; (401258 <list_insert_as_head+0x24>)
  401246:	b2c0      	uxtb	r0, r0
  401248:	4b04      	ldr	r3, [pc, #16]	; (40125c <list_insert_as_head+0x28>)
  40124a:	4798      	blx	r3
  40124c:	6823      	ldr	r3, [r4, #0]
  40124e:	602b      	str	r3, [r5, #0]
  401250:	6025      	str	r5, [r4, #0]
  401252:	bd38      	pop	{r3, r4, r5, pc}
  401254:	0040121f 	.word	0x0040121f
  401258:	00403010 	.word	0x00403010
  40125c:	00401219 	.word	0x00401219

00401260 <list_insert_after>:
  401260:	6803      	ldr	r3, [r0, #0]
  401262:	600b      	str	r3, [r1, #0]
  401264:	6001      	str	r1, [r0, #0]
  401266:	4770      	bx	lr

00401268 <list_remove_head>:
  401268:	6803      	ldr	r3, [r0, #0]
  40126a:	b11b      	cbz	r3, 401274 <list_remove_head+0xc>
  40126c:	681a      	ldr	r2, [r3, #0]
  40126e:	6002      	str	r2, [r0, #0]
  401270:	4618      	mov	r0, r3
  401272:	4770      	bx	lr
  401274:	2000      	movs	r0, #0
  401276:	4770      	bx	lr

00401278 <_afec_init>:
  401278:	2364      	movs	r3, #100	; 0x64
  40127a:	4a1d      	ldr	r2, [pc, #116]	; (4012f0 <_afec_init+0x78>)
  40127c:	fb03 2301 	mla	r3, r3, r1, r2
  401280:	685a      	ldr	r2, [r3, #4]
  401282:	6042      	str	r2, [r0, #4]
  401284:	689a      	ldr	r2, [r3, #8]
  401286:	6082      	str	r2, [r0, #8]
  401288:	68da      	ldr	r2, [r3, #12]
  40128a:	60c2      	str	r2, [r0, #12]
  40128c:	691a      	ldr	r2, [r3, #16]
  40128e:	6102      	str	r2, [r0, #16]
  401290:	695a      	ldr	r2, [r3, #20]
  401292:	6502      	str	r2, [r0, #80]	; 0x50
  401294:	699a      	ldr	r2, [r3, #24]
  401296:	6542      	str	r2, [r0, #84]	; 0x54
  401298:	69da      	ldr	r2, [r3, #28]
  40129a:	6602      	str	r2, [r0, #96]	; 0x60
  40129c:	6a1a      	ldr	r2, [r3, #32]
  40129e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  4012a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  4012a4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  4012a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4012aa:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
  4012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4012b0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  4012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012b6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  4012ba:	2200      	movs	r2, #0
  4012bc:	2a0b      	cmp	r2, #11
  4012be:	d814      	bhi.n	4012ea <_afec_init+0x72>
  4012c0:	b410      	push	{r4}
  4012c2:	6642      	str	r2, [r0, #100]	; 0x64
  4012c4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4012c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4012cc:	4413      	add	r3, r2
  4012ce:	330c      	adds	r3, #12
  4012d0:	4c07      	ldr	r4, [pc, #28]	; (4012f0 <_afec_init+0x78>)
  4012d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4012d6:	685b      	ldr	r3, [r3, #4]
  4012d8:	66c3      	str	r3, [r0, #108]	; 0x6c
  4012da:	3201      	adds	r2, #1
  4012dc:	b2d2      	uxtb	r2, r2
  4012de:	2a0b      	cmp	r2, #11
  4012e0:	d9ef      	bls.n	4012c2 <_afec_init+0x4a>
  4012e2:	2000      	movs	r0, #0
  4012e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012e8:	4770      	bx	lr
  4012ea:	2000      	movs	r0, #0
  4012ec:	4770      	bx	lr
  4012ee:	bf00      	nop
  4012f0:	00403030 	.word	0x00403030

004012f4 <_afec_get_hardware_index>:
  4012f4:	b508      	push	{r3, lr}
  4012f6:	4b09      	ldr	r3, [pc, #36]	; (40131c <_afec_get_hardware_index+0x28>)
  4012f8:	4298      	cmp	r0, r3
  4012fa:	d00a      	beq.n	401312 <_afec_get_hardware_index+0x1e>
  4012fc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401300:	4298      	cmp	r0, r3
  401302:	d008      	beq.n	401316 <_afec_get_hardware_index+0x22>
  401304:	22a3      	movs	r2, #163	; 0xa3
  401306:	4906      	ldr	r1, [pc, #24]	; (401320 <_afec_get_hardware_index+0x2c>)
  401308:	2000      	movs	r0, #0
  40130a:	4b06      	ldr	r3, [pc, #24]	; (401324 <_afec_get_hardware_index+0x30>)
  40130c:	4798      	blx	r3
  40130e:	2000      	movs	r0, #0
  401310:	bd08      	pop	{r3, pc}
  401312:	2000      	movs	r0, #0
  401314:	bd08      	pop	{r3, pc}
  401316:	2001      	movs	r0, #1
  401318:	bd08      	pop	{r3, pc}
  40131a:	bf00      	nop
  40131c:	4003c000 	.word	0x4003c000
  401320:	00403094 	.word	0x00403094
  401324:	00401219 	.word	0x00401219

00401328 <_afec_get_regs>:
  401328:	b508      	push	{r3, lr}
  40132a:	4b08      	ldr	r3, [pc, #32]	; (40134c <_afec_get_regs+0x24>)
  40132c:	4798      	blx	r3
  40132e:	2300      	movs	r3, #0
  401330:	b113      	cbz	r3, 401338 <_afec_get_regs+0x10>
  401332:	2300      	movs	r3, #0
  401334:	4618      	mov	r0, r3
  401336:	bd08      	pop	{r3, pc}
  401338:	2264      	movs	r2, #100	; 0x64
  40133a:	fb02 f203 	mul.w	r2, r2, r3
  40133e:	4904      	ldr	r1, [pc, #16]	; (401350 <_afec_get_regs+0x28>)
  401340:	5c8a      	ldrb	r2, [r1, r2]
  401342:	4290      	cmp	r0, r2
  401344:	d0f6      	beq.n	401334 <_afec_get_regs+0xc>
  401346:	3301      	adds	r3, #1
  401348:	b2db      	uxtb	r3, r3
  40134a:	e7f1      	b.n	401330 <_afec_get_regs+0x8>
  40134c:	004012f5 	.word	0x004012f5
  401350:	00403030 	.word	0x00403030

00401354 <_adc_sync_init>:
  401354:	b538      	push	{r3, r4, r5, lr}
  401356:	460c      	mov	r4, r1
  401358:	4605      	mov	r5, r0
  40135a:	f44f 728d 	mov.w	r2, #282	; 0x11a
  40135e:	4907      	ldr	r1, [pc, #28]	; (40137c <_adc_sync_init+0x28>)
  401360:	3000      	adds	r0, #0
  401362:	bf18      	it	ne
  401364:	2001      	movne	r0, #1
  401366:	4b06      	ldr	r3, [pc, #24]	; (401380 <_adc_sync_init+0x2c>)
  401368:	4798      	blx	r3
  40136a:	602c      	str	r4, [r5, #0]
  40136c:	4620      	mov	r0, r4
  40136e:	4b05      	ldr	r3, [pc, #20]	; (401384 <_adc_sync_init+0x30>)
  401370:	4798      	blx	r3
  401372:	4601      	mov	r1, r0
  401374:	4620      	mov	r0, r4
  401376:	4b04      	ldr	r3, [pc, #16]	; (401388 <_adc_sync_init+0x34>)
  401378:	4798      	blx	r3
  40137a:	bd38      	pop	{r3, r4, r5, pc}
  40137c:	00403094 	.word	0x00403094
  401380:	00401219 	.word	0x00401219
  401384:	00401329 	.word	0x00401329
  401388:	00401279 	.word	0x00401279

0040138c <_adc_sync_enable_channel>:
  40138c:	6802      	ldr	r2, [r0, #0]
  40138e:	2301      	movs	r3, #1
  401390:	fa03 f101 	lsl.w	r1, r3, r1
  401394:	6151      	str	r1, [r2, #20]
  401396:	4770      	bx	lr

00401398 <_adc_sync_get_data_size>:
  401398:	2002      	movs	r0, #2
  40139a:	4770      	bx	lr

0040139c <_adc_sync_is_channel_conversion_done>:
  40139c:	6802      	ldr	r2, [r0, #0]
  40139e:	2301      	movs	r3, #1
  4013a0:	fa03 f101 	lsl.w	r1, r3, r1
  4013a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013a6:	4219      	tst	r1, r3
  4013a8:	bf14      	ite	ne
  4013aa:	2001      	movne	r0, #1
  4013ac:	2000      	moveq	r0, #0
  4013ae:	4770      	bx	lr

004013b0 <_adc_sync_convert>:
  4013b0:	6803      	ldr	r3, [r0, #0]
  4013b2:	2202      	movs	r2, #2
  4013b4:	601a      	str	r2, [r3, #0]
  4013b6:	4770      	bx	lr

004013b8 <_adc_sync_read_channel_data>:
  4013b8:	6803      	ldr	r3, [r0, #0]
  4013ba:	6659      	str	r1, [r3, #100]	; 0x64
  4013bc:	6803      	ldr	r3, [r0, #0]
  4013be:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4013c0:	b280      	uxth	r0, r0
  4013c2:	4770      	bx	lr

004013c4 <_irq_set>:
  4013c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4013c6:	2b00      	cmp	r3, #0
  4013c8:	db09      	blt.n	4013de <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013ca:	095b      	lsrs	r3, r3, #5
  4013cc:	f000 001f 	and.w	r0, r0, #31
  4013d0:	2201      	movs	r2, #1
  4013d2:	fa02 f000 	lsl.w	r0, r2, r0
  4013d6:	3340      	adds	r3, #64	; 0x40
  4013d8:	4a01      	ldr	r2, [pc, #4]	; (4013e0 <_irq_set+0x1c>)
  4013da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4013de:	4770      	bx	lr
  4013e0:	e000e100 	.word	0xe000e100

004013e4 <_get_cycles_for_us>:
  4013e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4013e8:	fb03 f000 	mul.w	r0, r3, r0
  4013ec:	4770      	bx	lr

004013ee <_get_cycles_for_ms>:
  4013ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4013f2:	fb03 f000 	mul.w	r0, r3, r0
  4013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4013fa:	fb03 f000 	mul.w	r0, r3, r0
  4013fe:	4770      	bx	lr

00401400 <_init_chip>:
  401400:	b500      	push	{lr}
  401402:	b083      	sub	sp, #12
  401404:	a801      	add	r0, sp, #4
  401406:	4b0e      	ldr	r3, [pc, #56]	; (401440 <_init_chip+0x40>)
  401408:	4798      	blx	r3
  40140a:	4a0e      	ldr	r2, [pc, #56]	; (401444 <_init_chip+0x44>)
  40140c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40141c:	f3bf 8f6f 	isb	sy
  401420:	a801      	add	r0, sp, #4
  401422:	4b09      	ldr	r3, [pc, #36]	; (401448 <_init_chip+0x48>)
  401424:	4798      	blx	r3
  401426:	4a09      	ldr	r2, [pc, #36]	; (40144c <_init_chip+0x4c>)
  401428:	6813      	ldr	r3, [r2, #0]
  40142a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  40142e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  401432:	6013      	str	r3, [r2, #0]
  401434:	4b06      	ldr	r3, [pc, #24]	; (401450 <_init_chip+0x50>)
  401436:	4798      	blx	r3
  401438:	b003      	add	sp, #12
  40143a:	f85d fb04 	ldr.w	pc, [sp], #4
  40143e:	bf00      	nop
  401440:	00400b79 	.word	0x00400b79
  401444:	e000ed00 	.word	0xe000ed00
  401448:	00400b87 	.word	0x00400b87
  40144c:	400e0c00 	.word	0x400e0c00
  401450:	004017c5 	.word	0x004017c5

00401454 <_ffs>:
  401454:	b430      	push	{r4, r5}
  401456:	2500      	movs	r5, #0
  401458:	428d      	cmp	r5, r1
  40145a:	d210      	bcs.n	40147e <_ffs+0x2a>
  40145c:	2201      	movs	r2, #1
  40145e:	2300      	movs	r3, #0
  401460:	2b1f      	cmp	r3, #31
  401462:	d80a      	bhi.n	40147a <_ffs+0x26>
  401464:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401468:	4222      	tst	r2, r4
  40146a:	d102      	bne.n	401472 <_ffs+0x1e>
  40146c:	0052      	lsls	r2, r2, #1
  40146e:	3301      	adds	r3, #1
  401470:	e7f6      	b.n	401460 <_ffs+0xc>
  401472:	eb03 1045 	add.w	r0, r3, r5, lsl #5
  401476:	bc30      	pop	{r4, r5}
  401478:	4770      	bx	lr
  40147a:	3501      	adds	r5, #1
  40147c:	e7ec      	b.n	401458 <_ffs+0x4>
  40147e:	f04f 30ff 	mov.w	r0, #4294967295
  401482:	e7f8      	b.n	401476 <_ffs+0x22>

00401484 <_ext_irq_handler>:
  401484:	b510      	push	{r4, lr}
  401486:	b086      	sub	sp, #24
  401488:	2300      	movs	r3, #0
  40148a:	9301      	str	r3, [sp, #4]
  40148c:	9302      	str	r3, [sp, #8]
  40148e:	9303      	str	r3, [sp, #12]
  401490:	9304      	str	r3, [sp, #16]
  401492:	9305      	str	r3, [sp, #20]
  401494:	4b21      	ldr	r3, [pc, #132]	; (40151c <_ext_irq_handler+0x98>)
  401496:	6818      	ldr	r0, [r3, #0]
  401498:	22f8      	movs	r2, #248	; 0xf8
  40149a:	4921      	ldr	r1, [pc, #132]	; (401520 <_ext_irq_handler+0x9c>)
  40149c:	3000      	adds	r0, #0
  40149e:	bf18      	it	ne
  4014a0:	2001      	movne	r0, #1
  4014a2:	4b20      	ldr	r3, [pc, #128]	; (401524 <_ext_irq_handler+0xa0>)
  4014a4:	4798      	blx	r3
  4014a6:	4b20      	ldr	r3, [pc, #128]	; (401528 <_ext_irq_handler+0xa4>)
  4014a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  4014aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4014ac:	4013      	ands	r3, r2
  4014ae:	9301      	str	r3, [sp, #4]
  4014b0:	491e      	ldr	r1, [pc, #120]	; (40152c <_ext_irq_handler+0xa8>)
  4014b2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  4014b4:	6c89      	ldr	r1, [r1, #72]	; 0x48
  4014b6:	400a      	ands	r2, r1
  4014b8:	9202      	str	r2, [sp, #8]
  4014ba:	4313      	orrs	r3, r2
  4014bc:	e025      	b.n	40150a <_ext_irq_handler+0x86>
  4014be:	4b17      	ldr	r3, [pc, #92]	; (40151c <_ext_irq_handler+0x98>)
  4014c0:	681b      	ldr	r3, [r3, #0]
  4014c2:	4620      	mov	r0, r4
  4014c4:	4798      	blx	r3
  4014c6:	1163      	asrs	r3, r4, #5
  4014c8:	f004 041f 	and.w	r4, r4, #31
  4014cc:	2201      	movs	r2, #1
  4014ce:	fa02 f404 	lsl.w	r4, r2, r4
  4014d2:	aa06      	add	r2, sp, #24
  4014d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014d8:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4014dc:	ea22 0204 	bic.w	r2, r2, r4
  4014e0:	f843 2c14 	str.w	r2, [r3, #-20]
  4014e4:	2105      	movs	r1, #5
  4014e6:	a801      	add	r0, sp, #4
  4014e8:	4b11      	ldr	r3, [pc, #68]	; (401530 <_ext_irq_handler+0xac>)
  4014ea:	4798      	blx	r3
  4014ec:	4604      	mov	r4, r0
  4014ee:	f1b4 3fff 	cmp.w	r4, #4294967295
  4014f2:	d1e4      	bne.n	4014be <_ext_irq_handler+0x3a>
  4014f4:	4a0c      	ldr	r2, [pc, #48]	; (401528 <_ext_irq_handler+0xa4>)
  4014f6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  4014f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
  4014fa:	400b      	ands	r3, r1
  4014fc:	9301      	str	r3, [sp, #4]
  4014fe:	490b      	ldr	r1, [pc, #44]	; (40152c <_ext_irq_handler+0xa8>)
  401500:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
  401502:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  401504:	4002      	ands	r2, r0
  401506:	9202      	str	r2, [sp, #8]
  401508:	4313      	orrs	r3, r2
  40150a:	b12b      	cbz	r3, 401518 <_ext_irq_handler+0x94>
  40150c:	2105      	movs	r1, #5
  40150e:	a801      	add	r0, sp, #4
  401510:	4b07      	ldr	r3, [pc, #28]	; (401530 <_ext_irq_handler+0xac>)
  401512:	4798      	blx	r3
  401514:	4604      	mov	r4, r0
  401516:	e7ea      	b.n	4014ee <_ext_irq_handler+0x6a>
  401518:	b006      	add	sp, #24
  40151a:	bd10      	pop	{r4, pc}
  40151c:	204000c4 	.word	0x204000c4
  401520:	004030e8 	.word	0x004030e8
  401524:	00401219 	.word	0x00401219
  401528:	400e0e00 	.word	0x400e0e00
  40152c:	400e1000 	.word	0x400e1000
  401530:	00401455 	.word	0x00401455

00401534 <_pio_get_hardware_index>:
  401534:	b510      	push	{r4, lr}
  401536:	4604      	mov	r4, r0
  401538:	22d2      	movs	r2, #210	; 0xd2
  40153a:	4905      	ldr	r1, [pc, #20]	; (401550 <_pio_get_hardware_index+0x1c>)
  40153c:	3000      	adds	r0, #0
  40153e:	bf18      	it	ne
  401540:	2001      	movne	r0, #1
  401542:	4b04      	ldr	r3, [pc, #16]	; (401554 <_pio_get_hardware_index+0x20>)
  401544:	4798      	blx	r3
  401546:	4804      	ldr	r0, [pc, #16]	; (401558 <_pio_get_hardware_index+0x24>)
  401548:	4420      	add	r0, r4
  40154a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40154e:	bd10      	pop	{r4, pc}
  401550:	004030e8 	.word	0x004030e8
  401554:	00401219 	.word	0x00401219
  401558:	bff1f200 	.word	0xbff1f200

0040155c <_pio_get_index>:
  40155c:	b510      	push	{r4, lr}
  40155e:	4604      	mov	r4, r0
  401560:	22e0      	movs	r2, #224	; 0xe0
  401562:	490d      	ldr	r1, [pc, #52]	; (401598 <_pio_get_index+0x3c>)
  401564:	3000      	adds	r0, #0
  401566:	bf18      	it	ne
  401568:	2001      	movne	r0, #1
  40156a:	4b0c      	ldr	r3, [pc, #48]	; (40159c <_pio_get_index+0x40>)
  40156c:	4798      	blx	r3
  40156e:	4620      	mov	r0, r4
  401570:	4b0b      	ldr	r3, [pc, #44]	; (4015a0 <_pio_get_index+0x44>)
  401572:	4798      	blx	r3
  401574:	2300      	movs	r3, #0
  401576:	2b01      	cmp	r3, #1
  401578:	d80b      	bhi.n	401592 <_pio_get_index+0x36>
  40157a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40157e:	008a      	lsls	r2, r1, #2
  401580:	4908      	ldr	r1, [pc, #32]	; (4015a4 <_pio_get_index+0x48>)
  401582:	5c8a      	ldrb	r2, [r1, r2]
  401584:	4290      	cmp	r0, r2
  401586:	d002      	beq.n	40158e <_pio_get_index+0x32>
  401588:	3301      	adds	r3, #1
  40158a:	b2db      	uxtb	r3, r3
  40158c:	e7f3      	b.n	401576 <_pio_get_index+0x1a>
  40158e:	b258      	sxtb	r0, r3
  401590:	bd10      	pop	{r4, pc}
  401592:	f04f 30ff 	mov.w	r0, #4294967295
  401596:	bd10      	pop	{r4, pc}
  401598:	004030e8 	.word	0x004030e8
  40159c:	00401219 	.word	0x00401219
  4015a0:	00401535 	.word	0x00401535
  4015a4:	004030ac 	.word	0x004030ac

004015a8 <_pio_init>:
  4015a8:	b538      	push	{r3, r4, r5, lr}
  4015aa:	4604      	mov	r4, r0
  4015ac:	f240 1259 	movw	r2, #345	; 0x159
  4015b0:	4929      	ldr	r1, [pc, #164]	; (401658 <_pio_init+0xb0>)
  4015b2:	3000      	adds	r0, #0
  4015b4:	bf18      	it	ne
  4015b6:	2001      	movne	r0, #1
  4015b8:	4b28      	ldr	r3, [pc, #160]	; (40165c <_pio_init+0xb4>)
  4015ba:	4798      	blx	r3
  4015bc:	4620      	mov	r0, r4
  4015be:	4b28      	ldr	r3, [pc, #160]	; (401660 <_pio_init+0xb8>)
  4015c0:	4798      	blx	r3
  4015c2:	2800      	cmp	r0, #0
  4015c4:	db43      	blt.n	40164e <_pio_init+0xa6>
  4015c6:	4d27      	ldr	r5, [pc, #156]	; (401664 <_pio_init+0xbc>)
  4015c8:	00c2      	lsls	r2, r0, #3
  4015ca:	1a11      	subs	r1, r2, r0
  4015cc:	008b      	lsls	r3, r1, #2
  4015ce:	442b      	add	r3, r5
  4015d0:	6899      	ldr	r1, [r3, #8]
  4015d2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  4015d6:	68d9      	ldr	r1, [r3, #12]
  4015d8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
  4015dc:	6919      	ldr	r1, [r3, #16]
  4015de:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
  4015e2:	699b      	ldr	r3, [r3, #24]
  4015e4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  4015e8:	1a10      	subs	r0, r2, r0
  4015ea:	0083      	lsls	r3, r0, #2
  4015ec:	442b      	add	r3, r5
  4015ee:	695b      	ldr	r3, [r3, #20]
  4015f0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
  4015f4:	4620      	mov	r0, r4
  4015f6:	4b1c      	ldr	r3, [pc, #112]	; (401668 <_pio_init+0xc0>)
  4015f8:	4798      	blx	r3
  4015fa:	4428      	add	r0, r5
  4015fc:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401600:	2b00      	cmp	r3, #0
  401602:	db0c      	blt.n	40161e <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401604:	095a      	lsrs	r2, r3, #5
  401606:	f003 001f 	and.w	r0, r3, #31
  40160a:	2101      	movs	r1, #1
  40160c:	4081      	lsls	r1, r0
  40160e:	3220      	adds	r2, #32
  401610:	4816      	ldr	r0, [pc, #88]	; (40166c <_pio_init+0xc4>)
  401612:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401616:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40161a:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40161e:	2b00      	cmp	r3, #0
  401620:	db08      	blt.n	401634 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401622:	095a      	lsrs	r2, r3, #5
  401624:	f003 001f 	and.w	r0, r3, #31
  401628:	2101      	movs	r1, #1
  40162a:	4081      	lsls	r1, r0
  40162c:	3260      	adds	r2, #96	; 0x60
  40162e:	480f      	ldr	r0, [pc, #60]	; (40166c <_pio_init+0xc4>)
  401630:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401634:	2b00      	cmp	r3, #0
  401636:	db0d      	blt.n	401654 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401638:	0959      	lsrs	r1, r3, #5
  40163a:	f003 031f 	and.w	r3, r3, #31
  40163e:	2201      	movs	r2, #1
  401640:	fa02 f303 	lsl.w	r3, r2, r3
  401644:	4a09      	ldr	r2, [pc, #36]	; (40166c <_pio_init+0xc4>)
  401646:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  40164a:	2000      	movs	r0, #0
  40164c:	bd38      	pop	{r3, r4, r5, pc}
  40164e:	f06f 0010 	mvn.w	r0, #16
  401652:	bd38      	pop	{r3, r4, r5, pc}
  401654:	2000      	movs	r0, #0
  401656:	bd38      	pop	{r3, r4, r5, pc}
  401658:	004030e8 	.word	0x004030e8
  40165c:	00401219 	.word	0x00401219
  401660:	0040155d 	.word	0x0040155d
  401664:	004030ac 	.word	0x004030ac
  401668:	00401535 	.word	0x00401535
  40166c:	e000e100 	.word	0xe000e100

00401670 <PIOB_Handler>:
  401670:	b508      	push	{r3, lr}
  401672:	4b01      	ldr	r3, [pc, #4]	; (401678 <PIOB_Handler+0x8>)
  401674:	4798      	blx	r3
  401676:	bd08      	pop	{r3, pc}
  401678:	00401485 	.word	0x00401485

0040167c <PIOA_Handler>:
  40167c:	b508      	push	{r3, lr}
  40167e:	4b01      	ldr	r3, [pc, #4]	; (401684 <PIOA_Handler+0x8>)
  401680:	4798      	blx	r3
  401682:	bd08      	pop	{r3, pc}
  401684:	00401485 	.word	0x00401485

00401688 <_ext_irq_init>:
  401688:	b538      	push	{r3, r4, r5, lr}
  40168a:	4605      	mov	r5, r0
  40168c:	4804      	ldr	r0, [pc, #16]	; (4016a0 <_ext_irq_init+0x18>)
  40168e:	4c05      	ldr	r4, [pc, #20]	; (4016a4 <_ext_irq_init+0x1c>)
  401690:	47a0      	blx	r4
  401692:	4805      	ldr	r0, [pc, #20]	; (4016a8 <_ext_irq_init+0x20>)
  401694:	47a0      	blx	r4
  401696:	4b05      	ldr	r3, [pc, #20]	; (4016ac <_ext_irq_init+0x24>)
  401698:	601d      	str	r5, [r3, #0]
  40169a:	2000      	movs	r0, #0
  40169c:	bd38      	pop	{r3, r4, r5, pc}
  40169e:	bf00      	nop
  4016a0:	400e0e00 	.word	0x400e0e00
  4016a4:	004015a9 	.word	0x004015a9
  4016a8:	400e1000 	.word	0x400e1000
  4016ac:	204000c4 	.word	0x204000c4

004016b0 <_ext_irq_enable>:
  4016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016b4:	4604      	mov	r4, r0
  4016b6:	460f      	mov	r7, r1
  4016b8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 40170c <_ext_irq_enable+0x5c>
  4016bc:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  4016c0:	4641      	mov	r1, r8
  4016c2:	289f      	cmp	r0, #159	; 0x9f
  4016c4:	bf8c      	ite	hi
  4016c6:	2000      	movhi	r0, #0
  4016c8:	2001      	movls	r0, #1
  4016ca:	4e0e      	ldr	r6, [pc, #56]	; (401704 <_ext_irq_enable+0x54>)
  4016cc:	47b0      	blx	r6
  4016ce:	b2e5      	uxtb	r5, r4
  4016d0:	22c3      	movs	r2, #195	; 0xc3
  4016d2:	4641      	mov	r1, r8
  4016d4:	2d9f      	cmp	r5, #159	; 0x9f
  4016d6:	bf8c      	ite	hi
  4016d8:	2000      	movhi	r0, #0
  4016da:	2001      	movls	r0, #1
  4016dc:	47b0      	blx	r6
  4016de:	096d      	lsrs	r5, r5, #5
  4016e0:	4b09      	ldr	r3, [pc, #36]	; (401708 <_ext_irq_enable+0x58>)
  4016e2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
  4016e6:	f004 041f 	and.w	r4, r4, #31
  4016ea:	b937      	cbnz	r7, 4016fa <_ext_irq_enable+0x4a>
  4016ec:	2301      	movs	r3, #1
  4016ee:	fa03 f404 	lsl.w	r4, r3, r4
  4016f2:	646c      	str	r4, [r5, #68]	; 0x44
  4016f4:	2000      	movs	r0, #0
  4016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016fa:	2301      	movs	r3, #1
  4016fc:	fa03 f404 	lsl.w	r4, r3, r4
  401700:	642c      	str	r4, [r5, #64]	; 0x40
  401702:	e7f7      	b.n	4016f4 <_ext_irq_enable+0x44>
  401704:	00401219 	.word	0x00401219
  401708:	400e0e00 	.word	0x400e0e00
  40170c:	004030e8 	.word	0x004030e8

00401710 <_pmc_init_sources>:
  401710:	4a14      	ldr	r2, [pc, #80]	; (401764 <_pmc_init_sources+0x54>)
  401712:	6a11      	ldr	r1, [r2, #32]
  401714:	4b14      	ldr	r3, [pc, #80]	; (401768 <_pmc_init_sources+0x58>)
  401716:	430b      	orrs	r3, r1
  401718:	6213      	str	r3, [r2, #32]
  40171a:	4b12      	ldr	r3, [pc, #72]	; (401764 <_pmc_init_sources+0x54>)
  40171c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40171e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401722:	d0fa      	beq.n	40171a <_pmc_init_sources+0xa>
  401724:	490f      	ldr	r1, [pc, #60]	; (401764 <_pmc_init_sources+0x54>)
  401726:	6a0a      	ldr	r2, [r1, #32]
  401728:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  40172c:	4b0f      	ldr	r3, [pc, #60]	; (40176c <_pmc_init_sources+0x5c>)
  40172e:	4313      	orrs	r3, r2
  401730:	620b      	str	r3, [r1, #32]
  401732:	4b0c      	ldr	r3, [pc, #48]	; (401764 <_pmc_init_sources+0x54>)
  401734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401736:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40173a:	d0fa      	beq.n	401732 <_pmc_init_sources+0x22>
  40173c:	4b09      	ldr	r3, [pc, #36]	; (401764 <_pmc_init_sources+0x54>)
  40173e:	6a1a      	ldr	r2, [r3, #32]
  401740:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  401744:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  401748:	621a      	str	r2, [r3, #32]
  40174a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  40174c:	4a08      	ldr	r2, [pc, #32]	; (401770 <_pmc_init_sources+0x60>)
  40174e:	400a      	ands	r2, r1
  401750:	629a      	str	r2, [r3, #40]	; 0x28
  401752:	4a08      	ldr	r2, [pc, #32]	; (401774 <_pmc_init_sources+0x64>)
  401754:	629a      	str	r2, [r3, #40]	; 0x28
  401756:	4b03      	ldr	r3, [pc, #12]	; (401764 <_pmc_init_sources+0x54>)
  401758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40175a:	f013 0f02 	tst.w	r3, #2
  40175e:	d0fa      	beq.n	401756 <_pmc_init_sources+0x46>
  401760:	4770      	bx	lr
  401762:	bf00      	nop
  401764:	400e0600 	.word	0x400e0600
  401768:	00370008 	.word	0x00370008
  40176c:	00370020 	.word	0x00370020
  401770:	f800ffff 	.word	0xf800ffff
  401774:	20183f01 	.word	0x20183f01

00401778 <_pmc_init_master_clock>:
  401778:	4a11      	ldr	r2, [pc, #68]	; (4017c0 <_pmc_init_master_clock+0x48>)
  40177a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40177c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401780:	6313      	str	r3, [r2, #48]	; 0x30
  401782:	4b0f      	ldr	r3, [pc, #60]	; (4017c0 <_pmc_init_master_clock+0x48>)
  401784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401786:	f013 0f08 	tst.w	r3, #8
  40178a:	d0fa      	beq.n	401782 <_pmc_init_master_clock+0xa>
  40178c:	4a0c      	ldr	r2, [pc, #48]	; (4017c0 <_pmc_init_master_clock+0x48>)
  40178e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401798:	6313      	str	r3, [r2, #48]	; 0x30
  40179a:	4b09      	ldr	r3, [pc, #36]	; (4017c0 <_pmc_init_master_clock+0x48>)
  40179c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40179e:	f013 0f08 	tst.w	r3, #8
  4017a2:	d0fa      	beq.n	40179a <_pmc_init_master_clock+0x22>
  4017a4:	4a06      	ldr	r2, [pc, #24]	; (4017c0 <_pmc_init_master_clock+0x48>)
  4017a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017a8:	f023 0303 	bic.w	r3, r3, #3
  4017ac:	f043 0302 	orr.w	r3, r3, #2
  4017b0:	6313      	str	r3, [r2, #48]	; 0x30
  4017b2:	4b03      	ldr	r3, [pc, #12]	; (4017c0 <_pmc_init_master_clock+0x48>)
  4017b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017b6:	f013 0f08 	tst.w	r3, #8
  4017ba:	d0fa      	beq.n	4017b2 <_pmc_init_master_clock+0x3a>
  4017bc:	4770      	bx	lr
  4017be:	bf00      	nop
  4017c0:	400e0600 	.word	0x400e0600

004017c4 <_pmc_init>:
  4017c4:	b508      	push	{r3, lr}
  4017c6:	4b02      	ldr	r3, [pc, #8]	; (4017d0 <_pmc_init+0xc>)
  4017c8:	4798      	blx	r3
  4017ca:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <_pmc_init+0x10>)
  4017cc:	4798      	blx	r3
  4017ce:	bd08      	pop	{r3, pc}
  4017d0:	00401711 	.word	0x00401711
  4017d4:	00401779 	.word	0x00401779

004017d8 <_pwm_get_cfg>:
  4017d8:	2300      	movs	r3, #0
  4017da:	2b01      	cmp	r3, #1
  4017dc:	d80f      	bhi.n	4017fe <_pwm_get_cfg+0x26>
  4017de:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4017e2:	008a      	lsls	r2, r1, #2
  4017e4:	4907      	ldr	r1, [pc, #28]	; (401804 <_pwm_get_cfg+0x2c>)
  4017e6:	588a      	ldr	r2, [r1, r2]
  4017e8:	4282      	cmp	r2, r0
  4017ea:	d002      	beq.n	4017f2 <_pwm_get_cfg+0x1a>
  4017ec:	3301      	adds	r3, #1
  4017ee:	b2db      	uxtb	r3, r3
  4017f0:	e7f3      	b.n	4017da <_pwm_get_cfg+0x2>
  4017f2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4017f6:	009a      	lsls	r2, r3, #2
  4017f8:	4608      	mov	r0, r1
  4017fa:	4410      	add	r0, r2
  4017fc:	4770      	bx	lr
  4017fe:	2000      	movs	r0, #0
  401800:	4770      	bx	lr
  401802:	bf00      	nop
  401804:	00403104 	.word	0x00403104

00401808 <_pwm_init_irq_param>:
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <_pwm_init_irq_param+0x1c>)
  40180a:	4298      	cmp	r0, r3
  40180c:	d003      	beq.n	401816 <_pwm_init_irq_param+0xe>
  40180e:	4b06      	ldr	r3, [pc, #24]	; (401828 <_pwm_init_irq_param+0x20>)
  401810:	4298      	cmp	r0, r3
  401812:	d003      	beq.n	40181c <_pwm_init_irq_param+0x14>
  401814:	4770      	bx	lr
  401816:	4b05      	ldr	r3, [pc, #20]	; (40182c <_pwm_init_irq_param+0x24>)
  401818:	6019      	str	r1, [r3, #0]
  40181a:	e7f8      	b.n	40180e <_pwm_init_irq_param+0x6>
  40181c:	4b03      	ldr	r3, [pc, #12]	; (40182c <_pwm_init_irq_param+0x24>)
  40181e:	6059      	str	r1, [r3, #4]
  401820:	e7f8      	b.n	401814 <_pwm_init_irq_param+0xc>
  401822:	bf00      	nop
  401824:	40020000 	.word	0x40020000
  401828:	4005c000 	.word	0x4005c000
  40182c:	204000c8 	.word	0x204000c8

00401830 <_pwm_interrupt_handler>:
  401830:	b508      	push	{r3, lr}
  401832:	6903      	ldr	r3, [r0, #16]
  401834:	69db      	ldr	r3, [r3, #28]
  401836:	b113      	cbz	r3, 40183e <_pwm_interrupt_handler+0xe>
  401838:	6803      	ldr	r3, [r0, #0]
  40183a:	b103      	cbz	r3, 40183e <_pwm_interrupt_handler+0xe>
  40183c:	4798      	blx	r3
  40183e:	bd08      	pop	{r3, pc}

00401840 <PWM0_Handler>:
  401840:	b508      	push	{r3, lr}
  401842:	4b02      	ldr	r3, [pc, #8]	; (40184c <PWM0_Handler+0xc>)
  401844:	6818      	ldr	r0, [r3, #0]
  401846:	4b02      	ldr	r3, [pc, #8]	; (401850 <PWM0_Handler+0x10>)
  401848:	4798      	blx	r3
  40184a:	bd08      	pop	{r3, pc}
  40184c:	204000c8 	.word	0x204000c8
  401850:	00401831 	.word	0x00401831

00401854 <PWM1_Handler>:
  401854:	b508      	push	{r3, lr}
  401856:	4b02      	ldr	r3, [pc, #8]	; (401860 <PWM1_Handler+0xc>)
  401858:	6858      	ldr	r0, [r3, #4]
  40185a:	4b02      	ldr	r3, [pc, #8]	; (401864 <PWM1_Handler+0x10>)
  40185c:	4798      	blx	r3
  40185e:	bd08      	pop	{r3, pc}
  401860:	204000c8 	.word	0x204000c8
  401864:	00401831 	.word	0x00401831

00401868 <_pwm_init>:
  401868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40186a:	4606      	mov	r6, r0
  40186c:	460c      	mov	r4, r1
  40186e:	1c08      	adds	r0, r1, #0
  401870:	bf18      	it	ne
  401872:	2001      	movne	r0, #1
  401874:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401878:	4944      	ldr	r1, [pc, #272]	; (40198c <_pwm_init+0x124>)
  40187a:	4b45      	ldr	r3, [pc, #276]	; (401990 <_pwm_init+0x128>)
  40187c:	4798      	blx	r3
  40187e:	4620      	mov	r0, r4
  401880:	4b44      	ldr	r3, [pc, #272]	; (401994 <_pwm_init+0x12c>)
  401882:	4798      	blx	r3
  401884:	4605      	mov	r5, r0
  401886:	6134      	str	r4, [r6, #16]
  401888:	6883      	ldr	r3, [r0, #8]
  40188a:	6023      	str	r3, [r4, #0]
  40188c:	68c3      	ldr	r3, [r0, #12]
  40188e:	67e3      	str	r3, [r4, #124]	; 0x7c
  401890:	6903      	ldr	r3, [r0, #16]
  401892:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  401896:	6943      	ldr	r3, [r0, #20]
  401898:	65e3      	str	r3, [r4, #92]	; 0x5c
  40189a:	6983      	ldr	r3, [r0, #24]
  40189c:	66a3      	str	r3, [r4, #104]	; 0x68
  40189e:	69c3      	ldr	r3, [r0, #28]
  4018a0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  4018a4:	6a03      	ldr	r3, [r0, #32]
  4018a6:	66e3      	str	r3, [r4, #108]	; 0x6c
  4018a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4018aa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  4018ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
  4018b0:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  4018b4:	2300      	movs	r3, #0
  4018b6:	e019      	b.n	4018ec <_pwm_init+0x84>
  4018b8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4018ba:	0118      	lsls	r0, r3, #4
  4018bc:	eb07 0e00 	add.w	lr, r7, r0
  4018c0:	5c3a      	ldrb	r2, [r7, r0]
  4018c2:	f8de 1004 	ldr.w	r1, [lr, #4]
  4018c6:	3210      	adds	r2, #16
  4018c8:	0152      	lsls	r2, r2, #5
  4018ca:	50a1      	str	r1, [r4, r2]
  4018cc:	5c3a      	ldrb	r2, [r7, r0]
  4018ce:	f8de 100c 	ldr.w	r1, [lr, #12]
  4018d2:	3210      	adds	r2, #16
  4018d4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4018d8:	6051      	str	r1, [r2, #4]
  4018da:	5c3a      	ldrb	r2, [r7, r0]
  4018dc:	f8de 1008 	ldr.w	r1, [lr, #8]
  4018e0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4018e4:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
  4018e8:	3301      	adds	r3, #1
  4018ea:	b25b      	sxtb	r3, r3
  4018ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4018ee:	4293      	cmp	r3, r2
  4018f0:	d3e2      	bcc.n	4018b8 <_pwm_init+0x50>
  4018f2:	2300      	movs	r3, #0
  4018f4:	e014      	b.n	401920 <_pwm_init+0xb8>
  4018f6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4018f8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4018fc:	0082      	lsls	r2, r0, #2
  4018fe:	eb01 0e02 	add.w	lr, r1, r2
  401902:	5c88      	ldrb	r0, [r1, r2]
  401904:	f8de 7004 	ldr.w	r7, [lr, #4]
  401908:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  40190c:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
  401910:	5c8a      	ldrb	r2, [r1, r2]
  401912:	f8de 1008 	ldr.w	r1, [lr, #8]
  401916:	3213      	adds	r2, #19
  401918:	0112      	lsls	r2, r2, #4
  40191a:	50a1      	str	r1, [r4, r2]
  40191c:	3301      	adds	r3, #1
  40191e:	b25b      	sxtb	r3, r3
  401920:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401922:	4293      	cmp	r3, r2
  401924:	d3e7      	bcc.n	4018f6 <_pwm_init+0x8e>
  401926:	4631      	mov	r1, r6
  401928:	4620      	mov	r0, r4
  40192a:	4b1b      	ldr	r3, [pc, #108]	; (401998 <_pwm_init+0x130>)
  40192c:	4798      	blx	r3
  40192e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401932:	2b00      	cmp	r3, #0
  401934:	db0d      	blt.n	401952 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401936:	095a      	lsrs	r2, r3, #5
  401938:	f003 031f 	and.w	r3, r3, #31
  40193c:	2101      	movs	r1, #1
  40193e:	fa01 f303 	lsl.w	r3, r1, r3
  401942:	3220      	adds	r2, #32
  401944:	4915      	ldr	r1, [pc, #84]	; (40199c <_pwm_init+0x134>)
  401946:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40194a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40194e:	f3bf 8f6f 	isb	sy
  401952:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401956:	2b00      	cmp	r3, #0
  401958:	db09      	blt.n	40196e <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40195a:	095a      	lsrs	r2, r3, #5
  40195c:	f003 031f 	and.w	r3, r3, #31
  401960:	2101      	movs	r1, #1
  401962:	fa01 f303 	lsl.w	r3, r1, r3
  401966:	3260      	adds	r2, #96	; 0x60
  401968:	490c      	ldr	r1, [pc, #48]	; (40199c <_pwm_init+0x134>)
  40196a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40196e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401972:	2b00      	cmp	r3, #0
  401974:	db08      	blt.n	401988 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401976:	0959      	lsrs	r1, r3, #5
  401978:	f003 031f 	and.w	r3, r3, #31
  40197c:	2201      	movs	r2, #1
  40197e:	fa02 f303 	lsl.w	r3, r2, r3
  401982:	4a06      	ldr	r2, [pc, #24]	; (40199c <_pwm_init+0x134>)
  401984:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401988:	2000      	movs	r0, #0
  40198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40198c:	004031cc 	.word	0x004031cc
  401990:	00401219 	.word	0x00401219
  401994:	004017d9 	.word	0x004017d9
  401998:	00401809 	.word	0x00401809
  40199c:	e000e100 	.word	0xe000e100

004019a0 <_pwm_enable>:
  4019a0:	b538      	push	{r3, r4, r5, lr}
  4019a2:	4604      	mov	r4, r0
  4019a4:	f240 12b5 	movw	r2, #437	; 0x1b5
  4019a8:	490b      	ldr	r1, [pc, #44]	; (4019d8 <_pwm_enable+0x38>)
  4019aa:	3000      	adds	r0, #0
  4019ac:	bf18      	it	ne
  4019ae:	2001      	movne	r0, #1
  4019b0:	4b0a      	ldr	r3, [pc, #40]	; (4019dc <_pwm_enable+0x3c>)
  4019b2:	4798      	blx	r3
  4019b4:	6920      	ldr	r0, [r4, #16]
  4019b6:	4b0a      	ldr	r3, [pc, #40]	; (4019e0 <_pwm_enable+0x40>)
  4019b8:	4798      	blx	r3
  4019ba:	2300      	movs	r3, #0
  4019bc:	e008      	b.n	4019d0 <_pwm_enable+0x30>
  4019be:	6921      	ldr	r1, [r4, #16]
  4019c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  4019c2:	011a      	lsls	r2, r3, #4
  4019c4:	5cad      	ldrb	r5, [r5, r2]
  4019c6:	2201      	movs	r2, #1
  4019c8:	40aa      	lsls	r2, r5
  4019ca:	604a      	str	r2, [r1, #4]
  4019cc:	3301      	adds	r3, #1
  4019ce:	b25b      	sxtb	r3, r3
  4019d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4019d2:	4293      	cmp	r3, r2
  4019d4:	d3f3      	bcc.n	4019be <_pwm_enable+0x1e>
  4019d6:	bd38      	pop	{r3, r4, r5, pc}
  4019d8:	004031cc 	.word	0x004031cc
  4019dc:	00401219 	.word	0x00401219
  4019e0:	004017d9 	.word	0x004017d9

004019e4 <_pwm_is_enabled>:
  4019e4:	b510      	push	{r4, lr}
  4019e6:	4604      	mov	r4, r0
  4019e8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4019ec:	4907      	ldr	r1, [pc, #28]	; (401a0c <_pwm_is_enabled+0x28>)
  4019ee:	3000      	adds	r0, #0
  4019f0:	bf18      	it	ne
  4019f2:	2001      	movne	r0, #1
  4019f4:	4b06      	ldr	r3, [pc, #24]	; (401a10 <_pwm_is_enabled+0x2c>)
  4019f6:	4798      	blx	r3
  4019f8:	6923      	ldr	r3, [r4, #16]
  4019fa:	68db      	ldr	r3, [r3, #12]
  4019fc:	f013 0f0f 	tst.w	r3, #15
  401a00:	d001      	beq.n	401a06 <_pwm_is_enabled+0x22>
  401a02:	2001      	movs	r0, #1
  401a04:	bd10      	pop	{r4, pc}
  401a06:	2000      	movs	r0, #0
  401a08:	bd10      	pop	{r4, pc}
  401a0a:	bf00      	nop
  401a0c:	004031cc 	.word	0x004031cc
  401a10:	00401219 	.word	0x00401219

00401a14 <_pwm_get_pwm>:
  401a14:	2000      	movs	r0, #0
  401a16:	4770      	bx	lr

00401a18 <_spi_sync_enable>:
  401a18:	2301      	movs	r3, #1
  401a1a:	6003      	str	r3, [r0, #0]
  401a1c:	2000      	movs	r0, #0
  401a1e:	4770      	bx	lr

00401a20 <_spi_get_hardware_index>:
  401a20:	4b04      	ldr	r3, [pc, #16]	; (401a34 <_spi_get_hardware_index+0x14>)
  401a22:	4403      	add	r3, r0
  401a24:	f3c3 4307 	ubfx	r3, r3, #16, #8
  401a28:	2b05      	cmp	r3, #5
  401a2a:	d001      	beq.n	401a30 <_spi_get_hardware_index+0x10>
  401a2c:	2000      	movs	r0, #0
  401a2e:	4770      	bx	lr
  401a30:	2001      	movs	r0, #1
  401a32:	4770      	bx	lr
  401a34:	bfff8000 	.word	0xbfff8000

00401a38 <_spi_m_sync_init>:
  401a38:	b570      	push	{r4, r5, r6, lr}
  401a3a:	4606      	mov	r6, r0
  401a3c:	460c      	mov	r4, r1
  401a3e:	4608      	mov	r0, r1
  401a40:	4b20      	ldr	r3, [pc, #128]	; (401ac4 <_spi_m_sync_init+0x8c>)
  401a42:	4798      	blx	r3
  401a44:	2300      	movs	r3, #0
  401a46:	b33b      	cbz	r3, 401a98 <_spi_m_sync_init+0x60>
  401a48:	2500      	movs	r5, #0
  401a4a:	f240 122f 	movw	r2, #303	; 0x12f
  401a4e:	491e      	ldr	r1, [pc, #120]	; (401ac8 <_spi_m_sync_init+0x90>)
  401a50:	2e00      	cmp	r6, #0
  401a52:	bf18      	it	ne
  401a54:	2c00      	cmpne	r4, #0
  401a56:	bf14      	ite	ne
  401a58:	2001      	movne	r0, #1
  401a5a:	2000      	moveq	r0, #0
  401a5c:	4b1b      	ldr	r3, [pc, #108]	; (401acc <_spi_m_sync_init+0x94>)
  401a5e:	4798      	blx	r3
  401a60:	b355      	cbz	r5, 401ab8 <_spi_m_sync_init+0x80>
  401a62:	6923      	ldr	r3, [r4, #16]
  401a64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a68:	d129      	bne.n	401abe <_spi_m_sync_init+0x86>
  401a6a:	2380      	movs	r3, #128	; 0x80
  401a6c:	6023      	str	r3, [r4, #0]
  401a6e:	6034      	str	r4, [r6, #0]
  401a70:	686a      	ldr	r2, [r5, #4]
  401a72:	4b17      	ldr	r3, [pc, #92]	; (401ad0 <_spi_m_sync_init+0x98>)
  401a74:	4013      	ands	r3, r2
  401a76:	6023      	str	r3, [r4, #0]
  401a78:	68ab      	ldr	r3, [r5, #8]
  401a7a:	4a16      	ldr	r2, [pc, #88]	; (401ad4 <_spi_m_sync_init+0x9c>)
  401a7c:	401a      	ands	r2, r3
  401a7e:	4b16      	ldr	r3, [pc, #88]	; (401ad8 <_spi_m_sync_init+0xa0>)
  401a80:	4313      	orrs	r3, r2
  401a82:	6063      	str	r3, [r4, #4]
  401a84:	68eb      	ldr	r3, [r5, #12]
  401a86:	6323      	str	r3, [r4, #48]	; 0x30
  401a88:	8a2b      	ldrh	r3, [r5, #16]
  401a8a:	80f3      	strh	r3, [r6, #6]
  401a8c:	68eb      	ldr	r3, [r5, #12]
  401a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401a92:	7133      	strb	r3, [r6, #4]
  401a94:	2000      	movs	r0, #0
  401a96:	bd70      	pop	{r4, r5, r6, pc}
  401a98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a9c:	008a      	lsls	r2, r1, #2
  401a9e:	490f      	ldr	r1, [pc, #60]	; (401adc <_spi_m_sync_init+0xa4>)
  401aa0:	5c8a      	ldrb	r2, [r1, r2]
  401aa2:	4290      	cmp	r0, r2
  401aa4:	d002      	beq.n	401aac <_spi_m_sync_init+0x74>
  401aa6:	3301      	adds	r3, #1
  401aa8:	b2db      	uxtb	r3, r3
  401aaa:	e7cc      	b.n	401a46 <_spi_m_sync_init+0xe>
  401aac:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401ab0:	00ab      	lsls	r3, r5, #2
  401ab2:	460d      	mov	r5, r1
  401ab4:	441d      	add	r5, r3
  401ab6:	e7c8      	b.n	401a4a <_spi_m_sync_init+0x12>
  401ab8:	f06f 000c 	mvn.w	r0, #12
  401abc:	bd70      	pop	{r4, r5, r6, pc}
  401abe:	f06f 0010 	mvn.w	r0, #16
  401ac2:	bd70      	pop	{r4, r5, r6, pc}
  401ac4:	00401a21 	.word	0x00401a21
  401ac8:	004031f8 	.word	0x004031f8
  401acc:	00401219 	.word	0x00401219
  401ad0:	feffff7c 	.word	0xfeffff7c
  401ad4:	fff1ff6f 	.word	0xfff1ff6f
  401ad8:	000e0010 	.word	0x000e0010
  401adc:	004031e4 	.word	0x004031e4

00401ae0 <_spi_m_sync_enable>:
  401ae0:	b510      	push	{r4, lr}
  401ae2:	4604      	mov	r4, r0
  401ae4:	b168      	cbz	r0, 401b02 <_spi_m_sync_enable+0x22>
  401ae6:	6803      	ldr	r3, [r0, #0]
  401ae8:	b14b      	cbz	r3, 401afe <_spi_m_sync_enable+0x1e>
  401aea:	2001      	movs	r0, #1
  401aec:	f240 126d 	movw	r2, #365	; 0x16d
  401af0:	4905      	ldr	r1, [pc, #20]	; (401b08 <_spi_m_sync_enable+0x28>)
  401af2:	4b06      	ldr	r3, [pc, #24]	; (401b0c <_spi_m_sync_enable+0x2c>)
  401af4:	4798      	blx	r3
  401af6:	6820      	ldr	r0, [r4, #0]
  401af8:	4b05      	ldr	r3, [pc, #20]	; (401b10 <_spi_m_sync_enable+0x30>)
  401afa:	4798      	blx	r3
  401afc:	bd10      	pop	{r4, pc}
  401afe:	2000      	movs	r0, #0
  401b00:	e7f4      	b.n	401aec <_spi_m_sync_enable+0xc>
  401b02:	2000      	movs	r0, #0
  401b04:	e7f2      	b.n	401aec <_spi_m_sync_enable+0xc>
  401b06:	bf00      	nop
  401b08:	004031f8 	.word	0x004031f8
  401b0c:	00401219 	.word	0x00401219
  401b10:	00401a19 	.word	0x00401a19

00401b14 <_spi_m_sync_trans>:
  401b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b18:	b086      	sub	sp, #24
  401b1a:	4607      	mov	r7, r0
  401b1c:	460d      	mov	r5, r1
  401b1e:	6804      	ldr	r4, [r0, #0]
  401b20:	680b      	ldr	r3, [r1, #0]
  401b22:	9301      	str	r3, [sp, #4]
  401b24:	684b      	ldr	r3, [r1, #4]
  401b26:	9302      	str	r3, [sp, #8]
  401b28:	2300      	movs	r3, #0
  401b2a:	9303      	str	r3, [sp, #12]
  401b2c:	9304      	str	r3, [sp, #16]
  401b2e:	7903      	ldrb	r3, [r0, #4]
  401b30:	f88d 3014 	strb.w	r3, [sp, #20]
  401b34:	1c26      	adds	r6, r4, #0
  401b36:	bf18      	it	ne
  401b38:	2601      	movne	r6, #1
  401b3a:	f44f 720b 	mov.w	r2, #556	; 0x22c
  401b3e:	4933      	ldr	r1, [pc, #204]	; (401c0c <_spi_m_sync_trans+0xf8>)
  401b40:	2800      	cmp	r0, #0
  401b42:	bf0c      	ite	eq
  401b44:	2000      	moveq	r0, #0
  401b46:	f006 0001 	andne.w	r0, r6, #1
  401b4a:	4b31      	ldr	r3, [pc, #196]	; (401c10 <_spi_m_sync_trans+0xfc>)
  401b4c:	4798      	blx	r3
  401b4e:	6923      	ldr	r3, [r4, #16]
  401b50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401b54:	d122      	bne.n	401b9c <_spi_m_sync_trans+0x88>
  401b56:	f06f 0013 	mvn.w	r0, #19
  401b5a:	e053      	b.n	401c04 <_spi_m_sync_trans+0xf0>
  401b5c:	2300      	movs	r3, #0
  401b5e:	e035      	b.n	401bcc <_spi_m_sync_trans+0xb8>
  401b60:	7850      	ldrb	r0, [r2, #1]
  401b62:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401b66:	3202      	adds	r2, #2
  401b68:	9201      	str	r2, [sp, #4]
  401b6a:	3301      	adds	r3, #1
  401b6c:	9303      	str	r3, [sp, #12]
  401b6e:	60e1      	str	r1, [r4, #12]
  401b70:	f8d4 8010 	ldr.w	r8, [r4, #16]
  401b74:	f240 221d 	movw	r2, #541	; 0x21d
  401b78:	4924      	ldr	r1, [pc, #144]	; (401c0c <_spi_m_sync_trans+0xf8>)
  401b7a:	4630      	mov	r0, r6
  401b7c:	4b24      	ldr	r3, [pc, #144]	; (401c10 <_spi_m_sync_trans+0xfc>)
  401b7e:	4798      	blx	r3
  401b80:	f018 0f08 	tst.w	r8, #8
  401b84:	d038      	beq.n	401bf8 <_spi_m_sync_trans+0xe4>
  401b86:	f06f 0012 	mvn.w	r0, #18
  401b8a:	2800      	cmp	r0, #0
  401b8c:	db36      	blt.n	401bfc <_spi_m_sync_trans+0xe8>
  401b8e:	9803      	ldr	r0, [sp, #12]
  401b90:	68ab      	ldr	r3, [r5, #8]
  401b92:	4298      	cmp	r0, r3
  401b94:	d302      	bcc.n	401b9c <_spi_m_sync_trans+0x88>
  401b96:	9a04      	ldr	r2, [sp, #16]
  401b98:	4293      	cmp	r3, r2
  401b9a:	d92f      	bls.n	401bfc <_spi_m_sync_trans+0xe8>
  401b9c:	6923      	ldr	r3, [r4, #16]
  401b9e:	f013 0f01 	tst.w	r3, #1
  401ba2:	d0db      	beq.n	401b5c <_spi_m_sync_trans+0x48>
  401ba4:	68a3      	ldr	r3, [r4, #8]
  401ba6:	b29b      	uxth	r3, r3
  401ba8:	9a02      	ldr	r2, [sp, #8]
  401baa:	b15a      	cbz	r2, 401bc4 <_spi_m_sync_trans+0xb0>
  401bac:	1c51      	adds	r1, r2, #1
  401bae:	9102      	str	r1, [sp, #8]
  401bb0:	7013      	strb	r3, [r2, #0]
  401bb2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401bb6:	2a01      	cmp	r2, #1
  401bb8:	d904      	bls.n	401bc4 <_spi_m_sync_trans+0xb0>
  401bba:	460a      	mov	r2, r1
  401bbc:	3101      	adds	r1, #1
  401bbe:	9102      	str	r1, [sp, #8]
  401bc0:	0a1b      	lsrs	r3, r3, #8
  401bc2:	7013      	strb	r3, [r2, #0]
  401bc4:	9b04      	ldr	r3, [sp, #16]
  401bc6:	3301      	adds	r3, #1
  401bc8:	9304      	str	r3, [sp, #16]
  401bca:	2301      	movs	r3, #1
  401bcc:	2b00      	cmp	r3, #0
  401bce:	d1cf      	bne.n	401b70 <_spi_m_sync_trans+0x5c>
  401bd0:	9b03      	ldr	r3, [sp, #12]
  401bd2:	9a04      	ldr	r2, [sp, #16]
  401bd4:	429a      	cmp	r2, r3
  401bd6:	d3cb      	bcc.n	401b70 <_spi_m_sync_trans+0x5c>
  401bd8:	88f9      	ldrh	r1, [r7, #6]
  401bda:	6922      	ldr	r2, [r4, #16]
  401bdc:	f012 0f02 	tst.w	r2, #2
  401be0:	d0c6      	beq.n	401b70 <_spi_m_sync_trans+0x5c>
  401be2:	9a01      	ldr	r2, [sp, #4]
  401be4:	2a00      	cmp	r2, #0
  401be6:	d0c0      	beq.n	401b6a <_spi_m_sync_trans+0x56>
  401be8:	1c51      	adds	r1, r2, #1
  401bea:	9101      	str	r1, [sp, #4]
  401bec:	7811      	ldrb	r1, [r2, #0]
  401bee:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401bf2:	2801      	cmp	r0, #1
  401bf4:	d8b4      	bhi.n	401b60 <_spi_m_sync_trans+0x4c>
  401bf6:	e7b8      	b.n	401b6a <_spi_m_sync_trans+0x56>
  401bf8:	2000      	movs	r0, #0
  401bfa:	e7c6      	b.n	401b8a <_spi_m_sync_trans+0x76>
  401bfc:	6923      	ldr	r3, [r4, #16]
  401bfe:	f413 7f00 	tst.w	r3, #512	; 0x200
  401c02:	d0fb      	beq.n	401bfc <_spi_m_sync_trans+0xe8>
  401c04:	b006      	add	sp, #24
  401c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c0a:	bf00      	nop
  401c0c:	004031f8 	.word	0x004031f8
  401c10:	00401219 	.word	0x00401219

00401c14 <_spi_get_spi_m_sync>:
  401c14:	2000      	movs	r0, #0
  401c16:	4770      	bx	lr

00401c18 <_system_time_init>:
  401c18:	4b03      	ldr	r3, [pc, #12]	; (401c28 <_system_time_init+0x10>)
  401c1a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401c1e:	605a      	str	r2, [r3, #4]
  401c20:	2205      	movs	r2, #5
  401c22:	601a      	str	r2, [r3, #0]
  401c24:	4770      	bx	lr
  401c26:	bf00      	nop
  401c28:	e000e010 	.word	0xe000e010

00401c2c <_delay_init>:
  401c2c:	b508      	push	{r3, lr}
  401c2e:	4b01      	ldr	r3, [pc, #4]	; (401c34 <_delay_init+0x8>)
  401c30:	4798      	blx	r3
  401c32:	bd08      	pop	{r3, pc}
  401c34:	00401c19 	.word	0x00401c19

00401c38 <_delay_cycles>:
  401c38:	0e08      	lsrs	r0, r1, #24
  401c3a:	e00d      	b.n	401c58 <_delay_cycles+0x20>
  401c3c:	4b0d      	ldr	r3, [pc, #52]	; (401c74 <_delay_cycles+0x3c>)
  401c3e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401c42:	6058      	str	r0, [r3, #4]
  401c44:	6098      	str	r0, [r3, #8]
  401c46:	4b0b      	ldr	r3, [pc, #44]	; (401c74 <_delay_cycles+0x3c>)
  401c48:	681b      	ldr	r3, [r3, #0]
  401c4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401c4e:	d0fa      	beq.n	401c46 <_delay_cycles+0xe>
  401c50:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401c54:	3101      	adds	r1, #1
  401c56:	4610      	mov	r0, r2
  401c58:	1e43      	subs	r3, r0, #1
  401c5a:	b2da      	uxtb	r2, r3
  401c5c:	2800      	cmp	r0, #0
  401c5e:	d1ed      	bne.n	401c3c <_delay_cycles+0x4>
  401c60:	4b04      	ldr	r3, [pc, #16]	; (401c74 <_delay_cycles+0x3c>)
  401c62:	6059      	str	r1, [r3, #4]
  401c64:	6099      	str	r1, [r3, #8]
  401c66:	4b03      	ldr	r3, [pc, #12]	; (401c74 <_delay_cycles+0x3c>)
  401c68:	681b      	ldr	r3, [r3, #0]
  401c6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401c6e:	d0fa      	beq.n	401c66 <_delay_cycles+0x2e>
  401c70:	4770      	bx	lr
  401c72:	bf00      	nop
  401c74:	e000e010 	.word	0xe000e010

00401c78 <get_cfg>:
  401c78:	2300      	movs	r3, #0
  401c7a:	2b01      	cmp	r3, #1
  401c7c:	d815      	bhi.n	401caa <get_cfg+0x32>
  401c7e:	b410      	push	{r4}
  401c80:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401c84:	008a      	lsls	r2, r1, #2
  401c86:	490a      	ldr	r1, [pc, #40]	; (401cb0 <get_cfg+0x38>)
  401c88:	588a      	ldr	r2, [r1, r2]
  401c8a:	4282      	cmp	r2, r0
  401c8c:	d007      	beq.n	401c9e <get_cfg+0x26>
  401c8e:	3301      	adds	r3, #1
  401c90:	b2db      	uxtb	r3, r3
  401c92:	2b01      	cmp	r3, #1
  401c94:	d9f4      	bls.n	401c80 <get_cfg+0x8>
  401c96:	2000      	movs	r0, #0
  401c98:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c9c:	4770      	bx	lr
  401c9e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401ca2:	00a3      	lsls	r3, r4, #2
  401ca4:	4608      	mov	r0, r1
  401ca6:	4418      	add	r0, r3
  401ca8:	e7f6      	b.n	401c98 <get_cfg+0x20>
  401caa:	2000      	movs	r0, #0
  401cac:	4770      	bx	lr
  401cae:	bf00      	nop
  401cb0:	20400000 	.word	0x20400000

00401cb4 <_tc_init_irq_param>:
  401cb4:	4b06      	ldr	r3, [pc, #24]	; (401cd0 <_tc_init_irq_param+0x1c>)
  401cb6:	4298      	cmp	r0, r3
  401cb8:	d003      	beq.n	401cc2 <_tc_init_irq_param+0xe>
  401cba:	4b06      	ldr	r3, [pc, #24]	; (401cd4 <_tc_init_irq_param+0x20>)
  401cbc:	4298      	cmp	r0, r3
  401cbe:	d003      	beq.n	401cc8 <_tc_init_irq_param+0x14>
  401cc0:	4770      	bx	lr
  401cc2:	4b05      	ldr	r3, [pc, #20]	; (401cd8 <_tc_init_irq_param+0x24>)
  401cc4:	6019      	str	r1, [r3, #0]
  401cc6:	e7f8      	b.n	401cba <_tc_init_irq_param+0x6>
  401cc8:	4b03      	ldr	r3, [pc, #12]	; (401cd8 <_tc_init_irq_param+0x24>)
  401cca:	6059      	str	r1, [r3, #4]
  401ccc:	e7f8      	b.n	401cc0 <_tc_init_irq_param+0xc>
  401cce:	bf00      	nop
  401cd0:	4000c000 	.word	0x4000c000
  401cd4:	40010000 	.word	0x40010000
  401cd8:	204000e8 	.word	0x204000e8

00401cdc <tc_interrupt_handler>:
  401cdc:	b508      	push	{r3, lr}
  401cde:	68c3      	ldr	r3, [r0, #12]
  401ce0:	6a1b      	ldr	r3, [r3, #32]
  401ce2:	f013 0f10 	tst.w	r3, #16
  401ce6:	d100      	bne.n	401cea <tc_interrupt_handler+0xe>
  401ce8:	bd08      	pop	{r3, pc}
  401cea:	6803      	ldr	r3, [r0, #0]
  401cec:	4798      	blx	r3
  401cee:	e7fb      	b.n	401ce8 <tc_interrupt_handler+0xc>

00401cf0 <_timer_init>:
  401cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cf2:	4607      	mov	r7, r0
  401cf4:	460c      	mov	r4, r1
  401cf6:	4608      	mov	r0, r1
  401cf8:	4b27      	ldr	r3, [pc, #156]	; (401d98 <_timer_init+0xa8>)
  401cfa:	4798      	blx	r3
  401cfc:	4605      	mov	r5, r0
  401cfe:	6886      	ldr	r6, [r0, #8]
  401d00:	60fc      	str	r4, [r7, #12]
  401d02:	2296      	movs	r2, #150	; 0x96
  401d04:	4925      	ldr	r1, [pc, #148]	; (401d9c <_timer_init+0xac>)
  401d06:	2001      	movs	r0, #1
  401d08:	4b25      	ldr	r3, [pc, #148]	; (401da0 <_timer_init+0xb0>)
  401d0a:	4798      	blx	r3
  401d0c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401d10:	d001      	beq.n	401d16 <_timer_init+0x26>
  401d12:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
  401d16:	6066      	str	r6, [r4, #4]
  401d18:	696b      	ldr	r3, [r5, #20]
  401d1a:	6163      	str	r3, [r4, #20]
  401d1c:	69ab      	ldr	r3, [r5, #24]
  401d1e:	61a3      	str	r3, [r4, #24]
  401d20:	68eb      	ldr	r3, [r5, #12]
  401d22:	6323      	str	r3, [r4, #48]	; 0x30
  401d24:	69eb      	ldr	r3, [r5, #28]
  401d26:	61e3      	str	r3, [r4, #28]
  401d28:	2310      	movs	r3, #16
  401d2a:	6263      	str	r3, [r4, #36]	; 0x24
  401d2c:	692b      	ldr	r3, [r5, #16]
  401d2e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  401d32:	4639      	mov	r1, r7
  401d34:	4620      	mov	r0, r4
  401d36:	4b1b      	ldr	r3, [pc, #108]	; (401da4 <_timer_init+0xb4>)
  401d38:	4798      	blx	r3
  401d3a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d3e:	2b00      	cmp	r3, #0
  401d40:	db0d      	blt.n	401d5e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d42:	095a      	lsrs	r2, r3, #5
  401d44:	f003 031f 	and.w	r3, r3, #31
  401d48:	2101      	movs	r1, #1
  401d4a:	fa01 f303 	lsl.w	r3, r1, r3
  401d4e:	3220      	adds	r2, #32
  401d50:	4915      	ldr	r1, [pc, #84]	; (401da8 <_timer_init+0xb8>)
  401d52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401d56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401d5a:	f3bf 8f6f 	isb	sy
  401d5e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d62:	2b00      	cmp	r3, #0
  401d64:	db09      	blt.n	401d7a <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d66:	095a      	lsrs	r2, r3, #5
  401d68:	f003 031f 	and.w	r3, r3, #31
  401d6c:	2101      	movs	r1, #1
  401d6e:	fa01 f303 	lsl.w	r3, r1, r3
  401d72:	3260      	adds	r2, #96	; 0x60
  401d74:	490c      	ldr	r1, [pc, #48]	; (401da8 <_timer_init+0xb8>)
  401d76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  401d7a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d7e:	2b00      	cmp	r3, #0
  401d80:	db08      	blt.n	401d94 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d82:	0959      	lsrs	r1, r3, #5
  401d84:	f003 031f 	and.w	r3, r3, #31
  401d88:	2201      	movs	r2, #1
  401d8a:	fa02 f303 	lsl.w	r3, r2, r3
  401d8e:	4a06      	ldr	r2, [pc, #24]	; (401da8 <_timer_init+0xb8>)
  401d90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401d94:	2000      	movs	r0, #0
  401d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d98:	00401c79 	.word	0x00401c79
  401d9c:	00403210 	.word	0x00403210
  401da0:	00401219 	.word	0x00401219
  401da4:	00401cb5 	.word	0x00401cb5
  401da8:	e000e100 	.word	0xe000e100

00401dac <_timer_start>:
  401dac:	68c3      	ldr	r3, [r0, #12]
  401dae:	2205      	movs	r2, #5
  401db0:	601a      	str	r2, [r3, #0]
  401db2:	4770      	bx	lr

00401db4 <_timer_is_started>:
  401db4:	68c3      	ldr	r3, [r0, #12]
  401db6:	6a18      	ldr	r0, [r3, #32]
  401db8:	f3c0 4000 	ubfx	r0, r0, #16, #1
  401dbc:	4770      	bx	lr
	...

00401dc0 <_timer_set_irq>:
  401dc0:	b508      	push	{r3, lr}
  401dc2:	68c0      	ldr	r0, [r0, #12]
  401dc4:	4b02      	ldr	r3, [pc, #8]	; (401dd0 <_timer_set_irq+0x10>)
  401dc6:	4798      	blx	r3
  401dc8:	7900      	ldrb	r0, [r0, #4]
  401dca:	4b02      	ldr	r3, [pc, #8]	; (401dd4 <_timer_set_irq+0x14>)
  401dcc:	4798      	blx	r3
  401dce:	bd08      	pop	{r3, pc}
  401dd0:	00401c79 	.word	0x00401c79
  401dd4:	004013c5 	.word	0x004013c5

00401dd8 <_tc_get_timer>:
  401dd8:	2000      	movs	r0, #0
  401dda:	4770      	bx	lr

00401ddc <TC0_Handler>:
  401ddc:	b508      	push	{r3, lr}
  401dde:	4b02      	ldr	r3, [pc, #8]	; (401de8 <TC0_Handler+0xc>)
  401de0:	6818      	ldr	r0, [r3, #0]
  401de2:	4b02      	ldr	r3, [pc, #8]	; (401dec <TC0_Handler+0x10>)
  401de4:	4798      	blx	r3
  401de6:	bd08      	pop	{r3, pc}
  401de8:	204000e8 	.word	0x204000e8
  401dec:	00401cdd 	.word	0x00401cdd

00401df0 <TC3_Handler>:
  401df0:	b508      	push	{r3, lr}
  401df2:	4b02      	ldr	r3, [pc, #8]	; (401dfc <TC3_Handler+0xc>)
  401df4:	6858      	ldr	r0, [r3, #4]
  401df6:	4b02      	ldr	r3, [pc, #8]	; (401e00 <TC3_Handler+0x10>)
  401df8:	4798      	blx	r3
  401dfa:	bd08      	pop	{r3, pc}
  401dfc:	204000e8 	.word	0x204000e8
  401e00:	00401cdd 	.word	0x00401cdd

00401e04 <_get_i2cm_sync_cfg>:
  401e04:	2300      	movs	r3, #0
  401e06:	b13b      	cbz	r3, 401e18 <_get_i2cm_sync_cfg+0x14>
  401e08:	2000      	movs	r0, #0
  401e0a:	4770      	bx	lr
  401e0c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401e10:	00e3      	lsls	r3, r4, #3
  401e12:	4608      	mov	r0, r1
  401e14:	4418      	add	r0, r3
  401e16:	e00c      	b.n	401e32 <_get_i2cm_sync_cfg+0x2e>
  401e18:	b410      	push	{r4}
  401e1a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401e1e:	00ca      	lsls	r2, r1, #3
  401e20:	4905      	ldr	r1, [pc, #20]	; (401e38 <_get_i2cm_sync_cfg+0x34>)
  401e22:	588a      	ldr	r2, [r1, r2]
  401e24:	4282      	cmp	r2, r0
  401e26:	d0f1      	beq.n	401e0c <_get_i2cm_sync_cfg+0x8>
  401e28:	3301      	adds	r3, #1
  401e2a:	b2db      	uxtb	r3, r3
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d0f4      	beq.n	401e1a <_get_i2cm_sync_cfg+0x16>
  401e30:	2000      	movs	r0, #0
  401e32:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e36:	4770      	bx	lr
  401e38:	00403224 	.word	0x00403224

00401e3c <_i2c_m_sync_init>:
  401e3c:	b538      	push	{r3, r4, r5, lr}
  401e3e:	4604      	mov	r4, r0
  401e40:	460d      	mov	r5, r1
  401e42:	2800      	cmp	r0, #0
  401e44:	bf18      	it	ne
  401e46:	2900      	cmpne	r1, #0
  401e48:	bf14      	ite	ne
  401e4a:	2001      	movne	r0, #1
  401e4c:	2000      	moveq	r0, #0
  401e4e:	2278      	movs	r2, #120	; 0x78
  401e50:	4909      	ldr	r1, [pc, #36]	; (401e78 <_i2c_m_sync_init+0x3c>)
  401e52:	4b0a      	ldr	r3, [pc, #40]	; (401e7c <_i2c_m_sync_init+0x40>)
  401e54:	4798      	blx	r3
  401e56:	6125      	str	r5, [r4, #16]
  401e58:	4628      	mov	r0, r5
  401e5a:	4b09      	ldr	r3, [pc, #36]	; (401e80 <_i2c_m_sync_init+0x44>)
  401e5c:	4798      	blx	r3
  401e5e:	6843      	ldr	r3, [r0, #4]
  401e60:	602b      	str	r3, [r5, #0]
  401e62:	6923      	ldr	r3, [r4, #16]
  401e64:	6882      	ldr	r2, [r0, #8]
  401e66:	639a      	str	r2, [r3, #56]	; 0x38
  401e68:	6923      	ldr	r3, [r4, #16]
  401e6a:	68c2      	ldr	r2, [r0, #12]
  401e6c:	645a      	str	r2, [r3, #68]	; 0x44
  401e6e:	6923      	ldr	r3, [r4, #16]
  401e70:	6902      	ldr	r2, [r0, #16]
  401e72:	611a      	str	r2, [r3, #16]
  401e74:	2000      	movs	r0, #0
  401e76:	bd38      	pop	{r3, r4, r5, pc}
  401e78:	0040323c 	.word	0x0040323c
  401e7c:	00401219 	.word	0x00401219
  401e80:	00401e05 	.word	0x00401e05

00401e84 <_i2c_m_sync_transfer>:
  401e84:	b538      	push	{r3, r4, r5, lr}
  401e86:	4604      	mov	r4, r0
  401e88:	460d      	mov	r5, r1
  401e8a:	2800      	cmp	r0, #0
  401e8c:	bf18      	it	ne
  401e8e:	2900      	cmpne	r1, #0
  401e90:	bf14      	ite	ne
  401e92:	2001      	movne	r0, #1
  401e94:	2000      	moveq	r0, #0
  401e96:	22ba      	movs	r2, #186	; 0xba
  401e98:	4952      	ldr	r1, [pc, #328]	; (401fe4 <_i2c_m_sync_transfer+0x160>)
  401e9a:	4b53      	ldr	r3, [pc, #332]	; (401fe8 <_i2c_m_sync_transfer+0x164>)
  401e9c:	4798      	blx	r3
  401e9e:	8863      	ldrh	r3, [r4, #2]
  401ea0:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ea4:	f040 809a 	bne.w	401fdc <_i2c_m_sync_transfer+0x158>
  401ea8:	886b      	ldrh	r3, [r5, #2]
  401eaa:	f013 0f01 	tst.w	r3, #1
  401eae:	d118      	bne.n	401ee2 <_i2c_m_sync_transfer+0x5e>
  401eb0:	886b      	ldrh	r3, [r5, #2]
  401eb2:	b29b      	uxth	r3, r3
  401eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401eb8:	806b      	strh	r3, [r5, #2]
  401eba:	882b      	ldrh	r3, [r5, #0]
  401ebc:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401ec0:	d05f      	beq.n	401f82 <_i2c_m_sync_transfer+0xfe>
  401ec2:	6922      	ldr	r2, [r4, #16]
  401ec4:	0a1b      	lsrs	r3, r3, #8
  401ec6:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401eca:	041b      	lsls	r3, r3, #16
  401ecc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401ed4:	6053      	str	r3, [r2, #4]
  401ed6:	6923      	ldr	r3, [r4, #16]
  401ed8:	782a      	ldrb	r2, [r5, #0]
  401eda:	60da      	str	r2, [r3, #12]
  401edc:	2000      	movs	r0, #0
  401ede:	4601      	mov	r1, r0
  401ee0:	e05c      	b.n	401f9c <_i2c_m_sync_transfer+0x118>
  401ee2:	886b      	ldrh	r3, [r5, #2]
  401ee4:	b29b      	uxth	r3, r3
  401ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401eea:	806b      	strh	r3, [r5, #2]
  401eec:	882b      	ldrh	r3, [r5, #0]
  401eee:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401ef2:	d022      	beq.n	401f3a <_i2c_m_sync_transfer+0xb6>
  401ef4:	6922      	ldr	r2, [r4, #16]
  401ef6:	0a1b      	lsrs	r3, r3, #8
  401ef8:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401efc:	041b      	lsls	r3, r3, #16
  401efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401f02:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  401f06:	6053      	str	r3, [r2, #4]
  401f08:	6923      	ldr	r3, [r4, #16]
  401f0a:	782a      	ldrb	r2, [r5, #0]
  401f0c:	60da      	str	r2, [r3, #12]
  401f0e:	6923      	ldr	r3, [r4, #16]
  401f10:	686a      	ldr	r2, [r5, #4]
  401f12:	2a01      	cmp	r2, #1
  401f14:	d019      	beq.n	401f4a <_i2c_m_sync_transfer+0xc6>
  401f16:	2201      	movs	r2, #1
  401f18:	601a      	str	r2, [r3, #0]
  401f1a:	2100      	movs	r1, #0
  401f1c:	686b      	ldr	r3, [r5, #4]
  401f1e:	4299      	cmp	r1, r3
  401f20:	d222      	bcs.n	401f68 <_i2c_m_sync_transfer+0xe4>
  401f22:	6923      	ldr	r3, [r4, #16]
  401f24:	6a1a      	ldr	r2, [r3, #32]
  401f26:	f012 0f02 	tst.w	r2, #2
  401f2a:	d110      	bne.n	401f4e <_i2c_m_sync_transfer+0xca>
  401f2c:	6a1b      	ldr	r3, [r3, #32]
  401f2e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f32:	d0f6      	beq.n	401f22 <_i2c_m_sync_transfer+0x9e>
  401f34:	f06f 0001 	mvn.w	r0, #1
  401f38:	bd38      	pop	{r3, r4, r5, pc}
  401f3a:	6922      	ldr	r2, [r4, #16]
  401f3c:	041b      	lsls	r3, r3, #16
  401f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401f46:	6053      	str	r3, [r2, #4]
  401f48:	e7e1      	b.n	401f0e <_i2c_m_sync_transfer+0x8a>
  401f4a:	2203      	movs	r2, #3
  401f4c:	e7e4      	b.n	401f18 <_i2c_m_sync_transfer+0x94>
  401f4e:	68aa      	ldr	r2, [r5, #8]
  401f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f52:	5453      	strb	r3, [r2, r1]
  401f54:	686b      	ldr	r3, [r5, #4]
  401f56:	3b02      	subs	r3, #2
  401f58:	4299      	cmp	r1, r3
  401f5a:	d001      	beq.n	401f60 <_i2c_m_sync_transfer+0xdc>
  401f5c:	3101      	adds	r1, #1
  401f5e:	e7dd      	b.n	401f1c <_i2c_m_sync_transfer+0x98>
  401f60:	6923      	ldr	r3, [r4, #16]
  401f62:	2202      	movs	r2, #2
  401f64:	601a      	str	r2, [r3, #0]
  401f66:	e7f9      	b.n	401f5c <_i2c_m_sync_transfer+0xd8>
  401f68:	6923      	ldr	r3, [r4, #16]
  401f6a:	6a1b      	ldr	r3, [r3, #32]
  401f6c:	f013 0f01 	tst.w	r3, #1
  401f70:	d0fa      	beq.n	401f68 <_i2c_m_sync_transfer+0xe4>
  401f72:	8863      	ldrh	r3, [r4, #2]
  401f74:	b29b      	uxth	r3, r3
  401f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401f7a:	b29b      	uxth	r3, r3
  401f7c:	8063      	strh	r3, [r4, #2]
  401f7e:	2000      	movs	r0, #0
  401f80:	bd38      	pop	{r3, r4, r5, pc}
  401f82:	6922      	ldr	r2, [r4, #16]
  401f84:	041b      	lsls	r3, r3, #16
  401f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401f8a:	6053      	str	r3, [r2, #4]
  401f8c:	e7a6      	b.n	401edc <_i2c_m_sync_transfer+0x58>
  401f8e:	f06f 0001 	mvn.w	r0, #1
  401f92:	b978      	cbnz	r0, 401fb4 <_i2c_m_sync_transfer+0x130>
  401f94:	68ab      	ldr	r3, [r5, #8]
  401f96:	5c5b      	ldrb	r3, [r3, r1]
  401f98:	6353      	str	r3, [r2, #52]	; 0x34
  401f9a:	3101      	adds	r1, #1
  401f9c:	686b      	ldr	r3, [r5, #4]
  401f9e:	4299      	cmp	r1, r3
  401fa0:	d208      	bcs.n	401fb4 <_i2c_m_sync_transfer+0x130>
  401fa2:	6922      	ldr	r2, [r4, #16]
  401fa4:	6a13      	ldr	r3, [r2, #32]
  401fa6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401faa:	d1f0      	bne.n	401f8e <_i2c_m_sync_transfer+0x10a>
  401fac:	f013 0f04 	tst.w	r3, #4
  401fb0:	d0f7      	beq.n	401fa2 <_i2c_m_sync_transfer+0x11e>
  401fb2:	e7ee      	b.n	401f92 <_i2c_m_sync_transfer+0x10e>
  401fb4:	886b      	ldrh	r3, [r5, #2]
  401fb6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401fba:	d106      	bne.n	401fca <_i2c_m_sync_transfer+0x146>
  401fbc:	8863      	ldrh	r3, [r4, #2]
  401fbe:	b29b      	uxth	r3, r3
  401fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401fc4:	b29b      	uxth	r3, r3
  401fc6:	8063      	strh	r3, [r4, #2]
  401fc8:	bd38      	pop	{r3, r4, r5, pc}
  401fca:	6923      	ldr	r3, [r4, #16]
  401fcc:	2202      	movs	r2, #2
  401fce:	601a      	str	r2, [r3, #0]
  401fd0:	6923      	ldr	r3, [r4, #16]
  401fd2:	6a1b      	ldr	r3, [r3, #32]
  401fd4:	f013 0f01 	tst.w	r3, #1
  401fd8:	d0fa      	beq.n	401fd0 <_i2c_m_sync_transfer+0x14c>
  401fda:	e7ef      	b.n	401fbc <_i2c_m_sync_transfer+0x138>
  401fdc:	f06f 0005 	mvn.w	r0, #5
  401fe0:	bd38      	pop	{r3, r4, r5, pc}
  401fe2:	bf00      	nop
  401fe4:	0040323c 	.word	0x0040323c
  401fe8:	00401219 	.word	0x00401219

00401fec <_wdt_init>:
  401fec:	b510      	push	{r4, lr}
  401fee:	4604      	mov	r4, r0
  401ff0:	b168      	cbz	r0, 40200e <_wdt_init+0x22>
  401ff2:	6803      	ldr	r3, [r0, #0]
  401ff4:	b14b      	cbz	r3, 40200a <_wdt_init+0x1e>
  401ff6:	2001      	movs	r0, #1
  401ff8:	2233      	movs	r2, #51	; 0x33
  401ffa:	4906      	ldr	r1, [pc, #24]	; (402014 <_wdt_init+0x28>)
  401ffc:	4b06      	ldr	r3, [pc, #24]	; (402018 <_wdt_init+0x2c>)
  401ffe:	4798      	blx	r3
  402000:	6823      	ldr	r3, [r4, #0]
  402002:	4a06      	ldr	r2, [pc, #24]	; (40201c <_wdt_init+0x30>)
  402004:	605a      	str	r2, [r3, #4]
  402006:	2000      	movs	r0, #0
  402008:	bd10      	pop	{r4, pc}
  40200a:	2000      	movs	r0, #0
  40200c:	e7f4      	b.n	401ff8 <_wdt_init+0xc>
  40200e:	2000      	movs	r0, #0
  402010:	e7f2      	b.n	401ff8 <_wdt_init+0xc>
  402012:	bf00      	nop
  402014:	00403258 	.word	0x00403258
  402018:	00401219 	.word	0x00401219
  40201c:	3fffafff 	.word	0x3fffafff

00402020 <main>:

//temp definitions
#define MOTOR_TARGET 0

int main(void)
{
  402020:	b570      	push	{r4, r5, r6, lr}
  402022:	b090      	sub	sp, #64	; 0x40
	volatile float current_wheel_speed = 0.0;
  402024:	2600      	movs	r6, #0
  402026:	960f      	str	r6, [sp, #60]	; 0x3c
	volatile uint8_t dipswitch_state = 0;
  402028:	2400      	movs	r4, #0
  40202a:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
	
	uint8_t robot_stop = 0;
	
	atmel_start_init();
  40202e:	4b7b      	ldr	r3, [pc, #492]	; (40221c <main+0x1fc>)
  402030:	4798      	blx	r3
	
	//disable LEDs
	set_LEDs(0);
  402032:	4620      	mov	r0, r4
  402034:	4b7a      	ldr	r3, [pc, #488]	; (402220 <main+0x200>)
  402036:	4798      	blx	r3
	
	uint8_t robot_ID = 0;
  402038:	a810      	add	r0, sp, #64	; 0x40
  40203a:	f800 4d06 	strb.w	r4, [r0, #-6]!
	uint8_t data_store[32];
	
	//initialize wireless data processing
	NPP_init(&robot_ID);
  40203e:	4b79      	ldr	r3, [pc, #484]	; (402224 <main+0x204>)
  402040:	4798      	blx	r3
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  402042:	2220      	movs	r2, #32
  402044:	4621      	mov	r1, r4
  402046:	a806      	add	r0, sp, #24
  402048:	4b77      	ldr	r3, [pc, #476]	; (402228 <main+0x208>)
  40204a:	4798      	blx	r3
	nRF24_init(data_store);
  40204c:	a806      	add	r0, sp, #24
  40204e:	4b77      	ldr	r3, [pc, #476]	; (40222c <main+0x20c>)
  402050:	4798      	blx	r3
	delay_us(500); //Should be 200 us, setting higher for testing
  402052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402056:	4b76      	ldr	r3, [pc, #472]	; (402230 <main+0x210>)
  402058:	4798      	blx	r3
	nRF24_enter_receive();
  40205a:	4b76      	ldr	r3, [pc, #472]	; (402234 <main+0x214>)
  40205c:	4798      	blx	r3
	
	//initialize encoders
	encoders_init();
  40205e:	4b76      	ldr	r3, [pc, #472]	; (402238 <main+0x218>)
  402060:	4798      	blx	r3
	
	// PWMs
	pwm_enable(&PWM_0);
  402062:	4876      	ldr	r0, [pc, #472]	; (40223c <main+0x21c>)
  402064:	4d76      	ldr	r5, [pc, #472]	; (402240 <main+0x220>)
  402066:	47a8      	blx	r5
	pwm_enable(&PWM_1);
  402068:	4876      	ldr	r0, [pc, #472]	; (402244 <main+0x224>)
  40206a:	47a8      	blx	r5
	
	//disable motors
	set_pwm_drive_motor(0, 0);
  40206c:	4621      	mov	r1, r4
  40206e:	4620      	mov	r0, r4
  402070:	4d75      	ldr	r5, [pc, #468]	; (402248 <main+0x228>)
  402072:	47a8      	blx	r5
	set_pwm_drive_motor(1, 0);
  402074:	4621      	mov	r1, r4
  402076:	2001      	movs	r0, #1
  402078:	47a8      	blx	r5
	set_pwm_drive_motor(2, 0);
  40207a:	4621      	mov	r1, r4
  40207c:	2002      	movs	r0, #2
  40207e:	47a8      	blx	r5
	set_pwm_drive_motor(3, 0);
  402080:	4621      	mov	r1, r4
  402082:	2003      	movs	r0, #3
  402084:	47a8      	blx	r5
	set_pwm_dribbler_motor(0);
  402086:	4620      	mov	r0, r4
  402088:	4b70      	ldr	r3, [pc, #448]	; (40224c <main+0x22c>)
  40208a:	4798      	blx	r3
	
	float adc_value_battery_current = 0;
  40208c:	9605      	str	r6, [sp, #20]
	float adc_value_battery_voltage = 0;
  40208e:	9604      	str	r6, [sp, #16]
	float adc_value_cap_charge = 0;
  402090:	9603      	str	r6, [sp, #12]
	
	//initialize ADCs
	adc_init();
  402092:	4b6f      	ldr	r3, [pc, #444]	; (402250 <main+0x230>)
  402094:	4798      	blx	r3
	
	//initialize timers
	initialize_task_PID();
  402096:	4b6f      	ldr	r3, [pc, #444]	; (402254 <main+0x234>)
  402098:	4798      	blx	r3
	initialize_task_ADC();
  40209a:	4b6f      	ldr	r3, [pc, #444]	; (402258 <main+0x238>)
  40209c:	4798      	blx	r3
	
	delay_ms(1000);
  40209e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4020a2:	4e6e      	ldr	r6, [pc, #440]	; (40225c <main+0x23c>)
  4020a4:	47b0      	blx	r6
	
	set_pwm_drive_motor(0, PWM_ZERO);
  4020a6:	f640 1197 	movw	r1, #2455	; 0x997
  4020aa:	4620      	mov	r0, r4
  4020ac:	47a8      	blx	r5
	set_pwm_drive_motor(1, PWM_ZERO);
  4020ae:	f640 1197 	movw	r1, #2455	; 0x997
  4020b2:	2001      	movs	r0, #1
  4020b4:	47a8      	blx	r5
	set_pwm_drive_motor(2, PWM_ZERO);
  4020b6:	f640 1197 	movw	r1, #2455	; 0x997
  4020ba:	2002      	movs	r0, #2
  4020bc:	47a8      	blx	r5
	set_pwm_drive_motor(3, PWM_ZERO);
  4020be:	f640 1197 	movw	r1, #2455	; 0x997
  4020c2:	2003      	movs	r0, #3
  4020c4:	47a8      	blx	r5
	
	delay_ms(4000);
  4020c6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
  4020ca:	47b0      	blx	r6
  4020cc:	e02b      	b.n	402126 <main+0x106>
	
	while (1) {
		
		//process information sent from hub
		if(nRF_24_is_data_available(1)){ //check to see if data was received
			nRF24_receive_data(data_store);
  4020ce:	a806      	add	r0, sp, #24
  4020d0:	4b63      	ldr	r3, [pc, #396]	; (402260 <main+0x240>)
  4020d2:	4798      	blx	r3
			//target_speed_2 = data_store[5] + (data_store[6] << 8);
			//target_speed_3 = data_store[7] + (data_store[8] << 8);
			//gpio_set_pin_level(LED1, data_store[9]);
			//gpio_set_pin_level(LED2, data_store[10]);
			//gpio_set_pin_level(LED3, data_store[11]);
			memset(&data_store[0], 0, sizeof(uint8_t)*32); //clear data_store array
  4020d4:	2220      	movs	r2, #32
  4020d6:	2100      	movs	r1, #0
  4020d8:	a806      	add	r0, sp, #24
  4020da:	4b53      	ldr	r3, [pc, #332]	; (402228 <main+0x208>)
  4020dc:	4798      	blx	r3
  4020de:	e027      	b.n	402130 <main+0x110>
			//robot_stop--;
			time_to_pid = 0;
			
			//dipswitch_state = read_dipswitch();
			switch(read_dipswitch()){
				case 0b0000: set_pwm_drive_motor(MOTOR_TARGET, PWM_ZERO);
  4020e0:	f640 1197 	movw	r1, #2455	; 0x997
  4020e4:	2000      	movs	r0, #0
  4020e6:	4b58      	ldr	r3, [pc, #352]	; (402248 <main+0x228>)
  4020e8:	4798      	blx	r3
					break;
				default: set_pwm_drive_motor(MOTOR_TARGET, PWM_ZERO);
					break;
			}
			
			set_pwm_drive_motor(3, PWM_ZERO);
  4020ea:	f640 1197 	movw	r1, #2455	; 0x997
  4020ee:	2003      	movs	r0, #3
  4020f0:	4c55      	ldr	r4, [pc, #340]	; (402248 <main+0x228>)
  4020f2:	47a0      	blx	r4
			set_pwm_drive_motor(1, PWM_ZERO);
  4020f4:	f640 1197 	movw	r1, #2455	; 0x997
  4020f8:	2001      	movs	r0, #1
  4020fa:	47a0      	blx	r4
			set_pwm_drive_motor(2, PWM_ZERO);
  4020fc:	f640 1197 	movw	r1, #2455	; 0x997
  402100:	2002      	movs	r0, #2
  402102:	47a0      	blx	r4
			
			current_wheel_speed = wheel_speed_front_right();
  402104:	4b57      	ldr	r3, [pc, #348]	; (402264 <main+0x244>)
  402106:	4798      	blx	r3
  402108:	900f      	str	r0, [sp, #60]	; 0x3c
			set_LEDs((uint8_t)current_wheel_speed);
  40210a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
  40210e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  402112:	edcd 7a01 	vstr	s15, [sp, #4]
  402116:	f89d 0004 	ldrb.w	r0, [sp, #4]
  40211a:	4b41      	ldr	r3, [pc, #260]	; (402220 <main+0x200>)
  40211c:	4798      	blx	r3
			
		}
		
		//adc time
		if(time_to_adc){
  40211e:	4b52      	ldr	r3, [pc, #328]	; (402268 <main+0x248>)
  402120:	781b      	ldrb	r3, [r3, #0]
  402122:	2b00      	cmp	r3, #0
  402124:	d16c      	bne.n	402200 <main+0x1e0>
		if(nRF_24_is_data_available(1)){ //check to see if data was received
  402126:	2001      	movs	r0, #1
  402128:	4b50      	ldr	r3, [pc, #320]	; (40226c <main+0x24c>)
  40212a:	4798      	blx	r3
  40212c:	2800      	cmp	r0, #0
  40212e:	d1ce      	bne.n	4020ce <main+0xae>
		volatile float r = wheel_speed_back_left();
  402130:	4b4f      	ldr	r3, [pc, #316]	; (402270 <main+0x250>)
  402132:	4798      	blx	r3
  402134:	9002      	str	r0, [sp, #8]
		if(time_to_pid){
  402136:	4b4f      	ldr	r3, [pc, #316]	; (402274 <main+0x254>)
  402138:	781b      	ldrb	r3, [r3, #0]
  40213a:	2b00      	cmp	r3, #0
  40213c:	d0ef      	beq.n	40211e <main+0xfe>
			time_to_pid = 0;
  40213e:	2200      	movs	r2, #0
  402140:	4b4c      	ldr	r3, [pc, #304]	; (402274 <main+0x254>)
  402142:	701a      	strb	r2, [r3, #0]
			switch(read_dipswitch()){
  402144:	4b4c      	ldr	r3, [pc, #304]	; (402278 <main+0x258>)
  402146:	4798      	blx	r3
  402148:	280f      	cmp	r0, #15
  40214a:	d853      	bhi.n	4021f4 <main+0x1d4>
  40214c:	a301      	add	r3, pc, #4	; (adr r3, 402154 <main+0x134>)
  40214e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
  402152:	bf00      	nop
  402154:	004020e1 	.word	0x004020e1
  402158:	00402195 	.word	0x00402195
  40215c:	004021f5 	.word	0x004021f5
  402160:	004021a1 	.word	0x004021a1
  402164:	004021f5 	.word	0x004021f5
  402168:	004021ad 	.word	0x004021ad
  40216c:	004021f5 	.word	0x004021f5
  402170:	004021b9 	.word	0x004021b9
  402174:	004021f5 	.word	0x004021f5
  402178:	004021c5 	.word	0x004021c5
  40217c:	004021f5 	.word	0x004021f5
  402180:	004021d1 	.word	0x004021d1
  402184:	004021f5 	.word	0x004021f5
  402188:	004021dd 	.word	0x004021dd
  40218c:	004021f5 	.word	0x004021f5
  402190:	004021e9 	.word	0x004021e9
				case 0b0001: set_pwm_drive_motor(MOTOR_TARGET, 2500);
  402194:	f640 11c4 	movw	r1, #2500	; 0x9c4
  402198:	2000      	movs	r0, #0
  40219a:	4b2b      	ldr	r3, [pc, #172]	; (402248 <main+0x228>)
  40219c:	4798      	blx	r3
					break;
  40219e:	e7a4      	b.n	4020ea <main+0xca>
				case 0b0011: set_pwm_drive_motor(MOTOR_TARGET, 2550);
  4021a0:	f640 11f6 	movw	r1, #2550	; 0x9f6
  4021a4:	2000      	movs	r0, #0
  4021a6:	4b28      	ldr	r3, [pc, #160]	; (402248 <main+0x228>)
  4021a8:	4798      	blx	r3
					break;
  4021aa:	e79e      	b.n	4020ea <main+0xca>
				case 0b0101: set_pwm_drive_motor(MOTOR_TARGET, 2620);
  4021ac:	f640 213c 	movw	r1, #2620	; 0xa3c
  4021b0:	2000      	movs	r0, #0
  4021b2:	4b25      	ldr	r3, [pc, #148]	; (402248 <main+0x228>)
  4021b4:	4798      	blx	r3
					break;
  4021b6:	e798      	b.n	4020ea <main+0xca>
				case 0b0111: set_pwm_drive_motor(MOTOR_TARGET, PWM_MAX);
  4021b8:	f640 21b1 	movw	r1, #2737	; 0xab1
  4021bc:	2000      	movs	r0, #0
  4021be:	4b22      	ldr	r3, [pc, #136]	; (402248 <main+0x228>)
  4021c0:	4798      	blx	r3
					break;
  4021c2:	e792      	b.n	4020ea <main+0xca>
				case 0b1001: set_pwm_drive_motor(MOTOR_TARGET, 2400);
  4021c4:	f44f 6116 	mov.w	r1, #2400	; 0x960
  4021c8:	2000      	movs	r0, #0
  4021ca:	4b1f      	ldr	r3, [pc, #124]	; (402248 <main+0x228>)
  4021cc:	4798      	blx	r3
					break;
  4021ce:	e78c      	b.n	4020ea <main+0xca>
				case 0b1011: set_pwm_drive_motor(MOTOR_TARGET, 2350);
  4021d0:	f640 112e 	movw	r1, #2350	; 0x92e
  4021d4:	2000      	movs	r0, #0
  4021d6:	4b1c      	ldr	r3, [pc, #112]	; (402248 <main+0x228>)
  4021d8:	4798      	blx	r3
					break;
  4021da:	e786      	b.n	4020ea <main+0xca>
				case 0b1101: set_pwm_drive_motor(MOTOR_TARGET, 2280);
  4021dc:	f640 01e8 	movw	r1, #2280	; 0x8e8
  4021e0:	2000      	movs	r0, #0
  4021e2:	4b19      	ldr	r3, [pc, #100]	; (402248 <main+0x228>)
  4021e4:	4798      	blx	r3
					break;
  4021e6:	e780      	b.n	4020ea <main+0xca>
				case 0b1111: set_pwm_drive_motor(MOTOR_TARGET, PWM_MAX_NEG);
  4021e8:	f640 015f 	movw	r1, #2143	; 0x85f
  4021ec:	2000      	movs	r0, #0
  4021ee:	4b16      	ldr	r3, [pc, #88]	; (402248 <main+0x228>)
  4021f0:	4798      	blx	r3
					break;
  4021f2:	e77a      	b.n	4020ea <main+0xca>
				default: set_pwm_drive_motor(MOTOR_TARGET, PWM_ZERO);
  4021f4:	f640 1197 	movw	r1, #2455	; 0x997
  4021f8:	2000      	movs	r0, #0
  4021fa:	4b13      	ldr	r3, [pc, #76]	; (402248 <main+0x228>)
  4021fc:	4798      	blx	r3
					break;
  4021fe:	e774      	b.n	4020ea <main+0xca>
			adc_read(&adc_value_battery_current, ADC_BATTERY_CURRENT);
  402200:	2100      	movs	r1, #0
  402202:	a805      	add	r0, sp, #20
  402204:	4c1d      	ldr	r4, [pc, #116]	; (40227c <main+0x25c>)
  402206:	47a0      	blx	r4
			adc_read(&adc_value_battery_voltage, ADC_BATTERY_VOLTAGE);
  402208:	2105      	movs	r1, #5
  40220a:	a804      	add	r0, sp, #16
  40220c:	47a0      	blx	r4
			adc_read(&adc_value_cap_charge, ADC_CAP_CHARGE);
  40220e:	2107      	movs	r1, #7
  402210:	a803      	add	r0, sp, #12
  402212:	47a0      	blx	r4
			time_to_adc = 0;
  402214:	2200      	movs	r2, #0
  402216:	4b14      	ldr	r3, [pc, #80]	; (402268 <main+0x248>)
  402218:	701a      	strb	r2, [r3, #0]
  40221a:	e784      	b.n	402126 <main+0x106>
  40221c:	0040024d 	.word	0x0040024d
  402220:	0040033d 	.word	0x0040033d
  402224:	00402311 	.word	0x00402311
  402228:	00402f4d 	.word	0x00402f4d
  40222c:	004024a5 	.word	0x004024a5
  402230:	00400ba9 	.word	0x00400ba9
  402234:	00402581 	.word	0x00402581
  402238:	00400a49 	.word	0x00400a49
  40223c:	20400124 	.word	0x20400124
  402240:	00400e89 	.word	0x00400e89
  402244:	2040017c 	.word	0x2040017c
  402248:	004025f1 	.word	0x004025f1
  40224c:	00402639 	.word	0x00402639
  402250:	004001c5 	.word	0x004001c5
  402254:	00402669 	.word	0x00402669
  402258:	0040269d 	.word	0x0040269d
  40225c:	00400bc9 	.word	0x00400bc9
  402260:	00402425 	.word	0x00402425
  402264:	00402281 	.word	0x00402281
  402268:	20400121 	.word	0x20400121
  40226c:	00402559 	.word	0x00402559
  402270:	004022c9 	.word	0x004022c9
  402274:	20400120 	.word	0x20400120
  402278:	004002c5 	.word	0x004002c5
  40227c:	004001e9 	.word	0x004001e9

00402280 <wheel_speed_front_right>:
	error_sum_back_left=0;
	error_sum_back_right=0;
}

//hardcoded wheel speed calculations
float wheel_speed_front_right(){
  402280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(front_right_counter - front_right_counter_old)*v_c_l; //rad/s or m/s
  402282:	4b0c      	ldr	r3, [pc, #48]	; (4022b4 <wheel_speed_front_right+0x34>)
  402284:	e9d3 6700 	ldrd	r6, r7, [r3]
  402288:	4c0b      	ldr	r4, [pc, #44]	; (4022b8 <wheel_speed_front_right+0x38>)
  40228a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  40228e:	4630      	mov	r0, r6
  402290:	4639      	mov	r1, r7
  402292:	4d0a      	ldr	r5, [pc, #40]	; (4022bc <wheel_speed_front_right+0x3c>)
  402294:	47a8      	blx	r5
  402296:	4b0a      	ldr	r3, [pc, #40]	; (4022c0 <wheel_speed_front_right+0x40>)
  402298:	4798      	blx	r3
  40229a:	4b0a      	ldr	r3, [pc, #40]	; (4022c4 <wheel_speed_front_right+0x44>)
  40229c:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	front_right_counter_old = front_right_counter;
  4022a0:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return current_speed;
}
  4022a4:	ee07 0a10 	vmov	s14, r0
  4022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
  4022ac:	ee17 0a90 	vmov	r0, s15
  4022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022b2:	bf00      	nop
  4022b4:	20400078 	.word	0x20400078
  4022b8:	204000f0 	.word	0x204000f0
  4022bc:	004026d9 	.word	0x004026d9
  4022c0:	00402e65 	.word	0x00402e65
  4022c4:	20400048 	.word	0x20400048

004022c8 <wheel_speed_back_left>:
	front_left_counter_old = front_left_counter;
	return current_speed;
	//return v_c_r;
}

float wheel_speed_back_left(){
  4022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(back_left_counter - back_left_counter_old)*v_c_l; //rad/s or m/s
  4022ca:	4b0c      	ldr	r3, [pc, #48]	; (4022fc <wheel_speed_back_left+0x34>)
  4022cc:	e9d3 6700 	ldrd	r6, r7, [r3]
  4022d0:	4c0b      	ldr	r4, [pc, #44]	; (402300 <wheel_speed_back_left+0x38>)
  4022d2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
  4022d6:	4630      	mov	r0, r6
  4022d8:	4639      	mov	r1, r7
  4022da:	4d0a      	ldr	r5, [pc, #40]	; (402304 <wheel_speed_back_left+0x3c>)
  4022dc:	47a8      	blx	r5
  4022de:	4b0a      	ldr	r3, [pc, #40]	; (402308 <wheel_speed_back_left+0x40>)
  4022e0:	4798      	blx	r3
  4022e2:	4b0a      	ldr	r3, [pc, #40]	; (40230c <wheel_speed_back_left+0x44>)
  4022e4:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	back_left_counter_old = back_left_counter;
  4022e8:	e9c4 6708 	strd	r6, r7, [r4, #32]
	return current_speed;
}
  4022ec:	ee07 0a10 	vmov	s14, r0
  4022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
  4022f4:	ee17 0a90 	vmov	r0, s15
  4022f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022fa:	bf00      	nop
  4022fc:	20400080 	.word	0x20400080
  402300:	204000f0 	.word	0x204000f0
  402304:	004026d9 	.word	0x004026d9
  402308:	00402e65 	.word	0x00402e65
  40230c:	20400048 	.word	0x20400048

00402310 <NPP_init>:
  402310:	4a0a      	ldr	r2, [pc, #40]	; (40233c <NPP_init+0x2c>)
  402312:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  402314:	f3c3 3300 	ubfx	r3, r3, #12, #1
  402318:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  40231a:	f3c1 3140 	ubfx	r1, r1, #13, #1
uint8_t kicker; //kicker solenoid information
uint8_t chipper; //chipper solenoid information


void NPP_init(uint8_t *robot_ID){
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  40231e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  402322:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  402324:	f3c1 3180 	ubfx	r1, r1, #14, #1
				(gpio_get_pin_level(DipSwitch1) << 1) +
  402328:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40232c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  40232e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
				(gpio_get_pin_level(DipSwitch2) << 2) +
				(gpio_get_pin_level(DipSwitch3) << 3);
  402332:	00d2      	lsls	r2, r2, #3
				(gpio_get_pin_level(DipSwitch2) << 2) +
  402334:	fa52 f383 	uxtab	r3, r2, r3
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  402338:	7003      	strb	r3, [r0, #0]
  40233a:	4770      	bx	lr
  40233c:	400e1400 	.word	0x400e1400

00402340 <nRF24_write_to_register>:
  402340:	b530      	push	{r4, r5, lr}
  402342:	b083      	sub	sp, #12
  402344:	f040 0020 	orr.w	r0, r0, #32
  402348:	f88d 0004 	strb.w	r0, [sp, #4]
  40234c:	f88d 1005 	strb.w	r1, [sp, #5]
  402350:	4c05      	ldr	r4, [pc, #20]	; (402368 <nRF24_write_to_register+0x28>)
  402352:	2508      	movs	r5, #8
  402354:	6365      	str	r5, [r4, #52]	; 0x34
  402356:	2202      	movs	r2, #2
  402358:	a901      	add	r1, sp, #4
  40235a:	4b04      	ldr	r3, [pc, #16]	; (40236c <nRF24_write_to_register+0x2c>)
  40235c:	6818      	ldr	r0, [r3, #0]
  40235e:	4b04      	ldr	r3, [pc, #16]	; (402370 <nRF24_write_to_register+0x30>)
  402360:	4798      	blx	r3
  402362:	6325      	str	r5, [r4, #48]	; 0x30
  402364:	b003      	add	sp, #12
  402366:	bd30      	pop	{r4, r5, pc}
  402368:	400e1000 	.word	0x400e1000
  40236c:	20400200 	.word	0x20400200
  402370:	00400dd1 	.word	0x00400dd1

00402374 <nRF24_write_to_register_multi_byte>:
  402374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402378:	b083      	sub	sp, #12
  40237a:	4688      	mov	r8, r1
  40237c:	4691      	mov	r9, r2
  40237e:	f040 0020 	orr.w	r0, r0, #32
  402382:	a902      	add	r1, sp, #8
  402384:	f801 0d01 	strb.w	r0, [r1, #-1]!
  402388:	4c08      	ldr	r4, [pc, #32]	; (4023ac <nRF24_write_to_register_multi_byte+0x38>)
  40238a:	2508      	movs	r5, #8
  40238c:	6365      	str	r5, [r4, #52]	; 0x34
  40238e:	4f08      	ldr	r7, [pc, #32]	; (4023b0 <nRF24_write_to_register_multi_byte+0x3c>)
  402390:	2201      	movs	r2, #1
  402392:	6838      	ldr	r0, [r7, #0]
  402394:	4e07      	ldr	r6, [pc, #28]	; (4023b4 <nRF24_write_to_register_multi_byte+0x40>)
  402396:	47b0      	blx	r6
  402398:	fa1f f289 	uxth.w	r2, r9
  40239c:	4641      	mov	r1, r8
  40239e:	6838      	ldr	r0, [r7, #0]
  4023a0:	47b0      	blx	r6
  4023a2:	6325      	str	r5, [r4, #48]	; 0x30
  4023a4:	b003      	add	sp, #12
  4023a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4023aa:	bf00      	nop
  4023ac:	400e1000 	.word	0x400e1000
  4023b0:	20400200 	.word	0x20400200
  4023b4:	00400dd1 	.word	0x00400dd1

004023b8 <nRF24_read_from_register>:
  4023b8:	b570      	push	{r4, r5, r6, lr}
  4023ba:	b082      	sub	sp, #8
  4023bc:	a902      	add	r1, sp, #8
  4023be:	f801 0d02 	strb.w	r0, [r1, #-2]!
  4023c2:	4c09      	ldr	r4, [pc, #36]	; (4023e8 <nRF24_read_from_register+0x30>)
  4023c4:	2508      	movs	r5, #8
  4023c6:	6365      	str	r5, [r4, #52]	; 0x34
  4023c8:	4e08      	ldr	r6, [pc, #32]	; (4023ec <nRF24_read_from_register+0x34>)
  4023ca:	2201      	movs	r2, #1
  4023cc:	6830      	ldr	r0, [r6, #0]
  4023ce:	4b08      	ldr	r3, [pc, #32]	; (4023f0 <nRF24_read_from_register+0x38>)
  4023d0:	4798      	blx	r3
  4023d2:	2201      	movs	r2, #1
  4023d4:	f10d 0107 	add.w	r1, sp, #7
  4023d8:	6830      	ldr	r0, [r6, #0]
  4023da:	4b06      	ldr	r3, [pc, #24]	; (4023f4 <nRF24_read_from_register+0x3c>)
  4023dc:	4798      	blx	r3
  4023de:	6325      	str	r5, [r4, #48]	; 0x30
  4023e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4023e4:	b002      	add	sp, #8
  4023e6:	bd70      	pop	{r4, r5, r6, pc}
  4023e8:	400e1000 	.word	0x400e1000
  4023ec:	20400200 	.word	0x20400200
  4023f0:	00400dd1 	.word	0x00400dd1
  4023f4:	00400e01 	.word	0x00400e01

004023f8 <nRF24_send_SPI_command>:
  4023f8:	b530      	push	{r4, r5, lr}
  4023fa:	b083      	sub	sp, #12
  4023fc:	a902      	add	r1, sp, #8
  4023fe:	f801 0d01 	strb.w	r0, [r1, #-1]!
  402402:	4c05      	ldr	r4, [pc, #20]	; (402418 <nRF24_send_SPI_command+0x20>)
  402404:	2508      	movs	r5, #8
  402406:	6365      	str	r5, [r4, #52]	; 0x34
  402408:	2201      	movs	r2, #1
  40240a:	4b04      	ldr	r3, [pc, #16]	; (40241c <nRF24_send_SPI_command+0x24>)
  40240c:	6818      	ldr	r0, [r3, #0]
  40240e:	4b04      	ldr	r3, [pc, #16]	; (402420 <nRF24_send_SPI_command+0x28>)
  402410:	4798      	blx	r3
  402412:	6325      	str	r5, [r4, #48]	; 0x30
  402414:	b003      	add	sp, #12
  402416:	bd30      	pop	{r4, r5, pc}
  402418:	400e1000 	.word	0x400e1000
  40241c:	20400200 	.word	0x20400200
  402420:	00400dd1 	.word	0x00400dd1

00402424 <nRF24_receive_data>:
  402424:	b570      	push	{r4, r5, r6, lr}
  402426:	b082      	sub	sp, #8
  402428:	a902      	add	r1, sp, #8
  40242a:	2361      	movs	r3, #97	; 0x61
  40242c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  402430:	4c13      	ldr	r4, [pc, #76]	; (402480 <nRF24_receive_data+0x5c>)
  402432:	2508      	movs	r5, #8
  402434:	6365      	str	r5, [r4, #52]	; 0x34
  402436:	4e13      	ldr	r6, [pc, #76]	; (402484 <nRF24_receive_data+0x60>)
  402438:	2201      	movs	r2, #1
  40243a:	6830      	ldr	r0, [r6, #0]
  40243c:	4b12      	ldr	r3, [pc, #72]	; (402488 <nRF24_receive_data+0x64>)
  40243e:	4798      	blx	r3
  402440:	2220      	movs	r2, #32
  402442:	4b12      	ldr	r3, [pc, #72]	; (40248c <nRF24_receive_data+0x68>)
  402444:	6819      	ldr	r1, [r3, #0]
  402446:	6830      	ldr	r0, [r6, #0]
  402448:	4b11      	ldr	r3, [pc, #68]	; (402490 <nRF24_receive_data+0x6c>)
  40244a:	4798      	blx	r3
  40244c:	6325      	str	r5, [r4, #48]	; 0x30
  40244e:	200b      	movs	r0, #11
  402450:	4b10      	ldr	r3, [pc, #64]	; (402494 <nRF24_receive_data+0x70>)
  402452:	4798      	blx	r3
  402454:	20e2      	movs	r0, #226	; 0xe2
  402456:	f88d 0007 	strb.w	r0, [sp, #7]
  40245a:	4b0f      	ldr	r3, [pc, #60]	; (402498 <nRF24_receive_data+0x74>)
  40245c:	4798      	blx	r3
  40245e:	2007      	movs	r0, #7
  402460:	4b0e      	ldr	r3, [pc, #56]	; (40249c <nRF24_receive_data+0x78>)
  402462:	4798      	blx	r3
  402464:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  402468:	b2c9      	uxtb	r1, r1
  40246a:	2007      	movs	r0, #7
  40246c:	4b0c      	ldr	r3, [pc, #48]	; (4024a0 <nRF24_receive_data+0x7c>)
  40246e:	4798      	blx	r3
  402470:	2300      	movs	r3, #0
  402472:	e000      	b.n	402476 <nRF24_receive_data+0x52>
  402474:	3301      	adds	r3, #1
  402476:	2b1f      	cmp	r3, #31
  402478:	ddfc      	ble.n	402474 <nRF24_receive_data+0x50>
  40247a:	b002      	add	sp, #8
  40247c:	bd70      	pop	{r4, r5, r6, pc}
  40247e:	bf00      	nop
  402480:	400e1000 	.word	0x400e1000
  402484:	20400200 	.word	0x20400200
  402488:	00400dd1 	.word	0x00400dd1
  40248c:	204001fc 	.word	0x204001fc
  402490:	00400e01 	.word	0x00400e01
  402494:	00400ba9 	.word	0x00400ba9
  402498:	004023f9 	.word	0x004023f9
  40249c:	004023b9 	.word	0x004023b9
  4024a0:	00402341 	.word	0x00402341

004024a4 <nRF24_init>:
  4024a4:	b530      	push	{r4, r5, lr}
  4024a6:	b083      	sub	sp, #12
  4024a8:	4605      	mov	r5, r0
  4024aa:	4c1f      	ldr	r4, [pc, #124]	; (402528 <nRF24_init+0x84>)
  4024ac:	491f      	ldr	r1, [pc, #124]	; (40252c <nRF24_init+0x88>)
  4024ae:	4620      	mov	r0, r4
  4024b0:	4b1f      	ldr	r3, [pc, #124]	; (402530 <nRF24_init+0x8c>)
  4024b2:	4798      	blx	r3
  4024b4:	4620      	mov	r0, r4
  4024b6:	4b1f      	ldr	r3, [pc, #124]	; (402534 <nRF24_init+0x90>)
  4024b8:	4798      	blx	r3
  4024ba:	4b1f      	ldr	r3, [pc, #124]	; (402538 <nRF24_init+0x94>)
  4024bc:	601d      	str	r5, [r3, #0]
  4024be:	2504      	movs	r5, #4
  4024c0:	4b1e      	ldr	r3, [pc, #120]	; (40253c <nRF24_init+0x98>)
  4024c2:	635d      	str	r5, [r3, #52]	; 0x34
  4024c4:	2100      	movs	r1, #0
  4024c6:	4608      	mov	r0, r1
  4024c8:	4c1d      	ldr	r4, [pc, #116]	; (402540 <nRF24_init+0x9c>)
  4024ca:	47a0      	blx	r4
  4024cc:	2007      	movs	r0, #7
  4024ce:	4b1d      	ldr	r3, [pc, #116]	; (402544 <nRF24_init+0xa0>)
  4024d0:	4798      	blx	r3
  4024d2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  4024d6:	b2c9      	uxtb	r1, r1
  4024d8:	2007      	movs	r0, #7
  4024da:	47a0      	blx	r4
  4024dc:	2100      	movs	r1, #0
  4024de:	2001      	movs	r0, #1
  4024e0:	47a0      	blx	r4
  4024e2:	2100      	movs	r1, #0
  4024e4:	2002      	movs	r0, #2
  4024e6:	47a0      	blx	r4
  4024e8:	2103      	movs	r1, #3
  4024ea:	4608      	mov	r0, r1
  4024ec:	47a0      	blx	r4
  4024ee:	2100      	movs	r1, #0
  4024f0:	4628      	mov	r0, r5
  4024f2:	47a0      	blx	r4
  4024f4:	2178      	movs	r1, #120	; 0x78
  4024f6:	2005      	movs	r0, #5
  4024f8:	47a0      	blx	r4
  4024fa:	2106      	movs	r1, #6
  4024fc:	4608      	mov	r0, r1
  4024fe:	47a0      	blx	r4
  402500:	4b11      	ldr	r3, [pc, #68]	; (402548 <nRF24_init+0xa4>)
  402502:	e893 0003 	ldmia.w	r3, {r0, r1}
  402506:	9000      	str	r0, [sp, #0]
  402508:	f88d 1004 	strb.w	r1, [sp, #4]
  40250c:	2205      	movs	r2, #5
  40250e:	4669      	mov	r1, sp
  402510:	2010      	movs	r0, #16
  402512:	4b0e      	ldr	r3, [pc, #56]	; (40254c <nRF24_init+0xa8>)
  402514:	4798      	blx	r3
  402516:	2102      	movs	r1, #2
  402518:	2000      	movs	r0, #0
  40251a:	47a0      	blx	r4
  40251c:	490c      	ldr	r1, [pc, #48]	; (402550 <nRF24_init+0xac>)
  40251e:	2021      	movs	r0, #33	; 0x21
  402520:	4b0c      	ldr	r3, [pc, #48]	; (402554 <nRF24_init+0xb0>)
  402522:	4798      	blx	r3
  402524:	b003      	add	sp, #12
  402526:	bd30      	pop	{r4, r5, pc}
  402528:	20400164 	.word	0x20400164
  40252c:	20400200 	.word	0x20400200
  402530:	00401015 	.word	0x00401015
  402534:	00400f35 	.word	0x00400f35
  402538:	204001fc 	.word	0x204001fc
  40253c:	400e1400 	.word	0x400e1400
  402540:	00402341 	.word	0x00402341
  402544:	004023b9 	.word	0x004023b9
  402548:	00403270 	.word	0x00403270
  40254c:	00402375 	.word	0x00402375
  402550:	00402425 	.word	0x00402425
  402554:	00400c61 	.word	0x00400c61

00402558 <nRF_24_is_data_available>:
  402558:	b508      	push	{r3, lr}
  40255a:	2007      	movs	r0, #7
  40255c:	4b06      	ldr	r3, [pc, #24]	; (402578 <nRF_24_is_data_available+0x20>)
  40255e:	4798      	blx	r3
  402560:	f000 0042 	and.w	r0, r0, #66	; 0x42
  402564:	2842      	cmp	r0, #66	; 0x42
  402566:	d001      	beq.n	40256c <nRF_24_is_data_available+0x14>
  402568:	2000      	movs	r0, #0
  40256a:	bd08      	pop	{r3, pc}
  40256c:	2140      	movs	r1, #64	; 0x40
  40256e:	2007      	movs	r0, #7
  402570:	4b02      	ldr	r3, [pc, #8]	; (40257c <nRF_24_is_data_available+0x24>)
  402572:	4798      	blx	r3
  402574:	2001      	movs	r0, #1
  402576:	bd08      	pop	{r3, pc}
  402578:	004023b9 	.word	0x004023b9
  40257c:	00402341 	.word	0x00402341

00402580 <nRF24_enter_receive>:
  402580:	b510      	push	{r4, lr}
  402582:	b082      	sub	sp, #8
  402584:	2000      	movs	r0, #0
  402586:	4b0f      	ldr	r3, [pc, #60]	; (4025c4 <nRF24_enter_receive+0x44>)
  402588:	4798      	blx	r3
  40258a:	f040 0101 	orr.w	r1, r0, #1
  40258e:	b2c9      	uxtb	r1, r1
  402590:	2000      	movs	r0, #0
  402592:	4c0d      	ldr	r4, [pc, #52]	; (4025c8 <nRF24_enter_receive+0x48>)
  402594:	47a0      	blx	r4
  402596:	2102      	movs	r1, #2
  402598:	4608      	mov	r0, r1
  40259a:	47a0      	blx	r4
  40259c:	4b0b      	ldr	r3, [pc, #44]	; (4025cc <nRF24_enter_receive+0x4c>)
  40259e:	e893 0003 	ldmia.w	r3, {r0, r1}
  4025a2:	9000      	str	r0, [sp, #0]
  4025a4:	f88d 1004 	strb.w	r1, [sp, #4]
  4025a8:	2205      	movs	r2, #5
  4025aa:	4669      	mov	r1, sp
  4025ac:	200b      	movs	r0, #11
  4025ae:	4b08      	ldr	r3, [pc, #32]	; (4025d0 <nRF24_enter_receive+0x50>)
  4025b0:	4798      	blx	r3
  4025b2:	2120      	movs	r1, #32
  4025b4:	2012      	movs	r0, #18
  4025b6:	47a0      	blx	r4
  4025b8:	2204      	movs	r2, #4
  4025ba:	4b06      	ldr	r3, [pc, #24]	; (4025d4 <nRF24_enter_receive+0x54>)
  4025bc:	631a      	str	r2, [r3, #48]	; 0x30
  4025be:	b002      	add	sp, #8
  4025c0:	bd10      	pop	{r4, pc}
  4025c2:	bf00      	nop
  4025c4:	004023b9 	.word	0x004023b9
  4025c8:	00402341 	.word	0x00402341
  4025cc:	00403270 	.word	0x00403270
  4025d0:	00402375 	.word	0x00402375
  4025d4:	400e1400 	.word	0x400e1400

004025d8 <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  4025d8:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CDTYUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cdtyupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4025da:	0149      	lsls	r1, r1, #5
  4025dc:	440b      	add	r3, r1
  4025de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  4025e2:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CPRDUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cprdupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4025e4:	4419      	add	r1, r3
  4025e6:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  4025ea:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  4025ee:	4770      	bx	lr

004025f0 <set_pwm_drive_motor>:
}

void set_pwm_drive_motor(uint8_t target, uint32_t duty_cycle){
  4025f0:	b508      	push	{r3, lr}
	switch(target){
  4025f2:	2803      	cmp	r0, #3
  4025f4:	d81a      	bhi.n	40262c <set_pwm_drive_motor+0x3c>
  4025f6:	e8df f000 	tbb	[pc, r0]
  4025fa:	0802      	.short	0x0802
  4025fc:	140e      	.short	0x140e
		case 0: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_0, duty_cycle); //motor 0, PA13
  4025fe:	460a      	mov	r2, r1
  402600:	2102      	movs	r1, #2
  402602:	480b      	ldr	r0, [pc, #44]	; (402630 <set_pwm_drive_motor+0x40>)
  402604:	4b0b      	ldr	r3, [pc, #44]	; (402634 <set_pwm_drive_motor+0x44>)
  402606:	4798      	blx	r3
			break;
  402608:	bd08      	pop	{r3, pc}
		case 1: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_1, duty_cycle); //motor 1, PA17
  40260a:	460a      	mov	r2, r1
  40260c:	2103      	movs	r1, #3
  40260e:	4808      	ldr	r0, [pc, #32]	; (402630 <set_pwm_drive_motor+0x40>)
  402610:	4b08      	ldr	r3, [pc, #32]	; (402634 <set_pwm_drive_motor+0x44>)
  402612:	4798      	blx	r3
			break;
  402614:	bd08      	pop	{r3, pc}
		case 2: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_2, duty_cycle); //motor 2, PA2
  402616:	460a      	mov	r2, r1
  402618:	2101      	movs	r1, #1
  40261a:	4805      	ldr	r0, [pc, #20]	; (402630 <set_pwm_drive_motor+0x40>)
  40261c:	4b05      	ldr	r3, [pc, #20]	; (402634 <set_pwm_drive_motor+0x44>)
  40261e:	4798      	blx	r3
			break;
  402620:	bd08      	pop	{r3, pc}
		case 3: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_3, duty_cycle); //motor 3, PD11
  402622:	460a      	mov	r2, r1
  402624:	2100      	movs	r1, #0
  402626:	4802      	ldr	r0, [pc, #8]	; (402630 <set_pwm_drive_motor+0x40>)
  402628:	4b02      	ldr	r3, [pc, #8]	; (402634 <set_pwm_drive_motor+0x44>)
  40262a:	4798      	blx	r3
  40262c:	bd08      	pop	{r3, pc}
  40262e:	bf00      	nop
  402630:	20400124 	.word	0x20400124
  402634:	004025d9 	.word	0x004025d9

00402638 <set_pwm_dribbler_motor>:
			break;
	}
}

//motor dribbler PA12
void set_pwm_dribbler_motor(uint32_t duty_cycle){
  402638:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_1.device), PWM_1_CHANNEL_0, duty_cycle);
  40263a:	4602      	mov	r2, r0
  40263c:	2100      	movs	r1, #0
  40263e:	4802      	ldr	r0, [pc, #8]	; (402648 <set_pwm_dribbler_motor+0x10>)
  402640:	4b02      	ldr	r3, [pc, #8]	; (40264c <set_pwm_dribbler_motor+0x14>)
  402642:	4798      	blx	r3
  402644:	bd08      	pop	{r3, pc}
  402646:	bf00      	nop
  402648:	2040017c 	.word	0x2040017c
  40264c:	004025d9 	.word	0x004025d9

00402650 <timer_task_PID_cb>:
  402650:	2201      	movs	r2, #1
  402652:	4b01      	ldr	r3, [pc, #4]	; (402658 <timer_task_PID_cb+0x8>)
  402654:	701a      	strb	r2, [r3, #0]
  402656:	4770      	bx	lr
  402658:	20400120 	.word	0x20400120

0040265c <timer_task_ADC_cb>:
  40265c:	2201      	movs	r2, #1
  40265e:	4b01      	ldr	r3, [pc, #4]	; (402664 <timer_task_ADC_cb+0x8>)
  402660:	705a      	strb	r2, [r3, #1]
  402662:	4770      	bx	lr
  402664:	20400120 	.word	0x20400120

00402668 <initialize_task_PID>:
  402668:	b510      	push	{r4, lr}
  40266a:	4907      	ldr	r1, [pc, #28]	; (402688 <initialize_task_PID+0x20>)
  40266c:	230a      	movs	r3, #10
  40266e:	608b      	str	r3, [r1, #8]
  402670:	4b06      	ldr	r3, [pc, #24]	; (40268c <initialize_task_PID+0x24>)
  402672:	60cb      	str	r3, [r1, #12]
  402674:	2301      	movs	r3, #1
  402676:	740b      	strb	r3, [r1, #16]
  402678:	4c05      	ldr	r4, [pc, #20]	; (402690 <initialize_task_PID+0x28>)
  40267a:	4620      	mov	r0, r4
  40267c:	4b05      	ldr	r3, [pc, #20]	; (402694 <initialize_task_PID+0x2c>)
  40267e:	4798      	blx	r3
  402680:	4620      	mov	r0, r4
  402682:	4b05      	ldr	r3, [pc, #20]	; (402698 <initialize_task_PID+0x30>)
  402684:	4798      	blx	r3
  402686:	bd10      	pop	{r4, pc}
  402688:	204001d4 	.word	0x204001d4
  40268c:	00402651 	.word	0x00402651
  402690:	204001b8 	.word	0x204001b8
  402694:	00401171 	.word	0x00401171
  402698:	00401135 	.word	0x00401135

0040269c <initialize_task_ADC>:
  40269c:	b510      	push	{r4, lr}
  40269e:	4907      	ldr	r1, [pc, #28]	; (4026bc <initialize_task_ADC+0x20>)
  4026a0:	2332      	movs	r3, #50	; 0x32
  4026a2:	608b      	str	r3, [r1, #8]
  4026a4:	4b06      	ldr	r3, [pc, #24]	; (4026c0 <initialize_task_ADC+0x24>)
  4026a6:	60cb      	str	r3, [r1, #12]
  4026a8:	2301      	movs	r3, #1
  4026aa:	740b      	strb	r3, [r1, #16]
  4026ac:	4c05      	ldr	r4, [pc, #20]	; (4026c4 <initialize_task_ADC+0x28>)
  4026ae:	4620      	mov	r0, r4
  4026b0:	4b05      	ldr	r3, [pc, #20]	; (4026c8 <initialize_task_ADC+0x2c>)
  4026b2:	4798      	blx	r3
  4026b4:	4620      	mov	r0, r4
  4026b6:	4b05      	ldr	r3, [pc, #20]	; (4026cc <initialize_task_ADC+0x30>)
  4026b8:	4798      	blx	r3
  4026ba:	bd10      	pop	{r4, pc}
  4026bc:	204001e8 	.word	0x204001e8
  4026c0:	0040265d 	.word	0x0040265d
  4026c4:	20400148 	.word	0x20400148
  4026c8:	00401171 	.word	0x00401171
  4026cc:	00401135 	.word	0x00401135

004026d0 <__aeabi_drsub>:
  4026d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4026d4:	e002      	b.n	4026dc <__adddf3>
  4026d6:	bf00      	nop

004026d8 <__aeabi_dsub>:
  4026d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004026dc <__adddf3>:
  4026dc:	b530      	push	{r4, r5, lr}
  4026de:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4026e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4026e6:	ea94 0f05 	teq	r4, r5
  4026ea:	bf08      	it	eq
  4026ec:	ea90 0f02 	teqeq	r0, r2
  4026f0:	bf1f      	itttt	ne
  4026f2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4026f6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4026fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4026fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402702:	f000 80e2 	beq.w	4028ca <__adddf3+0x1ee>
  402706:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40270a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40270e:	bfb8      	it	lt
  402710:	426d      	neglt	r5, r5
  402712:	dd0c      	ble.n	40272e <__adddf3+0x52>
  402714:	442c      	add	r4, r5
  402716:	ea80 0202 	eor.w	r2, r0, r2
  40271a:	ea81 0303 	eor.w	r3, r1, r3
  40271e:	ea82 0000 	eor.w	r0, r2, r0
  402722:	ea83 0101 	eor.w	r1, r3, r1
  402726:	ea80 0202 	eor.w	r2, r0, r2
  40272a:	ea81 0303 	eor.w	r3, r1, r3
  40272e:	2d36      	cmp	r5, #54	; 0x36
  402730:	bf88      	it	hi
  402732:	bd30      	pophi	{r4, r5, pc}
  402734:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402738:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40273c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402740:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402744:	d002      	beq.n	40274c <__adddf3+0x70>
  402746:	4240      	negs	r0, r0
  402748:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40274c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402750:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402754:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402758:	d002      	beq.n	402760 <__adddf3+0x84>
  40275a:	4252      	negs	r2, r2
  40275c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402760:	ea94 0f05 	teq	r4, r5
  402764:	f000 80a7 	beq.w	4028b6 <__adddf3+0x1da>
  402768:	f1a4 0401 	sub.w	r4, r4, #1
  40276c:	f1d5 0e20 	rsbs	lr, r5, #32
  402770:	db0d      	blt.n	40278e <__adddf3+0xb2>
  402772:	fa02 fc0e 	lsl.w	ip, r2, lr
  402776:	fa22 f205 	lsr.w	r2, r2, r5
  40277a:	1880      	adds	r0, r0, r2
  40277c:	f141 0100 	adc.w	r1, r1, #0
  402780:	fa03 f20e 	lsl.w	r2, r3, lr
  402784:	1880      	adds	r0, r0, r2
  402786:	fa43 f305 	asr.w	r3, r3, r5
  40278a:	4159      	adcs	r1, r3
  40278c:	e00e      	b.n	4027ac <__adddf3+0xd0>
  40278e:	f1a5 0520 	sub.w	r5, r5, #32
  402792:	f10e 0e20 	add.w	lr, lr, #32
  402796:	2a01      	cmp	r2, #1
  402798:	fa03 fc0e 	lsl.w	ip, r3, lr
  40279c:	bf28      	it	cs
  40279e:	f04c 0c02 	orrcs.w	ip, ip, #2
  4027a2:	fa43 f305 	asr.w	r3, r3, r5
  4027a6:	18c0      	adds	r0, r0, r3
  4027a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4027ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4027b0:	d507      	bpl.n	4027c2 <__adddf3+0xe6>
  4027b2:	f04f 0e00 	mov.w	lr, #0
  4027b6:	f1dc 0c00 	rsbs	ip, ip, #0
  4027ba:	eb7e 0000 	sbcs.w	r0, lr, r0
  4027be:	eb6e 0101 	sbc.w	r1, lr, r1
  4027c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4027c6:	d31b      	bcc.n	402800 <__adddf3+0x124>
  4027c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4027cc:	d30c      	bcc.n	4027e8 <__adddf3+0x10c>
  4027ce:	0849      	lsrs	r1, r1, #1
  4027d0:	ea5f 0030 	movs.w	r0, r0, rrx
  4027d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4027d8:	f104 0401 	add.w	r4, r4, #1
  4027dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4027e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4027e4:	f080 809a 	bcs.w	40291c <__adddf3+0x240>
  4027e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4027ec:	bf08      	it	eq
  4027ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4027f2:	f150 0000 	adcs.w	r0, r0, #0
  4027f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4027fa:	ea41 0105 	orr.w	r1, r1, r5
  4027fe:	bd30      	pop	{r4, r5, pc}
  402800:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402804:	4140      	adcs	r0, r0
  402806:	eb41 0101 	adc.w	r1, r1, r1
  40280a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40280e:	f1a4 0401 	sub.w	r4, r4, #1
  402812:	d1e9      	bne.n	4027e8 <__adddf3+0x10c>
  402814:	f091 0f00 	teq	r1, #0
  402818:	bf04      	itt	eq
  40281a:	4601      	moveq	r1, r0
  40281c:	2000      	moveq	r0, #0
  40281e:	fab1 f381 	clz	r3, r1
  402822:	bf08      	it	eq
  402824:	3320      	addeq	r3, #32
  402826:	f1a3 030b 	sub.w	r3, r3, #11
  40282a:	f1b3 0220 	subs.w	r2, r3, #32
  40282e:	da0c      	bge.n	40284a <__adddf3+0x16e>
  402830:	320c      	adds	r2, #12
  402832:	dd08      	ble.n	402846 <__adddf3+0x16a>
  402834:	f102 0c14 	add.w	ip, r2, #20
  402838:	f1c2 020c 	rsb	r2, r2, #12
  40283c:	fa01 f00c 	lsl.w	r0, r1, ip
  402840:	fa21 f102 	lsr.w	r1, r1, r2
  402844:	e00c      	b.n	402860 <__adddf3+0x184>
  402846:	f102 0214 	add.w	r2, r2, #20
  40284a:	bfd8      	it	le
  40284c:	f1c2 0c20 	rsble	ip, r2, #32
  402850:	fa01 f102 	lsl.w	r1, r1, r2
  402854:	fa20 fc0c 	lsr.w	ip, r0, ip
  402858:	bfdc      	itt	le
  40285a:	ea41 010c 	orrle.w	r1, r1, ip
  40285e:	4090      	lslle	r0, r2
  402860:	1ae4      	subs	r4, r4, r3
  402862:	bfa2      	ittt	ge
  402864:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402868:	4329      	orrge	r1, r5
  40286a:	bd30      	popge	{r4, r5, pc}
  40286c:	ea6f 0404 	mvn.w	r4, r4
  402870:	3c1f      	subs	r4, #31
  402872:	da1c      	bge.n	4028ae <__adddf3+0x1d2>
  402874:	340c      	adds	r4, #12
  402876:	dc0e      	bgt.n	402896 <__adddf3+0x1ba>
  402878:	f104 0414 	add.w	r4, r4, #20
  40287c:	f1c4 0220 	rsb	r2, r4, #32
  402880:	fa20 f004 	lsr.w	r0, r0, r4
  402884:	fa01 f302 	lsl.w	r3, r1, r2
  402888:	ea40 0003 	orr.w	r0, r0, r3
  40288c:	fa21 f304 	lsr.w	r3, r1, r4
  402890:	ea45 0103 	orr.w	r1, r5, r3
  402894:	bd30      	pop	{r4, r5, pc}
  402896:	f1c4 040c 	rsb	r4, r4, #12
  40289a:	f1c4 0220 	rsb	r2, r4, #32
  40289e:	fa20 f002 	lsr.w	r0, r0, r2
  4028a2:	fa01 f304 	lsl.w	r3, r1, r4
  4028a6:	ea40 0003 	orr.w	r0, r0, r3
  4028aa:	4629      	mov	r1, r5
  4028ac:	bd30      	pop	{r4, r5, pc}
  4028ae:	fa21 f004 	lsr.w	r0, r1, r4
  4028b2:	4629      	mov	r1, r5
  4028b4:	bd30      	pop	{r4, r5, pc}
  4028b6:	f094 0f00 	teq	r4, #0
  4028ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4028be:	bf06      	itte	eq
  4028c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4028c4:	3401      	addeq	r4, #1
  4028c6:	3d01      	subne	r5, #1
  4028c8:	e74e      	b.n	402768 <__adddf3+0x8c>
  4028ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4028ce:	bf18      	it	ne
  4028d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4028d4:	d029      	beq.n	40292a <__adddf3+0x24e>
  4028d6:	ea94 0f05 	teq	r4, r5
  4028da:	bf08      	it	eq
  4028dc:	ea90 0f02 	teqeq	r0, r2
  4028e0:	d005      	beq.n	4028ee <__adddf3+0x212>
  4028e2:	ea54 0c00 	orrs.w	ip, r4, r0
  4028e6:	bf04      	itt	eq
  4028e8:	4619      	moveq	r1, r3
  4028ea:	4610      	moveq	r0, r2
  4028ec:	bd30      	pop	{r4, r5, pc}
  4028ee:	ea91 0f03 	teq	r1, r3
  4028f2:	bf1e      	ittt	ne
  4028f4:	2100      	movne	r1, #0
  4028f6:	2000      	movne	r0, #0
  4028f8:	bd30      	popne	{r4, r5, pc}
  4028fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4028fe:	d105      	bne.n	40290c <__adddf3+0x230>
  402900:	0040      	lsls	r0, r0, #1
  402902:	4149      	adcs	r1, r1
  402904:	bf28      	it	cs
  402906:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40290a:	bd30      	pop	{r4, r5, pc}
  40290c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402910:	bf3c      	itt	cc
  402912:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402916:	bd30      	popcc	{r4, r5, pc}
  402918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40291c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402920:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402924:	f04f 0000 	mov.w	r0, #0
  402928:	bd30      	pop	{r4, r5, pc}
  40292a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40292e:	bf1a      	itte	ne
  402930:	4619      	movne	r1, r3
  402932:	4610      	movne	r0, r2
  402934:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402938:	bf1c      	itt	ne
  40293a:	460b      	movne	r3, r1
  40293c:	4602      	movne	r2, r0
  40293e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402942:	bf06      	itte	eq
  402944:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402948:	ea91 0f03 	teqeq	r1, r3
  40294c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402950:	bd30      	pop	{r4, r5, pc}
  402952:	bf00      	nop

00402954 <__aeabi_ui2d>:
  402954:	f090 0f00 	teq	r0, #0
  402958:	bf04      	itt	eq
  40295a:	2100      	moveq	r1, #0
  40295c:	4770      	bxeq	lr
  40295e:	b530      	push	{r4, r5, lr}
  402960:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402964:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402968:	f04f 0500 	mov.w	r5, #0
  40296c:	f04f 0100 	mov.w	r1, #0
  402970:	e750      	b.n	402814 <__adddf3+0x138>
  402972:	bf00      	nop

00402974 <__aeabi_i2d>:
  402974:	f090 0f00 	teq	r0, #0
  402978:	bf04      	itt	eq
  40297a:	2100      	moveq	r1, #0
  40297c:	4770      	bxeq	lr
  40297e:	b530      	push	{r4, r5, lr}
  402980:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402984:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402988:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40298c:	bf48      	it	mi
  40298e:	4240      	negmi	r0, r0
  402990:	f04f 0100 	mov.w	r1, #0
  402994:	e73e      	b.n	402814 <__adddf3+0x138>
  402996:	bf00      	nop

00402998 <__aeabi_f2d>:
  402998:	0042      	lsls	r2, r0, #1
  40299a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40299e:	ea4f 0131 	mov.w	r1, r1, rrx
  4029a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4029a6:	bf1f      	itttt	ne
  4029a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4029ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4029b4:	4770      	bxne	lr
  4029b6:	f092 0f00 	teq	r2, #0
  4029ba:	bf14      	ite	ne
  4029bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029c0:	4770      	bxeq	lr
  4029c2:	b530      	push	{r4, r5, lr}
  4029c4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4029c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4029cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4029d0:	e720      	b.n	402814 <__adddf3+0x138>
  4029d2:	bf00      	nop

004029d4 <__aeabi_ul2d>:
  4029d4:	ea50 0201 	orrs.w	r2, r0, r1
  4029d8:	bf08      	it	eq
  4029da:	4770      	bxeq	lr
  4029dc:	b530      	push	{r4, r5, lr}
  4029de:	f04f 0500 	mov.w	r5, #0
  4029e2:	e00a      	b.n	4029fa <__aeabi_l2d+0x16>

004029e4 <__aeabi_l2d>:
  4029e4:	ea50 0201 	orrs.w	r2, r0, r1
  4029e8:	bf08      	it	eq
  4029ea:	4770      	bxeq	lr
  4029ec:	b530      	push	{r4, r5, lr}
  4029ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4029f2:	d502      	bpl.n	4029fa <__aeabi_l2d+0x16>
  4029f4:	4240      	negs	r0, r0
  4029f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4029fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4029fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402a02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402a06:	f43f aedc 	beq.w	4027c2 <__adddf3+0xe6>
  402a0a:	f04f 0203 	mov.w	r2, #3
  402a0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a12:	bf18      	it	ne
  402a14:	3203      	addne	r2, #3
  402a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a1a:	bf18      	it	ne
  402a1c:	3203      	addne	r2, #3
  402a1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402a22:	f1c2 0320 	rsb	r3, r2, #32
  402a26:	fa00 fc03 	lsl.w	ip, r0, r3
  402a2a:	fa20 f002 	lsr.w	r0, r0, r2
  402a2e:	fa01 fe03 	lsl.w	lr, r1, r3
  402a32:	ea40 000e 	orr.w	r0, r0, lr
  402a36:	fa21 f102 	lsr.w	r1, r1, r2
  402a3a:	4414      	add	r4, r2
  402a3c:	e6c1      	b.n	4027c2 <__adddf3+0xe6>
  402a3e:	bf00      	nop

00402a40 <__aeabi_dmul>:
  402a40:	b570      	push	{r4, r5, r6, lr}
  402a42:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402a46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402a4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402a4e:	bf1d      	ittte	ne
  402a50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402a54:	ea94 0f0c 	teqne	r4, ip
  402a58:	ea95 0f0c 	teqne	r5, ip
  402a5c:	f000 f8de 	bleq	402c1c <__aeabi_dmul+0x1dc>
  402a60:	442c      	add	r4, r5
  402a62:	ea81 0603 	eor.w	r6, r1, r3
  402a66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402a6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402a6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402a72:	bf18      	it	ne
  402a74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402a80:	d038      	beq.n	402af4 <__aeabi_dmul+0xb4>
  402a82:	fba0 ce02 	umull	ip, lr, r0, r2
  402a86:	f04f 0500 	mov.w	r5, #0
  402a8a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402a8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402a92:	fbe0 e503 	umlal	lr, r5, r0, r3
  402a96:	f04f 0600 	mov.w	r6, #0
  402a9a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402a9e:	f09c 0f00 	teq	ip, #0
  402aa2:	bf18      	it	ne
  402aa4:	f04e 0e01 	orrne.w	lr, lr, #1
  402aa8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402aac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ab0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402ab4:	d204      	bcs.n	402ac0 <__aeabi_dmul+0x80>
  402ab6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402aba:	416d      	adcs	r5, r5
  402abc:	eb46 0606 	adc.w	r6, r6, r6
  402ac0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ac4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402ac8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402acc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402ad0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ad4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ad8:	bf88      	it	hi
  402ada:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402ade:	d81e      	bhi.n	402b1e <__aeabi_dmul+0xde>
  402ae0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402ae4:	bf08      	it	eq
  402ae6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402aea:	f150 0000 	adcs.w	r0, r0, #0
  402aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402af2:	bd70      	pop	{r4, r5, r6, pc}
  402af4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402af8:	ea46 0101 	orr.w	r1, r6, r1
  402afc:	ea40 0002 	orr.w	r0, r0, r2
  402b00:	ea81 0103 	eor.w	r1, r1, r3
  402b04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402b08:	bfc2      	ittt	gt
  402b0a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402b0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b12:	bd70      	popgt	{r4, r5, r6, pc}
  402b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b18:	f04f 0e00 	mov.w	lr, #0
  402b1c:	3c01      	subs	r4, #1
  402b1e:	f300 80ab 	bgt.w	402c78 <__aeabi_dmul+0x238>
  402b22:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402b26:	bfde      	ittt	le
  402b28:	2000      	movle	r0, #0
  402b2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402b2e:	bd70      	pople	{r4, r5, r6, pc}
  402b30:	f1c4 0400 	rsb	r4, r4, #0
  402b34:	3c20      	subs	r4, #32
  402b36:	da35      	bge.n	402ba4 <__aeabi_dmul+0x164>
  402b38:	340c      	adds	r4, #12
  402b3a:	dc1b      	bgt.n	402b74 <__aeabi_dmul+0x134>
  402b3c:	f104 0414 	add.w	r4, r4, #20
  402b40:	f1c4 0520 	rsb	r5, r4, #32
  402b44:	fa00 f305 	lsl.w	r3, r0, r5
  402b48:	fa20 f004 	lsr.w	r0, r0, r4
  402b4c:	fa01 f205 	lsl.w	r2, r1, r5
  402b50:	ea40 0002 	orr.w	r0, r0, r2
  402b54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402b58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b60:	fa21 f604 	lsr.w	r6, r1, r4
  402b64:	eb42 0106 	adc.w	r1, r2, r6
  402b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b6c:	bf08      	it	eq
  402b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b72:	bd70      	pop	{r4, r5, r6, pc}
  402b74:	f1c4 040c 	rsb	r4, r4, #12
  402b78:	f1c4 0520 	rsb	r5, r4, #32
  402b7c:	fa00 f304 	lsl.w	r3, r0, r4
  402b80:	fa20 f005 	lsr.w	r0, r0, r5
  402b84:	fa01 f204 	lsl.w	r2, r1, r4
  402b88:	ea40 0002 	orr.w	r0, r0, r2
  402b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b94:	f141 0100 	adc.w	r1, r1, #0
  402b98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b9c:	bf08      	it	eq
  402b9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402ba2:	bd70      	pop	{r4, r5, r6, pc}
  402ba4:	f1c4 0520 	rsb	r5, r4, #32
  402ba8:	fa00 f205 	lsl.w	r2, r0, r5
  402bac:	ea4e 0e02 	orr.w	lr, lr, r2
  402bb0:	fa20 f304 	lsr.w	r3, r0, r4
  402bb4:	fa01 f205 	lsl.w	r2, r1, r5
  402bb8:	ea43 0302 	orr.w	r3, r3, r2
  402bbc:	fa21 f004 	lsr.w	r0, r1, r4
  402bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402bc4:	fa21 f204 	lsr.w	r2, r1, r4
  402bc8:	ea20 0002 	bic.w	r0, r0, r2
  402bcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402bd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402bd4:	bf08      	it	eq
  402bd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402bda:	bd70      	pop	{r4, r5, r6, pc}
  402bdc:	f094 0f00 	teq	r4, #0
  402be0:	d10f      	bne.n	402c02 <__aeabi_dmul+0x1c2>
  402be2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402be6:	0040      	lsls	r0, r0, #1
  402be8:	eb41 0101 	adc.w	r1, r1, r1
  402bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402bf0:	bf08      	it	eq
  402bf2:	3c01      	subeq	r4, #1
  402bf4:	d0f7      	beq.n	402be6 <__aeabi_dmul+0x1a6>
  402bf6:	ea41 0106 	orr.w	r1, r1, r6
  402bfa:	f095 0f00 	teq	r5, #0
  402bfe:	bf18      	it	ne
  402c00:	4770      	bxne	lr
  402c02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402c06:	0052      	lsls	r2, r2, #1
  402c08:	eb43 0303 	adc.w	r3, r3, r3
  402c0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402c10:	bf08      	it	eq
  402c12:	3d01      	subeq	r5, #1
  402c14:	d0f7      	beq.n	402c06 <__aeabi_dmul+0x1c6>
  402c16:	ea43 0306 	orr.w	r3, r3, r6
  402c1a:	4770      	bx	lr
  402c1c:	ea94 0f0c 	teq	r4, ip
  402c20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402c24:	bf18      	it	ne
  402c26:	ea95 0f0c 	teqne	r5, ip
  402c2a:	d00c      	beq.n	402c46 <__aeabi_dmul+0x206>
  402c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c30:	bf18      	it	ne
  402c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c36:	d1d1      	bne.n	402bdc <__aeabi_dmul+0x19c>
  402c38:	ea81 0103 	eor.w	r1, r1, r3
  402c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c40:	f04f 0000 	mov.w	r0, #0
  402c44:	bd70      	pop	{r4, r5, r6, pc}
  402c46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c4a:	bf06      	itte	eq
  402c4c:	4610      	moveq	r0, r2
  402c4e:	4619      	moveq	r1, r3
  402c50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c54:	d019      	beq.n	402c8a <__aeabi_dmul+0x24a>
  402c56:	ea94 0f0c 	teq	r4, ip
  402c5a:	d102      	bne.n	402c62 <__aeabi_dmul+0x222>
  402c5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402c60:	d113      	bne.n	402c8a <__aeabi_dmul+0x24a>
  402c62:	ea95 0f0c 	teq	r5, ip
  402c66:	d105      	bne.n	402c74 <__aeabi_dmul+0x234>
  402c68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402c6c:	bf1c      	itt	ne
  402c6e:	4610      	movne	r0, r2
  402c70:	4619      	movne	r1, r3
  402c72:	d10a      	bne.n	402c8a <__aeabi_dmul+0x24a>
  402c74:	ea81 0103 	eor.w	r1, r1, r3
  402c78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402c84:	f04f 0000 	mov.w	r0, #0
  402c88:	bd70      	pop	{r4, r5, r6, pc}
  402c8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402c92:	bd70      	pop	{r4, r5, r6, pc}

00402c94 <__aeabi_ddiv>:
  402c94:	b570      	push	{r4, r5, r6, lr}
  402c96:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402c9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402c9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402ca2:	bf1d      	ittte	ne
  402ca4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402ca8:	ea94 0f0c 	teqne	r4, ip
  402cac:	ea95 0f0c 	teqne	r5, ip
  402cb0:	f000 f8a7 	bleq	402e02 <__aeabi_ddiv+0x16e>
  402cb4:	eba4 0405 	sub.w	r4, r4, r5
  402cb8:	ea81 0e03 	eor.w	lr, r1, r3
  402cbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402cc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402cc4:	f000 8088 	beq.w	402dd8 <__aeabi_ddiv+0x144>
  402cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402ccc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402cd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402cd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402cd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402cdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402ce0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402ce4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402ce8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402cec:	429d      	cmp	r5, r3
  402cee:	bf08      	it	eq
  402cf0:	4296      	cmpeq	r6, r2
  402cf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402cf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402cfa:	d202      	bcs.n	402d02 <__aeabi_ddiv+0x6e>
  402cfc:	085b      	lsrs	r3, r3, #1
  402cfe:	ea4f 0232 	mov.w	r2, r2, rrx
  402d02:	1ab6      	subs	r6, r6, r2
  402d04:	eb65 0503 	sbc.w	r5, r5, r3
  402d08:	085b      	lsrs	r3, r3, #1
  402d0a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402d12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402d16:	ebb6 0e02 	subs.w	lr, r6, r2
  402d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d1e:	bf22      	ittt	cs
  402d20:	1ab6      	subcs	r6, r6, r2
  402d22:	4675      	movcs	r5, lr
  402d24:	ea40 000c 	orrcs.w	r0, r0, ip
  402d28:	085b      	lsrs	r3, r3, #1
  402d2a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d2e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d32:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d36:	bf22      	ittt	cs
  402d38:	1ab6      	subcs	r6, r6, r2
  402d3a:	4675      	movcs	r5, lr
  402d3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402d40:	085b      	lsrs	r3, r3, #1
  402d42:	ea4f 0232 	mov.w	r2, r2, rrx
  402d46:	ebb6 0e02 	subs.w	lr, r6, r2
  402d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d4e:	bf22      	ittt	cs
  402d50:	1ab6      	subcs	r6, r6, r2
  402d52:	4675      	movcs	r5, lr
  402d54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402d58:	085b      	lsrs	r3, r3, #1
  402d5a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d5e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d62:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d66:	bf22      	ittt	cs
  402d68:	1ab6      	subcs	r6, r6, r2
  402d6a:	4675      	movcs	r5, lr
  402d6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402d70:	ea55 0e06 	orrs.w	lr, r5, r6
  402d74:	d018      	beq.n	402da8 <__aeabi_ddiv+0x114>
  402d76:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402d7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402d7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402d82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402d86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402d8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402d8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402d92:	d1c0      	bne.n	402d16 <__aeabi_ddiv+0x82>
  402d94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d98:	d10b      	bne.n	402db2 <__aeabi_ddiv+0x11e>
  402d9a:	ea41 0100 	orr.w	r1, r1, r0
  402d9e:	f04f 0000 	mov.w	r0, #0
  402da2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402da6:	e7b6      	b.n	402d16 <__aeabi_ddiv+0x82>
  402da8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402dac:	bf04      	itt	eq
  402dae:	4301      	orreq	r1, r0
  402db0:	2000      	moveq	r0, #0
  402db2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402db6:	bf88      	it	hi
  402db8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402dbc:	f63f aeaf 	bhi.w	402b1e <__aeabi_dmul+0xde>
  402dc0:	ebb5 0c03 	subs.w	ip, r5, r3
  402dc4:	bf04      	itt	eq
  402dc6:	ebb6 0c02 	subseq.w	ip, r6, r2
  402dca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402dce:	f150 0000 	adcs.w	r0, r0, #0
  402dd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402dd6:	bd70      	pop	{r4, r5, r6, pc}
  402dd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402ddc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402de0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402de4:	bfc2      	ittt	gt
  402de6:	ebd4 050c 	rsbsgt	r5, r4, ip
  402dea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402dee:	bd70      	popgt	{r4, r5, r6, pc}
  402df0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402df4:	f04f 0e00 	mov.w	lr, #0
  402df8:	3c01      	subs	r4, #1
  402dfa:	e690      	b.n	402b1e <__aeabi_dmul+0xde>
  402dfc:	ea45 0e06 	orr.w	lr, r5, r6
  402e00:	e68d      	b.n	402b1e <__aeabi_dmul+0xde>
  402e02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402e06:	ea94 0f0c 	teq	r4, ip
  402e0a:	bf08      	it	eq
  402e0c:	ea95 0f0c 	teqeq	r5, ip
  402e10:	f43f af3b 	beq.w	402c8a <__aeabi_dmul+0x24a>
  402e14:	ea94 0f0c 	teq	r4, ip
  402e18:	d10a      	bne.n	402e30 <__aeabi_ddiv+0x19c>
  402e1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402e1e:	f47f af34 	bne.w	402c8a <__aeabi_dmul+0x24a>
  402e22:	ea95 0f0c 	teq	r5, ip
  402e26:	f47f af25 	bne.w	402c74 <__aeabi_dmul+0x234>
  402e2a:	4610      	mov	r0, r2
  402e2c:	4619      	mov	r1, r3
  402e2e:	e72c      	b.n	402c8a <__aeabi_dmul+0x24a>
  402e30:	ea95 0f0c 	teq	r5, ip
  402e34:	d106      	bne.n	402e44 <__aeabi_ddiv+0x1b0>
  402e36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402e3a:	f43f aefd 	beq.w	402c38 <__aeabi_dmul+0x1f8>
  402e3e:	4610      	mov	r0, r2
  402e40:	4619      	mov	r1, r3
  402e42:	e722      	b.n	402c8a <__aeabi_dmul+0x24a>
  402e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402e48:	bf18      	it	ne
  402e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402e4e:	f47f aec5 	bne.w	402bdc <__aeabi_dmul+0x19c>
  402e52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402e56:	f47f af0d 	bne.w	402c74 <__aeabi_dmul+0x234>
  402e5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402e5e:	f47f aeeb 	bne.w	402c38 <__aeabi_dmul+0x1f8>
  402e62:	e712      	b.n	402c8a <__aeabi_dmul+0x24a>

00402e64 <__aeabi_d2f>:
  402e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402e68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402e6c:	bf24      	itt	cs
  402e6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402e72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402e76:	d90d      	bls.n	402e94 <__aeabi_d2f+0x30>
  402e78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402e7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402e80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402e84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402e88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402e8c:	bf08      	it	eq
  402e8e:	f020 0001 	biceq.w	r0, r0, #1
  402e92:	4770      	bx	lr
  402e94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402e98:	d121      	bne.n	402ede <__aeabi_d2f+0x7a>
  402e9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402e9e:	bfbc      	itt	lt
  402ea0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402ea4:	4770      	bxlt	lr
  402ea6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402eaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402eae:	f1c2 0218 	rsb	r2, r2, #24
  402eb2:	f1c2 0c20 	rsb	ip, r2, #32
  402eb6:	fa10 f30c 	lsls.w	r3, r0, ip
  402eba:	fa20 f002 	lsr.w	r0, r0, r2
  402ebe:	bf18      	it	ne
  402ec0:	f040 0001 	orrne.w	r0, r0, #1
  402ec4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402ec8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402ecc:	fa03 fc0c 	lsl.w	ip, r3, ip
  402ed0:	ea40 000c 	orr.w	r0, r0, ip
  402ed4:	fa23 f302 	lsr.w	r3, r3, r2
  402ed8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402edc:	e7cc      	b.n	402e78 <__aeabi_d2f+0x14>
  402ede:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402ee2:	d107      	bne.n	402ef4 <__aeabi_d2f+0x90>
  402ee4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402ee8:	bf1e      	ittt	ne
  402eea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402eee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402ef2:	4770      	bxne	lr
  402ef4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402f00:	4770      	bx	lr
  402f02:	bf00      	nop

00402f04 <__libc_init_array>:
  402f04:	b570      	push	{r4, r5, r6, lr}
  402f06:	4e0d      	ldr	r6, [pc, #52]	; (402f3c <__libc_init_array+0x38>)
  402f08:	4c0d      	ldr	r4, [pc, #52]	; (402f40 <__libc_init_array+0x3c>)
  402f0a:	1ba4      	subs	r4, r4, r6
  402f0c:	10a4      	asrs	r4, r4, #2
  402f0e:	2500      	movs	r5, #0
  402f10:	42a5      	cmp	r5, r4
  402f12:	d109      	bne.n	402f28 <__libc_init_array+0x24>
  402f14:	4e0b      	ldr	r6, [pc, #44]	; (402f44 <__libc_init_array+0x40>)
  402f16:	4c0c      	ldr	r4, [pc, #48]	; (402f48 <__libc_init_array+0x44>)
  402f18:	f000 f9ae 	bl	403278 <_init>
  402f1c:	1ba4      	subs	r4, r4, r6
  402f1e:	10a4      	asrs	r4, r4, #2
  402f20:	2500      	movs	r5, #0
  402f22:	42a5      	cmp	r5, r4
  402f24:	d105      	bne.n	402f32 <__libc_init_array+0x2e>
  402f26:	bd70      	pop	{r4, r5, r6, pc}
  402f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402f2c:	4798      	blx	r3
  402f2e:	3501      	adds	r5, #1
  402f30:	e7ee      	b.n	402f10 <__libc_init_array+0xc>
  402f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402f36:	4798      	blx	r3
  402f38:	3501      	adds	r5, #1
  402f3a:	e7f2      	b.n	402f22 <__libc_init_array+0x1e>
  402f3c:	00403284 	.word	0x00403284
  402f40:	00403284 	.word	0x00403284
  402f44:	00403284 	.word	0x00403284
  402f48:	00403288 	.word	0x00403288

00402f4c <memset>:
  402f4c:	4402      	add	r2, r0
  402f4e:	4603      	mov	r3, r0
  402f50:	4293      	cmp	r3, r2
  402f52:	d100      	bne.n	402f56 <memset+0xa>
  402f54:	4770      	bx	lr
  402f56:	f803 1b01 	strb.w	r1, [r3], #1
  402f5a:	e7f9      	b.n	402f50 <memset+0x4>
  402f5c:	682f2e2e 	.word	0x682f2e2e
  402f60:	692f6c61 	.word	0x692f6c61
  402f64:	756c636e 	.word	0x756c636e
  402f68:	682f6564 	.word	0x682f6564
  402f6c:	775f6c61 	.word	0x775f6c61
  402f70:	682e7464 	.word	0x682e7464
  402f74:	00000000 	.word	0x00000000
  402f78:	682f2e2e 	.word	0x682f2e2e
  402f7c:	732f6c61 	.word	0x732f6c61
  402f80:	682f6372 	.word	0x682f6372
  402f84:	615f6c61 	.word	0x615f6c61
  402f88:	735f6364 	.word	0x735f6364
  402f8c:	2e636e79 	.word	0x2e636e79
  402f90:	00000063 	.word	0x00000063
  402f94:	682f2e2e 	.word	0x682f2e2e
  402f98:	732f6c61 	.word	0x732f6c61
  402f9c:	682f6372 	.word	0x682f6372
  402fa0:	695f6c61 	.word	0x695f6c61
  402fa4:	6d5f6332 	.word	0x6d5f6332
  402fa8:	6e79735f 	.word	0x6e79735f
  402fac:	00632e63 	.word	0x00632e63
  402fb0:	682f2e2e 	.word	0x682f2e2e
  402fb4:	732f6c61 	.word	0x732f6c61
  402fb8:	682f6372 	.word	0x682f6372
  402fbc:	695f6c61 	.word	0x695f6c61
  402fc0:	00632e6f 	.word	0x00632e6f
  402fc4:	682f2e2e 	.word	0x682f2e2e
  402fc8:	732f6c61 	.word	0x732f6c61
  402fcc:	682f6372 	.word	0x682f6372
  402fd0:	705f6c61 	.word	0x705f6c61
  402fd4:	632e6d77 	.word	0x632e6d77
  402fd8:	00000000 	.word	0x00000000
  402fdc:	682f2e2e 	.word	0x682f2e2e
  402fe0:	732f6c61 	.word	0x732f6c61
  402fe4:	682f6372 	.word	0x682f6372
  402fe8:	735f6c61 	.word	0x735f6c61
  402fec:	6d5f6970 	.word	0x6d5f6970
  402ff0:	6e79735f 	.word	0x6e79735f
  402ff4:	00632e63 	.word	0x00632e63
  402ff8:	682f2e2e 	.word	0x682f2e2e
  402ffc:	732f6c61 	.word	0x732f6c61
  403000:	682f6372 	.word	0x682f6372
  403004:	745f6c61 	.word	0x745f6c61
  403008:	72656d69 	.word	0x72656d69
  40300c:	0000632e 	.word	0x0000632e
  403010:	682f2e2e 	.word	0x682f2e2e
  403014:	752f6c61 	.word	0x752f6c61
  403018:	736c6974 	.word	0x736c6974
  40301c:	6372732f 	.word	0x6372732f
  403020:	6974752f 	.word	0x6974752f
  403024:	6c5f736c 	.word	0x6c5f736c
  403028:	2e747369 	.word	0x2e747369
  40302c:	00000063 	.word	0x00000063

00403030 <_afecs>:
  403030:	00000000 2f843100 03000000 ffffffff     .....1./........
  403040:	0000ffff 00000000 00000000 00000000     ................
  403050:	0000010c 00000000 00000000 00000000     ................
  403060:	00000000 00000200 00000200 00000200     ................
  403070:	00000200 00000200 00000200 00000200     ................
  403080:	00000200 00000200 00000200 00000200     ................
  403090:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  4030a0:	5f6c7068 63656661 0000632e              hpl_afec.c..

004030ac <_ext_irq>:
  4030ac:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  4030bc:	00000000 03c00000 00008020 00000001     ........ .......
  4030cc:	00000002 000000f2 000000f2 00000000     ................
  4030dc:	000000f0 00000002                       ........

004030e4 <_pio_irq_n>:
  4030e4:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  4030f4:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

00403104 <_pwms>:
  403104:	40020000 0000001f 00010001 00000001     ...@............
  403114:	00000001 000000ff 00000000 00000004     ................
	...
  403130:	00000004 0040318c 00000000 204000dc     .....1@.......@ 
  403140:	4005c000 0000003c 00010001 00000001     ...@<...........
  403150:	00000001 000000ff 00000000 00000004     ................
	...
  40316c:	00000001 0040317c 00000000 204000d0     ....|1@.......@ 

0040317c <_ch_cfg1>:
  40317c:	00000000 00000208 00000400 00000200     ................

0040318c <_ch_cfg0>:
  40318c:	00000000 00000208 00000400 00000200     ................
  40319c:	00000001 00000208 00000400 00000200     ................
  4031ac:	00000002 00000208 00000400 00000200     ................
  4031bc:	00000003 00000208 00000400 00000200     ................
  4031cc:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4031dc:	632e6d77 00000000                       wm.c....

004031e4 <spi_regs>:
  4031e4:	00000000 80000000 00000001 0496fa02     ................
  4031f4:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  403204:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  403214:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00403224 <_i2cm_sync_cfgs>:
  403224:	40018000 00000020 00000000 00000000     ...@ ...........
  403234:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  403244:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  403254:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  403264:	775f6c70 632e7464 00000000 bbccddee     pl_wdt.c........
  403274:	000000aa                                ....

00403278 <_init>:
  403278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40327a:	bf00      	nop
  40327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40327e:	bc08      	pop	{r3}
  403280:	469e      	mov	lr, r3
  403282:	4770      	bx	lr

00403284 <__init_array_start>:
  403284:	0040017d 	.word	0x0040017d

00403288 <_fini>:
  403288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40328a:	bf00      	nop
  40328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40328e:	bc08      	pop	{r3}
  403290:	469e      	mov	lr, r3
  403292:	4770      	bx	lr

00403294 <__fini_array_start>:
  403294:	00400159 	.word	0x00400159
