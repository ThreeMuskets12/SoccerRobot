
Robot_Firmware_v17.8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003610  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20400000  00403610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b4  20400050  00403660  00020050  2**3
                  ALLOC
  3 .heap         00000204  20400204  00403814  00020050  2**0
                  ALLOC
  4 .stack        00000400  20400408  00403a18  00020050  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
  7 .debug_info   000249c2  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b88  00000000  00000000  00044a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cd66  00000000  00000000  00049621  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000de8  00000000  00000000  00056387  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d08  00000000  00000000  0005716f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003ccb9  00000000  00000000  00057e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d78b  00000000  00000000  00094b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00123cf8  00000000  00000000  000b22bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002420  00000000  00000000  001d5fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 08 40 20 5d 02 40 00 59 02 40 00 59 02 40 00     ..@ ].@.Y.@.Y.@.
  400010:	59 02 40 00 59 02 40 00 59 02 40 00 00 00 00 00     Y.@.Y.@.Y.@.....
	...
  40002c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40003c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40004c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40005c:	59 02 40 00 59 02 40 00 00 00 00 00 05 16 40 00     Y.@.Y.@.......@.
  40006c:	f9 15 40 00 00 00 00 00 59 02 40 00 59 02 40 00     ..@.....Y.@.Y.@.
  40007c:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  40008c:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  40009c:	65 1d 40 00 59 02 40 00 59 02 40 00 79 1d 40 00     e.@.Y.@.Y.@.y.@.
  4000ac:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  4000bc:	c9 17 40 00 59 02 40 00 59 02 40 00 59 02 40 00     ..@.Y.@.Y.@.Y.@.
	...
  4000e0:	59 02 40 00 59 02 40 00 00 00 00 00 59 02 40 00     Y.@.Y.@.....Y.@.
  4000f0:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400100:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400110:	59 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00     Y.@.............
  400120:	59 02 40 00 59 02 40 00 59 02 40 00 59 02 40 00     Y.@.Y.@.Y.@.Y.@.
  400130:	dd 17 40 00 59 02 40 00 00 00 00 00 59 02 40 00     ..@.Y.@.....Y.@.
  400140:	59 02 40 00 59 02 40 00 00 00 00 00 00 00 00 00     Y.@.Y.@.........
  400150:	59 02 40 00 59 02 40 00                             Y.@.Y.@.

00400158 <__do_global_dtors_aux>:
  400158:	b510      	push	{r4, lr}
  40015a:	4c05      	ldr	r4, [pc, #20]	; (400170 <__do_global_dtors_aux+0x18>)
  40015c:	7823      	ldrb	r3, [r4, #0]
  40015e:	b933      	cbnz	r3, 40016e <__do_global_dtors_aux+0x16>
  400160:	4b04      	ldr	r3, [pc, #16]	; (400174 <__do_global_dtors_aux+0x1c>)
  400162:	b113      	cbz	r3, 40016a <__do_global_dtors_aux+0x12>
  400164:	4804      	ldr	r0, [pc, #16]	; (400178 <__do_global_dtors_aux+0x20>)
  400166:	f3af 8000 	nop.w
  40016a:	2301      	movs	r3, #1
  40016c:	7023      	strb	r3, [r4, #0]
  40016e:	bd10      	pop	{r4, pc}
  400170:	20400050 	.word	0x20400050
  400174:	00000000 	.word	0x00000000
  400178:	00403610 	.word	0x00403610

0040017c <frame_dummy>:
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <frame_dummy+0x34>)
  40017e:	b143      	cbz	r3, 400192 <frame_dummy+0x16>
  400180:	480c      	ldr	r0, [pc, #48]	; (4001b4 <frame_dummy+0x38>)
  400182:	490d      	ldr	r1, [pc, #52]	; (4001b8 <frame_dummy+0x3c>)
  400184:	b510      	push	{r4, lr}
  400186:	f3af 8000 	nop.w
  40018a:	480c      	ldr	r0, [pc, #48]	; (4001bc <frame_dummy+0x40>)
  40018c:	6803      	ldr	r3, [r0, #0]
  40018e:	b923      	cbnz	r3, 40019a <frame_dummy+0x1e>
  400190:	bd10      	pop	{r4, pc}
  400192:	480a      	ldr	r0, [pc, #40]	; (4001bc <frame_dummy+0x40>)
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	b933      	cbnz	r3, 4001a6 <frame_dummy+0x2a>
  400198:	4770      	bx	lr
  40019a:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <frame_dummy+0x44>)
  40019c:	2b00      	cmp	r3, #0
  40019e:	d0f7      	beq.n	400190 <frame_dummy+0x14>
  4001a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a4:	4718      	bx	r3
  4001a6:	4b06      	ldr	r3, [pc, #24]	; (4001c0 <frame_dummy+0x44>)
  4001a8:	2b00      	cmp	r3, #0
  4001aa:	d0f5      	beq.n	400198 <frame_dummy+0x1c>
  4001ac:	4718      	bx	r3
  4001ae:	bf00      	nop
  4001b0:	00000000 	.word	0x00000000
  4001b4:	00403610 	.word	0x00403610
  4001b8:	20400054 	.word	0x20400054
  4001bc:	00403610 	.word	0x00403610
  4001c0:	00000000 	.word	0x00000000

004001c4 <adc_init>:
 *  Author: bensc
 */ 

#include "ADC_driver.h"

void adc_init(){ //initializes the ADCs
  4001c4:	b538      	push	{r3, r4, r5, lr}
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_CURRENT);
  4001c6:	4d06      	ldr	r5, [pc, #24]	; (4001e0 <adc_init+0x1c>)
  4001c8:	2100      	movs	r1, #0
  4001ca:	4628      	mov	r0, r5
  4001cc:	4c05      	ldr	r4, [pc, #20]	; (4001e4 <adc_init+0x20>)
  4001ce:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_BATTERY_VOLTAGE);
  4001d0:	2105      	movs	r1, #5
  4001d2:	4628      	mov	r0, r5
  4001d4:	47a0      	blx	r4
	adc_sync_enable_channel(&ADC_0, ADC_CAP_CHARGE);
  4001d6:	2107      	movs	r1, #7
  4001d8:	4628      	mov	r0, r5
  4001da:	47a0      	blx	r4
  4001dc:	bd38      	pop	{r3, r4, r5, pc}
  4001de:	bf00      	nop
  4001e0:	20400140 	.word	0x20400140
  4001e4:	00400a35 	.word	0x00400a35

004001e8 <adc_read>:
}

void adc_read(float *adc_value, uint8_t channel){ //reads chosen ADC channel and stores in float
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
  4001ec:	4604      	mov	r4, r0
	uint8_t adc_buff[2];
	adc_sync_read_channel(&ADC_0, channel, &adc_buff[0], 2);
  4001ee:	2302      	movs	r3, #2
  4001f0:	aa01      	add	r2, sp, #4
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <adc_read+0x50>)
  4001f4:	4d11      	ldr	r5, [pc, #68]	; (40023c <adc_read+0x54>)
  4001f6:	47a8      	blx	r5
	*adc_value = (3.3/4095) * (float)(adc_buff[0] + ((adc_buff[1] & 0x0F) << 8)); //converts 12-bit ADC value to Voltage
  4001f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4001fc:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400200:	0200      	lsls	r0, r0, #8
  400202:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  400206:	4418      	add	r0, r3
  400208:	ee07 0a90 	vmov	s15, r0
  40020c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400210:	ee17 0a90 	vmov	r0, s15
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <adc_read+0x58>)
  400216:	4798      	blx	r3
  400218:	a305      	add	r3, pc, #20	; (adr r3, 400230 <adc_read+0x48>)
  40021a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <adc_read+0x5c>)
  400220:	47a8      	blx	r5
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <adc_read+0x60>)
  400224:	4798      	blx	r3
  400226:	6020      	str	r0, [r4, #0]
  400228:	b003      	add	sp, #12
  40022a:	bd30      	pop	{r4, r5, pc}
  40022c:	f3af 8000 	nop.w
  400230:	e734d9b4 	.word	0xe734d9b4
  400234:	3f4a680c 	.word	0x3f4a680c
  400238:	20400140 	.word	0x20400140
  40023c:	00400a61 	.word	0x00400a61
  400240:	00402c01 	.word	0x00402c01
  400244:	00402ca9 	.word	0x00402ca9
  400248:	004031dd 	.word	0x004031dd

0040024c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  40024c:	b508      	push	{r3, lr}
	system_init();
  40024e:	4b01      	ldr	r3, [pc, #4]	; (400254 <atmel_start_init+0x8>)
  400250:	4798      	blx	r3
  400252:	bd08      	pop	{r3, pc}
  400254:	004006d5 	.word	0x004006d5

00400258 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400258:	e7fe      	b.n	400258 <Dummy_Handler>
	...

0040025c <Reset_Handler>:
{
  40025c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40025e:	4b10      	ldr	r3, [pc, #64]	; (4002a0 <Reset_Handler+0x44>)
  400260:	4a10      	ldr	r2, [pc, #64]	; (4002a4 <Reset_Handler+0x48>)
  400262:	429a      	cmp	r2, r3
  400264:	d009      	beq.n	40027a <Reset_Handler+0x1e>
  400266:	4b0e      	ldr	r3, [pc, #56]	; (4002a0 <Reset_Handler+0x44>)
  400268:	4a0e      	ldr	r2, [pc, #56]	; (4002a4 <Reset_Handler+0x48>)
  40026a:	e003      	b.n	400274 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40026c:	6811      	ldr	r1, [r2, #0]
  40026e:	6019      	str	r1, [r3, #0]
  400270:	3304      	adds	r3, #4
  400272:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400274:	490c      	ldr	r1, [pc, #48]	; (4002a8 <Reset_Handler+0x4c>)
  400276:	428b      	cmp	r3, r1
  400278:	d3f8      	bcc.n	40026c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40027a:	4b0c      	ldr	r3, [pc, #48]	; (4002ac <Reset_Handler+0x50>)
  40027c:	e002      	b.n	400284 <Reset_Handler+0x28>
                *pDest++ = 0;
  40027e:	2200      	movs	r2, #0
  400280:	601a      	str	r2, [r3, #0]
  400282:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400284:	4a0a      	ldr	r2, [pc, #40]	; (4002b0 <Reset_Handler+0x54>)
  400286:	4293      	cmp	r3, r2
  400288:	d3f9      	bcc.n	40027e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40028a:	4a0a      	ldr	r2, [pc, #40]	; (4002b4 <Reset_Handler+0x58>)
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <Reset_Handler+0x5c>)
  40028e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400292:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400294:	4b09      	ldr	r3, [pc, #36]	; (4002bc <Reset_Handler+0x60>)
  400296:	4798      	blx	r3
        main();
  400298:	4b09      	ldr	r3, [pc, #36]	; (4002c0 <Reset_Handler+0x64>)
  40029a:	4798      	blx	r3
  40029c:	e7fe      	b.n	40029c <Reset_Handler+0x40>
  40029e:	bf00      	nop
  4002a0:	20400000 	.word	0x20400000
  4002a4:	00403610 	.word	0x00403610
  4002a8:	20400050 	.word	0x20400050
  4002ac:	20400050 	.word	0x20400050
  4002b0:	20400204 	.word	0x20400204
  4002b4:	e000ed00 	.word	0xe000ed00
  4002b8:	00400000 	.word	0x00400000
  4002bc:	0040327d 	.word	0x0040327d
  4002c0:	00401fa9 	.word	0x00401fa9

004002c4 <set_LEDs>:
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	void *const hw = port_to_reg(port);
	if (level) {
  4002c4:	f010 0f01 	tst.w	r0, #1
  4002c8:	d018      	beq.n	4002fc <set_LEDs+0x38>
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_SODR = mask;
  4002ca:	2280      	movs	r2, #128	; 0x80
  4002cc:	4b15      	ldr	r3, [pc, #84]	; (400324 <set_LEDs+0x60>)
  4002ce:	631a      	str	r2, [r3, #48]	; 0x30
  4002d0:	f010 0f02 	tst.w	r0, #2
  4002d4:	d016      	beq.n	400304 <set_LEDs+0x40>
  4002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002da:	4b12      	ldr	r3, [pc, #72]	; (400324 <set_LEDs+0x60>)
  4002dc:	631a      	str	r2, [r3, #48]	; 0x30
  4002de:	f010 0f04 	tst.w	r0, #4
  4002e2:	d014      	beq.n	40030e <set_LEDs+0x4a>
  4002e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4002e8:	4b0e      	ldr	r3, [pc, #56]	; (400324 <set_LEDs+0x60>)
  4002ea:	631a      	str	r2, [r3, #48]	; 0x30
  4002ec:	f010 0f08 	tst.w	r0, #8
  4002f0:	d112      	bne.n	400318 <set_LEDs+0x54>
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  4002f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4002f6:	4b0b      	ldr	r3, [pc, #44]	; (400324 <set_LEDs+0x60>)
  4002f8:	635a      	str	r2, [r3, #52]	; 0x34
  4002fa:	4770      	bx	lr
  4002fc:	2280      	movs	r2, #128	; 0x80
  4002fe:	4b09      	ldr	r3, [pc, #36]	; (400324 <set_LEDs+0x60>)
  400300:	635a      	str	r2, [r3, #52]	; 0x34
  400302:	e7e5      	b.n	4002d0 <set_LEDs+0xc>
  400304:	f44f 7280 	mov.w	r2, #256	; 0x100
  400308:	4b06      	ldr	r3, [pc, #24]	; (400324 <set_LEDs+0x60>)
  40030a:	635a      	str	r2, [r3, #52]	; 0x34
  40030c:	e7e7      	b.n	4002de <set_LEDs+0x1a>
  40030e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400312:	4b04      	ldr	r3, [pc, #16]	; (400324 <set_LEDs+0x60>)
  400314:	635a      	str	r2, [r3, #52]	; 0x34
  400316:	e7e9      	b.n	4002ec <set_LEDs+0x28>
	((Pio *)hw)->PIO_SODR = mask;
  400318:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40031c:	4b01      	ldr	r3, [pc, #4]	; (400324 <set_LEDs+0x60>)
  40031e:	631a      	str	r2, [r3, #48]	; 0x30
  400320:	4770      	bx	lr
  400322:	bf00      	nop
  400324:	400e1400 	.word	0x400e1400

00400328 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400328:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40032a:	4b08      	ldr	r3, [pc, #32]	; (40034c <TIMER_0_init+0x24>)
  40032c:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40032e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400332:	d103      	bne.n	40033c <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400334:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400338:	4b04      	ldr	r3, [pc, #16]	; (40034c <TIMER_0_init+0x24>)
  40033a:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  40033c:	4b04      	ldr	r3, [pc, #16]	; (400350 <TIMER_0_init+0x28>)
  40033e:	4798      	blx	r3
  400340:	4602      	mov	r2, r0
  400342:	4904      	ldr	r1, [pc, #16]	; (400354 <TIMER_0_init+0x2c>)
  400344:	4804      	ldr	r0, [pc, #16]	; (400358 <TIMER_0_init+0x30>)
  400346:	4b05      	ldr	r3, [pc, #20]	; (40035c <TIMER_0_init+0x34>)
  400348:	4798      	blx	r3
  40034a:	bd08      	pop	{r3, pc}
  40034c:	400e0600 	.word	0x400e0600
  400350:	00401d61 	.word	0x00401d61
  400354:	4000c000 	.word	0x4000c000
  400358:	204001b8 	.word	0x204001b8
  40035c:	00401081 	.word	0x00401081

00400360 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
  400360:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400362:	4b08      	ldr	r3, [pc, #32]	; (400384 <TIMER_1_init+0x24>)
  400364:	699b      	ldr	r3, [r3, #24]
  400366:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40036a:	d103      	bne.n	400374 <TIMER_1_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <TIMER_1_init+0x24>)
  400372:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	TIMER_1_PORT_init();
	timer_init(&TIMER_1, TC1, _tc_get_timer());
  400374:	4b04      	ldr	r3, [pc, #16]	; (400388 <TIMER_1_init+0x28>)
  400376:	4798      	blx	r3
  400378:	4602      	mov	r2, r0
  40037a:	4904      	ldr	r1, [pc, #16]	; (40038c <TIMER_1_init+0x2c>)
  40037c:	4804      	ldr	r0, [pc, #16]	; (400390 <TIMER_1_init+0x30>)
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <TIMER_1_init+0x34>)
  400380:	4798      	blx	r3
  400382:	bd08      	pop	{r3, pc}
  400384:	400e0600 	.word	0x400e0600
  400388:	00401d61 	.word	0x00401d61
  40038c:	40010000 	.word	0x40010000
  400390:	20400148 	.word	0x20400148
  400394:	00401081 	.word	0x00401081

00400398 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PER = mask;
  400398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40039c:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <ADC_0_PORT_init+0x1c>)
  40039e:	601a      	str	r2, [r3, #0]
  4003a0:	2204      	movs	r2, #4
  4003a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003a6:	601a      	str	r2, [r3, #0]
  4003a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4003ac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  4003b0:	601a      	str	r2, [r3, #0]
  4003b2:	4770      	bx	lr
  4003b4:	400e1400 	.word	0x400e1400

004003b8 <ADC_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003b8:	4b04      	ldr	r3, [pc, #16]	; (4003cc <ADC_0_CLOCK_init+0x14>)
  4003ba:	699b      	ldr	r3, [r3, #24]
  4003bc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4003c0:	d103      	bne.n	4003ca <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4003c6:	4b01      	ldr	r3, [pc, #4]	; (4003cc <ADC_0_CLOCK_init+0x14>)
  4003c8:	611a      	str	r2, [r3, #16]
  4003ca:	4770      	bx	lr
  4003cc:	400e0600 	.word	0x400e0600

004003d0 <ADC_0_init>:
{
  4003d0:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  4003d2:	4b05      	ldr	r3, [pc, #20]	; (4003e8 <ADC_0_init+0x18>)
  4003d4:	4798      	blx	r3
	ADC_0_PORT_init();
  4003d6:	4b05      	ldr	r3, [pc, #20]	; (4003ec <ADC_0_init+0x1c>)
  4003d8:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  4003da:	2200      	movs	r2, #0
  4003dc:	4904      	ldr	r1, [pc, #16]	; (4003f0 <ADC_0_init+0x20>)
  4003de:	4805      	ldr	r0, [pc, #20]	; (4003f4 <ADC_0_init+0x24>)
  4003e0:	4b05      	ldr	r3, [pc, #20]	; (4003f8 <ADC_0_init+0x28>)
  4003e2:	4798      	blx	r3
  4003e4:	bd08      	pop	{r3, pc}
  4003e6:	bf00      	nop
  4003e8:	004003b9 	.word	0x004003b9
  4003ec:	00400399 	.word	0x00400399
  4003f0:	4003c000 	.word	0x4003c000
  4003f4:	20400140 	.word	0x20400140
  4003f8:	00400a05 	.word	0x00400a05

004003fc <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4003fc:	4b03      	ldr	r3, [pc, #12]	; (40040c <EXTERNAL_IRQ_1_init+0x10>)
  4003fe:	2202      	movs	r2, #2
  400400:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400402:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400408:	601a      	str	r2, [r3, #0]
  40040a:	4770      	bx	lr
  40040c:	400e1000 	.word	0x400e1000

00400410 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400410:	4b12      	ldr	r3, [pc, #72]	; (40045c <EXTERNAL_IRQ_0_init+0x4c>)
  400412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400416:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400418:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40041a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40041e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400420:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400424:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400426:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40042c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40042e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400432:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400434:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40043a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40043c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400440:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400442:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400448:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40044a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40044e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400450:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400456:	601a      	str	r2, [r3, #0]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e0e00 	.word	0x400e0e00

00400460 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400460:	4b17      	ldr	r3, [pc, #92]	; (4004c0 <PWM_0_PORT_init+0x60>)
  400462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400468:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40046a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40046c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400470:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400472:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400476:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400478:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40047c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40047e:	f022 0204 	bic.w	r2, r2, #4
  400482:	671a      	str	r2, [r3, #112]	; 0x70
  400484:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400486:	f022 0204 	bic.w	r2, r2, #4
  40048a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40048c:	2204      	movs	r2, #4
  40048e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400496:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400498:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40049a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40049e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4004a4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4004ac:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4004b4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4004ba:	605a      	str	r2, [r3, #4]
  4004bc:	4770      	bx	lr
  4004be:	bf00      	nop
  4004c0:	400e1400 	.word	0x400e1400

004004c4 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004c4:	4b04      	ldr	r3, [pc, #16]	; (4004d8 <PWM_0_CLOCK_init+0x14>)
  4004c6:	699b      	ldr	r3, [r3, #24]
  4004c8:	2b00      	cmp	r3, #0
  4004ca:	db03      	blt.n	4004d4 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4004d0:	4b01      	ldr	r3, [pc, #4]	; (4004d8 <PWM_0_CLOCK_init+0x14>)
  4004d2:	611a      	str	r2, [r3, #16]
  4004d4:	4770      	bx	lr
  4004d6:	bf00      	nop
  4004d8:	400e0600 	.word	0x400e0600

004004dc <PWM_0_init>:
{
  4004dc:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4004de:	4b06      	ldr	r3, [pc, #24]	; (4004f8 <PWM_0_init+0x1c>)
  4004e0:	4798      	blx	r3
	PWM_0_PORT_init();
  4004e2:	4b06      	ldr	r3, [pc, #24]	; (4004fc <PWM_0_init+0x20>)
  4004e4:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4004e6:	4b06      	ldr	r3, [pc, #24]	; (400500 <PWM_0_init+0x24>)
  4004e8:	4798      	blx	r3
  4004ea:	4602      	mov	r2, r0
  4004ec:	4905      	ldr	r1, [pc, #20]	; (400504 <PWM_0_init+0x28>)
  4004ee:	4806      	ldr	r0, [pc, #24]	; (400508 <PWM_0_init+0x2c>)
  4004f0:	4b06      	ldr	r3, [pc, #24]	; (40050c <PWM_0_init+0x30>)
  4004f2:	4798      	blx	r3
  4004f4:	bd08      	pop	{r3, pc}
  4004f6:	bf00      	nop
  4004f8:	004004c5 	.word	0x004004c5
  4004fc:	00400461 	.word	0x00400461
  400500:	0040199d 	.word	0x0040199d
  400504:	40020000 	.word	0x40020000
  400508:	20400124 	.word	0x20400124
  40050c:	00400dcd 	.word	0x00400dcd

00400510 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400510:	4b06      	ldr	r3, [pc, #24]	; (40052c <PWM_1_PORT_init+0x1c>)
  400512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400514:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400518:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40051a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40051c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400520:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400526:	605a      	str	r2, [r3, #4]
  400528:	4770      	bx	lr
  40052a:	bf00      	nop
  40052c:	400e0e00 	.word	0x400e0e00

00400530 <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400530:	4b05      	ldr	r3, [pc, #20]	; (400548 <PWM_1_CLOCK_init+0x18>)
  400532:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400536:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40053a:	d104      	bne.n	400546 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40053c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400540:	4b01      	ldr	r3, [pc, #4]	; (400548 <PWM_1_CLOCK_init+0x18>)
  400542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400546:	4770      	bx	lr
  400548:	400e0600 	.word	0x400e0600

0040054c <PWM_1_init>:
{
  40054c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40054e:	4b06      	ldr	r3, [pc, #24]	; (400568 <PWM_1_init+0x1c>)
  400550:	4798      	blx	r3
	PWM_1_PORT_init();
  400552:	4b06      	ldr	r3, [pc, #24]	; (40056c <PWM_1_init+0x20>)
  400554:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400556:	4b06      	ldr	r3, [pc, #24]	; (400570 <PWM_1_init+0x24>)
  400558:	4798      	blx	r3
  40055a:	4602      	mov	r2, r0
  40055c:	4905      	ldr	r1, [pc, #20]	; (400574 <PWM_1_init+0x28>)
  40055e:	4806      	ldr	r0, [pc, #24]	; (400578 <PWM_1_init+0x2c>)
  400560:	4b06      	ldr	r3, [pc, #24]	; (40057c <PWM_1_init+0x30>)
  400562:	4798      	blx	r3
  400564:	bd08      	pop	{r3, pc}
  400566:	bf00      	nop
  400568:	00400531 	.word	0x00400531
  40056c:	00400511 	.word	0x00400511
  400570:	0040199d 	.word	0x0040199d
  400574:	4005c000 	.word	0x4005c000
  400578:	2040017c 	.word	0x2040017c
  40057c:	00400dcd 	.word	0x00400dcd

00400580 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400580:	4b11      	ldr	r3, [pc, #68]	; (4005c8 <SPI_0_PORT_init+0x48>)
  400582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400584:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400588:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40058a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40058c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400590:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400596:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40059a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40059e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4005a6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4005ac:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4005b4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005b8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4005bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4005c2:	605a      	str	r2, [r3, #4]
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop
  4005c8:	400e1400 	.word	0x400e1400

004005cc <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005cc:	4b04      	ldr	r3, [pc, #16]	; (4005e0 <SPI_0_CLOCK_init+0x14>)
  4005ce:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4005d0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4005d4:	d103      	bne.n	4005de <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4005da:	4b01      	ldr	r3, [pc, #4]	; (4005e0 <SPI_0_CLOCK_init+0x14>)
  4005dc:	611a      	str	r2, [r3, #16]
  4005de:	4770      	bx	lr
  4005e0:	400e0600 	.word	0x400e0600

004005e4 <SPI_0_init>:
{
  4005e4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4005e6:	4b08      	ldr	r3, [pc, #32]	; (400608 <SPI_0_init+0x24>)
  4005e8:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4005ea:	4b08      	ldr	r3, [pc, #32]	; (40060c <SPI_0_init+0x28>)
  4005ec:	4798      	blx	r3
  4005ee:	4c08      	ldr	r4, [pc, #32]	; (400610 <SPI_0_init+0x2c>)
  4005f0:	4601      	mov	r1, r0
  4005f2:	4620      	mov	r0, r4
  4005f4:	4b07      	ldr	r3, [pc, #28]	; (400614 <SPI_0_init+0x30>)
  4005f6:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4005f8:	4907      	ldr	r1, [pc, #28]	; (400618 <SPI_0_init+0x34>)
  4005fa:	4620      	mov	r0, r4
  4005fc:	4b07      	ldr	r3, [pc, #28]	; (40061c <SPI_0_init+0x38>)
  4005fe:	4798      	blx	r3
	SPI_0_PORT_init();
  400600:	4b07      	ldr	r3, [pc, #28]	; (400620 <SPI_0_init+0x3c>)
  400602:	4798      	blx	r3
  400604:	bd10      	pop	{r4, pc}
  400606:	bf00      	nop
  400608:	004005cd 	.word	0x004005cd
  40060c:	00401b9d 	.word	0x00401b9d
  400610:	20400164 	.word	0x20400164
  400614:	00400e4d 	.word	0x00400e4d
  400618:	40008000 	.word	0x40008000
  40061c:	00400e6d 	.word	0x00400e6d
  400620:	00400581 	.word	0x00400581

00400624 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400624:	4b0a      	ldr	r3, [pc, #40]	; (400650 <I2C_0_PORT_init+0x2c>)
  400626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400628:	f022 0210 	bic.w	r2, r2, #16
  40062c:	671a      	str	r2, [r3, #112]	; 0x70
  40062e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400630:	f022 0210 	bic.w	r2, r2, #16
  400634:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400636:	2210      	movs	r2, #16
  400638:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40063a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40063c:	f022 0208 	bic.w	r2, r2, #8
  400640:	671a      	str	r2, [r3, #112]	; 0x70
  400642:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400644:	f022 0208 	bic.w	r2, r2, #8
  400648:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40064a:	2208      	movs	r2, #8
  40064c:	605a      	str	r2, [r3, #4]
  40064e:	4770      	bx	lr
  400650:	400e0e00 	.word	0x400e0e00

00400654 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400654:	4b04      	ldr	r3, [pc, #16]	; (400668 <I2C_0_CLOCK_init+0x14>)
  400656:	699b      	ldr	r3, [r3, #24]
  400658:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  40065c:	d103      	bne.n	400666 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40065e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400662:	4b01      	ldr	r3, [pc, #4]	; (400668 <I2C_0_CLOCK_init+0x14>)
  400664:	611a      	str	r2, [r3, #16]
  400666:	4770      	bx	lr
  400668:	400e0600 	.word	0x400e0600

0040066c <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  40066c:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40066e:	4b04      	ldr	r3, [pc, #16]	; (400680 <I2C_0_init+0x14>)
  400670:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400672:	4904      	ldr	r1, [pc, #16]	; (400684 <I2C_0_init+0x18>)
  400674:	4804      	ldr	r0, [pc, #16]	; (400688 <I2C_0_init+0x1c>)
  400676:	4b05      	ldr	r3, [pc, #20]	; (40068c <I2C_0_init+0x20>)
  400678:	4798      	blx	r3

	I2C_0_PORT_init();
  40067a:	4b05      	ldr	r3, [pc, #20]	; (400690 <I2C_0_init+0x24>)
  40067c:	4798      	blx	r3
  40067e:	bd08      	pop	{r3, pc}
  400680:	00400655 	.word	0x00400655
  400684:	40018000 	.word	0x40018000
  400688:	20400198 	.word	0x20400198
  40068c:	00400d19 	.word	0x00400d19
  400690:	00400625 	.word	0x00400625

00400694 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400694:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400696:	4802      	ldr	r0, [pc, #8]	; (4006a0 <delay_driver_init+0xc>)
  400698:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <delay_driver_init+0x10>)
  40069a:	4798      	blx	r3
  40069c:	bd08      	pop	{r3, pc}
  40069e:	bf00      	nop
  4006a0:	e000e010 	.word	0xe000e010
  4006a4:	00400b1d 	.word	0x00400b1d

004006a8 <WDT_0_init>:
}

void WDT_0_init(void)
{
  4006a8:	b508      	push	{r3, lr}
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
  4006aa:	2248      	movs	r2, #72	; 0x48
  4006ac:	4904      	ldr	r1, [pc, #16]	; (4006c0 <WDT_0_init+0x18>)
  4006ae:	2001      	movs	r0, #1
  4006b0:	4b04      	ldr	r3, [pc, #16]	; (4006c4 <WDT_0_init+0x1c>)
  4006b2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
  4006b4:	4804      	ldr	r0, [pc, #16]	; (4006c8 <WDT_0_init+0x20>)
  4006b6:	4b05      	ldr	r3, [pc, #20]	; (4006cc <WDT_0_init+0x24>)
  4006b8:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
  4006ba:	4b05      	ldr	r3, [pc, #20]	; (4006d0 <WDT_0_init+0x28>)
  4006bc:	4798      	blx	r3
  4006be:	bd08      	pop	{r3, pc}
  4006c0:	004032d4 	.word	0x004032d4
  4006c4:	004011a1 	.word	0x004011a1
  4006c8:	20400144 	.word	0x20400144
  4006cc:	400e1850 	.word	0x400e1850
  4006d0:	00401f75 	.word	0x00401f75

004006d4 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
  4006d4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4006d6:	4b67      	ldr	r3, [pc, #412]	; (400874 <system_init+0x1a0>)
  4006d8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006da:	4b67      	ldr	r3, [pc, #412]	; (400878 <system_init+0x1a4>)
  4006dc:	699b      	ldr	r3, [r3, #24]
  4006de:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4006e2:	d103      	bne.n	4006ec <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4006e8:	4b63      	ldr	r3, [pc, #396]	; (400878 <system_init+0x1a4>)
  4006ea:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006ec:	4b62      	ldr	r3, [pc, #392]	; (400878 <system_init+0x1a4>)
  4006ee:	699b      	ldr	r3, [r3, #24]
  4006f0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4006f4:	d103      	bne.n	4006fe <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4006fa:	4b5f      	ldr	r3, [pc, #380]	; (400878 <system_init+0x1a4>)
  4006fc:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006fe:	4b5e      	ldr	r3, [pc, #376]	; (400878 <system_init+0x1a4>)
  400700:	699b      	ldr	r3, [r3, #24]
  400702:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400706:	d103      	bne.n	400710 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40070c:	4b5a      	ldr	r3, [pc, #360]	; (400878 <system_init+0x1a4>)
  40070e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_ODR = mask;
  400710:	4b5a      	ldr	r3, [pc, #360]	; (40087c <system_init+0x1a8>)
  400712:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400716:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400718:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40071a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40071e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400724:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400726:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40072c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40072e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400732:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400734:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400736:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40073a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40073c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  400740:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400742:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400744:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400748:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40074e:	2008      	movs	r0, #8
  400750:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400752:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400754:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40075a:	2404      	movs	r4, #4
  40075c:	631c      	str	r4, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40075e:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400760:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400762:	6318      	str	r0, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400764:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400766:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400768:	2010      	movs	r0, #16
  40076a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40076c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40076e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400770:	2020      	movs	r0, #32
  400772:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400774:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400776:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400778:	2040      	movs	r0, #64	; 0x40
  40077a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40077c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40077e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400780:	2080      	movs	r0, #128	; 0x80
  400782:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400784:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400786:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400788:	f44f 7080 	mov.w	r0, #256	; 0x100
  40078c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40078e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400790:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400792:	f44f 7000 	mov.w	r0, #512	; 0x200
  400796:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400798:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40079a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40079c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4007a0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007a2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007a4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4007aa:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007ac:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007ae:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007b2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  4007b8:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007ba:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007bc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007c0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4007c6:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007c8:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007ca:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007ce:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4007d4:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007d6:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007d8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007dc:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4007e2:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007e4:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007e6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007ea:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  4007f0:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4007f2:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4007f4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4007f8:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4007fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4007fe:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400800:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400802:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400806:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400808:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  40080c:	6158      	str	r0, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40080e:	6618      	str	r0, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400810:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400814:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400816:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  40081a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40081c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40081e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400820:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  400824:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400826:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400828:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40082a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40082e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400830:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400832:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400834:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400836:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400838:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40083a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40083c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40083e:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(Dribbler_Motor_Dir, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Dribbler_Motor_Dir, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400840:	4b0f      	ldr	r3, [pc, #60]	; (400880 <system_init+0x1ac>)
  400842:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  400844:	4b0f      	ldr	r3, [pc, #60]	; (400884 <system_init+0x1b0>)
  400846:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400848:	4b0f      	ldr	r3, [pc, #60]	; (400888 <system_init+0x1b4>)
  40084a:	4798      	blx	r3

	PWM_0_init();
  40084c:	4b0f      	ldr	r3, [pc, #60]	; (40088c <system_init+0x1b8>)
  40084e:	4798      	blx	r3

	PWM_1_init();
  400850:	4b0f      	ldr	r3, [pc, #60]	; (400890 <system_init+0x1bc>)
  400852:	4798      	blx	r3

	SPI_0_init();
  400854:	4b0f      	ldr	r3, [pc, #60]	; (400894 <system_init+0x1c0>)
  400856:	4798      	blx	r3
	TIMER_0_init();
  400858:	4b0f      	ldr	r3, [pc, #60]	; (400898 <system_init+0x1c4>)
  40085a:	4798      	blx	r3
	TIMER_1_init();
  40085c:	4b0f      	ldr	r3, [pc, #60]	; (40089c <system_init+0x1c8>)
  40085e:	4798      	blx	r3

	I2C_0_init();
  400860:	4b0f      	ldr	r3, [pc, #60]	; (4008a0 <system_init+0x1cc>)
  400862:	4798      	blx	r3

	delay_driver_init();
  400864:	4b0f      	ldr	r3, [pc, #60]	; (4008a4 <system_init+0x1d0>)
  400866:	4798      	blx	r3

	WDT_0_init();
  400868:	4b0f      	ldr	r3, [pc, #60]	; (4008a8 <system_init+0x1d4>)
  40086a:	4798      	blx	r3

	ext_irq_init();
  40086c:	4b0f      	ldr	r3, [pc, #60]	; (4008ac <system_init+0x1d8>)
  40086e:	4798      	blx	r3
  400870:	bd10      	pop	{r4, pc}
  400872:	bf00      	nop
  400874:	00401389 	.word	0x00401389
  400878:	400e0600 	.word	0x400e0600
  40087c:	400e0e00 	.word	0x400e0e00
  400880:	004003d1 	.word	0x004003d1
  400884:	004003fd 	.word	0x004003fd
  400888:	00400411 	.word	0x00400411
  40088c:	004004dd 	.word	0x004004dd
  400890:	0040054d 	.word	0x0040054d
  400894:	004005e5 	.word	0x004005e5
  400898:	00400329 	.word	0x00400329
  40089c:	00400361 	.word	0x00400361
  4008a0:	0040066d 	.word	0x0040066d
  4008a4:	00400695 	.word	0x00400695
  4008a8:	004006a9 	.word	0x004006a9
  4008ac:	00400bb5 	.word	0x00400bb5

004008b0 <interrupt_front_left>:
 ext_irq_register(Encoder3_A, interrupt_back_right);
 ext_irq_register(Encoder4_A, interrupt_front_right);
}

void interrupt_front_left()
{
  4008b0:	b538      	push	{r3, r4, r5, lr}
	return ((Pio *)hw)->PIO_PDSR;
  4008b2:	4b0c      	ldr	r3, [pc, #48]	; (4008e4 <interrupt_front_left+0x34>)
  4008b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(gpio_get_pin_level(encoder2_B))
  4008b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4008ba:	d109      	bne.n	4008d0 <interrupt_front_left+0x20>
	{
		front_left_counter++;
	}
    else front_left_counter--;
  4008bc:	4c0a      	ldr	r4, [pc, #40]	; (4008e8 <interrupt_front_left+0x38>)
  4008be:	2200      	movs	r2, #0
  4008c0:	4b0a      	ldr	r3, [pc, #40]	; (4008ec <interrupt_front_left+0x3c>)
  4008c2:	e9d4 0100 	ldrd	r0, r1, [r4]
  4008c6:	4d0a      	ldr	r5, [pc, #40]	; (4008f0 <interrupt_front_left+0x40>)
  4008c8:	47a8      	blx	r5
  4008ca:	e9c4 0100 	strd	r0, r1, [r4]
  4008ce:	bd38      	pop	{r3, r4, r5, pc}
		front_left_counter++;
  4008d0:	4c05      	ldr	r4, [pc, #20]	; (4008e8 <interrupt_front_left+0x38>)
  4008d2:	2200      	movs	r2, #0
  4008d4:	4b05      	ldr	r3, [pc, #20]	; (4008ec <interrupt_front_left+0x3c>)
  4008d6:	e9d4 0100 	ldrd	r0, r1, [r4]
  4008da:	4d06      	ldr	r5, [pc, #24]	; (4008f4 <interrupt_front_left+0x44>)
  4008dc:	47a8      	blx	r5
  4008de:	e9c4 0100 	strd	r0, r1, [r4]
  4008e2:	bd38      	pop	{r3, r4, r5, pc}
  4008e4:	400e0e00 	.word	0x400e0e00
  4008e8:	20400070 	.word	0x20400070
  4008ec:	3ff00000 	.word	0x3ff00000
  4008f0:	00402941 	.word	0x00402941
  4008f4:	00402945 	.word	0x00402945

004008f8 <interrupt_front_right>:
}

void interrupt_front_right()
{
  4008f8:	b538      	push	{r3, r4, r5, lr}
  4008fa:	4b0c      	ldr	r3, [pc, #48]	; (40092c <interrupt_front_right+0x34>)
  4008fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder4_B))
  4008fe:	2b00      	cmp	r3, #0
  400900:	db09      	blt.n	400916 <interrupt_front_right+0x1e>
    {
        front_right_counter++;
        }
        else{
        front_right_counter--;
  400902:	4c0b      	ldr	r4, [pc, #44]	; (400930 <interrupt_front_right+0x38>)
  400904:	2200      	movs	r2, #0
  400906:	4b0b      	ldr	r3, [pc, #44]	; (400934 <interrupt_front_right+0x3c>)
  400908:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
  40090c:	4d0a      	ldr	r5, [pc, #40]	; (400938 <interrupt_front_right+0x40>)
  40090e:	47a8      	blx	r5
  400910:	e9c4 0102 	strd	r0, r1, [r4, #8]
  400914:	bd38      	pop	{r3, r4, r5, pc}
        front_right_counter++;
  400916:	4c06      	ldr	r4, [pc, #24]	; (400930 <interrupt_front_right+0x38>)
  400918:	2200      	movs	r2, #0
  40091a:	4b06      	ldr	r3, [pc, #24]	; (400934 <interrupt_front_right+0x3c>)
  40091c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
  400920:	4d06      	ldr	r5, [pc, #24]	; (40093c <interrupt_front_right+0x44>)
  400922:	47a8      	blx	r5
  400924:	e9c4 0102 	strd	r0, r1, [r4, #8]
  400928:	bd38      	pop	{r3, r4, r5, pc}
  40092a:	bf00      	nop
  40092c:	400e0e00 	.word	0x400e0e00
  400930:	20400070 	.word	0x20400070
  400934:	3ff00000 	.word	0x3ff00000
  400938:	00402941 	.word	0x00402941
  40093c:	00402945 	.word	0x00402945

00400940 <interrupt_back_left>:
    }
}

void interrupt_back_left()
{
  400940:	b538      	push	{r3, r4, r5, lr}
  400942:	4b0c      	ldr	r3, [pc, #48]	; (400974 <interrupt_back_left+0x34>)
  400944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder1_B))
  400946:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40094a:	d109      	bne.n	400960 <interrupt_back_left+0x20>
    {
        back_left_counter++;
        }
        else{
        back_left_counter--;
  40094c:	4c0a      	ldr	r4, [pc, #40]	; (400978 <interrupt_back_left+0x38>)
  40094e:	2200      	movs	r2, #0
  400950:	4b0a      	ldr	r3, [pc, #40]	; (40097c <interrupt_back_left+0x3c>)
  400952:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  400956:	4d0a      	ldr	r5, [pc, #40]	; (400980 <interrupt_back_left+0x40>)
  400958:	47a8      	blx	r5
  40095a:	e9c4 0104 	strd	r0, r1, [r4, #16]
  40095e:	bd38      	pop	{r3, r4, r5, pc}
        back_left_counter++;
  400960:	4c05      	ldr	r4, [pc, #20]	; (400978 <interrupt_back_left+0x38>)
  400962:	2200      	movs	r2, #0
  400964:	4b05      	ldr	r3, [pc, #20]	; (40097c <interrupt_back_left+0x3c>)
  400966:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  40096a:	4d06      	ldr	r5, [pc, #24]	; (400984 <interrupt_back_left+0x44>)
  40096c:	47a8      	blx	r5
  40096e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  400972:	bd38      	pop	{r3, r4, r5, pc}
  400974:	400e0e00 	.word	0x400e0e00
  400978:	20400070 	.word	0x20400070
  40097c:	3ff00000 	.word	0x3ff00000
  400980:	00402941 	.word	0x00402941
  400984:	00402945 	.word	0x00402945

00400988 <interrupt_back_right>:
    }
}

void interrupt_back_right()
{
  400988:	b538      	push	{r3, r4, r5, lr}
  40098a:	4b0c      	ldr	r3, [pc, #48]	; (4009bc <interrupt_back_right+0x34>)
  40098c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if(gpio_get_pin_level(encoder3_B))
  40098e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400992:	d109      	bne.n	4009a8 <interrupt_back_right+0x20>
    {
        back_right_counter++;
        }
        else{
        back_right_counter--;
  400994:	4c0a      	ldr	r4, [pc, #40]	; (4009c0 <interrupt_back_right+0x38>)
  400996:	2200      	movs	r2, #0
  400998:	4b0a      	ldr	r3, [pc, #40]	; (4009c4 <interrupt_back_right+0x3c>)
  40099a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  40099e:	4d0a      	ldr	r5, [pc, #40]	; (4009c8 <interrupt_back_right+0x40>)
  4009a0:	47a8      	blx	r5
  4009a2:	e9c4 0106 	strd	r0, r1, [r4, #24]
  4009a6:	bd38      	pop	{r3, r4, r5, pc}
        back_right_counter++;
  4009a8:	4c05      	ldr	r4, [pc, #20]	; (4009c0 <interrupt_back_right+0x38>)
  4009aa:	2200      	movs	r2, #0
  4009ac:	4b05      	ldr	r3, [pc, #20]	; (4009c4 <interrupt_back_right+0x3c>)
  4009ae:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
  4009b2:	4d06      	ldr	r5, [pc, #24]	; (4009cc <interrupt_back_right+0x44>)
  4009b4:	47a8      	blx	r5
  4009b6:	e9c4 0106 	strd	r0, r1, [r4, #24]
  4009ba:	bd38      	pop	{r3, r4, r5, pc}
  4009bc:	400e0e00 	.word	0x400e0e00
  4009c0:	20400070 	.word	0x20400070
  4009c4:	3ff00000 	.word	0x3ff00000
  4009c8:	00402941 	.word	0x00402941
  4009cc:	00402945 	.word	0x00402945

004009d0 <encoders_init>:
{
  4009d0:	b510      	push	{r4, lr}
 ext_irq_register(encoder1_A, interrupt_back_left);
  4009d2:	4907      	ldr	r1, [pc, #28]	; (4009f0 <encoders_init+0x20>)
  4009d4:	2016      	movs	r0, #22
  4009d6:	4c07      	ldr	r4, [pc, #28]	; (4009f4 <encoders_init+0x24>)
  4009d8:	47a0      	blx	r4
 ext_irq_register(encoder2_A, interrupt_front_left);
  4009da:	4907      	ldr	r1, [pc, #28]	; (4009f8 <encoders_init+0x28>)
  4009dc:	2017      	movs	r0, #23
  4009de:	47a0      	blx	r4
 ext_irq_register(Encoder3_A, interrupt_back_right);
  4009e0:	4906      	ldr	r1, [pc, #24]	; (4009fc <encoders_init+0x2c>)
  4009e2:	2018      	movs	r0, #24
  4009e4:	47a0      	blx	r4
 ext_irq_register(Encoder4_A, interrupt_front_right);
  4009e6:	4906      	ldr	r1, [pc, #24]	; (400a00 <encoders_init+0x30>)
  4009e8:	2019      	movs	r0, #25
  4009ea:	47a0      	blx	r4
  4009ec:	bd10      	pop	{r4, pc}
  4009ee:	bf00      	nop
  4009f0:	00400941 	.word	0x00400941
  4009f4:	00400be9 	.word	0x00400be9
  4009f8:	004008b1 	.word	0x004008b1
  4009fc:	00400989 	.word	0x00400989
  400a00:	004008f9 	.word	0x004008f9

00400a04 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400a04:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400a06:	4604      	mov	r4, r0
  400a08:	460d      	mov	r5, r1
  400a0a:	2800      	cmp	r0, #0
  400a0c:	bf18      	it	ne
  400a0e:	2900      	cmpne	r1, #0
  400a10:	bf14      	ite	ne
  400a12:	2001      	movne	r0, #1
  400a14:	2000      	moveq	r0, #0
  400a16:	2239      	movs	r2, #57	; 0x39
  400a18:	4903      	ldr	r1, [pc, #12]	; (400a28 <adc_sync_init+0x24>)
  400a1a:	4b04      	ldr	r3, [pc, #16]	; (400a2c <adc_sync_init+0x28>)
  400a1c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400a1e:	4629      	mov	r1, r5
  400a20:	4620      	mov	r0, r4
  400a22:	4b03      	ldr	r3, [pc, #12]	; (400a30 <adc_sync_init+0x2c>)
  400a24:	4798      	blx	r3
}
  400a26:	bd38      	pop	{r3, r4, r5, pc}
  400a28:	004032f0 	.word	0x004032f0
  400a2c:	004011a1 	.word	0x004011a1
  400a30:	004012dd 	.word	0x004012dd

00400a34 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400a34:	b538      	push	{r3, r4, r5, lr}
  400a36:	460d      	mov	r5, r1
	ASSERT(descr);
  400a38:	4604      	mov	r4, r0
  400a3a:	224e      	movs	r2, #78	; 0x4e
  400a3c:	4905      	ldr	r1, [pc, #20]	; (400a54 <adc_sync_enable_channel+0x20>)
  400a3e:	3000      	adds	r0, #0
  400a40:	bf18      	it	ne
  400a42:	2001      	movne	r0, #1
  400a44:	4b04      	ldr	r3, [pc, #16]	; (400a58 <adc_sync_enable_channel+0x24>)
  400a46:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400a48:	4629      	mov	r1, r5
  400a4a:	4620      	mov	r0, r4
  400a4c:	4b03      	ldr	r3, [pc, #12]	; (400a5c <adc_sync_enable_channel+0x28>)
  400a4e:	4798      	blx	r3

	return ERR_NONE;
}
  400a50:	2000      	movs	r0, #0
  400a52:	bd38      	pop	{r3, r4, r5, pc}
  400a54:	004032f0 	.word	0x004032f0
  400a58:	004011a1 	.word	0x004011a1
  400a5c:	00401315 	.word	0x00401315

00400a60 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  400a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a64:	460d      	mov	r5, r1
  400a66:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  400a68:	4607      	mov	r7, r0
  400a6a:	4690      	mov	r8, r2
  400a6c:	2800      	cmp	r0, #0
  400a6e:	bf18      	it	ne
  400a70:	2a00      	cmpne	r2, #0
  400a72:	d002      	beq.n	400a7a <adc_sync_read_channel+0x1a>
  400a74:	b9cb      	cbnz	r3, 400aaa <adc_sync_read_channel+0x4a>
  400a76:	2000      	movs	r0, #0
  400a78:	e000      	b.n	400a7c <adc_sync_read_channel+0x1c>
  400a7a:	2000      	movs	r0, #0
  400a7c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400afc <adc_sync_read_channel+0x9c>
  400a80:	2267      	movs	r2, #103	; 0x67
  400a82:	4651      	mov	r1, sl
  400a84:	4e18      	ldr	r6, [pc, #96]	; (400ae8 <adc_sync_read_channel+0x88>)
  400a86:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  400a88:	463c      	mov	r4, r7
  400a8a:	4638      	mov	r0, r7
  400a8c:	4b17      	ldr	r3, [pc, #92]	; (400aec <adc_sync_read_channel+0x8c>)
  400a8e:	4798      	blx	r3
  400a90:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  400a92:	fb99 f0f0 	sdiv	r0, r9, r0
  400a96:	fb07 9010 	mls	r0, r7, r0, r9
  400a9a:	2269      	movs	r2, #105	; 0x69
  400a9c:	4651      	mov	r1, sl
  400a9e:	fab0 f080 	clz	r0, r0
  400aa2:	0940      	lsrs	r0, r0, #5
  400aa4:	47b0      	blx	r6
	uint16_t offset = 0;
  400aa6:	2600      	movs	r6, #0
  400aa8:	e005      	b.n	400ab6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  400aaa:	2001      	movs	r0, #1
  400aac:	e7e6      	b.n	400a7c <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  400aae:	443e      	add	r6, r7
  400ab0:	b2b6      	uxth	r6, r6
	} while (offset < length);
  400ab2:	45b1      	cmp	r9, r6
  400ab4:	d915      	bls.n	400ae2 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  400ab6:	4620      	mov	r0, r4
  400ab8:	4b0d      	ldr	r3, [pc, #52]	; (400af0 <adc_sync_read_channel+0x90>)
  400aba:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  400abc:	4629      	mov	r1, r5
  400abe:	4620      	mov	r0, r4
  400ac0:	4b0c      	ldr	r3, [pc, #48]	; (400af4 <adc_sync_read_channel+0x94>)
  400ac2:	4798      	blx	r3
  400ac4:	2800      	cmp	r0, #0
  400ac6:	d0f9      	beq.n	400abc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  400ac8:	4629      	mov	r1, r5
  400aca:	4620      	mov	r0, r4
  400acc:	4b0a      	ldr	r3, [pc, #40]	; (400af8 <adc_sync_read_channel+0x98>)
  400ace:	4798      	blx	r3
		buffer[offset] = result;
  400ad0:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  400ad4:	2f01      	cmp	r7, #1
  400ad6:	d9ea      	bls.n	400aae <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  400ad8:	1c73      	adds	r3, r6, #1
  400ada:	0a00      	lsrs	r0, r0, #8
  400adc:	f808 0003 	strb.w	r0, [r8, r3]
  400ae0:	e7e5      	b.n	400aae <adc_sync_read_channel+0x4e>

	return offset;
}
  400ae2:	4630      	mov	r0, r6
  400ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ae8:	004011a1 	.word	0x004011a1
  400aec:	00401321 	.word	0x00401321
  400af0:	00401339 	.word	0x00401339
  400af4:	00401325 	.word	0x00401325
  400af8:	00401341 	.word	0x00401341
  400afc:	004032f0 	.word	0x004032f0

00400b00 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b00:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400b04:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400b06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400b08:	f3bf 8f5f 	dmb	sy
  400b0c:	4770      	bx	lr

00400b0e <atomic_leave_critical>:
  400b0e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400b12:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400b14:	f383 8810 	msr	PRIMASK, r3
  400b18:	4770      	bx	lr
	...

00400b1c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400b1c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400b1e:	4b02      	ldr	r3, [pc, #8]	; (400b28 <delay_init+0xc>)
  400b20:	6018      	str	r0, [r3, #0]
  400b22:	4b02      	ldr	r3, [pc, #8]	; (400b2c <delay_init+0x10>)
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}
  400b28:	20400090 	.word	0x20400090
  400b2c:	00401bb5 	.word	0x00401bb5

00400b30 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400b30:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  400b32:	4b04      	ldr	r3, [pc, #16]	; (400b44 <delay_us+0x14>)
  400b34:	681c      	ldr	r4, [r3, #0]
  400b36:	4b04      	ldr	r3, [pc, #16]	; (400b48 <delay_us+0x18>)
  400b38:	4798      	blx	r3
  400b3a:	4601      	mov	r1, r0
  400b3c:	4620      	mov	r0, r4
  400b3e:	4b03      	ldr	r3, [pc, #12]	; (400b4c <delay_us+0x1c>)
  400b40:	4798      	blx	r3
  400b42:	bd10      	pop	{r4, pc}
  400b44:	20400090 	.word	0x20400090
  400b48:	0040136d 	.word	0x0040136d
  400b4c:	00401bc1 	.word	0x00401bc1

00400b50 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400b50:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400b52:	4b04      	ldr	r3, [pc, #16]	; (400b64 <delay_ms+0x14>)
  400b54:	681c      	ldr	r4, [r3, #0]
  400b56:	4b04      	ldr	r3, [pc, #16]	; (400b68 <delay_ms+0x18>)
  400b58:	4798      	blx	r3
  400b5a:	4601      	mov	r1, r0
  400b5c:	4620      	mov	r0, r4
  400b5e:	4b03      	ldr	r3, [pc, #12]	; (400b6c <delay_ms+0x1c>)
  400b60:	4798      	blx	r3
  400b62:	bd10      	pop	{r4, pc}
  400b64:	20400090 	.word	0x20400090
  400b68:	00401377 	.word	0x00401377
  400b6c:	00401bc1 	.word	0x00401bc1

00400b70 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400b70:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400b72:	2506      	movs	r5, #6
  400b74:	2400      	movs	r4, #0

	while (upper >= lower) {
  400b76:	e007      	b.n	400b88 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400b78:	4a0d      	ldr	r2, [pc, #52]	; (400bb0 <process_ext_irq+0x40>)
  400b7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400b7e:	b1b3      	cbz	r3, 400bae <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400b80:	4798      	blx	r3
  400b82:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400b84:	3a01      	subs	r2, #1
  400b86:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400b88:	42ac      	cmp	r4, r5
  400b8a:	d810      	bhi.n	400bae <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400b8c:	192b      	adds	r3, r5, r4
  400b8e:	105b      	asrs	r3, r3, #1
  400b90:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400b92:	2a05      	cmp	r2, #5
  400b94:	d80b      	bhi.n	400bae <process_ext_irq+0x3e>
  400b96:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400b98:	4905      	ldr	r1, [pc, #20]	; (400bb0 <process_ext_irq+0x40>)
  400b9a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400b9e:	6849      	ldr	r1, [r1, #4]
  400ba0:	4281      	cmp	r1, r0
  400ba2:	d0e9      	beq.n	400b78 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400ba4:	4281      	cmp	r1, r0
  400ba6:	d2ed      	bcs.n	400b84 <process_ext_irq+0x14>
			lower = middle + 1;
  400ba8:	3201      	adds	r2, #1
  400baa:	b2d4      	uxtb	r4, r2
  400bac:	e7ec      	b.n	400b88 <process_ext_irq+0x18>
  400bae:	bd38      	pop	{r3, r4, r5, pc}
  400bb0:	20400094 	.word	0x20400094

00400bb4 <ext_irq_init>:
{
  400bb4:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400bb6:	2300      	movs	r3, #0
  400bb8:	e00a      	b.n	400bd0 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400bba:	4a08      	ldr	r2, [pc, #32]	; (400bdc <ext_irq_init+0x28>)
  400bbc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400bc0:	f04f 30ff 	mov.w	r0, #4294967295
  400bc4:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400bc6:	2100      	movs	r1, #0
  400bc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400bcc:	3301      	adds	r3, #1
  400bce:	b29b      	uxth	r3, r3
  400bd0:	2b05      	cmp	r3, #5
  400bd2:	d9f2      	bls.n	400bba <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400bd4:	4802      	ldr	r0, [pc, #8]	; (400be0 <ext_irq_init+0x2c>)
  400bd6:	4b03      	ldr	r3, [pc, #12]	; (400be4 <ext_irq_init+0x30>)
  400bd8:	4798      	blx	r3
}
  400bda:	bd08      	pop	{r3, pc}
  400bdc:	20400094 	.word	0x20400094
  400be0:	00400b71 	.word	0x00400b71
  400be4:	00401611 	.word	0x00401611

00400be8 <ext_irq_register>:
{
  400be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bea:	b083      	sub	sp, #12
  400bec:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400bee:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400bf0:	2b05      	cmp	r3, #5
  400bf2:	d80e      	bhi.n	400c12 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400bf4:	4618      	mov	r0, r3
  400bf6:	4a2e      	ldr	r2, [pc, #184]	; (400cb0 <ext_irq_register+0xc8>)
  400bf8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400bfc:	6852      	ldr	r2, [r2, #4]
  400bfe:	42aa      	cmp	r2, r5
  400c00:	d002      	beq.n	400c08 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400c02:	3301      	adds	r3, #1
  400c04:	b2db      	uxtb	r3, r3
  400c06:	e7f3      	b.n	400bf0 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400c08:	4b29      	ldr	r3, [pc, #164]	; (400cb0 <ext_irq_register+0xc8>)
  400c0a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400c0e:	2701      	movs	r7, #1
			break;
  400c10:	e000      	b.n	400c14 <ext_irq_register+0x2c>
	bool    found = false;
  400c12:	2700      	movs	r7, #0
	if (NULL == cb) {
  400c14:	b159      	cbz	r1, 400c2e <ext_irq_register+0x46>
	if (!found) {
  400c16:	2f00      	cmp	r7, #0
  400c18:	d13d      	bne.n	400c96 <ext_irq_register+0xae>
  400c1a:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c1c:	2e05      	cmp	r6, #5
  400c1e:	d813      	bhi.n	400c48 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400c20:	4b23      	ldr	r3, [pc, #140]	; (400cb0 <ext_irq_register+0xc8>)
  400c22:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  400c26:	b143      	cbz	r3, 400c3a <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c28:	3601      	adds	r6, #1
  400c2a:	b2f6      	uxtb	r6, r6
  400c2c:	e7f6      	b.n	400c1c <ext_irq_register+0x34>
		if (!found) {
  400c2e:	2f00      	cmp	r7, #0
  400c30:	d038      	beq.n	400ca4 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  400c32:	4628      	mov	r0, r5
  400c34:	4b1f      	ldr	r3, [pc, #124]	; (400cb4 <ext_irq_register+0xcc>)
  400c36:	4798      	blx	r3
  400c38:	e032      	b.n	400ca0 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  400c3a:	4b1d      	ldr	r3, [pc, #116]	; (400cb0 <ext_irq_register+0xc8>)
  400c3c:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  400c40:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
  400c44:	6055      	str	r5, [r2, #4]
				found           = true;
  400c46:	2701      	movs	r7, #1
  400c48:	2300      	movs	r3, #0
  400c4a:	e001      	b.n	400c50 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400c4c:	3301      	adds	r3, #1
  400c4e:	b2db      	uxtb	r3, r3
  400c50:	2b05      	cmp	r3, #5
  400c52:	bf98      	it	ls
  400c54:	2e05      	cmpls	r6, #5
  400c56:	d81e      	bhi.n	400c96 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400c58:	46b6      	mov	lr, r6
  400c5a:	4a15      	ldr	r2, [pc, #84]	; (400cb0 <ext_irq_register+0xc8>)
  400c5c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400c60:	6848      	ldr	r0, [r1, #4]
  400c62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400c66:	6852      	ldr	r2, [r2, #4]
  400c68:	4290      	cmp	r0, r2
  400c6a:	d2ef      	bcs.n	400c4c <ext_irq_register+0x64>
  400c6c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400c70:	d0ec      	beq.n	400c4c <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400c72:	4c0f      	ldr	r4, [pc, #60]	; (400cb0 <ext_irq_register+0xc8>)
  400c74:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400c78:	e892 0003 	ldmia.w	r2, {r0, r1}
  400c7c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400c80:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400c84:	e894 0003 	ldmia.w	r4, {r0, r1}
  400c88:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400c8c:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400c90:	e884 0003 	stmia.w	r4, {r0, r1}
  400c94:	e7da      	b.n	400c4c <ext_irq_register+0x64>
	if (!found) {
  400c96:	b147      	cbz	r7, 400caa <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400c98:	2101      	movs	r1, #1
  400c9a:	4628      	mov	r0, r5
  400c9c:	4b05      	ldr	r3, [pc, #20]	; (400cb4 <ext_irq_register+0xcc>)
  400c9e:	4798      	blx	r3
}
  400ca0:	b003      	add	sp, #12
  400ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400ca4:	f06f 000c 	mvn.w	r0, #12
  400ca8:	e7fa      	b.n	400ca0 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400caa:	f06f 000c 	mvn.w	r0, #12
  400cae:	e7f7      	b.n	400ca0 <ext_irq_register+0xb8>
  400cb0:	20400094 	.word	0x20400094
  400cb4:	00401639 	.word	0x00401639

00400cb8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400cb8:	b510      	push	{r4, lr}
  400cba:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400cbc:	8903      	ldrh	r3, [r0, #8]
  400cbe:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400cc2:	4614      	mov	r4, r2
  400cc4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  400cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cca:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  400cce:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400cd0:	a901      	add	r1, sp, #4
  400cd2:	3814      	subs	r0, #20
  400cd4:	4b03      	ldr	r3, [pc, #12]	; (400ce4 <i2c_m_sync_write+0x2c>)
  400cd6:	4798      	blx	r3

	if (ret) {
  400cd8:	b910      	cbnz	r0, 400ce0 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  400cda:	4620      	mov	r0, r4
  400cdc:	b004      	add	sp, #16
  400cde:	bd10      	pop	{r4, pc}
		return ret;
  400ce0:	4604      	mov	r4, r0
  400ce2:	e7fa      	b.n	400cda <i2c_m_sync_write+0x22>
  400ce4:	00401e0d 	.word	0x00401e0d

00400ce8 <i2c_m_sync_read>:
{
  400ce8:	b510      	push	{r4, lr}
  400cea:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  400cec:	8903      	ldrh	r3, [r0, #8]
  400cee:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400cf2:	4614      	mov	r4, r2
  400cf4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400cf6:	f248 0301 	movw	r3, #32769	; 0x8001
  400cfa:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  400cfe:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400d00:	a901      	add	r1, sp, #4
  400d02:	3814      	subs	r0, #20
  400d04:	4b03      	ldr	r3, [pc, #12]	; (400d14 <i2c_m_sync_read+0x2c>)
  400d06:	4798      	blx	r3
	if (ret) {
  400d08:	b910      	cbnz	r0, 400d10 <i2c_m_sync_read+0x28>
}
  400d0a:	4620      	mov	r0, r4
  400d0c:	b004      	add	sp, #16
  400d0e:	bd10      	pop	{r4, pc}
		return ret;
  400d10:	4604      	mov	r4, r0
  400d12:	e7fa      	b.n	400d0a <i2c_m_sync_read+0x22>
  400d14:	00401e0d 	.word	0x00401e0d

00400d18 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400d18:	b538      	push	{r3, r4, r5, lr}
  400d1a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  400d1c:	4604      	mov	r4, r0
  400d1e:	225e      	movs	r2, #94	; 0x5e
  400d20:	4908      	ldr	r1, [pc, #32]	; (400d44 <i2c_m_sync_init+0x2c>)
  400d22:	3000      	adds	r0, #0
  400d24:	bf18      	it	ne
  400d26:	2001      	movne	r0, #1
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <i2c_m_sync_init+0x30>)
  400d2a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400d2c:	4629      	mov	r1, r5
  400d2e:	4620      	mov	r0, r4
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <i2c_m_sync_init+0x34>)
  400d32:	4798      	blx	r3
	if (init_status) {
  400d34:	4603      	mov	r3, r0
  400d36:	b918      	cbnz	r0, 400d40 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400d38:	4a05      	ldr	r2, [pc, #20]	; (400d50 <i2c_m_sync_init+0x38>)
  400d3a:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400d3c:	4a05      	ldr	r2, [pc, #20]	; (400d54 <i2c_m_sync_init+0x3c>)
  400d3e:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  400d40:	4618      	mov	r0, r3
  400d42:	bd38      	pop	{r3, r4, r5, pc}
  400d44:	0040330c 	.word	0x0040330c
  400d48:	004011a1 	.word	0x004011a1
  400d4c:	00401dc5 	.word	0x00401dc5
  400d50:	00400ce9 	.word	0x00400ce9
  400d54:	00400cb9 	.word	0x00400cb9

00400d58 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400d58:	b570      	push	{r4, r5, r6, lr}
  400d5a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400d5c:	4604      	mov	r4, r0
  400d5e:	460d      	mov	r5, r1
  400d60:	2800      	cmp	r0, #0
  400d62:	bf18      	it	ne
  400d64:	2900      	cmpne	r1, #0
  400d66:	bf14      	ite	ne
  400d68:	2001      	movne	r0, #1
  400d6a:	2000      	moveq	r0, #0
  400d6c:	2234      	movs	r2, #52	; 0x34
  400d6e:	4904      	ldr	r1, [pc, #16]	; (400d80 <io_write+0x28>)
  400d70:	4b04      	ldr	r3, [pc, #16]	; (400d84 <io_write+0x2c>)
  400d72:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400d74:	6823      	ldr	r3, [r4, #0]
  400d76:	4632      	mov	r2, r6
  400d78:	4629      	mov	r1, r5
  400d7a:	4620      	mov	r0, r4
  400d7c:	4798      	blx	r3
}
  400d7e:	bd70      	pop	{r4, r5, r6, pc}
  400d80:	00403328 	.word	0x00403328
  400d84:	004011a1 	.word	0x004011a1

00400d88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400d88:	b570      	push	{r4, r5, r6, lr}
  400d8a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400d8c:	4604      	mov	r4, r0
  400d8e:	460d      	mov	r5, r1
  400d90:	2800      	cmp	r0, #0
  400d92:	bf18      	it	ne
  400d94:	2900      	cmpne	r1, #0
  400d96:	bf14      	ite	ne
  400d98:	2001      	movne	r0, #1
  400d9a:	2000      	moveq	r0, #0
  400d9c:	223d      	movs	r2, #61	; 0x3d
  400d9e:	4904      	ldr	r1, [pc, #16]	; (400db0 <io_read+0x28>)
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <io_read+0x2c>)
  400da2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400da4:	6863      	ldr	r3, [r4, #4]
  400da6:	4632      	mov	r2, r6
  400da8:	4629      	mov	r1, r5
  400daa:	4620      	mov	r0, r4
  400dac:	4798      	blx	r3
}
  400dae:	bd70      	pop	{r4, r5, r6, pc}
  400db0:	00403328 	.word	0x00403328
  400db4:	004011a1 	.word	0x004011a1

00400db8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400db8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400dba:	6943      	ldr	r3, [r0, #20]
  400dbc:	b103      	cbz	r3, 400dc0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400dbe:	4798      	blx	r3
  400dc0:	bd08      	pop	{r3, pc}

00400dc2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400dc2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400dc4:	6983      	ldr	r3, [r0, #24]
  400dc6:	b103      	cbz	r3, 400dca <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400dc8:	4798      	blx	r3
  400dca:	bd08      	pop	{r3, pc}

00400dcc <pwm_init>:
{
  400dcc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400dce:	4604      	mov	r4, r0
  400dd0:	460d      	mov	r5, r1
  400dd2:	2800      	cmp	r0, #0
  400dd4:	bf18      	it	ne
  400dd6:	2900      	cmpne	r1, #0
  400dd8:	bf14      	ite	ne
  400dda:	2001      	movne	r0, #1
  400ddc:	2000      	moveq	r0, #0
  400dde:	2233      	movs	r2, #51	; 0x33
  400de0:	4906      	ldr	r1, [pc, #24]	; (400dfc <pwm_init+0x30>)
  400de2:	4b07      	ldr	r3, [pc, #28]	; (400e00 <pwm_init+0x34>)
  400de4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400de6:	4629      	mov	r1, r5
  400de8:	4620      	mov	r0, r4
  400dea:	4b06      	ldr	r3, [pc, #24]	; (400e04 <pwm_init+0x38>)
  400dec:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400dee:	4b06      	ldr	r3, [pc, #24]	; (400e08 <pwm_init+0x3c>)
  400df0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400df2:	4b06      	ldr	r3, [pc, #24]	; (400e0c <pwm_init+0x40>)
  400df4:	6063      	str	r3, [r4, #4]
}
  400df6:	2000      	movs	r0, #0
  400df8:	bd38      	pop	{r3, r4, r5, pc}
  400dfa:	bf00      	nop
  400dfc:	0040333c 	.word	0x0040333c
  400e00:	004011a1 	.word	0x004011a1
  400e04:	004017f1 	.word	0x004017f1
  400e08:	00400db9 	.word	0x00400db9
  400e0c:	00400dc3 	.word	0x00400dc3

00400e10 <pwm_enable>:
{
  400e10:	b510      	push	{r4, lr}
	ASSERT(descr);
  400e12:	4604      	mov	r4, r0
  400e14:	224a      	movs	r2, #74	; 0x4a
  400e16:	4909      	ldr	r1, [pc, #36]	; (400e3c <pwm_enable+0x2c>)
  400e18:	3000      	adds	r0, #0
  400e1a:	bf18      	it	ne
  400e1c:	2001      	movne	r0, #1
  400e1e:	4b08      	ldr	r3, [pc, #32]	; (400e40 <pwm_enable+0x30>)
  400e20:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400e22:	4620      	mov	r0, r4
  400e24:	4b07      	ldr	r3, [pc, #28]	; (400e44 <pwm_enable+0x34>)
  400e26:	4798      	blx	r3
  400e28:	b920      	cbnz	r0, 400e34 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400e2a:	4620      	mov	r0, r4
  400e2c:	4b06      	ldr	r3, [pc, #24]	; (400e48 <pwm_enable+0x38>)
  400e2e:	4798      	blx	r3
	return ERR_NONE;
  400e30:	2000      	movs	r0, #0
  400e32:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400e34:	f06f 0010 	mvn.w	r0, #16
}
  400e38:	bd10      	pop	{r4, pc}
  400e3a:	bf00      	nop
  400e3c:	0040333c 	.word	0x0040333c
  400e40:	004011a1 	.word	0x004011a1
  400e44:	0040196d 	.word	0x0040196d
  400e48:	00401929 	.word	0x00401929

00400e4c <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400e4c:	b538      	push	{r3, r4, r5, lr}
  400e4e:	460d      	mov	r5, r1
	ASSERT(spi);
  400e50:	4604      	mov	r4, r0
  400e52:	2239      	movs	r2, #57	; 0x39
  400e54:	4903      	ldr	r1, [pc, #12]	; (400e64 <spi_m_sync_set_func_ptr+0x18>)
  400e56:	3000      	adds	r0, #0
  400e58:	bf18      	it	ne
  400e5a:	2001      	movne	r0, #1
  400e5c:	4b02      	ldr	r3, [pc, #8]	; (400e68 <spi_m_sync_set_func_ptr+0x1c>)
  400e5e:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400e60:	6025      	str	r5, [r4, #0]
  400e62:	bd38      	pop	{r3, r4, r5, pc}
  400e64:	00403354 	.word	0x00403354
  400e68:	004011a1 	.word	0x004011a1

00400e6c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400e6c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400e6e:	4604      	mov	r4, r0
  400e70:	460d      	mov	r5, r1
  400e72:	2800      	cmp	r0, #0
  400e74:	bf18      	it	ne
  400e76:	2900      	cmpne	r1, #0
  400e78:	bf14      	ite	ne
  400e7a:	2001      	movne	r0, #1
  400e7c:	2000      	moveq	r0, #0
  400e7e:	2240      	movs	r2, #64	; 0x40
  400e80:	4909      	ldr	r1, [pc, #36]	; (400ea8 <spi_m_sync_init+0x3c>)
  400e82:	4b0a      	ldr	r3, [pc, #40]	; (400eac <spi_m_sync_init+0x40>)
  400e84:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400e86:	4620      	mov	r0, r4
  400e88:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400e8c:	4629      	mov	r1, r5
  400e8e:	4b08      	ldr	r3, [pc, #32]	; (400eb0 <spi_m_sync_init+0x44>)
  400e90:	4798      	blx	r3

	if (rc < 0) {
  400e92:	2800      	cmp	r0, #0
  400e94:	db07      	blt.n	400ea6 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e9a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400e9c:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <spi_m_sync_init+0x48>)
  400e9e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400ea0:	4b05      	ldr	r3, [pc, #20]	; (400eb8 <spi_m_sync_init+0x4c>)
  400ea2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400ea4:	2000      	movs	r0, #0
}
  400ea6:	bd38      	pop	{r3, r4, r5, pc}
  400ea8:	00403354 	.word	0x00403354
  400eac:	004011a1 	.word	0x004011a1
  400eb0:	004019c1 	.word	0x004019c1
  400eb4:	00400f61 	.word	0x00400f61
  400eb8:	00400f25 	.word	0x00400f25

00400ebc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400ebc:	b510      	push	{r4, lr}
	ASSERT(spi);
  400ebe:	4604      	mov	r4, r0
  400ec0:	2257      	movs	r2, #87	; 0x57
  400ec2:	4905      	ldr	r1, [pc, #20]	; (400ed8 <spi_m_sync_enable+0x1c>)
  400ec4:	3000      	adds	r0, #0
  400ec6:	bf18      	it	ne
  400ec8:	2001      	movne	r0, #1
  400eca:	4b04      	ldr	r3, [pc, #16]	; (400edc <spi_m_sync_enable+0x20>)
  400ecc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400ece:	1d20      	adds	r0, r4, #4
  400ed0:	4b03      	ldr	r3, [pc, #12]	; (400ee0 <spi_m_sync_enable+0x24>)
  400ed2:	4798      	blx	r3
  400ed4:	bd10      	pop	{r4, pc}
  400ed6:	bf00      	nop
  400ed8:	00403354 	.word	0x00403354
  400edc:	004011a1 	.word	0x004011a1
  400ee0:	00401a69 	.word	0x00401a69

00400ee4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400ee4:	b530      	push	{r4, r5, lr}
  400ee6:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400ee8:	4605      	mov	r5, r0
  400eea:	460c      	mov	r4, r1
  400eec:	2800      	cmp	r0, #0
  400eee:	bf18      	it	ne
  400ef0:	2900      	cmpne	r1, #0
  400ef2:	bf14      	ite	ne
  400ef4:	2001      	movne	r0, #1
  400ef6:	2000      	moveq	r0, #0
  400ef8:	22b3      	movs	r2, #179	; 0xb3
  400efa:	4907      	ldr	r1, [pc, #28]	; (400f18 <spi_m_sync_transfer+0x34>)
  400efc:	4b07      	ldr	r3, [pc, #28]	; (400f1c <spi_m_sync_transfer+0x38>)
  400efe:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400f00:	6823      	ldr	r3, [r4, #0]
  400f02:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400f04:	6863      	ldr	r3, [r4, #4]
  400f06:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400f08:	68a3      	ldr	r3, [r4, #8]
  400f0a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400f0c:	a901      	add	r1, sp, #4
  400f0e:	1d28      	adds	r0, r5, #4
  400f10:	4b03      	ldr	r3, [pc, #12]	; (400f20 <spi_m_sync_transfer+0x3c>)
  400f12:	4798      	blx	r3
}
  400f14:	b005      	add	sp, #20
  400f16:	bd30      	pop	{r4, r5, pc}
  400f18:	00403354 	.word	0x00403354
  400f1c:	004011a1 	.word	0x004011a1
  400f20:	00401a9d 	.word	0x00401a9d

00400f24 <_spi_m_sync_io_write>:
{
  400f24:	b570      	push	{r4, r5, r6, lr}
  400f26:	b084      	sub	sp, #16
  400f28:	460e      	mov	r6, r1
  400f2a:	4615      	mov	r5, r2
	ASSERT(io);
  400f2c:	4604      	mov	r4, r0
  400f2e:	22a3      	movs	r2, #163	; 0xa3
  400f30:	4908      	ldr	r1, [pc, #32]	; (400f54 <_spi_m_sync_io_write+0x30>)
  400f32:	3000      	adds	r0, #0
  400f34:	bf18      	it	ne
  400f36:	2001      	movne	r0, #1
  400f38:	4b07      	ldr	r3, [pc, #28]	; (400f58 <_spi_m_sync_io_write+0x34>)
  400f3a:	4798      	blx	r3
	xfer.rxbuf = 0;
  400f3c:	2300      	movs	r3, #0
  400f3e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400f40:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400f42:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400f44:	a901      	add	r1, sp, #4
  400f46:	f1a4 000c 	sub.w	r0, r4, #12
  400f4a:	4b04      	ldr	r3, [pc, #16]	; (400f5c <_spi_m_sync_io_write+0x38>)
  400f4c:	4798      	blx	r3
}
  400f4e:	b004      	add	sp, #16
  400f50:	bd70      	pop	{r4, r5, r6, pc}
  400f52:	bf00      	nop
  400f54:	00403354 	.word	0x00403354
  400f58:	004011a1 	.word	0x004011a1
  400f5c:	00400ee5 	.word	0x00400ee5

00400f60 <_spi_m_sync_io_read>:
{
  400f60:	b570      	push	{r4, r5, r6, lr}
  400f62:	b084      	sub	sp, #16
  400f64:	460e      	mov	r6, r1
  400f66:	4615      	mov	r5, r2
	ASSERT(io);
  400f68:	4604      	mov	r4, r0
  400f6a:	2287      	movs	r2, #135	; 0x87
  400f6c:	4908      	ldr	r1, [pc, #32]	; (400f90 <_spi_m_sync_io_read+0x30>)
  400f6e:	3000      	adds	r0, #0
  400f70:	bf18      	it	ne
  400f72:	2001      	movne	r0, #1
  400f74:	4b07      	ldr	r3, [pc, #28]	; (400f94 <_spi_m_sync_io_read+0x34>)
  400f76:	4798      	blx	r3
	xfer.rxbuf = buf;
  400f78:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400f7a:	2300      	movs	r3, #0
  400f7c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400f7e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400f80:	a901      	add	r1, sp, #4
  400f82:	f1a4 000c 	sub.w	r0, r4, #12
  400f86:	4b04      	ldr	r3, [pc, #16]	; (400f98 <_spi_m_sync_io_read+0x38>)
  400f88:	4798      	blx	r3
}
  400f8a:	b004      	add	sp, #16
  400f8c:	bd70      	pop	{r4, r5, r6, pc}
  400f8e:	bf00      	nop
  400f90:	00403354 	.word	0x00403354
  400f94:	004011a1 	.word	0x004011a1
  400f98:	00400ee5 	.word	0x00400ee5

00400f9c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400f9c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400f9e:	4604      	mov	r4, r0
  400fa0:	460d      	mov	r5, r1
  400fa2:	2800      	cmp	r0, #0
  400fa4:	bf18      	it	ne
  400fa6:	2900      	cmpne	r1, #0
  400fa8:	bf14      	ite	ne
  400faa:	2001      	movne	r0, #1
  400fac:	2000      	moveq	r0, #0
  400fae:	22bd      	movs	r2, #189	; 0xbd
  400fb0:	4903      	ldr	r1, [pc, #12]	; (400fc0 <spi_m_sync_get_io_descriptor+0x24>)
  400fb2:	4b04      	ldr	r3, [pc, #16]	; (400fc4 <spi_m_sync_get_io_descriptor+0x28>)
  400fb4:	4798      	blx	r3
	*io = &spi->io;
  400fb6:	340c      	adds	r4, #12
  400fb8:	602c      	str	r4, [r5, #0]
	return 0;
}
  400fba:	2000      	movs	r0, #0
  400fbc:	bd38      	pop	{r3, r4, r5, pc}
  400fbe:	bf00      	nop
  400fc0:	00403354 	.word	0x00403354
  400fc4:	004011a1 	.word	0x004011a1

00400fc8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400fca:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400fcc:	b117      	cbz	r7, 400fd4 <timer_add_timer_task+0xc>
  400fce:	463c      	mov	r4, r7
  400fd0:	2600      	movs	r6, #0
  400fd2:	e00b      	b.n	400fec <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400fd4:	4b0e      	ldr	r3, [pc, #56]	; (401010 <timer_add_timer_task+0x48>)
  400fd6:	4798      	blx	r3
		return;
  400fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400fda:	68a5      	ldr	r5, [r4, #8]
  400fdc:	442b      	add	r3, r5
  400fde:	1a9b      	subs	r3, r3, r2
  400fe0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400fe2:	688d      	ldr	r5, [r1, #8]
  400fe4:	42ab      	cmp	r3, r5
  400fe6:	d209      	bcs.n	400ffc <timer_add_timer_task+0x34>
			break;
		prev = it;
  400fe8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400fea:	6824      	ldr	r4, [r4, #0]
  400fec:	b134      	cbz	r4, 400ffc <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400fee:	6863      	ldr	r3, [r4, #4]
  400ff0:	4293      	cmp	r3, r2
  400ff2:	d8f2      	bhi.n	400fda <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400ff4:	68a5      	ldr	r5, [r4, #8]
  400ff6:	1a9b      	subs	r3, r3, r2
  400ff8:	442b      	add	r3, r5
  400ffa:	e7f2      	b.n	400fe2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400ffc:	42bc      	cmp	r4, r7
  400ffe:	d003      	beq.n	401008 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401000:	4630      	mov	r0, r6
  401002:	4b04      	ldr	r3, [pc, #16]	; (401014 <timer_add_timer_task+0x4c>)
  401004:	4798      	blx	r3
  401006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <timer_add_timer_task+0x48>)
  40100a:	4798      	blx	r3
  40100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40100e:	bf00      	nop
  401010:	004011bd 	.word	0x004011bd
  401014:	004011e9 	.word	0x004011e9

00401018 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40101a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40101c:	6906      	ldr	r6, [r0, #16]
  40101e:	3601      	adds	r6, #1
  401020:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401022:	7e03      	ldrb	r3, [r0, #24]
  401024:	f013 0f01 	tst.w	r3, #1
  401028:	d105      	bne.n	401036 <timer_process_counted+0x1e>
  40102a:	7e03      	ldrb	r3, [r0, #24]
  40102c:	f013 0f02 	tst.w	r3, #2
  401030:	d101      	bne.n	401036 <timer_process_counted+0x1e>
  401032:	4605      	mov	r5, r0
  401034:	e009      	b.n	40104a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401036:	7e03      	ldrb	r3, [r0, #24]
  401038:	f043 0302 	orr.w	r3, r3, #2
  40103c:	7603      	strb	r3, [r0, #24]
		return;
  40103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401040:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401042:	68e3      	ldr	r3, [r4, #12]
  401044:	4620      	mov	r0, r4
  401046:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401048:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  40104a:	b19c      	cbz	r4, 401074 <timer_process_counted+0x5c>
  40104c:	6863      	ldr	r3, [r4, #4]
  40104e:	1af3      	subs	r3, r6, r3
  401050:	68a2      	ldr	r2, [r4, #8]
  401052:	4293      	cmp	r3, r2
  401054:	d30e      	bcc.n	401074 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401056:	f105 0714 	add.w	r7, r5, #20
  40105a:	4638      	mov	r0, r7
  40105c:	4b06      	ldr	r3, [pc, #24]	; (401078 <timer_process_counted+0x60>)
  40105e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401060:	7c23      	ldrb	r3, [r4, #16]
  401062:	2b01      	cmp	r3, #1
  401064:	d1ec      	bne.n	401040 <timer_process_counted+0x28>
			tmp->time_label = time;
  401066:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401068:	4632      	mov	r2, r6
  40106a:	4621      	mov	r1, r4
  40106c:	4638      	mov	r0, r7
  40106e:	4b03      	ldr	r3, [pc, #12]	; (40107c <timer_process_counted+0x64>)
  401070:	4798      	blx	r3
  401072:	e7e5      	b.n	401040 <timer_process_counted+0x28>
  401074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401076:	bf00      	nop
  401078:	004011f1 	.word	0x004011f1
  40107c:	00400fc9 	.word	0x00400fc9

00401080 <timer_init>:
{
  401080:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401082:	4604      	mov	r4, r0
  401084:	460d      	mov	r5, r1
  401086:	2800      	cmp	r0, #0
  401088:	bf18      	it	ne
  40108a:	2900      	cmpne	r1, #0
  40108c:	bf14      	ite	ne
  40108e:	2001      	movne	r0, #1
  401090:	2000      	moveq	r0, #0
  401092:	223b      	movs	r2, #59	; 0x3b
  401094:	4905      	ldr	r1, [pc, #20]	; (4010ac <timer_init+0x2c>)
  401096:	4b06      	ldr	r3, [pc, #24]	; (4010b0 <timer_init+0x30>)
  401098:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40109a:	4629      	mov	r1, r5
  40109c:	4620      	mov	r0, r4
  40109e:	4b05      	ldr	r3, [pc, #20]	; (4010b4 <timer_init+0x34>)
  4010a0:	4798      	blx	r3
	descr->time                           = 0;
  4010a2:	2000      	movs	r0, #0
  4010a4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4010a6:	4b04      	ldr	r3, [pc, #16]	; (4010b8 <timer_init+0x38>)
  4010a8:	6023      	str	r3, [r4, #0]
}
  4010aa:	bd38      	pop	{r3, r4, r5, pc}
  4010ac:	00403370 	.word	0x00403370
  4010b0:	004011a1 	.word	0x004011a1
  4010b4:	00401c79 	.word	0x00401c79
  4010b8:	00401019 	.word	0x00401019

004010bc <timer_start>:
{
  4010bc:	b510      	push	{r4, lr}
	ASSERT(descr);
  4010be:	4604      	mov	r4, r0
  4010c0:	2253      	movs	r2, #83	; 0x53
  4010c2:	4909      	ldr	r1, [pc, #36]	; (4010e8 <timer_start+0x2c>)
  4010c4:	3000      	adds	r0, #0
  4010c6:	bf18      	it	ne
  4010c8:	2001      	movne	r0, #1
  4010ca:	4b08      	ldr	r3, [pc, #32]	; (4010ec <timer_start+0x30>)
  4010cc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4010ce:	4620      	mov	r0, r4
  4010d0:	4b07      	ldr	r3, [pc, #28]	; (4010f0 <timer_start+0x34>)
  4010d2:	4798      	blx	r3
  4010d4:	b920      	cbnz	r0, 4010e0 <timer_start+0x24>
	_timer_start(&descr->device);
  4010d6:	4620      	mov	r0, r4
  4010d8:	4b06      	ldr	r3, [pc, #24]	; (4010f4 <timer_start+0x38>)
  4010da:	4798      	blx	r3
	return ERR_NONE;
  4010dc:	2000      	movs	r0, #0
  4010de:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4010e0:	f06f 0010 	mvn.w	r0, #16
}
  4010e4:	bd10      	pop	{r4, pc}
  4010e6:	bf00      	nop
  4010e8:	00403370 	.word	0x00403370
  4010ec:	004011a1 	.word	0x004011a1
  4010f0:	00401d3d 	.word	0x00401d3d
  4010f4:	00401d35 	.word	0x00401d35

004010f8 <timer_add_task>:
{
  4010f8:	b570      	push	{r4, r5, r6, lr}
  4010fa:	b082      	sub	sp, #8
	ASSERT(descr && task);
  4010fc:	4604      	mov	r4, r0
  4010fe:	460d      	mov	r5, r1
  401100:	2800      	cmp	r0, #0
  401102:	bf18      	it	ne
  401104:	2900      	cmpne	r1, #0
  401106:	bf14      	ite	ne
  401108:	2001      	movne	r0, #1
  40110a:	2000      	moveq	r0, #0
  40110c:	227a      	movs	r2, #122	; 0x7a
  40110e:	491d      	ldr	r1, [pc, #116]	; (401184 <timer_add_task+0x8c>)
  401110:	4b1d      	ldr	r3, [pc, #116]	; (401188 <timer_add_task+0x90>)
  401112:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  401114:	7e23      	ldrb	r3, [r4, #24]
  401116:	f043 0301 	orr.w	r3, r3, #1
  40111a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  40111c:	f104 0614 	add.w	r6, r4, #20
  401120:	4629      	mov	r1, r5
  401122:	4630      	mov	r0, r6
  401124:	4b19      	ldr	r3, [pc, #100]	; (40118c <timer_add_task+0x94>)
  401126:	4798      	blx	r3
  401128:	b988      	cbnz	r0, 40114e <timer_add_task+0x56>
	task->time_label = descr->time;
  40112a:	6923      	ldr	r3, [r4, #16]
  40112c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  40112e:	6922      	ldr	r2, [r4, #16]
  401130:	4629      	mov	r1, r5
  401132:	4630      	mov	r0, r6
  401134:	4b16      	ldr	r3, [pc, #88]	; (401190 <timer_add_task+0x98>)
  401136:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  401138:	7e23      	ldrb	r3, [r4, #24]
  40113a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40113e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  401140:	7e23      	ldrb	r3, [r4, #24]
  401142:	f013 0f02 	tst.w	r3, #2
  401146:	d10e      	bne.n	401166 <timer_add_task+0x6e>
	return ERR_NONE;
  401148:	2000      	movs	r0, #0
}
  40114a:	b002      	add	sp, #8
  40114c:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  40114e:	7e23      	ldrb	r3, [r4, #24]
  401150:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  401154:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  401156:	227f      	movs	r2, #127	; 0x7f
  401158:	490a      	ldr	r1, [pc, #40]	; (401184 <timer_add_task+0x8c>)
  40115a:	2000      	movs	r0, #0
  40115c:	4b0a      	ldr	r3, [pc, #40]	; (401188 <timer_add_task+0x90>)
  40115e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  401160:	f06f 0011 	mvn.w	r0, #17
  401164:	e7f1      	b.n	40114a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  401166:	a801      	add	r0, sp, #4
  401168:	4b0a      	ldr	r3, [pc, #40]	; (401194 <timer_add_task+0x9c>)
  40116a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  40116c:	7e23      	ldrb	r3, [r4, #24]
  40116e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  401172:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  401174:	4620      	mov	r0, r4
  401176:	4b08      	ldr	r3, [pc, #32]	; (401198 <timer_add_task+0xa0>)
  401178:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  40117a:	a801      	add	r0, sp, #4
  40117c:	4b07      	ldr	r3, [pc, #28]	; (40119c <timer_add_task+0xa4>)
  40117e:	4798      	blx	r3
	return ERR_NONE;
  401180:	2000      	movs	r0, #0
  401182:	e7e2      	b.n	40114a <timer_add_task+0x52>
  401184:	00403370 	.word	0x00403370
  401188:	004011a1 	.word	0x004011a1
  40118c:	004011a7 	.word	0x004011a7
  401190:	00400fc9 	.word	0x00400fc9
  401194:	00400b01 	.word	0x00400b01
  401198:	00401d49 	.word	0x00401d49
  40119c:	00400b0f 	.word	0x00400b0f

004011a0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4011a0:	b900      	cbnz	r0, 4011a4 <assert+0x4>
		__asm("BKPT #0");
  4011a2:	be00      	bkpt	0x0000
  4011a4:	4770      	bx	lr

004011a6 <is_list_element>:
  4011a6:	6803      	ldr	r3, [r0, #0]
  4011a8:	b11b      	cbz	r3, 4011b2 <is_list_element+0xc>
  4011aa:	428b      	cmp	r3, r1
  4011ac:	d003      	beq.n	4011b6 <is_list_element+0x10>
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	e7fa      	b.n	4011a8 <is_list_element+0x2>
  4011b2:	2000      	movs	r0, #0
  4011b4:	4770      	bx	lr
  4011b6:	2001      	movs	r0, #1
  4011b8:	4770      	bx	lr
	...

004011bc <list_insert_as_head>:
  4011bc:	b538      	push	{r3, r4, r5, lr}
  4011be:	4604      	mov	r4, r0
  4011c0:	460d      	mov	r5, r1
  4011c2:	4b06      	ldr	r3, [pc, #24]	; (4011dc <list_insert_as_head+0x20>)
  4011c4:	4798      	blx	r3
  4011c6:	f080 0001 	eor.w	r0, r0, #1
  4011ca:	2239      	movs	r2, #57	; 0x39
  4011cc:	4904      	ldr	r1, [pc, #16]	; (4011e0 <list_insert_as_head+0x24>)
  4011ce:	b2c0      	uxtb	r0, r0
  4011d0:	4b04      	ldr	r3, [pc, #16]	; (4011e4 <list_insert_as_head+0x28>)
  4011d2:	4798      	blx	r3
  4011d4:	6823      	ldr	r3, [r4, #0]
  4011d6:	602b      	str	r3, [r5, #0]
  4011d8:	6025      	str	r5, [r4, #0]
  4011da:	bd38      	pop	{r3, r4, r5, pc}
  4011dc:	004011a7 	.word	0x004011a7
  4011e0:	00403388 	.word	0x00403388
  4011e4:	004011a1 	.word	0x004011a1

004011e8 <list_insert_after>:
  4011e8:	6803      	ldr	r3, [r0, #0]
  4011ea:	600b      	str	r3, [r1, #0]
  4011ec:	6001      	str	r1, [r0, #0]
  4011ee:	4770      	bx	lr

004011f0 <list_remove_head>:
  4011f0:	6803      	ldr	r3, [r0, #0]
  4011f2:	b11b      	cbz	r3, 4011fc <list_remove_head+0xc>
  4011f4:	681a      	ldr	r2, [r3, #0]
  4011f6:	6002      	str	r2, [r0, #0]
  4011f8:	4618      	mov	r0, r3
  4011fa:	4770      	bx	lr
  4011fc:	2000      	movs	r0, #0
  4011fe:	4770      	bx	lr

00401200 <_afec_init>:
  401200:	2364      	movs	r3, #100	; 0x64
  401202:	4a1d      	ldr	r2, [pc, #116]	; (401278 <_afec_init+0x78>)
  401204:	fb03 2301 	mla	r3, r3, r1, r2
  401208:	685a      	ldr	r2, [r3, #4]
  40120a:	6042      	str	r2, [r0, #4]
  40120c:	689a      	ldr	r2, [r3, #8]
  40120e:	6082      	str	r2, [r0, #8]
  401210:	68da      	ldr	r2, [r3, #12]
  401212:	60c2      	str	r2, [r0, #12]
  401214:	691a      	ldr	r2, [r3, #16]
  401216:	6102      	str	r2, [r0, #16]
  401218:	695a      	ldr	r2, [r3, #20]
  40121a:	6502      	str	r2, [r0, #80]	; 0x50
  40121c:	699a      	ldr	r2, [r3, #24]
  40121e:	6542      	str	r2, [r0, #84]	; 0x54
  401220:	69da      	ldr	r2, [r3, #28]
  401222:	6602      	str	r2, [r0, #96]	; 0x60
  401224:	6a1a      	ldr	r2, [r3, #32]
  401226:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  40122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40122c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  401230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401232:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
  401236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401238:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  40123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40123e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  401242:	2200      	movs	r2, #0
  401244:	2a0b      	cmp	r2, #11
  401246:	d814      	bhi.n	401272 <_afec_init+0x72>
  401248:	b410      	push	{r4}
  40124a:	6642      	str	r2, [r0, #100]	; 0x64
  40124c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401250:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401254:	4413      	add	r3, r2
  401256:	330c      	adds	r3, #12
  401258:	4c07      	ldr	r4, [pc, #28]	; (401278 <_afec_init+0x78>)
  40125a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40125e:	685b      	ldr	r3, [r3, #4]
  401260:	66c3      	str	r3, [r0, #108]	; 0x6c
  401262:	3201      	adds	r2, #1
  401264:	b2d2      	uxtb	r2, r2
  401266:	2a0b      	cmp	r2, #11
  401268:	d9ef      	bls.n	40124a <_afec_init+0x4a>
  40126a:	2000      	movs	r0, #0
  40126c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401270:	4770      	bx	lr
  401272:	2000      	movs	r0, #0
  401274:	4770      	bx	lr
  401276:	bf00      	nop
  401278:	004033a8 	.word	0x004033a8

0040127c <_afec_get_hardware_index>:
  40127c:	b508      	push	{r3, lr}
  40127e:	4b09      	ldr	r3, [pc, #36]	; (4012a4 <_afec_get_hardware_index+0x28>)
  401280:	4298      	cmp	r0, r3
  401282:	d00a      	beq.n	40129a <_afec_get_hardware_index+0x1e>
  401284:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401288:	4298      	cmp	r0, r3
  40128a:	d008      	beq.n	40129e <_afec_get_hardware_index+0x22>
  40128c:	22a3      	movs	r2, #163	; 0xa3
  40128e:	4906      	ldr	r1, [pc, #24]	; (4012a8 <_afec_get_hardware_index+0x2c>)
  401290:	2000      	movs	r0, #0
  401292:	4b06      	ldr	r3, [pc, #24]	; (4012ac <_afec_get_hardware_index+0x30>)
  401294:	4798      	blx	r3
  401296:	2000      	movs	r0, #0
  401298:	bd08      	pop	{r3, pc}
  40129a:	2000      	movs	r0, #0
  40129c:	bd08      	pop	{r3, pc}
  40129e:	2001      	movs	r0, #1
  4012a0:	bd08      	pop	{r3, pc}
  4012a2:	bf00      	nop
  4012a4:	4003c000 	.word	0x4003c000
  4012a8:	0040340c 	.word	0x0040340c
  4012ac:	004011a1 	.word	0x004011a1

004012b0 <_afec_get_regs>:
  4012b0:	b508      	push	{r3, lr}
  4012b2:	4b08      	ldr	r3, [pc, #32]	; (4012d4 <_afec_get_regs+0x24>)
  4012b4:	4798      	blx	r3
  4012b6:	2300      	movs	r3, #0
  4012b8:	b113      	cbz	r3, 4012c0 <_afec_get_regs+0x10>
  4012ba:	2300      	movs	r3, #0
  4012bc:	4618      	mov	r0, r3
  4012be:	bd08      	pop	{r3, pc}
  4012c0:	2264      	movs	r2, #100	; 0x64
  4012c2:	fb02 f203 	mul.w	r2, r2, r3
  4012c6:	4904      	ldr	r1, [pc, #16]	; (4012d8 <_afec_get_regs+0x28>)
  4012c8:	5c8a      	ldrb	r2, [r1, r2]
  4012ca:	4290      	cmp	r0, r2
  4012cc:	d0f6      	beq.n	4012bc <_afec_get_regs+0xc>
  4012ce:	3301      	adds	r3, #1
  4012d0:	b2db      	uxtb	r3, r3
  4012d2:	e7f1      	b.n	4012b8 <_afec_get_regs+0x8>
  4012d4:	0040127d 	.word	0x0040127d
  4012d8:	004033a8 	.word	0x004033a8

004012dc <_adc_sync_init>:
  4012dc:	b538      	push	{r3, r4, r5, lr}
  4012de:	460c      	mov	r4, r1
  4012e0:	4605      	mov	r5, r0
  4012e2:	f44f 728d 	mov.w	r2, #282	; 0x11a
  4012e6:	4907      	ldr	r1, [pc, #28]	; (401304 <_adc_sync_init+0x28>)
  4012e8:	3000      	adds	r0, #0
  4012ea:	bf18      	it	ne
  4012ec:	2001      	movne	r0, #1
  4012ee:	4b06      	ldr	r3, [pc, #24]	; (401308 <_adc_sync_init+0x2c>)
  4012f0:	4798      	blx	r3
  4012f2:	602c      	str	r4, [r5, #0]
  4012f4:	4620      	mov	r0, r4
  4012f6:	4b05      	ldr	r3, [pc, #20]	; (40130c <_adc_sync_init+0x30>)
  4012f8:	4798      	blx	r3
  4012fa:	4601      	mov	r1, r0
  4012fc:	4620      	mov	r0, r4
  4012fe:	4b04      	ldr	r3, [pc, #16]	; (401310 <_adc_sync_init+0x34>)
  401300:	4798      	blx	r3
  401302:	bd38      	pop	{r3, r4, r5, pc}
  401304:	0040340c 	.word	0x0040340c
  401308:	004011a1 	.word	0x004011a1
  40130c:	004012b1 	.word	0x004012b1
  401310:	00401201 	.word	0x00401201

00401314 <_adc_sync_enable_channel>:
  401314:	6802      	ldr	r2, [r0, #0]
  401316:	2301      	movs	r3, #1
  401318:	fa03 f101 	lsl.w	r1, r3, r1
  40131c:	6151      	str	r1, [r2, #20]
  40131e:	4770      	bx	lr

00401320 <_adc_sync_get_data_size>:
  401320:	2002      	movs	r0, #2
  401322:	4770      	bx	lr

00401324 <_adc_sync_is_channel_conversion_done>:
  401324:	6802      	ldr	r2, [r0, #0]
  401326:	2301      	movs	r3, #1
  401328:	fa03 f101 	lsl.w	r1, r3, r1
  40132c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40132e:	4219      	tst	r1, r3
  401330:	bf14      	ite	ne
  401332:	2001      	movne	r0, #1
  401334:	2000      	moveq	r0, #0
  401336:	4770      	bx	lr

00401338 <_adc_sync_convert>:
  401338:	6803      	ldr	r3, [r0, #0]
  40133a:	2202      	movs	r2, #2
  40133c:	601a      	str	r2, [r3, #0]
  40133e:	4770      	bx	lr

00401340 <_adc_sync_read_channel_data>:
  401340:	6803      	ldr	r3, [r0, #0]
  401342:	6659      	str	r1, [r3, #100]	; 0x64
  401344:	6803      	ldr	r3, [r0, #0]
  401346:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401348:	b280      	uxth	r0, r0
  40134a:	4770      	bx	lr

0040134c <_irq_set>:
  40134c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40134e:	2b00      	cmp	r3, #0
  401350:	db09      	blt.n	401366 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401352:	095b      	lsrs	r3, r3, #5
  401354:	f000 001f 	and.w	r0, r0, #31
  401358:	2201      	movs	r2, #1
  40135a:	fa02 f000 	lsl.w	r0, r2, r0
  40135e:	3340      	adds	r3, #64	; 0x40
  401360:	4a01      	ldr	r2, [pc, #4]	; (401368 <_irq_set+0x1c>)
  401362:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  401366:	4770      	bx	lr
  401368:	e000e100 	.word	0xe000e100

0040136c <_get_cycles_for_us>:
  40136c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401370:	fb03 f000 	mul.w	r0, r3, r0
  401374:	4770      	bx	lr

00401376 <_get_cycles_for_ms>:
  401376:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40137a:	fb03 f000 	mul.w	r0, r3, r0
  40137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401382:	fb03 f000 	mul.w	r0, r3, r0
  401386:	4770      	bx	lr

00401388 <_init_chip>:
  401388:	b500      	push	{lr}
  40138a:	b083      	sub	sp, #12
  40138c:	a801      	add	r0, sp, #4
  40138e:	4b0e      	ldr	r3, [pc, #56]	; (4013c8 <_init_chip+0x40>)
  401390:	4798      	blx	r3
  401392:	4a0e      	ldr	r2, [pc, #56]	; (4013cc <_init_chip+0x44>)
  401394:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4013a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013a4:	f3bf 8f6f 	isb	sy
  4013a8:	a801      	add	r0, sp, #4
  4013aa:	4b09      	ldr	r3, [pc, #36]	; (4013d0 <_init_chip+0x48>)
  4013ac:	4798      	blx	r3
  4013ae:	4a09      	ldr	r2, [pc, #36]	; (4013d4 <_init_chip+0x4c>)
  4013b0:	6813      	ldr	r3, [r2, #0]
  4013b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  4013b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  4013ba:	6013      	str	r3, [r2, #0]
  4013bc:	4b06      	ldr	r3, [pc, #24]	; (4013d8 <_init_chip+0x50>)
  4013be:	4798      	blx	r3
  4013c0:	b003      	add	sp, #12
  4013c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4013c6:	bf00      	nop
  4013c8:	00400b01 	.word	0x00400b01
  4013cc:	e000ed00 	.word	0xe000ed00
  4013d0:	00400b0f 	.word	0x00400b0f
  4013d4:	400e0c00 	.word	0x400e0c00
  4013d8:	0040174d 	.word	0x0040174d

004013dc <_ffs>:
  4013dc:	b430      	push	{r4, r5}
  4013de:	2500      	movs	r5, #0
  4013e0:	428d      	cmp	r5, r1
  4013e2:	d210      	bcs.n	401406 <_ffs+0x2a>
  4013e4:	2201      	movs	r2, #1
  4013e6:	2300      	movs	r3, #0
  4013e8:	2b1f      	cmp	r3, #31
  4013ea:	d80a      	bhi.n	401402 <_ffs+0x26>
  4013ec:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  4013f0:	4222      	tst	r2, r4
  4013f2:	d102      	bne.n	4013fa <_ffs+0x1e>
  4013f4:	0052      	lsls	r2, r2, #1
  4013f6:	3301      	adds	r3, #1
  4013f8:	e7f6      	b.n	4013e8 <_ffs+0xc>
  4013fa:	eb03 1045 	add.w	r0, r3, r5, lsl #5
  4013fe:	bc30      	pop	{r4, r5}
  401400:	4770      	bx	lr
  401402:	3501      	adds	r5, #1
  401404:	e7ec      	b.n	4013e0 <_ffs+0x4>
  401406:	f04f 30ff 	mov.w	r0, #4294967295
  40140a:	e7f8      	b.n	4013fe <_ffs+0x22>

0040140c <_ext_irq_handler>:
  40140c:	b510      	push	{r4, lr}
  40140e:	b086      	sub	sp, #24
  401410:	2300      	movs	r3, #0
  401412:	9301      	str	r3, [sp, #4]
  401414:	9302      	str	r3, [sp, #8]
  401416:	9303      	str	r3, [sp, #12]
  401418:	9304      	str	r3, [sp, #16]
  40141a:	9305      	str	r3, [sp, #20]
  40141c:	4b21      	ldr	r3, [pc, #132]	; (4014a4 <_ext_irq_handler+0x98>)
  40141e:	6818      	ldr	r0, [r3, #0]
  401420:	22f8      	movs	r2, #248	; 0xf8
  401422:	4921      	ldr	r1, [pc, #132]	; (4014a8 <_ext_irq_handler+0x9c>)
  401424:	3000      	adds	r0, #0
  401426:	bf18      	it	ne
  401428:	2001      	movne	r0, #1
  40142a:	4b20      	ldr	r3, [pc, #128]	; (4014ac <_ext_irq_handler+0xa0>)
  40142c:	4798      	blx	r3
  40142e:	4b20      	ldr	r3, [pc, #128]	; (4014b0 <_ext_irq_handler+0xa4>)
  401430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  401432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401434:	4013      	ands	r3, r2
  401436:	9301      	str	r3, [sp, #4]
  401438:	491e      	ldr	r1, [pc, #120]	; (4014b4 <_ext_irq_handler+0xa8>)
  40143a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  40143c:	6c89      	ldr	r1, [r1, #72]	; 0x48
  40143e:	400a      	ands	r2, r1
  401440:	9202      	str	r2, [sp, #8]
  401442:	4313      	orrs	r3, r2
  401444:	e025      	b.n	401492 <_ext_irq_handler+0x86>
  401446:	4b17      	ldr	r3, [pc, #92]	; (4014a4 <_ext_irq_handler+0x98>)
  401448:	681b      	ldr	r3, [r3, #0]
  40144a:	4620      	mov	r0, r4
  40144c:	4798      	blx	r3
  40144e:	1163      	asrs	r3, r4, #5
  401450:	f004 041f 	and.w	r4, r4, #31
  401454:	2201      	movs	r2, #1
  401456:	fa02 f404 	lsl.w	r4, r2, r4
  40145a:	aa06      	add	r2, sp, #24
  40145c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401460:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401464:	ea22 0204 	bic.w	r2, r2, r4
  401468:	f843 2c14 	str.w	r2, [r3, #-20]
  40146c:	2105      	movs	r1, #5
  40146e:	a801      	add	r0, sp, #4
  401470:	4b11      	ldr	r3, [pc, #68]	; (4014b8 <_ext_irq_handler+0xac>)
  401472:	4798      	blx	r3
  401474:	4604      	mov	r4, r0
  401476:	f1b4 3fff 	cmp.w	r4, #4294967295
  40147a:	d1e4      	bne.n	401446 <_ext_irq_handler+0x3a>
  40147c:	4a0c      	ldr	r2, [pc, #48]	; (4014b0 <_ext_irq_handler+0xa4>)
  40147e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  401480:	6c93      	ldr	r3, [r2, #72]	; 0x48
  401482:	400b      	ands	r3, r1
  401484:	9301      	str	r3, [sp, #4]
  401486:	490b      	ldr	r1, [pc, #44]	; (4014b4 <_ext_irq_handler+0xa8>)
  401488:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
  40148a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  40148c:	4002      	ands	r2, r0
  40148e:	9202      	str	r2, [sp, #8]
  401490:	4313      	orrs	r3, r2
  401492:	b12b      	cbz	r3, 4014a0 <_ext_irq_handler+0x94>
  401494:	2105      	movs	r1, #5
  401496:	a801      	add	r0, sp, #4
  401498:	4b07      	ldr	r3, [pc, #28]	; (4014b8 <_ext_irq_handler+0xac>)
  40149a:	4798      	blx	r3
  40149c:	4604      	mov	r4, r0
  40149e:	e7ea      	b.n	401476 <_ext_irq_handler+0x6a>
  4014a0:	b006      	add	sp, #24
  4014a2:	bd10      	pop	{r4, pc}
  4014a4:	204000c4 	.word	0x204000c4
  4014a8:	00403460 	.word	0x00403460
  4014ac:	004011a1 	.word	0x004011a1
  4014b0:	400e0e00 	.word	0x400e0e00
  4014b4:	400e1000 	.word	0x400e1000
  4014b8:	004013dd 	.word	0x004013dd

004014bc <_pio_get_hardware_index>:
  4014bc:	b510      	push	{r4, lr}
  4014be:	4604      	mov	r4, r0
  4014c0:	22d2      	movs	r2, #210	; 0xd2
  4014c2:	4905      	ldr	r1, [pc, #20]	; (4014d8 <_pio_get_hardware_index+0x1c>)
  4014c4:	3000      	adds	r0, #0
  4014c6:	bf18      	it	ne
  4014c8:	2001      	movne	r0, #1
  4014ca:	4b04      	ldr	r3, [pc, #16]	; (4014dc <_pio_get_hardware_index+0x20>)
  4014cc:	4798      	blx	r3
  4014ce:	4804      	ldr	r0, [pc, #16]	; (4014e0 <_pio_get_hardware_index+0x24>)
  4014d0:	4420      	add	r0, r4
  4014d2:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4014d6:	bd10      	pop	{r4, pc}
  4014d8:	00403460 	.word	0x00403460
  4014dc:	004011a1 	.word	0x004011a1
  4014e0:	bff1f200 	.word	0xbff1f200

004014e4 <_pio_get_index>:
  4014e4:	b510      	push	{r4, lr}
  4014e6:	4604      	mov	r4, r0
  4014e8:	22e0      	movs	r2, #224	; 0xe0
  4014ea:	490d      	ldr	r1, [pc, #52]	; (401520 <_pio_get_index+0x3c>)
  4014ec:	3000      	adds	r0, #0
  4014ee:	bf18      	it	ne
  4014f0:	2001      	movne	r0, #1
  4014f2:	4b0c      	ldr	r3, [pc, #48]	; (401524 <_pio_get_index+0x40>)
  4014f4:	4798      	blx	r3
  4014f6:	4620      	mov	r0, r4
  4014f8:	4b0b      	ldr	r3, [pc, #44]	; (401528 <_pio_get_index+0x44>)
  4014fa:	4798      	blx	r3
  4014fc:	2300      	movs	r3, #0
  4014fe:	2b01      	cmp	r3, #1
  401500:	d80b      	bhi.n	40151a <_pio_get_index+0x36>
  401502:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401506:	008a      	lsls	r2, r1, #2
  401508:	4908      	ldr	r1, [pc, #32]	; (40152c <_pio_get_index+0x48>)
  40150a:	5c8a      	ldrb	r2, [r1, r2]
  40150c:	4290      	cmp	r0, r2
  40150e:	d002      	beq.n	401516 <_pio_get_index+0x32>
  401510:	3301      	adds	r3, #1
  401512:	b2db      	uxtb	r3, r3
  401514:	e7f3      	b.n	4014fe <_pio_get_index+0x1a>
  401516:	b258      	sxtb	r0, r3
  401518:	bd10      	pop	{r4, pc}
  40151a:	f04f 30ff 	mov.w	r0, #4294967295
  40151e:	bd10      	pop	{r4, pc}
  401520:	00403460 	.word	0x00403460
  401524:	004011a1 	.word	0x004011a1
  401528:	004014bd 	.word	0x004014bd
  40152c:	00403424 	.word	0x00403424

00401530 <_pio_init>:
  401530:	b538      	push	{r3, r4, r5, lr}
  401532:	4604      	mov	r4, r0
  401534:	f240 1259 	movw	r2, #345	; 0x159
  401538:	4929      	ldr	r1, [pc, #164]	; (4015e0 <_pio_init+0xb0>)
  40153a:	3000      	adds	r0, #0
  40153c:	bf18      	it	ne
  40153e:	2001      	movne	r0, #1
  401540:	4b28      	ldr	r3, [pc, #160]	; (4015e4 <_pio_init+0xb4>)
  401542:	4798      	blx	r3
  401544:	4620      	mov	r0, r4
  401546:	4b28      	ldr	r3, [pc, #160]	; (4015e8 <_pio_init+0xb8>)
  401548:	4798      	blx	r3
  40154a:	2800      	cmp	r0, #0
  40154c:	db43      	blt.n	4015d6 <_pio_init+0xa6>
  40154e:	4d27      	ldr	r5, [pc, #156]	; (4015ec <_pio_init+0xbc>)
  401550:	00c2      	lsls	r2, r0, #3
  401552:	1a11      	subs	r1, r2, r0
  401554:	008b      	lsls	r3, r1, #2
  401556:	442b      	add	r3, r5
  401558:	6899      	ldr	r1, [r3, #8]
  40155a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  40155e:	68d9      	ldr	r1, [r3, #12]
  401560:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
  401564:	6919      	ldr	r1, [r3, #16]
  401566:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
  40156a:	699b      	ldr	r3, [r3, #24]
  40156c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  401570:	1a10      	subs	r0, r2, r0
  401572:	0083      	lsls	r3, r0, #2
  401574:	442b      	add	r3, r5
  401576:	695b      	ldr	r3, [r3, #20]
  401578:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
  40157c:	4620      	mov	r0, r4
  40157e:	4b1c      	ldr	r3, [pc, #112]	; (4015f0 <_pio_init+0xc0>)
  401580:	4798      	blx	r3
  401582:	4428      	add	r0, r5
  401584:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401588:	2b00      	cmp	r3, #0
  40158a:	db0c      	blt.n	4015a6 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40158c:	095a      	lsrs	r2, r3, #5
  40158e:	f003 001f 	and.w	r0, r3, #31
  401592:	2101      	movs	r1, #1
  401594:	4081      	lsls	r1, r0
  401596:	3220      	adds	r2, #32
  401598:	4816      	ldr	r0, [pc, #88]	; (4015f4 <_pio_init+0xc4>)
  40159a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40159e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015a2:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4015a6:	2b00      	cmp	r3, #0
  4015a8:	db08      	blt.n	4015bc <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015aa:	095a      	lsrs	r2, r3, #5
  4015ac:	f003 001f 	and.w	r0, r3, #31
  4015b0:	2101      	movs	r1, #1
  4015b2:	4081      	lsls	r1, r0
  4015b4:	3260      	adds	r2, #96	; 0x60
  4015b6:	480f      	ldr	r0, [pc, #60]	; (4015f4 <_pio_init+0xc4>)
  4015b8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4015bc:	2b00      	cmp	r3, #0
  4015be:	db0d      	blt.n	4015dc <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015c0:	0959      	lsrs	r1, r3, #5
  4015c2:	f003 031f 	and.w	r3, r3, #31
  4015c6:	2201      	movs	r2, #1
  4015c8:	fa02 f303 	lsl.w	r3, r2, r3
  4015cc:	4a09      	ldr	r2, [pc, #36]	; (4015f4 <_pio_init+0xc4>)
  4015ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  4015d2:	2000      	movs	r0, #0
  4015d4:	bd38      	pop	{r3, r4, r5, pc}
  4015d6:	f06f 0010 	mvn.w	r0, #16
  4015da:	bd38      	pop	{r3, r4, r5, pc}
  4015dc:	2000      	movs	r0, #0
  4015de:	bd38      	pop	{r3, r4, r5, pc}
  4015e0:	00403460 	.word	0x00403460
  4015e4:	004011a1 	.word	0x004011a1
  4015e8:	004014e5 	.word	0x004014e5
  4015ec:	00403424 	.word	0x00403424
  4015f0:	004014bd 	.word	0x004014bd
  4015f4:	e000e100 	.word	0xe000e100

004015f8 <PIOB_Handler>:
  4015f8:	b508      	push	{r3, lr}
  4015fa:	4b01      	ldr	r3, [pc, #4]	; (401600 <PIOB_Handler+0x8>)
  4015fc:	4798      	blx	r3
  4015fe:	bd08      	pop	{r3, pc}
  401600:	0040140d 	.word	0x0040140d

00401604 <PIOA_Handler>:
  401604:	b508      	push	{r3, lr}
  401606:	4b01      	ldr	r3, [pc, #4]	; (40160c <PIOA_Handler+0x8>)
  401608:	4798      	blx	r3
  40160a:	bd08      	pop	{r3, pc}
  40160c:	0040140d 	.word	0x0040140d

00401610 <_ext_irq_init>:
  401610:	b538      	push	{r3, r4, r5, lr}
  401612:	4605      	mov	r5, r0
  401614:	4804      	ldr	r0, [pc, #16]	; (401628 <_ext_irq_init+0x18>)
  401616:	4c05      	ldr	r4, [pc, #20]	; (40162c <_ext_irq_init+0x1c>)
  401618:	47a0      	blx	r4
  40161a:	4805      	ldr	r0, [pc, #20]	; (401630 <_ext_irq_init+0x20>)
  40161c:	47a0      	blx	r4
  40161e:	4b05      	ldr	r3, [pc, #20]	; (401634 <_ext_irq_init+0x24>)
  401620:	601d      	str	r5, [r3, #0]
  401622:	2000      	movs	r0, #0
  401624:	bd38      	pop	{r3, r4, r5, pc}
  401626:	bf00      	nop
  401628:	400e0e00 	.word	0x400e0e00
  40162c:	00401531 	.word	0x00401531
  401630:	400e1000 	.word	0x400e1000
  401634:	204000c4 	.word	0x204000c4

00401638 <_ext_irq_enable>:
  401638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40163c:	4604      	mov	r4, r0
  40163e:	460f      	mov	r7, r1
  401640:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401694 <_ext_irq_enable+0x5c>
  401644:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  401648:	4641      	mov	r1, r8
  40164a:	289f      	cmp	r0, #159	; 0x9f
  40164c:	bf8c      	ite	hi
  40164e:	2000      	movhi	r0, #0
  401650:	2001      	movls	r0, #1
  401652:	4e0e      	ldr	r6, [pc, #56]	; (40168c <_ext_irq_enable+0x54>)
  401654:	47b0      	blx	r6
  401656:	b2e5      	uxtb	r5, r4
  401658:	22c3      	movs	r2, #195	; 0xc3
  40165a:	4641      	mov	r1, r8
  40165c:	2d9f      	cmp	r5, #159	; 0x9f
  40165e:	bf8c      	ite	hi
  401660:	2000      	movhi	r0, #0
  401662:	2001      	movls	r0, #1
  401664:	47b0      	blx	r6
  401666:	096d      	lsrs	r5, r5, #5
  401668:	4b09      	ldr	r3, [pc, #36]	; (401690 <_ext_irq_enable+0x58>)
  40166a:	eb03 2545 	add.w	r5, r3, r5, lsl #9
  40166e:	f004 041f 	and.w	r4, r4, #31
  401672:	b937      	cbnz	r7, 401682 <_ext_irq_enable+0x4a>
  401674:	2301      	movs	r3, #1
  401676:	fa03 f404 	lsl.w	r4, r3, r4
  40167a:	646c      	str	r4, [r5, #68]	; 0x44
  40167c:	2000      	movs	r0, #0
  40167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401682:	2301      	movs	r3, #1
  401684:	fa03 f404 	lsl.w	r4, r3, r4
  401688:	642c      	str	r4, [r5, #64]	; 0x40
  40168a:	e7f7      	b.n	40167c <_ext_irq_enable+0x44>
  40168c:	004011a1 	.word	0x004011a1
  401690:	400e0e00 	.word	0x400e0e00
  401694:	00403460 	.word	0x00403460

00401698 <_pmc_init_sources>:
  401698:	4a14      	ldr	r2, [pc, #80]	; (4016ec <_pmc_init_sources+0x54>)
  40169a:	6a11      	ldr	r1, [r2, #32]
  40169c:	4b14      	ldr	r3, [pc, #80]	; (4016f0 <_pmc_init_sources+0x58>)
  40169e:	430b      	orrs	r3, r1
  4016a0:	6213      	str	r3, [r2, #32]
  4016a2:	4b12      	ldr	r3, [pc, #72]	; (4016ec <_pmc_init_sources+0x54>)
  4016a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4016aa:	d0fa      	beq.n	4016a2 <_pmc_init_sources+0xa>
  4016ac:	490f      	ldr	r1, [pc, #60]	; (4016ec <_pmc_init_sources+0x54>)
  4016ae:	6a0a      	ldr	r2, [r1, #32]
  4016b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4016b4:	4b0f      	ldr	r3, [pc, #60]	; (4016f4 <_pmc_init_sources+0x5c>)
  4016b6:	4313      	orrs	r3, r2
  4016b8:	620b      	str	r3, [r1, #32]
  4016ba:	4b0c      	ldr	r3, [pc, #48]	; (4016ec <_pmc_init_sources+0x54>)
  4016bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4016c2:	d0fa      	beq.n	4016ba <_pmc_init_sources+0x22>
  4016c4:	4b09      	ldr	r3, [pc, #36]	; (4016ec <_pmc_init_sources+0x54>)
  4016c6:	6a1a      	ldr	r2, [r3, #32]
  4016c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4016cc:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4016d0:	621a      	str	r2, [r3, #32]
  4016d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
  4016d4:	4a08      	ldr	r2, [pc, #32]	; (4016f8 <_pmc_init_sources+0x60>)
  4016d6:	400a      	ands	r2, r1
  4016d8:	629a      	str	r2, [r3, #40]	; 0x28
  4016da:	4a08      	ldr	r2, [pc, #32]	; (4016fc <_pmc_init_sources+0x64>)
  4016dc:	629a      	str	r2, [r3, #40]	; 0x28
  4016de:	4b03      	ldr	r3, [pc, #12]	; (4016ec <_pmc_init_sources+0x54>)
  4016e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016e2:	f013 0f02 	tst.w	r3, #2
  4016e6:	d0fa      	beq.n	4016de <_pmc_init_sources+0x46>
  4016e8:	4770      	bx	lr
  4016ea:	bf00      	nop
  4016ec:	400e0600 	.word	0x400e0600
  4016f0:	00370008 	.word	0x00370008
  4016f4:	00370020 	.word	0x00370020
  4016f8:	f800ffff 	.word	0xf800ffff
  4016fc:	20183f01 	.word	0x20183f01

00401700 <_pmc_init_master_clock>:
  401700:	4a11      	ldr	r2, [pc, #68]	; (401748 <_pmc_init_master_clock+0x48>)
  401702:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401708:	6313      	str	r3, [r2, #48]	; 0x30
  40170a:	4b0f      	ldr	r3, [pc, #60]	; (401748 <_pmc_init_master_clock+0x48>)
  40170c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40170e:	f013 0f08 	tst.w	r3, #8
  401712:	d0fa      	beq.n	40170a <_pmc_init_master_clock+0xa>
  401714:	4a0c      	ldr	r2, [pc, #48]	; (401748 <_pmc_init_master_clock+0x48>)
  401716:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401720:	6313      	str	r3, [r2, #48]	; 0x30
  401722:	4b09      	ldr	r3, [pc, #36]	; (401748 <_pmc_init_master_clock+0x48>)
  401724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401726:	f013 0f08 	tst.w	r3, #8
  40172a:	d0fa      	beq.n	401722 <_pmc_init_master_clock+0x22>
  40172c:	4a06      	ldr	r2, [pc, #24]	; (401748 <_pmc_init_master_clock+0x48>)
  40172e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401730:	f023 0303 	bic.w	r3, r3, #3
  401734:	f043 0302 	orr.w	r3, r3, #2
  401738:	6313      	str	r3, [r2, #48]	; 0x30
  40173a:	4b03      	ldr	r3, [pc, #12]	; (401748 <_pmc_init_master_clock+0x48>)
  40173c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40173e:	f013 0f08 	tst.w	r3, #8
  401742:	d0fa      	beq.n	40173a <_pmc_init_master_clock+0x3a>
  401744:	4770      	bx	lr
  401746:	bf00      	nop
  401748:	400e0600 	.word	0x400e0600

0040174c <_pmc_init>:
  40174c:	b508      	push	{r3, lr}
  40174e:	4b02      	ldr	r3, [pc, #8]	; (401758 <_pmc_init+0xc>)
  401750:	4798      	blx	r3
  401752:	4b02      	ldr	r3, [pc, #8]	; (40175c <_pmc_init+0x10>)
  401754:	4798      	blx	r3
  401756:	bd08      	pop	{r3, pc}
  401758:	00401699 	.word	0x00401699
  40175c:	00401701 	.word	0x00401701

00401760 <_pwm_get_cfg>:
  401760:	2300      	movs	r3, #0
  401762:	2b01      	cmp	r3, #1
  401764:	d80f      	bhi.n	401786 <_pwm_get_cfg+0x26>
  401766:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40176a:	008a      	lsls	r2, r1, #2
  40176c:	4907      	ldr	r1, [pc, #28]	; (40178c <_pwm_get_cfg+0x2c>)
  40176e:	588a      	ldr	r2, [r1, r2]
  401770:	4282      	cmp	r2, r0
  401772:	d002      	beq.n	40177a <_pwm_get_cfg+0x1a>
  401774:	3301      	adds	r3, #1
  401776:	b2db      	uxtb	r3, r3
  401778:	e7f3      	b.n	401762 <_pwm_get_cfg+0x2>
  40177a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40177e:	009a      	lsls	r2, r3, #2
  401780:	4608      	mov	r0, r1
  401782:	4410      	add	r0, r2
  401784:	4770      	bx	lr
  401786:	2000      	movs	r0, #0
  401788:	4770      	bx	lr
  40178a:	bf00      	nop
  40178c:	0040347c 	.word	0x0040347c

00401790 <_pwm_init_irq_param>:
  401790:	4b06      	ldr	r3, [pc, #24]	; (4017ac <_pwm_init_irq_param+0x1c>)
  401792:	4298      	cmp	r0, r3
  401794:	d003      	beq.n	40179e <_pwm_init_irq_param+0xe>
  401796:	4b06      	ldr	r3, [pc, #24]	; (4017b0 <_pwm_init_irq_param+0x20>)
  401798:	4298      	cmp	r0, r3
  40179a:	d003      	beq.n	4017a4 <_pwm_init_irq_param+0x14>
  40179c:	4770      	bx	lr
  40179e:	4b05      	ldr	r3, [pc, #20]	; (4017b4 <_pwm_init_irq_param+0x24>)
  4017a0:	6019      	str	r1, [r3, #0]
  4017a2:	e7f8      	b.n	401796 <_pwm_init_irq_param+0x6>
  4017a4:	4b03      	ldr	r3, [pc, #12]	; (4017b4 <_pwm_init_irq_param+0x24>)
  4017a6:	6059      	str	r1, [r3, #4]
  4017a8:	e7f8      	b.n	40179c <_pwm_init_irq_param+0xc>
  4017aa:	bf00      	nop
  4017ac:	40020000 	.word	0x40020000
  4017b0:	4005c000 	.word	0x4005c000
  4017b4:	204000c8 	.word	0x204000c8

004017b8 <_pwm_interrupt_handler>:
  4017b8:	b508      	push	{r3, lr}
  4017ba:	6903      	ldr	r3, [r0, #16]
  4017bc:	69db      	ldr	r3, [r3, #28]
  4017be:	b113      	cbz	r3, 4017c6 <_pwm_interrupt_handler+0xe>
  4017c0:	6803      	ldr	r3, [r0, #0]
  4017c2:	b103      	cbz	r3, 4017c6 <_pwm_interrupt_handler+0xe>
  4017c4:	4798      	blx	r3
  4017c6:	bd08      	pop	{r3, pc}

004017c8 <PWM0_Handler>:
  4017c8:	b508      	push	{r3, lr}
  4017ca:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <PWM0_Handler+0xc>)
  4017cc:	6818      	ldr	r0, [r3, #0]
  4017ce:	4b02      	ldr	r3, [pc, #8]	; (4017d8 <PWM0_Handler+0x10>)
  4017d0:	4798      	blx	r3
  4017d2:	bd08      	pop	{r3, pc}
  4017d4:	204000c8 	.word	0x204000c8
  4017d8:	004017b9 	.word	0x004017b9

004017dc <PWM1_Handler>:
  4017dc:	b508      	push	{r3, lr}
  4017de:	4b02      	ldr	r3, [pc, #8]	; (4017e8 <PWM1_Handler+0xc>)
  4017e0:	6858      	ldr	r0, [r3, #4]
  4017e2:	4b02      	ldr	r3, [pc, #8]	; (4017ec <PWM1_Handler+0x10>)
  4017e4:	4798      	blx	r3
  4017e6:	bd08      	pop	{r3, pc}
  4017e8:	204000c8 	.word	0x204000c8
  4017ec:	004017b9 	.word	0x004017b9

004017f0 <_pwm_init>:
  4017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017f2:	4606      	mov	r6, r0
  4017f4:	460c      	mov	r4, r1
  4017f6:	1c08      	adds	r0, r1, #0
  4017f8:	bf18      	it	ne
  4017fa:	2001      	movne	r0, #1
  4017fc:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401800:	4944      	ldr	r1, [pc, #272]	; (401914 <_pwm_init+0x124>)
  401802:	4b45      	ldr	r3, [pc, #276]	; (401918 <_pwm_init+0x128>)
  401804:	4798      	blx	r3
  401806:	4620      	mov	r0, r4
  401808:	4b44      	ldr	r3, [pc, #272]	; (40191c <_pwm_init+0x12c>)
  40180a:	4798      	blx	r3
  40180c:	4605      	mov	r5, r0
  40180e:	6134      	str	r4, [r6, #16]
  401810:	6883      	ldr	r3, [r0, #8]
  401812:	6023      	str	r3, [r4, #0]
  401814:	68c3      	ldr	r3, [r0, #12]
  401816:	67e3      	str	r3, [r4, #124]	; 0x7c
  401818:	6903      	ldr	r3, [r0, #16]
  40181a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40181e:	6943      	ldr	r3, [r0, #20]
  401820:	65e3      	str	r3, [r4, #92]	; 0x5c
  401822:	6983      	ldr	r3, [r0, #24]
  401824:	66a3      	str	r3, [r4, #104]	; 0x68
  401826:	69c3      	ldr	r3, [r0, #28]
  401828:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  40182c:	6a03      	ldr	r3, [r0, #32]
  40182e:	66e3      	str	r3, [r4, #108]	; 0x6c
  401830:	6a43      	ldr	r3, [r0, #36]	; 0x24
  401832:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  401836:	6a83      	ldr	r3, [r0, #40]	; 0x28
  401838:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  40183c:	2300      	movs	r3, #0
  40183e:	e019      	b.n	401874 <_pwm_init+0x84>
  401840:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401842:	0118      	lsls	r0, r3, #4
  401844:	eb07 0e00 	add.w	lr, r7, r0
  401848:	5c3a      	ldrb	r2, [r7, r0]
  40184a:	f8de 1004 	ldr.w	r1, [lr, #4]
  40184e:	3210      	adds	r2, #16
  401850:	0152      	lsls	r2, r2, #5
  401852:	50a1      	str	r1, [r4, r2]
  401854:	5c3a      	ldrb	r2, [r7, r0]
  401856:	f8de 100c 	ldr.w	r1, [lr, #12]
  40185a:	3210      	adds	r2, #16
  40185c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401860:	6051      	str	r1, [r2, #4]
  401862:	5c3a      	ldrb	r2, [r7, r0]
  401864:	f8de 1008 	ldr.w	r1, [lr, #8]
  401868:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40186c:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
  401870:	3301      	adds	r3, #1
  401872:	b25b      	sxtb	r3, r3
  401874:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401876:	4293      	cmp	r3, r2
  401878:	d3e2      	bcc.n	401840 <_pwm_init+0x50>
  40187a:	2300      	movs	r3, #0
  40187c:	e014      	b.n	4018a8 <_pwm_init+0xb8>
  40187e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401880:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401884:	0082      	lsls	r2, r0, #2
  401886:	eb01 0e02 	add.w	lr, r1, r2
  40188a:	5c88      	ldrb	r0, [r1, r2]
  40188c:	f8de 7004 	ldr.w	r7, [lr, #4]
  401890:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401894:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
  401898:	5c8a      	ldrb	r2, [r1, r2]
  40189a:	f8de 1008 	ldr.w	r1, [lr, #8]
  40189e:	3213      	adds	r2, #19
  4018a0:	0112      	lsls	r2, r2, #4
  4018a2:	50a1      	str	r1, [r4, r2]
  4018a4:	3301      	adds	r3, #1
  4018a6:	b25b      	sxtb	r3, r3
  4018a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4018aa:	4293      	cmp	r3, r2
  4018ac:	d3e7      	bcc.n	40187e <_pwm_init+0x8e>
  4018ae:	4631      	mov	r1, r6
  4018b0:	4620      	mov	r0, r4
  4018b2:	4b1b      	ldr	r3, [pc, #108]	; (401920 <_pwm_init+0x130>)
  4018b4:	4798      	blx	r3
  4018b6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4018ba:	2b00      	cmp	r3, #0
  4018bc:	db0d      	blt.n	4018da <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018be:	095a      	lsrs	r2, r3, #5
  4018c0:	f003 031f 	and.w	r3, r3, #31
  4018c4:	2101      	movs	r1, #1
  4018c6:	fa01 f303 	lsl.w	r3, r1, r3
  4018ca:	3220      	adds	r2, #32
  4018cc:	4915      	ldr	r1, [pc, #84]	; (401924 <_pwm_init+0x134>)
  4018ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4018d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4018d6:	f3bf 8f6f 	isb	sy
  4018da:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4018de:	2b00      	cmp	r3, #0
  4018e0:	db09      	blt.n	4018f6 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018e2:	095a      	lsrs	r2, r3, #5
  4018e4:	f003 031f 	and.w	r3, r3, #31
  4018e8:	2101      	movs	r1, #1
  4018ea:	fa01 f303 	lsl.w	r3, r1, r3
  4018ee:	3260      	adds	r2, #96	; 0x60
  4018f0:	490c      	ldr	r1, [pc, #48]	; (401924 <_pwm_init+0x134>)
  4018f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4018f6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4018fa:	2b00      	cmp	r3, #0
  4018fc:	db08      	blt.n	401910 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018fe:	0959      	lsrs	r1, r3, #5
  401900:	f003 031f 	and.w	r3, r3, #31
  401904:	2201      	movs	r2, #1
  401906:	fa02 f303 	lsl.w	r3, r2, r3
  40190a:	4a06      	ldr	r2, [pc, #24]	; (401924 <_pwm_init+0x134>)
  40190c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401910:	2000      	movs	r0, #0
  401912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401914:	00403544 	.word	0x00403544
  401918:	004011a1 	.word	0x004011a1
  40191c:	00401761 	.word	0x00401761
  401920:	00401791 	.word	0x00401791
  401924:	e000e100 	.word	0xe000e100

00401928 <_pwm_enable>:
  401928:	b538      	push	{r3, r4, r5, lr}
  40192a:	4604      	mov	r4, r0
  40192c:	f240 12b5 	movw	r2, #437	; 0x1b5
  401930:	490b      	ldr	r1, [pc, #44]	; (401960 <_pwm_enable+0x38>)
  401932:	3000      	adds	r0, #0
  401934:	bf18      	it	ne
  401936:	2001      	movne	r0, #1
  401938:	4b0a      	ldr	r3, [pc, #40]	; (401964 <_pwm_enable+0x3c>)
  40193a:	4798      	blx	r3
  40193c:	6920      	ldr	r0, [r4, #16]
  40193e:	4b0a      	ldr	r3, [pc, #40]	; (401968 <_pwm_enable+0x40>)
  401940:	4798      	blx	r3
  401942:	2300      	movs	r3, #0
  401944:	e008      	b.n	401958 <_pwm_enable+0x30>
  401946:	6921      	ldr	r1, [r4, #16]
  401948:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40194a:	011a      	lsls	r2, r3, #4
  40194c:	5cad      	ldrb	r5, [r5, r2]
  40194e:	2201      	movs	r2, #1
  401950:	40aa      	lsls	r2, r5
  401952:	604a      	str	r2, [r1, #4]
  401954:	3301      	adds	r3, #1
  401956:	b25b      	sxtb	r3, r3
  401958:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40195a:	4293      	cmp	r3, r2
  40195c:	d3f3      	bcc.n	401946 <_pwm_enable+0x1e>
  40195e:	bd38      	pop	{r3, r4, r5, pc}
  401960:	00403544 	.word	0x00403544
  401964:	004011a1 	.word	0x004011a1
  401968:	00401761 	.word	0x00401761

0040196c <_pwm_is_enabled>:
  40196c:	b510      	push	{r4, lr}
  40196e:	4604      	mov	r4, r0
  401970:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401974:	4907      	ldr	r1, [pc, #28]	; (401994 <_pwm_is_enabled+0x28>)
  401976:	3000      	adds	r0, #0
  401978:	bf18      	it	ne
  40197a:	2001      	movne	r0, #1
  40197c:	4b06      	ldr	r3, [pc, #24]	; (401998 <_pwm_is_enabled+0x2c>)
  40197e:	4798      	blx	r3
  401980:	6923      	ldr	r3, [r4, #16]
  401982:	68db      	ldr	r3, [r3, #12]
  401984:	f013 0f0f 	tst.w	r3, #15
  401988:	d001      	beq.n	40198e <_pwm_is_enabled+0x22>
  40198a:	2001      	movs	r0, #1
  40198c:	bd10      	pop	{r4, pc}
  40198e:	2000      	movs	r0, #0
  401990:	bd10      	pop	{r4, pc}
  401992:	bf00      	nop
  401994:	00403544 	.word	0x00403544
  401998:	004011a1 	.word	0x004011a1

0040199c <_pwm_get_pwm>:
  40199c:	2000      	movs	r0, #0
  40199e:	4770      	bx	lr

004019a0 <_spi_sync_enable>:
  4019a0:	2301      	movs	r3, #1
  4019a2:	6003      	str	r3, [r0, #0]
  4019a4:	2000      	movs	r0, #0
  4019a6:	4770      	bx	lr

004019a8 <_spi_get_hardware_index>:
  4019a8:	4b04      	ldr	r3, [pc, #16]	; (4019bc <_spi_get_hardware_index+0x14>)
  4019aa:	4403      	add	r3, r0
  4019ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
  4019b0:	2b05      	cmp	r3, #5
  4019b2:	d001      	beq.n	4019b8 <_spi_get_hardware_index+0x10>
  4019b4:	2000      	movs	r0, #0
  4019b6:	4770      	bx	lr
  4019b8:	2001      	movs	r0, #1
  4019ba:	4770      	bx	lr
  4019bc:	bfff8000 	.word	0xbfff8000

004019c0 <_spi_m_sync_init>:
  4019c0:	b570      	push	{r4, r5, r6, lr}
  4019c2:	4606      	mov	r6, r0
  4019c4:	460c      	mov	r4, r1
  4019c6:	4608      	mov	r0, r1
  4019c8:	4b20      	ldr	r3, [pc, #128]	; (401a4c <_spi_m_sync_init+0x8c>)
  4019ca:	4798      	blx	r3
  4019cc:	2300      	movs	r3, #0
  4019ce:	b33b      	cbz	r3, 401a20 <_spi_m_sync_init+0x60>
  4019d0:	2500      	movs	r5, #0
  4019d2:	f240 122f 	movw	r2, #303	; 0x12f
  4019d6:	491e      	ldr	r1, [pc, #120]	; (401a50 <_spi_m_sync_init+0x90>)
  4019d8:	2e00      	cmp	r6, #0
  4019da:	bf18      	it	ne
  4019dc:	2c00      	cmpne	r4, #0
  4019de:	bf14      	ite	ne
  4019e0:	2001      	movne	r0, #1
  4019e2:	2000      	moveq	r0, #0
  4019e4:	4b1b      	ldr	r3, [pc, #108]	; (401a54 <_spi_m_sync_init+0x94>)
  4019e6:	4798      	blx	r3
  4019e8:	b355      	cbz	r5, 401a40 <_spi_m_sync_init+0x80>
  4019ea:	6923      	ldr	r3, [r4, #16]
  4019ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4019f0:	d129      	bne.n	401a46 <_spi_m_sync_init+0x86>
  4019f2:	2380      	movs	r3, #128	; 0x80
  4019f4:	6023      	str	r3, [r4, #0]
  4019f6:	6034      	str	r4, [r6, #0]
  4019f8:	686a      	ldr	r2, [r5, #4]
  4019fa:	4b17      	ldr	r3, [pc, #92]	; (401a58 <_spi_m_sync_init+0x98>)
  4019fc:	4013      	ands	r3, r2
  4019fe:	6023      	str	r3, [r4, #0]
  401a00:	68ab      	ldr	r3, [r5, #8]
  401a02:	4a16      	ldr	r2, [pc, #88]	; (401a5c <_spi_m_sync_init+0x9c>)
  401a04:	401a      	ands	r2, r3
  401a06:	4b16      	ldr	r3, [pc, #88]	; (401a60 <_spi_m_sync_init+0xa0>)
  401a08:	4313      	orrs	r3, r2
  401a0a:	6063      	str	r3, [r4, #4]
  401a0c:	68eb      	ldr	r3, [r5, #12]
  401a0e:	6323      	str	r3, [r4, #48]	; 0x30
  401a10:	8a2b      	ldrh	r3, [r5, #16]
  401a12:	80f3      	strh	r3, [r6, #6]
  401a14:	68eb      	ldr	r3, [r5, #12]
  401a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401a1a:	7133      	strb	r3, [r6, #4]
  401a1c:	2000      	movs	r0, #0
  401a1e:	bd70      	pop	{r4, r5, r6, pc}
  401a20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a24:	008a      	lsls	r2, r1, #2
  401a26:	490f      	ldr	r1, [pc, #60]	; (401a64 <_spi_m_sync_init+0xa4>)
  401a28:	5c8a      	ldrb	r2, [r1, r2]
  401a2a:	4290      	cmp	r0, r2
  401a2c:	d002      	beq.n	401a34 <_spi_m_sync_init+0x74>
  401a2e:	3301      	adds	r3, #1
  401a30:	b2db      	uxtb	r3, r3
  401a32:	e7cc      	b.n	4019ce <_spi_m_sync_init+0xe>
  401a34:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401a38:	00ab      	lsls	r3, r5, #2
  401a3a:	460d      	mov	r5, r1
  401a3c:	441d      	add	r5, r3
  401a3e:	e7c8      	b.n	4019d2 <_spi_m_sync_init+0x12>
  401a40:	f06f 000c 	mvn.w	r0, #12
  401a44:	bd70      	pop	{r4, r5, r6, pc}
  401a46:	f06f 0010 	mvn.w	r0, #16
  401a4a:	bd70      	pop	{r4, r5, r6, pc}
  401a4c:	004019a9 	.word	0x004019a9
  401a50:	00403570 	.word	0x00403570
  401a54:	004011a1 	.word	0x004011a1
  401a58:	feffff7c 	.word	0xfeffff7c
  401a5c:	fff1ff6f 	.word	0xfff1ff6f
  401a60:	000e0010 	.word	0x000e0010
  401a64:	0040355c 	.word	0x0040355c

00401a68 <_spi_m_sync_enable>:
  401a68:	b510      	push	{r4, lr}
  401a6a:	4604      	mov	r4, r0
  401a6c:	b168      	cbz	r0, 401a8a <_spi_m_sync_enable+0x22>
  401a6e:	6803      	ldr	r3, [r0, #0]
  401a70:	b14b      	cbz	r3, 401a86 <_spi_m_sync_enable+0x1e>
  401a72:	2001      	movs	r0, #1
  401a74:	f240 126d 	movw	r2, #365	; 0x16d
  401a78:	4905      	ldr	r1, [pc, #20]	; (401a90 <_spi_m_sync_enable+0x28>)
  401a7a:	4b06      	ldr	r3, [pc, #24]	; (401a94 <_spi_m_sync_enable+0x2c>)
  401a7c:	4798      	blx	r3
  401a7e:	6820      	ldr	r0, [r4, #0]
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <_spi_m_sync_enable+0x30>)
  401a82:	4798      	blx	r3
  401a84:	bd10      	pop	{r4, pc}
  401a86:	2000      	movs	r0, #0
  401a88:	e7f4      	b.n	401a74 <_spi_m_sync_enable+0xc>
  401a8a:	2000      	movs	r0, #0
  401a8c:	e7f2      	b.n	401a74 <_spi_m_sync_enable+0xc>
  401a8e:	bf00      	nop
  401a90:	00403570 	.word	0x00403570
  401a94:	004011a1 	.word	0x004011a1
  401a98:	004019a1 	.word	0x004019a1

00401a9c <_spi_m_sync_trans>:
  401a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401aa0:	b086      	sub	sp, #24
  401aa2:	4607      	mov	r7, r0
  401aa4:	460d      	mov	r5, r1
  401aa6:	6804      	ldr	r4, [r0, #0]
  401aa8:	680b      	ldr	r3, [r1, #0]
  401aaa:	9301      	str	r3, [sp, #4]
  401aac:	684b      	ldr	r3, [r1, #4]
  401aae:	9302      	str	r3, [sp, #8]
  401ab0:	2300      	movs	r3, #0
  401ab2:	9303      	str	r3, [sp, #12]
  401ab4:	9304      	str	r3, [sp, #16]
  401ab6:	7903      	ldrb	r3, [r0, #4]
  401ab8:	f88d 3014 	strb.w	r3, [sp, #20]
  401abc:	1c26      	adds	r6, r4, #0
  401abe:	bf18      	it	ne
  401ac0:	2601      	movne	r6, #1
  401ac2:	f44f 720b 	mov.w	r2, #556	; 0x22c
  401ac6:	4933      	ldr	r1, [pc, #204]	; (401b94 <_spi_m_sync_trans+0xf8>)
  401ac8:	2800      	cmp	r0, #0
  401aca:	bf0c      	ite	eq
  401acc:	2000      	moveq	r0, #0
  401ace:	f006 0001 	andne.w	r0, r6, #1
  401ad2:	4b31      	ldr	r3, [pc, #196]	; (401b98 <_spi_m_sync_trans+0xfc>)
  401ad4:	4798      	blx	r3
  401ad6:	6923      	ldr	r3, [r4, #16]
  401ad8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401adc:	d122      	bne.n	401b24 <_spi_m_sync_trans+0x88>
  401ade:	f06f 0013 	mvn.w	r0, #19
  401ae2:	e053      	b.n	401b8c <_spi_m_sync_trans+0xf0>
  401ae4:	2300      	movs	r3, #0
  401ae6:	e035      	b.n	401b54 <_spi_m_sync_trans+0xb8>
  401ae8:	7850      	ldrb	r0, [r2, #1]
  401aea:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401aee:	3202      	adds	r2, #2
  401af0:	9201      	str	r2, [sp, #4]
  401af2:	3301      	adds	r3, #1
  401af4:	9303      	str	r3, [sp, #12]
  401af6:	60e1      	str	r1, [r4, #12]
  401af8:	f8d4 8010 	ldr.w	r8, [r4, #16]
  401afc:	f240 221d 	movw	r2, #541	; 0x21d
  401b00:	4924      	ldr	r1, [pc, #144]	; (401b94 <_spi_m_sync_trans+0xf8>)
  401b02:	4630      	mov	r0, r6
  401b04:	4b24      	ldr	r3, [pc, #144]	; (401b98 <_spi_m_sync_trans+0xfc>)
  401b06:	4798      	blx	r3
  401b08:	f018 0f08 	tst.w	r8, #8
  401b0c:	d038      	beq.n	401b80 <_spi_m_sync_trans+0xe4>
  401b0e:	f06f 0012 	mvn.w	r0, #18
  401b12:	2800      	cmp	r0, #0
  401b14:	db36      	blt.n	401b84 <_spi_m_sync_trans+0xe8>
  401b16:	9803      	ldr	r0, [sp, #12]
  401b18:	68ab      	ldr	r3, [r5, #8]
  401b1a:	4298      	cmp	r0, r3
  401b1c:	d302      	bcc.n	401b24 <_spi_m_sync_trans+0x88>
  401b1e:	9a04      	ldr	r2, [sp, #16]
  401b20:	4293      	cmp	r3, r2
  401b22:	d92f      	bls.n	401b84 <_spi_m_sync_trans+0xe8>
  401b24:	6923      	ldr	r3, [r4, #16]
  401b26:	f013 0f01 	tst.w	r3, #1
  401b2a:	d0db      	beq.n	401ae4 <_spi_m_sync_trans+0x48>
  401b2c:	68a3      	ldr	r3, [r4, #8]
  401b2e:	b29b      	uxth	r3, r3
  401b30:	9a02      	ldr	r2, [sp, #8]
  401b32:	b15a      	cbz	r2, 401b4c <_spi_m_sync_trans+0xb0>
  401b34:	1c51      	adds	r1, r2, #1
  401b36:	9102      	str	r1, [sp, #8]
  401b38:	7013      	strb	r3, [r2, #0]
  401b3a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401b3e:	2a01      	cmp	r2, #1
  401b40:	d904      	bls.n	401b4c <_spi_m_sync_trans+0xb0>
  401b42:	460a      	mov	r2, r1
  401b44:	3101      	adds	r1, #1
  401b46:	9102      	str	r1, [sp, #8]
  401b48:	0a1b      	lsrs	r3, r3, #8
  401b4a:	7013      	strb	r3, [r2, #0]
  401b4c:	9b04      	ldr	r3, [sp, #16]
  401b4e:	3301      	adds	r3, #1
  401b50:	9304      	str	r3, [sp, #16]
  401b52:	2301      	movs	r3, #1
  401b54:	2b00      	cmp	r3, #0
  401b56:	d1cf      	bne.n	401af8 <_spi_m_sync_trans+0x5c>
  401b58:	9b03      	ldr	r3, [sp, #12]
  401b5a:	9a04      	ldr	r2, [sp, #16]
  401b5c:	429a      	cmp	r2, r3
  401b5e:	d3cb      	bcc.n	401af8 <_spi_m_sync_trans+0x5c>
  401b60:	88f9      	ldrh	r1, [r7, #6]
  401b62:	6922      	ldr	r2, [r4, #16]
  401b64:	f012 0f02 	tst.w	r2, #2
  401b68:	d0c6      	beq.n	401af8 <_spi_m_sync_trans+0x5c>
  401b6a:	9a01      	ldr	r2, [sp, #4]
  401b6c:	2a00      	cmp	r2, #0
  401b6e:	d0c0      	beq.n	401af2 <_spi_m_sync_trans+0x56>
  401b70:	1c51      	adds	r1, r2, #1
  401b72:	9101      	str	r1, [sp, #4]
  401b74:	7811      	ldrb	r1, [r2, #0]
  401b76:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401b7a:	2801      	cmp	r0, #1
  401b7c:	d8b4      	bhi.n	401ae8 <_spi_m_sync_trans+0x4c>
  401b7e:	e7b8      	b.n	401af2 <_spi_m_sync_trans+0x56>
  401b80:	2000      	movs	r0, #0
  401b82:	e7c6      	b.n	401b12 <_spi_m_sync_trans+0x76>
  401b84:	6923      	ldr	r3, [r4, #16]
  401b86:	f413 7f00 	tst.w	r3, #512	; 0x200
  401b8a:	d0fb      	beq.n	401b84 <_spi_m_sync_trans+0xe8>
  401b8c:	b006      	add	sp, #24
  401b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b92:	bf00      	nop
  401b94:	00403570 	.word	0x00403570
  401b98:	004011a1 	.word	0x004011a1

00401b9c <_spi_get_spi_m_sync>:
  401b9c:	2000      	movs	r0, #0
  401b9e:	4770      	bx	lr

00401ba0 <_system_time_init>:
  401ba0:	4b03      	ldr	r3, [pc, #12]	; (401bb0 <_system_time_init+0x10>)
  401ba2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401ba6:	605a      	str	r2, [r3, #4]
  401ba8:	2205      	movs	r2, #5
  401baa:	601a      	str	r2, [r3, #0]
  401bac:	4770      	bx	lr
  401bae:	bf00      	nop
  401bb0:	e000e010 	.word	0xe000e010

00401bb4 <_delay_init>:
  401bb4:	b508      	push	{r3, lr}
  401bb6:	4b01      	ldr	r3, [pc, #4]	; (401bbc <_delay_init+0x8>)
  401bb8:	4798      	blx	r3
  401bba:	bd08      	pop	{r3, pc}
  401bbc:	00401ba1 	.word	0x00401ba1

00401bc0 <_delay_cycles>:
  401bc0:	0e08      	lsrs	r0, r1, #24
  401bc2:	e00d      	b.n	401be0 <_delay_cycles+0x20>
  401bc4:	4b0d      	ldr	r3, [pc, #52]	; (401bfc <_delay_cycles+0x3c>)
  401bc6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401bca:	6058      	str	r0, [r3, #4]
  401bcc:	6098      	str	r0, [r3, #8]
  401bce:	4b0b      	ldr	r3, [pc, #44]	; (401bfc <_delay_cycles+0x3c>)
  401bd0:	681b      	ldr	r3, [r3, #0]
  401bd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401bd6:	d0fa      	beq.n	401bce <_delay_cycles+0xe>
  401bd8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401bdc:	3101      	adds	r1, #1
  401bde:	4610      	mov	r0, r2
  401be0:	1e43      	subs	r3, r0, #1
  401be2:	b2da      	uxtb	r2, r3
  401be4:	2800      	cmp	r0, #0
  401be6:	d1ed      	bne.n	401bc4 <_delay_cycles+0x4>
  401be8:	4b04      	ldr	r3, [pc, #16]	; (401bfc <_delay_cycles+0x3c>)
  401bea:	6059      	str	r1, [r3, #4]
  401bec:	6099      	str	r1, [r3, #8]
  401bee:	4b03      	ldr	r3, [pc, #12]	; (401bfc <_delay_cycles+0x3c>)
  401bf0:	681b      	ldr	r3, [r3, #0]
  401bf2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401bf6:	d0fa      	beq.n	401bee <_delay_cycles+0x2e>
  401bf8:	4770      	bx	lr
  401bfa:	bf00      	nop
  401bfc:	e000e010 	.word	0xe000e010

00401c00 <get_cfg>:
  401c00:	2300      	movs	r3, #0
  401c02:	2b01      	cmp	r3, #1
  401c04:	d815      	bhi.n	401c32 <get_cfg+0x32>
  401c06:	b410      	push	{r4}
  401c08:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401c0c:	008a      	lsls	r2, r1, #2
  401c0e:	490a      	ldr	r1, [pc, #40]	; (401c38 <get_cfg+0x38>)
  401c10:	588a      	ldr	r2, [r1, r2]
  401c12:	4282      	cmp	r2, r0
  401c14:	d007      	beq.n	401c26 <get_cfg+0x26>
  401c16:	3301      	adds	r3, #1
  401c18:	b2db      	uxtb	r3, r3
  401c1a:	2b01      	cmp	r3, #1
  401c1c:	d9f4      	bls.n	401c08 <get_cfg+0x8>
  401c1e:	2000      	movs	r0, #0
  401c20:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c24:	4770      	bx	lr
  401c26:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401c2a:	00a3      	lsls	r3, r4, #2
  401c2c:	4608      	mov	r0, r1
  401c2e:	4418      	add	r0, r3
  401c30:	e7f6      	b.n	401c20 <get_cfg+0x20>
  401c32:	2000      	movs	r0, #0
  401c34:	4770      	bx	lr
  401c36:	bf00      	nop
  401c38:	20400000 	.word	0x20400000

00401c3c <_tc_init_irq_param>:
  401c3c:	4b06      	ldr	r3, [pc, #24]	; (401c58 <_tc_init_irq_param+0x1c>)
  401c3e:	4298      	cmp	r0, r3
  401c40:	d003      	beq.n	401c4a <_tc_init_irq_param+0xe>
  401c42:	4b06      	ldr	r3, [pc, #24]	; (401c5c <_tc_init_irq_param+0x20>)
  401c44:	4298      	cmp	r0, r3
  401c46:	d003      	beq.n	401c50 <_tc_init_irq_param+0x14>
  401c48:	4770      	bx	lr
  401c4a:	4b05      	ldr	r3, [pc, #20]	; (401c60 <_tc_init_irq_param+0x24>)
  401c4c:	6019      	str	r1, [r3, #0]
  401c4e:	e7f8      	b.n	401c42 <_tc_init_irq_param+0x6>
  401c50:	4b03      	ldr	r3, [pc, #12]	; (401c60 <_tc_init_irq_param+0x24>)
  401c52:	6059      	str	r1, [r3, #4]
  401c54:	e7f8      	b.n	401c48 <_tc_init_irq_param+0xc>
  401c56:	bf00      	nop
  401c58:	4000c000 	.word	0x4000c000
  401c5c:	40010000 	.word	0x40010000
  401c60:	204000e8 	.word	0x204000e8

00401c64 <tc_interrupt_handler>:
  401c64:	b508      	push	{r3, lr}
  401c66:	68c3      	ldr	r3, [r0, #12]
  401c68:	6a1b      	ldr	r3, [r3, #32]
  401c6a:	f013 0f10 	tst.w	r3, #16
  401c6e:	d100      	bne.n	401c72 <tc_interrupt_handler+0xe>
  401c70:	bd08      	pop	{r3, pc}
  401c72:	6803      	ldr	r3, [r0, #0]
  401c74:	4798      	blx	r3
  401c76:	e7fb      	b.n	401c70 <tc_interrupt_handler+0xc>

00401c78 <_timer_init>:
  401c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c7a:	4607      	mov	r7, r0
  401c7c:	460c      	mov	r4, r1
  401c7e:	4608      	mov	r0, r1
  401c80:	4b27      	ldr	r3, [pc, #156]	; (401d20 <_timer_init+0xa8>)
  401c82:	4798      	blx	r3
  401c84:	4605      	mov	r5, r0
  401c86:	6886      	ldr	r6, [r0, #8]
  401c88:	60fc      	str	r4, [r7, #12]
  401c8a:	2296      	movs	r2, #150	; 0x96
  401c8c:	4925      	ldr	r1, [pc, #148]	; (401d24 <_timer_init+0xac>)
  401c8e:	2001      	movs	r0, #1
  401c90:	4b25      	ldr	r3, [pc, #148]	; (401d28 <_timer_init+0xb0>)
  401c92:	4798      	blx	r3
  401c94:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401c98:	d001      	beq.n	401c9e <_timer_init+0x26>
  401c9a:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
  401c9e:	6066      	str	r6, [r4, #4]
  401ca0:	696b      	ldr	r3, [r5, #20]
  401ca2:	6163      	str	r3, [r4, #20]
  401ca4:	69ab      	ldr	r3, [r5, #24]
  401ca6:	61a3      	str	r3, [r4, #24]
  401ca8:	68eb      	ldr	r3, [r5, #12]
  401caa:	6323      	str	r3, [r4, #48]	; 0x30
  401cac:	69eb      	ldr	r3, [r5, #28]
  401cae:	61e3      	str	r3, [r4, #28]
  401cb0:	2310      	movs	r3, #16
  401cb2:	6263      	str	r3, [r4, #36]	; 0x24
  401cb4:	692b      	ldr	r3, [r5, #16]
  401cb6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  401cba:	4639      	mov	r1, r7
  401cbc:	4620      	mov	r0, r4
  401cbe:	4b1b      	ldr	r3, [pc, #108]	; (401d2c <_timer_init+0xb4>)
  401cc0:	4798      	blx	r3
  401cc2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	db0d      	blt.n	401ce6 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cca:	095a      	lsrs	r2, r3, #5
  401ccc:	f003 031f 	and.w	r3, r3, #31
  401cd0:	2101      	movs	r1, #1
  401cd2:	fa01 f303 	lsl.w	r3, r1, r3
  401cd6:	3220      	adds	r2, #32
  401cd8:	4915      	ldr	r1, [pc, #84]	; (401d30 <_timer_init+0xb8>)
  401cda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ce2:	f3bf 8f6f 	isb	sy
  401ce6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401cea:	2b00      	cmp	r3, #0
  401cec:	db09      	blt.n	401d02 <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cee:	095a      	lsrs	r2, r3, #5
  401cf0:	f003 031f 	and.w	r3, r3, #31
  401cf4:	2101      	movs	r1, #1
  401cf6:	fa01 f303 	lsl.w	r3, r1, r3
  401cfa:	3260      	adds	r2, #96	; 0x60
  401cfc:	490c      	ldr	r1, [pc, #48]	; (401d30 <_timer_init+0xb8>)
  401cfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  401d02:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d06:	2b00      	cmp	r3, #0
  401d08:	db08      	blt.n	401d1c <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d0a:	0959      	lsrs	r1, r3, #5
  401d0c:	f003 031f 	and.w	r3, r3, #31
  401d10:	2201      	movs	r2, #1
  401d12:	fa02 f303 	lsl.w	r3, r2, r3
  401d16:	4a06      	ldr	r2, [pc, #24]	; (401d30 <_timer_init+0xb8>)
  401d18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401d1c:	2000      	movs	r0, #0
  401d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d20:	00401c01 	.word	0x00401c01
  401d24:	00403588 	.word	0x00403588
  401d28:	004011a1 	.word	0x004011a1
  401d2c:	00401c3d 	.word	0x00401c3d
  401d30:	e000e100 	.word	0xe000e100

00401d34 <_timer_start>:
  401d34:	68c3      	ldr	r3, [r0, #12]
  401d36:	2205      	movs	r2, #5
  401d38:	601a      	str	r2, [r3, #0]
  401d3a:	4770      	bx	lr

00401d3c <_timer_is_started>:
  401d3c:	68c3      	ldr	r3, [r0, #12]
  401d3e:	6a18      	ldr	r0, [r3, #32]
  401d40:	f3c0 4000 	ubfx	r0, r0, #16, #1
  401d44:	4770      	bx	lr
	...

00401d48 <_timer_set_irq>:
  401d48:	b508      	push	{r3, lr}
  401d4a:	68c0      	ldr	r0, [r0, #12]
  401d4c:	4b02      	ldr	r3, [pc, #8]	; (401d58 <_timer_set_irq+0x10>)
  401d4e:	4798      	blx	r3
  401d50:	7900      	ldrb	r0, [r0, #4]
  401d52:	4b02      	ldr	r3, [pc, #8]	; (401d5c <_timer_set_irq+0x14>)
  401d54:	4798      	blx	r3
  401d56:	bd08      	pop	{r3, pc}
  401d58:	00401c01 	.word	0x00401c01
  401d5c:	0040134d 	.word	0x0040134d

00401d60 <_tc_get_timer>:
  401d60:	2000      	movs	r0, #0
  401d62:	4770      	bx	lr

00401d64 <TC0_Handler>:
  401d64:	b508      	push	{r3, lr}
  401d66:	4b02      	ldr	r3, [pc, #8]	; (401d70 <TC0_Handler+0xc>)
  401d68:	6818      	ldr	r0, [r3, #0]
  401d6a:	4b02      	ldr	r3, [pc, #8]	; (401d74 <TC0_Handler+0x10>)
  401d6c:	4798      	blx	r3
  401d6e:	bd08      	pop	{r3, pc}
  401d70:	204000e8 	.word	0x204000e8
  401d74:	00401c65 	.word	0x00401c65

00401d78 <TC3_Handler>:
  401d78:	b508      	push	{r3, lr}
  401d7a:	4b02      	ldr	r3, [pc, #8]	; (401d84 <TC3_Handler+0xc>)
  401d7c:	6858      	ldr	r0, [r3, #4]
  401d7e:	4b02      	ldr	r3, [pc, #8]	; (401d88 <TC3_Handler+0x10>)
  401d80:	4798      	blx	r3
  401d82:	bd08      	pop	{r3, pc}
  401d84:	204000e8 	.word	0x204000e8
  401d88:	00401c65 	.word	0x00401c65

00401d8c <_get_i2cm_sync_cfg>:
  401d8c:	2300      	movs	r3, #0
  401d8e:	b13b      	cbz	r3, 401da0 <_get_i2cm_sync_cfg+0x14>
  401d90:	2000      	movs	r0, #0
  401d92:	4770      	bx	lr
  401d94:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401d98:	00e3      	lsls	r3, r4, #3
  401d9a:	4608      	mov	r0, r1
  401d9c:	4418      	add	r0, r3
  401d9e:	e00c      	b.n	401dba <_get_i2cm_sync_cfg+0x2e>
  401da0:	b410      	push	{r4}
  401da2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401da6:	00ca      	lsls	r2, r1, #3
  401da8:	4905      	ldr	r1, [pc, #20]	; (401dc0 <_get_i2cm_sync_cfg+0x34>)
  401daa:	588a      	ldr	r2, [r1, r2]
  401dac:	4282      	cmp	r2, r0
  401dae:	d0f1      	beq.n	401d94 <_get_i2cm_sync_cfg+0x8>
  401db0:	3301      	adds	r3, #1
  401db2:	b2db      	uxtb	r3, r3
  401db4:	2b00      	cmp	r3, #0
  401db6:	d0f4      	beq.n	401da2 <_get_i2cm_sync_cfg+0x16>
  401db8:	2000      	movs	r0, #0
  401dba:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dbe:	4770      	bx	lr
  401dc0:	0040359c 	.word	0x0040359c

00401dc4 <_i2c_m_sync_init>:
  401dc4:	b538      	push	{r3, r4, r5, lr}
  401dc6:	4604      	mov	r4, r0
  401dc8:	460d      	mov	r5, r1
  401dca:	2800      	cmp	r0, #0
  401dcc:	bf18      	it	ne
  401dce:	2900      	cmpne	r1, #0
  401dd0:	bf14      	ite	ne
  401dd2:	2001      	movne	r0, #1
  401dd4:	2000      	moveq	r0, #0
  401dd6:	2278      	movs	r2, #120	; 0x78
  401dd8:	4909      	ldr	r1, [pc, #36]	; (401e00 <_i2c_m_sync_init+0x3c>)
  401dda:	4b0a      	ldr	r3, [pc, #40]	; (401e04 <_i2c_m_sync_init+0x40>)
  401ddc:	4798      	blx	r3
  401dde:	6125      	str	r5, [r4, #16]
  401de0:	4628      	mov	r0, r5
  401de2:	4b09      	ldr	r3, [pc, #36]	; (401e08 <_i2c_m_sync_init+0x44>)
  401de4:	4798      	blx	r3
  401de6:	6843      	ldr	r3, [r0, #4]
  401de8:	602b      	str	r3, [r5, #0]
  401dea:	6923      	ldr	r3, [r4, #16]
  401dec:	6882      	ldr	r2, [r0, #8]
  401dee:	639a      	str	r2, [r3, #56]	; 0x38
  401df0:	6923      	ldr	r3, [r4, #16]
  401df2:	68c2      	ldr	r2, [r0, #12]
  401df4:	645a      	str	r2, [r3, #68]	; 0x44
  401df6:	6923      	ldr	r3, [r4, #16]
  401df8:	6902      	ldr	r2, [r0, #16]
  401dfa:	611a      	str	r2, [r3, #16]
  401dfc:	2000      	movs	r0, #0
  401dfe:	bd38      	pop	{r3, r4, r5, pc}
  401e00:	004035b4 	.word	0x004035b4
  401e04:	004011a1 	.word	0x004011a1
  401e08:	00401d8d 	.word	0x00401d8d

00401e0c <_i2c_m_sync_transfer>:
  401e0c:	b538      	push	{r3, r4, r5, lr}
  401e0e:	4604      	mov	r4, r0
  401e10:	460d      	mov	r5, r1
  401e12:	2800      	cmp	r0, #0
  401e14:	bf18      	it	ne
  401e16:	2900      	cmpne	r1, #0
  401e18:	bf14      	ite	ne
  401e1a:	2001      	movne	r0, #1
  401e1c:	2000      	moveq	r0, #0
  401e1e:	22ba      	movs	r2, #186	; 0xba
  401e20:	4952      	ldr	r1, [pc, #328]	; (401f6c <_i2c_m_sync_transfer+0x160>)
  401e22:	4b53      	ldr	r3, [pc, #332]	; (401f70 <_i2c_m_sync_transfer+0x164>)
  401e24:	4798      	blx	r3
  401e26:	8863      	ldrh	r3, [r4, #2]
  401e28:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e2c:	f040 809a 	bne.w	401f64 <_i2c_m_sync_transfer+0x158>
  401e30:	886b      	ldrh	r3, [r5, #2]
  401e32:	f013 0f01 	tst.w	r3, #1
  401e36:	d118      	bne.n	401e6a <_i2c_m_sync_transfer+0x5e>
  401e38:	886b      	ldrh	r3, [r5, #2]
  401e3a:	b29b      	uxth	r3, r3
  401e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401e40:	806b      	strh	r3, [r5, #2]
  401e42:	882b      	ldrh	r3, [r5, #0]
  401e44:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401e48:	d05f      	beq.n	401f0a <_i2c_m_sync_transfer+0xfe>
  401e4a:	6922      	ldr	r2, [r4, #16]
  401e4c:	0a1b      	lsrs	r3, r3, #8
  401e4e:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401e52:	041b      	lsls	r3, r3, #16
  401e54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401e5c:	6053      	str	r3, [r2, #4]
  401e5e:	6923      	ldr	r3, [r4, #16]
  401e60:	782a      	ldrb	r2, [r5, #0]
  401e62:	60da      	str	r2, [r3, #12]
  401e64:	2000      	movs	r0, #0
  401e66:	4601      	mov	r1, r0
  401e68:	e05c      	b.n	401f24 <_i2c_m_sync_transfer+0x118>
  401e6a:	886b      	ldrh	r3, [r5, #2]
  401e6c:	b29b      	uxth	r3, r3
  401e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401e72:	806b      	strh	r3, [r5, #2]
  401e74:	882b      	ldrh	r3, [r5, #0]
  401e76:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401e7a:	d022      	beq.n	401ec2 <_i2c_m_sync_transfer+0xb6>
  401e7c:	6922      	ldr	r2, [r4, #16]
  401e7e:	0a1b      	lsrs	r3, r3, #8
  401e80:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  401e84:	041b      	lsls	r3, r3, #16
  401e86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401e8a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  401e8e:	6053      	str	r3, [r2, #4]
  401e90:	6923      	ldr	r3, [r4, #16]
  401e92:	782a      	ldrb	r2, [r5, #0]
  401e94:	60da      	str	r2, [r3, #12]
  401e96:	6923      	ldr	r3, [r4, #16]
  401e98:	686a      	ldr	r2, [r5, #4]
  401e9a:	2a01      	cmp	r2, #1
  401e9c:	d019      	beq.n	401ed2 <_i2c_m_sync_transfer+0xc6>
  401e9e:	2201      	movs	r2, #1
  401ea0:	601a      	str	r2, [r3, #0]
  401ea2:	2100      	movs	r1, #0
  401ea4:	686b      	ldr	r3, [r5, #4]
  401ea6:	4299      	cmp	r1, r3
  401ea8:	d222      	bcs.n	401ef0 <_i2c_m_sync_transfer+0xe4>
  401eaa:	6923      	ldr	r3, [r4, #16]
  401eac:	6a1a      	ldr	r2, [r3, #32]
  401eae:	f012 0f02 	tst.w	r2, #2
  401eb2:	d110      	bne.n	401ed6 <_i2c_m_sync_transfer+0xca>
  401eb4:	6a1b      	ldr	r3, [r3, #32]
  401eb6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401eba:	d0f6      	beq.n	401eaa <_i2c_m_sync_transfer+0x9e>
  401ebc:	f06f 0001 	mvn.w	r0, #1
  401ec0:	bd38      	pop	{r3, r4, r5, pc}
  401ec2:	6922      	ldr	r2, [r4, #16]
  401ec4:	041b      	lsls	r3, r3, #16
  401ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401eca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401ece:	6053      	str	r3, [r2, #4]
  401ed0:	e7e1      	b.n	401e96 <_i2c_m_sync_transfer+0x8a>
  401ed2:	2203      	movs	r2, #3
  401ed4:	e7e4      	b.n	401ea0 <_i2c_m_sync_transfer+0x94>
  401ed6:	68aa      	ldr	r2, [r5, #8]
  401ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eda:	5453      	strb	r3, [r2, r1]
  401edc:	686b      	ldr	r3, [r5, #4]
  401ede:	3b02      	subs	r3, #2
  401ee0:	4299      	cmp	r1, r3
  401ee2:	d001      	beq.n	401ee8 <_i2c_m_sync_transfer+0xdc>
  401ee4:	3101      	adds	r1, #1
  401ee6:	e7dd      	b.n	401ea4 <_i2c_m_sync_transfer+0x98>
  401ee8:	6923      	ldr	r3, [r4, #16]
  401eea:	2202      	movs	r2, #2
  401eec:	601a      	str	r2, [r3, #0]
  401eee:	e7f9      	b.n	401ee4 <_i2c_m_sync_transfer+0xd8>
  401ef0:	6923      	ldr	r3, [r4, #16]
  401ef2:	6a1b      	ldr	r3, [r3, #32]
  401ef4:	f013 0f01 	tst.w	r3, #1
  401ef8:	d0fa      	beq.n	401ef0 <_i2c_m_sync_transfer+0xe4>
  401efa:	8863      	ldrh	r3, [r4, #2]
  401efc:	b29b      	uxth	r3, r3
  401efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401f02:	b29b      	uxth	r3, r3
  401f04:	8063      	strh	r3, [r4, #2]
  401f06:	2000      	movs	r0, #0
  401f08:	bd38      	pop	{r3, r4, r5, pc}
  401f0a:	6922      	ldr	r2, [r4, #16]
  401f0c:	041b      	lsls	r3, r3, #16
  401f0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401f12:	6053      	str	r3, [r2, #4]
  401f14:	e7a6      	b.n	401e64 <_i2c_m_sync_transfer+0x58>
  401f16:	f06f 0001 	mvn.w	r0, #1
  401f1a:	b978      	cbnz	r0, 401f3c <_i2c_m_sync_transfer+0x130>
  401f1c:	68ab      	ldr	r3, [r5, #8]
  401f1e:	5c5b      	ldrb	r3, [r3, r1]
  401f20:	6353      	str	r3, [r2, #52]	; 0x34
  401f22:	3101      	adds	r1, #1
  401f24:	686b      	ldr	r3, [r5, #4]
  401f26:	4299      	cmp	r1, r3
  401f28:	d208      	bcs.n	401f3c <_i2c_m_sync_transfer+0x130>
  401f2a:	6922      	ldr	r2, [r4, #16]
  401f2c:	6a13      	ldr	r3, [r2, #32]
  401f2e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f32:	d1f0      	bne.n	401f16 <_i2c_m_sync_transfer+0x10a>
  401f34:	f013 0f04 	tst.w	r3, #4
  401f38:	d0f7      	beq.n	401f2a <_i2c_m_sync_transfer+0x11e>
  401f3a:	e7ee      	b.n	401f1a <_i2c_m_sync_transfer+0x10e>
  401f3c:	886b      	ldrh	r3, [r5, #2]
  401f3e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401f42:	d106      	bne.n	401f52 <_i2c_m_sync_transfer+0x146>
  401f44:	8863      	ldrh	r3, [r4, #2]
  401f46:	b29b      	uxth	r3, r3
  401f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401f4c:	b29b      	uxth	r3, r3
  401f4e:	8063      	strh	r3, [r4, #2]
  401f50:	bd38      	pop	{r3, r4, r5, pc}
  401f52:	6923      	ldr	r3, [r4, #16]
  401f54:	2202      	movs	r2, #2
  401f56:	601a      	str	r2, [r3, #0]
  401f58:	6923      	ldr	r3, [r4, #16]
  401f5a:	6a1b      	ldr	r3, [r3, #32]
  401f5c:	f013 0f01 	tst.w	r3, #1
  401f60:	d0fa      	beq.n	401f58 <_i2c_m_sync_transfer+0x14c>
  401f62:	e7ef      	b.n	401f44 <_i2c_m_sync_transfer+0x138>
  401f64:	f06f 0005 	mvn.w	r0, #5
  401f68:	bd38      	pop	{r3, r4, r5, pc}
  401f6a:	bf00      	nop
  401f6c:	004035b4 	.word	0x004035b4
  401f70:	004011a1 	.word	0x004011a1

00401f74 <_wdt_init>:
  401f74:	b510      	push	{r4, lr}
  401f76:	4604      	mov	r4, r0
  401f78:	b168      	cbz	r0, 401f96 <_wdt_init+0x22>
  401f7a:	6803      	ldr	r3, [r0, #0]
  401f7c:	b14b      	cbz	r3, 401f92 <_wdt_init+0x1e>
  401f7e:	2001      	movs	r0, #1
  401f80:	2233      	movs	r2, #51	; 0x33
  401f82:	4906      	ldr	r1, [pc, #24]	; (401f9c <_wdt_init+0x28>)
  401f84:	4b06      	ldr	r3, [pc, #24]	; (401fa0 <_wdt_init+0x2c>)
  401f86:	4798      	blx	r3
  401f88:	6823      	ldr	r3, [r4, #0]
  401f8a:	4a06      	ldr	r2, [pc, #24]	; (401fa4 <_wdt_init+0x30>)
  401f8c:	605a      	str	r2, [r3, #4]
  401f8e:	2000      	movs	r0, #0
  401f90:	bd10      	pop	{r4, pc}
  401f92:	2000      	movs	r0, #0
  401f94:	e7f4      	b.n	401f80 <_wdt_init+0xc>
  401f96:	2000      	movs	r0, #0
  401f98:	e7f2      	b.n	401f80 <_wdt_init+0xc>
  401f9a:	bf00      	nop
  401f9c:	004035d0 	.word	0x004035d0
  401fa0:	004011a1 	.word	0x004011a1
  401fa4:	3fffafff 	.word	0x3fffafff

00401fa8 <main>:

//temp definitions
#define MOTOR_TARGET 3

int main(void)
{
  401fa8:	b570      	push	{r4, r5, r6, lr}
  401faa:	b08e      	sub	sp, #56	; 0x38
	volatile float current_wheel_speed = 0.0;
  401fac:	2600      	movs	r6, #0
  401fae:	960d      	str	r6, [sp, #52]	; 0x34
	volatile uint8_t dipswitch_state = 0;
  401fb0:	2500      	movs	r5, #0
  401fb2:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
	
	uint8_t robot_stop = 0;
	
	atmel_start_init();
  401fb6:	4b41      	ldr	r3, [pc, #260]	; (4020bc <main+0x114>)
  401fb8:	4798      	blx	r3
	
	//disable LEDs
	set_LEDs(0);
  401fba:	4628      	mov	r0, r5
  401fbc:	4b40      	ldr	r3, [pc, #256]	; (4020c0 <main+0x118>)
  401fbe:	4798      	blx	r3
	
	uint8_t robot_ID = 0;
  401fc0:	a80e      	add	r0, sp, #56	; 0x38
  401fc2:	f800 5d06 	strb.w	r5, [r0, #-6]!
	uint8_t data_store[32];
	
	//initialize wireless data processing
	NPP_init(&robot_ID);
  401fc6:	4b3f      	ldr	r3, [pc, #252]	; (4020c4 <main+0x11c>)
  401fc8:	4798      	blx	r3
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  401fca:	2220      	movs	r2, #32
  401fcc:	4629      	mov	r1, r5
  401fce:	a804      	add	r0, sp, #16
  401fd0:	4b3d      	ldr	r3, [pc, #244]	; (4020c8 <main+0x120>)
  401fd2:	4798      	blx	r3
	nRF24_init(data_store);
  401fd4:	a804      	add	r0, sp, #16
  401fd6:	4b3d      	ldr	r3, [pc, #244]	; (4020cc <main+0x124>)
  401fd8:	4798      	blx	r3
	delay_us(500); //Should be 200 us, setting higher for testing
  401fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401fde:	4b3c      	ldr	r3, [pc, #240]	; (4020d0 <main+0x128>)
  401fe0:	4798      	blx	r3
	nRF24_enter_receive();
  401fe2:	4b3c      	ldr	r3, [pc, #240]	; (4020d4 <main+0x12c>)
  401fe4:	4798      	blx	r3
	
	//initialize encoders
	encoders_init();
  401fe6:	4b3c      	ldr	r3, [pc, #240]	; (4020d8 <main+0x130>)
  401fe8:	4798      	blx	r3
	
	// PWMs
	pwm_enable(&PWM_0);
  401fea:	483c      	ldr	r0, [pc, #240]	; (4020dc <main+0x134>)
  401fec:	4c3c      	ldr	r4, [pc, #240]	; (4020e0 <main+0x138>)
  401fee:	47a0      	blx	r4
	pwm_enable(&PWM_1);
  401ff0:	483c      	ldr	r0, [pc, #240]	; (4020e4 <main+0x13c>)
  401ff2:	47a0      	blx	r4
	
	//disable motors
	set_pwm_drive_motor(0, 0);
  401ff4:	4629      	mov	r1, r5
  401ff6:	4628      	mov	r0, r5
  401ff8:	4c3b      	ldr	r4, [pc, #236]	; (4020e8 <main+0x140>)
  401ffa:	47a0      	blx	r4
	set_pwm_drive_motor(1, 0);
  401ffc:	4629      	mov	r1, r5
  401ffe:	2001      	movs	r0, #1
  402000:	47a0      	blx	r4
	set_pwm_drive_motor(2, 0);
  402002:	4629      	mov	r1, r5
  402004:	2002      	movs	r0, #2
  402006:	47a0      	blx	r4
	set_pwm_drive_motor(3, 0);
  402008:	4629      	mov	r1, r5
  40200a:	2003      	movs	r0, #3
  40200c:	47a0      	blx	r4
	set_pwm_dribbler_motor(0);
  40200e:	4628      	mov	r0, r5
  402010:	4b36      	ldr	r3, [pc, #216]	; (4020ec <main+0x144>)
  402012:	4798      	blx	r3
	
	float adc_value_battery_current = 0;
  402014:	9603      	str	r6, [sp, #12]
	float adc_value_battery_voltage = 0;
  402016:	9602      	str	r6, [sp, #8]
	float adc_value_cap_charge = 0;
  402018:	9601      	str	r6, [sp, #4]
	
	//initialize ADCs
	adc_init();
  40201a:	4b35      	ldr	r3, [pc, #212]	; (4020f0 <main+0x148>)
  40201c:	4798      	blx	r3
	
	//initialize timers
	initialize_task_PID();
  40201e:	4b35      	ldr	r3, [pc, #212]	; (4020f4 <main+0x14c>)
  402020:	4798      	blx	r3
	initialize_task_ADC();
  402022:	4b35      	ldr	r3, [pc, #212]	; (4020f8 <main+0x150>)
  402024:	4798      	blx	r3
	
	delay_ms(1000);
  402026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40202a:	4e34      	ldr	r6, [pc, #208]	; (4020fc <main+0x154>)
  40202c:	47b0      	blx	r6
	
	set_pwm_drive_motor(0, PWM_ZERO);
  40202e:	f640 1197 	movw	r1, #2455	; 0x997
  402032:	4628      	mov	r0, r5
  402034:	47a0      	blx	r4
	set_pwm_drive_motor(1, PWM_ZERO);
  402036:	f640 1197 	movw	r1, #2455	; 0x997
  40203a:	2001      	movs	r0, #1
  40203c:	47a0      	blx	r4
	set_pwm_drive_motor(2, PWM_ZERO);
  40203e:	f640 1197 	movw	r1, #2455	; 0x997
  402042:	2002      	movs	r0, #2
  402044:	47a0      	blx	r4
	set_pwm_drive_motor(3, PWM_ZERO);
  402046:	f640 1197 	movw	r1, #2455	; 0x997
  40204a:	2003      	movs	r0, #3
  40204c:	47a0      	blx	r4
	
	delay_ms(4000);
  40204e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
  402052:	47b0      	blx	r6
  402054:	e018      	b.n	402088 <main+0xe0>
	
	while (1) {
		
		//process information sent from hub
		if(nRF_24_is_data_available(1)){ //check to see if data was received
			nRF24_receive_data(data_store);
  402056:	a804      	add	r0, sp, #16
  402058:	4b29      	ldr	r3, [pc, #164]	; (402100 <main+0x158>)
  40205a:	4798      	blx	r3
			//target_speed_2 = data_store[5] + (data_store[6] << 8);
			//target_speed_3 = data_store[7] + (data_store[8] << 8);
			//gpio_set_pin_level(LED1, data_store[9]);
			//gpio_set_pin_level(LED2, data_store[10]);
			//gpio_set_pin_level(LED3, data_store[11]);
			memset(&data_store[0], 0, sizeof(uint8_t)*32); //clear data_store array
  40205c:	2220      	movs	r2, #32
  40205e:	2100      	movs	r1, #0
  402060:	a804      	add	r0, sp, #16
  402062:	4b19      	ldr	r3, [pc, #100]	; (4020c8 <main+0x120>)
  402064:	4798      	blx	r3
  402066:	e014      	b.n	402092 <main+0xea>
			LED_set((uint8_t)current_wheel_speed);
			*/
		}
		
		//adc time
		if(time_to_adc){
  402068:	4b26      	ldr	r3, [pc, #152]	; (402104 <main+0x15c>)
  40206a:	781b      	ldrb	r3, [r3, #0]
  40206c:	b163      	cbz	r3, 402088 <main+0xe0>
			adc_read(&adc_value_battery_current, ADC_BATTERY_CURRENT);
  40206e:	2100      	movs	r1, #0
  402070:	a803      	add	r0, sp, #12
  402072:	4c25      	ldr	r4, [pc, #148]	; (402108 <main+0x160>)
  402074:	47a0      	blx	r4
			adc_read(&adc_value_battery_voltage, ADC_BATTERY_VOLTAGE);
  402076:	2105      	movs	r1, #5
  402078:	a802      	add	r0, sp, #8
  40207a:	47a0      	blx	r4
			adc_read(&adc_value_cap_charge, ADC_CAP_CHARGE);
  40207c:	2107      	movs	r1, #7
  40207e:	a801      	add	r0, sp, #4
  402080:	47a0      	blx	r4
			time_to_adc = 0;
  402082:	2200      	movs	r2, #0
  402084:	4b1f      	ldr	r3, [pc, #124]	; (402104 <main+0x15c>)
  402086:	701a      	strb	r2, [r3, #0]
		if(nRF_24_is_data_available(1)){ //check to see if data was received
  402088:	2001      	movs	r0, #1
  40208a:	4b20      	ldr	r3, [pc, #128]	; (40210c <main+0x164>)
  40208c:	4798      	blx	r3
  40208e:	2800      	cmp	r0, #0
  402090:	d1e1      	bne.n	402056 <main+0xae>
		volatile float s = wheel_speed_back_left();
  402092:	4b1f      	ldr	r3, [pc, #124]	; (402110 <main+0x168>)
  402094:	4798      	blx	r3
  402096:	9000      	str	r0, [sp, #0]
		if(time_to_pid && !pid_done){
  402098:	4b1e      	ldr	r3, [pc, #120]	; (402114 <main+0x16c>)
  40209a:	781b      	ldrb	r3, [r3, #0]
  40209c:	2b00      	cmp	r3, #0
  40209e:	d0e3      	beq.n	402068 <main+0xc0>
  4020a0:	2d00      	cmp	r5, #0
  4020a2:	d1e1      	bne.n	402068 <main+0xc0>
			pid_done = wheelMotorPID(0, 0, 1.2, 0);
  4020a4:	2000      	movs	r0, #0
  4020a6:	4603      	mov	r3, r0
  4020a8:	4a1b      	ldr	r2, [pc, #108]	; (402118 <main+0x170>)
  4020aa:	4601      	mov	r1, r0
  4020ac:	4c1b      	ldr	r4, [pc, #108]	; (40211c <main+0x174>)
  4020ae:	47a0      	blx	r4
  4020b0:	4605      	mov	r5, r0
			time_to_pid = 0;
  4020b2:	2200      	movs	r2, #0
  4020b4:	4b17      	ldr	r3, [pc, #92]	; (402114 <main+0x16c>)
  4020b6:	701a      	strb	r2, [r3, #0]
  4020b8:	e7d6      	b.n	402068 <main+0xc0>
  4020ba:	bf00      	nop
  4020bc:	0040024d 	.word	0x0040024d
  4020c0:	004002c5 	.word	0x004002c5
  4020c4:	00402579 	.word	0x00402579
  4020c8:	004032c5 	.word	0x004032c5
  4020cc:	0040270d 	.word	0x0040270d
  4020d0:	00400b31 	.word	0x00400b31
  4020d4:	004027e9 	.word	0x004027e9
  4020d8:	004009d1 	.word	0x004009d1
  4020dc:	20400124 	.word	0x20400124
  4020e0:	00400e11 	.word	0x00400e11
  4020e4:	2040017c 	.word	0x2040017c
  4020e8:	00402859 	.word	0x00402859
  4020ec:	004028a1 	.word	0x004028a1
  4020f0:	004001c5 	.word	0x004001c5
  4020f4:	004028d1 	.word	0x004028d1
  4020f8:	00402905 	.word	0x00402905
  4020fc:	00400b51 	.word	0x00400b51
  402100:	0040268d 	.word	0x0040268d
  402104:	20400121 	.word	0x20400121
  402108:	004001e9 	.word	0x004001e9
  40210c:	004027c1 	.word	0x004027c1
  402110:	004021b1 	.word	0x004021b1
  402114:	20400120 	.word	0x20400120
  402118:	3f99999a 	.word	0x3f99999a
  40211c:	00402329 	.word	0x00402329

00402120 <wheel_speed_front_right>:
	error_sum_back_left=0;
	error_sum_back_right=0;
}

//hardcoded wheel speed calculations
float wheel_speed_front_right(){
  402120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(front_right_counter - front_right_counter_old)*v_c_l; //rad/s or m/s
  402122:	4b0c      	ldr	r3, [pc, #48]	; (402154 <wheel_speed_front_right+0x34>)
  402124:	e9d3 6700 	ldrd	r6, r7, [r3]
  402128:	4c0b      	ldr	r4, [pc, #44]	; (402158 <wheel_speed_front_right+0x38>)
  40212a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  40212e:	4630      	mov	r0, r6
  402130:	4639      	mov	r1, r7
  402132:	4d0a      	ldr	r5, [pc, #40]	; (40215c <wheel_speed_front_right+0x3c>)
  402134:	47a8      	blx	r5
  402136:	4b0a      	ldr	r3, [pc, #40]	; (402160 <wheel_speed_front_right+0x40>)
  402138:	4798      	blx	r3
  40213a:	4b0a      	ldr	r3, [pc, #40]	; (402164 <wheel_speed_front_right+0x44>)
  40213c:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	front_right_counter_old = front_right_counter;
  402140:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return current_speed;
}
  402144:	ee07 0a10 	vmov	s14, r0
  402148:	ee67 7a27 	vmul.f32	s15, s14, s15
  40214c:	ee17 0a90 	vmov	r0, s15
  402150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402152:	bf00      	nop
  402154:	20400078 	.word	0x20400078
  402158:	204000f0 	.word	0x204000f0
  40215c:	00402941 	.word	0x00402941
  402160:	004031dd 	.word	0x004031dd
  402164:	20400048 	.word	0x20400048

00402168 <wheel_speed_front_left>:

float wheel_speed_front_left(){
  402168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(front_left_counter - front_left_counter_old)*v_c_l; //rad/s or m/s
  40216a:	4b0c      	ldr	r3, [pc, #48]	; (40219c <wheel_speed_front_left+0x34>)
  40216c:	e9d3 6700 	ldrd	r6, r7, [r3]
  402170:	4c0b      	ldr	r4, [pc, #44]	; (4021a0 <wheel_speed_front_left+0x38>)
  402172:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  402176:	4630      	mov	r0, r6
  402178:	4639      	mov	r1, r7
  40217a:	4d0a      	ldr	r5, [pc, #40]	; (4021a4 <wheel_speed_front_left+0x3c>)
  40217c:	47a8      	blx	r5
  40217e:	4b0a      	ldr	r3, [pc, #40]	; (4021a8 <wheel_speed_front_left+0x40>)
  402180:	4798      	blx	r3
  402182:	4b0a      	ldr	r3, [pc, #40]	; (4021ac <wheel_speed_front_left+0x44>)
  402184:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	front_left_counter_old = front_left_counter;
  402188:	e9c4 6706 	strd	r6, r7, [r4, #24]
	return current_speed;
	//return v_c_r;
}
  40218c:	ee07 0a10 	vmov	s14, r0
  402190:	ee67 7a27 	vmul.f32	s15, s14, s15
  402194:	ee17 0a90 	vmov	r0, s15
  402198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40219a:	bf00      	nop
  40219c:	20400070 	.word	0x20400070
  4021a0:	204000f0 	.word	0x204000f0
  4021a4:	00402941 	.word	0x00402941
  4021a8:	004031dd 	.word	0x004031dd
  4021ac:	20400048 	.word	0x20400048

004021b0 <wheel_speed_back_left>:

float wheel_speed_back_left(){
  4021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(back_left_counter - back_left_counter_old)*v_c_l; //rad/s or m/s
  4021b2:	4b0c      	ldr	r3, [pc, #48]	; (4021e4 <wheel_speed_back_left+0x34>)
  4021b4:	e9d3 6700 	ldrd	r6, r7, [r3]
  4021b8:	4c0b      	ldr	r4, [pc, #44]	; (4021e8 <wheel_speed_back_left+0x38>)
  4021ba:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
  4021be:	4630      	mov	r0, r6
  4021c0:	4639      	mov	r1, r7
  4021c2:	4d0a      	ldr	r5, [pc, #40]	; (4021ec <wheel_speed_back_left+0x3c>)
  4021c4:	47a8      	blx	r5
  4021c6:	4b0a      	ldr	r3, [pc, #40]	; (4021f0 <wheel_speed_back_left+0x40>)
  4021c8:	4798      	blx	r3
  4021ca:	4b0a      	ldr	r3, [pc, #40]	; (4021f4 <wheel_speed_back_left+0x44>)
  4021cc:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	back_left_counter_old = back_left_counter;
  4021d0:	e9c4 6708 	strd	r6, r7, [r4, #32]
	return current_speed;
}
  4021d4:	ee07 0a10 	vmov	s14, r0
  4021d8:	ee67 7a27 	vmul.f32	s15, s14, s15
  4021dc:	ee17 0a90 	vmov	r0, s15
  4021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021e2:	bf00      	nop
  4021e4:	20400080 	.word	0x20400080
  4021e8:	204000f0 	.word	0x204000f0
  4021ec:	00402941 	.word	0x00402941
  4021f0:	004031dd 	.word	0x004031dd
  4021f4:	20400048 	.word	0x20400048

004021f8 <wheel_speed_back_right>:

float wheel_speed_back_right(){
  4021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float current_speed;
	current_speed = (float)(back_right_counter - back_right_counter_old)*v_c_l; //rad/s or m/s
  4021fa:	4b0c      	ldr	r3, [pc, #48]	; (40222c <wheel_speed_back_right+0x34>)
  4021fc:	e9d3 6700 	ldrd	r6, r7, [r3]
  402200:	4c0b      	ldr	r4, [pc, #44]	; (402230 <wheel_speed_back_right+0x38>)
  402202:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
  402206:	4630      	mov	r0, r6
  402208:	4639      	mov	r1, r7
  40220a:	4d0a      	ldr	r5, [pc, #40]	; (402234 <wheel_speed_back_right+0x3c>)
  40220c:	47a8      	blx	r5
  40220e:	4b0a      	ldr	r3, [pc, #40]	; (402238 <wheel_speed_back_right+0x40>)
  402210:	4798      	blx	r3
  402212:	4b0a      	ldr	r3, [pc, #40]	; (40223c <wheel_speed_back_right+0x44>)
  402214:	edd3 7a00 	vldr	s15, [r3]
	//set encoder previous encoder count
	back_right_counter_old = back_right_counter;
  402218:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
	return current_speed;
}
  40221c:	ee07 0a10 	vmov	s14, r0
  402220:	ee67 7a27 	vmul.f32	s15, s14, s15
  402224:	ee17 0a90 	vmov	r0, s15
  402228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40222a:	bf00      	nop
  40222c:	20400088 	.word	0x20400088
  402230:	204000f0 	.word	0x204000f0
  402234:	00402941 	.word	0x00402941
  402238:	004031dd 	.word	0x004031dd
  40223c:	20400048 	.word	0x20400048

00402240 <convert_linear_to_pwm>:

//converts linear velocity to the range of pwm for error signal
float convert_linear_to_pwm(int flip, float error){
  402240:	b510      	push	{r4, lr}
  402242:	b082      	sub	sp, #8
	volatile float correction;
	if(flip){
  402244:	b9a8      	cbnz	r0, 402272 <convert_linear_to_pwm+0x32>
		correction = 2455 - error*28.2 - 10;
		correction = correction;
	}
	else{correction = error*28.2 + 2455 + 10;}
  402246:	4608      	mov	r0, r1
  402248:	4b1b      	ldr	r3, [pc, #108]	; (4022b8 <convert_linear_to_pwm+0x78>)
  40224a:	4798      	blx	r3
  40224c:	a316      	add	r3, pc, #88	; (adr r3, 4022a8 <convert_linear_to_pwm+0x68>)
  40224e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402252:	4c1a      	ldr	r4, [pc, #104]	; (4022bc <convert_linear_to_pwm+0x7c>)
  402254:	47a0      	blx	r4
  402256:	4c1a      	ldr	r4, [pc, #104]	; (4022c0 <convert_linear_to_pwm+0x80>)
  402258:	a315      	add	r3, pc, #84	; (adr r3, 4022b0 <convert_linear_to_pwm+0x70>)
  40225a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40225e:	47a0      	blx	r4
  402260:	2200      	movs	r2, #0
  402262:	4b18      	ldr	r3, [pc, #96]	; (4022c4 <convert_linear_to_pwm+0x84>)
  402264:	47a0      	blx	r4
  402266:	4b18      	ldr	r3, [pc, #96]	; (4022c8 <convert_linear_to_pwm+0x88>)
  402268:	4798      	blx	r3
  40226a:	9001      	str	r0, [sp, #4]
	
	return correction;
  40226c:	9801      	ldr	r0, [sp, #4]
}
  40226e:	b002      	add	sp, #8
  402270:	bd10      	pop	{r4, pc}
		correction = 2455 - error*28.2 - 10;
  402272:	4608      	mov	r0, r1
  402274:	4b10      	ldr	r3, [pc, #64]	; (4022b8 <convert_linear_to_pwm+0x78>)
  402276:	4798      	blx	r3
  402278:	a30b      	add	r3, pc, #44	; (adr r3, 4022a8 <convert_linear_to_pwm+0x68>)
  40227a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40227e:	4c0f      	ldr	r4, [pc, #60]	; (4022bc <convert_linear_to_pwm+0x7c>)
  402280:	47a0      	blx	r4
  402282:	4c12      	ldr	r4, [pc, #72]	; (4022cc <convert_linear_to_pwm+0x8c>)
  402284:	4602      	mov	r2, r0
  402286:	460b      	mov	r3, r1
  402288:	a109      	add	r1, pc, #36	; (adr r1, 4022b0 <convert_linear_to_pwm+0x70>)
  40228a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40228e:	47a0      	blx	r4
  402290:	2200      	movs	r2, #0
  402292:	4b0c      	ldr	r3, [pc, #48]	; (4022c4 <convert_linear_to_pwm+0x84>)
  402294:	47a0      	blx	r4
  402296:	4b0c      	ldr	r3, [pc, #48]	; (4022c8 <convert_linear_to_pwm+0x88>)
  402298:	4798      	blx	r3
  40229a:	9001      	str	r0, [sp, #4]
		correction = correction;
  40229c:	9b01      	ldr	r3, [sp, #4]
  40229e:	9301      	str	r3, [sp, #4]
  4022a0:	e7e4      	b.n	40226c <convert_linear_to_pwm+0x2c>
  4022a2:	bf00      	nop
  4022a4:	f3af 8000 	nop.w
  4022a8:	33333333 	.word	0x33333333
  4022ac:	403c3333 	.word	0x403c3333
  4022b0:	00000000 	.word	0x00000000
  4022b4:	40a32e00 	.word	0x40a32e00
  4022b8:	00402c01 	.word	0x00402c01
  4022bc:	00402ca9 	.word	0x00402ca9
  4022c0:	00402945 	.word	0x00402945
  4022c4:	40240000 	.word	0x40240000
  4022c8:	004031dd 	.word	0x004031dd
  4022cc:	00402941 	.word	0x00402941

004022d0 <setWheelMotorEffort>:

}

//handles magnitude and direction of motor
//FIGURE OUT CCW vs CW HIGH/LOW for motor controller
void setWheelMotorEffort(float effort_front_right, float effort_front_left, float effort_back_left, float effort_back_right){
  4022d0:	b510      	push	{r4, lr}
  4022d2:	ed2d 8b04 	vpush	{d8-d9}
  4022d6:	ee08 0a10 	vmov	s16, r0
  4022da:	ee09 2a10 	vmov	s18, r2
  4022de:	ee08 3a90 	vmov	s17, r3
	//set PWM duty cycle
	set_pwm_drive_motor(0, effort_front_left);
  4022e2:	ee07 1a90 	vmov	s15, r1
  4022e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4022ea:	ee17 1a90 	vmov	r1, s15
  4022ee:	2000      	movs	r0, #0
  4022f0:	4c0b      	ldr	r4, [pc, #44]	; (402320 <setWheelMotorEffort+0x50>)
  4022f2:	47a0      	blx	r4
	set_pwm_drive_motor(1, effort_back_left);
  4022f4:	eefc 7ac9 	vcvt.u32.f32	s15, s18
  4022f8:	ee17 1a90 	vmov	r1, s15
  4022fc:	2001      	movs	r0, #1
  4022fe:	47a0      	blx	r4
	set_pwm_drive_motor(2, effort_back_right);
  402300:	eefc 7ae8 	vcvt.u32.f32	s15, s17
  402304:	ee17 1a90 	vmov	r1, s15
  402308:	2002      	movs	r0, #2
  40230a:	47a0      	blx	r4
	set_pwm_drive_motor(3, effort_front_right);
  40230c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  402310:	ee17 1a90 	vmov	r1, s15
  402314:	2003      	movs	r0, #3
  402316:	47a0      	blx	r4
	//set directions for motors based on effort
	/*gpio_set_pin_level(Motor_0_Dir, ((effort_front_right > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_1_Dir, ((effort_front_left > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_2_Dir, ((effort_back_left > 0) ? CCW : CW));
	gpio_set_pin_level(Motor_3_Dir, ((effort_back_right > 0) ? CCW : CW));	*/
}
  402318:	ecbd 8b04 	vpop	{d8-d9}
  40231c:	bd10      	pop	{r4, pc}
  40231e:	bf00      	nop
  402320:	00402859 	.word	0x00402859
  402324:	00000000 	.word	0x00000000

00402328 <wheelMotorPID>:
int wheelMotorPID(float target_fr, float target_fl, float target_bl, float target_br){
  402328:	b5f0      	push	{r4, r5, r6, r7, lr}
  40232a:	ed2d 8b04 	vpush	{d8-d9}
  40232e:	b083      	sub	sp, #12
  402330:	ee08 0a10 	vmov	s16, r0
  402334:	ee08 1a90 	vmov	s17, r1
  402338:	ee09 2a10 	vmov	s18, r2
  40233c:	ee09 3a90 	vmov	s19, r3
	s = wheel_speed_back_left();
  402340:	4b7d      	ldr	r3, [pc, #500]	; (402538 <wheelMotorPID+0x210>)
  402342:	4798      	blx	r3
  402344:	9001      	str	r0, [sp, #4]
	float error_front_right = target_fr - wheel_speed_front_right();
  402346:	4b7d      	ldr	r3, [pc, #500]	; (40253c <wheelMotorPID+0x214>)
  402348:	4798      	blx	r3
  40234a:	ee07 0a90 	vmov	s15, r0
  40234e:	ee38 8a67 	vsub.f32	s16, s16, s15
	float error_front_left = target_fl - wheel_speed_front_left();
  402352:	4b7b      	ldr	r3, [pc, #492]	; (402540 <wheelMotorPID+0x218>)
  402354:	4798      	blx	r3
  402356:	ee07 0a90 	vmov	s15, r0
  40235a:	ee78 8ae7 	vsub.f32	s17, s17, s15
	float error_back_left = target_bl - s;
  40235e:	eddd 7a01 	vldr	s15, [sp, #4]
  402362:	ee39 9a67 	vsub.f32	s18, s18, s15
	float error_back_right = target_br - wheel_speed_back_right();
  402366:	4b77      	ldr	r3, [pc, #476]	; (402544 <wheelMotorPID+0x21c>)
  402368:	4798      	blx	r3
  40236a:	ee07 0a90 	vmov	s15, r0
  40236e:	ee79 9ae7 	vsub.f32	s19, s19, s15
	error_sum_front_right += error_front_right;
  402372:	4b75      	ldr	r3, [pc, #468]	; (402548 <wheelMotorPID+0x220>)
  402374:	edd3 7a01 	vldr	s15, [r3, #4]
  402378:	ee77 7a88 	vadd.f32	s15, s15, s16
  40237c:	edc3 7a01 	vstr	s15, [r3, #4]
	error_sum_front_left += error_front_left;//error_front_left;
  402380:	edd3 7a00 	vldr	s15, [r3]
  402384:	ee77 7aa8 	vadd.f32	s15, s15, s17
  402388:	edc3 7a00 	vstr	s15, [r3]
	error_sum_back_left += error_back_left;
  40238c:	edd3 7a02 	vldr	s15, [r3, #8]
  402390:	ee77 7a89 	vadd.f32	s15, s15, s18
  402394:	edc3 7a02 	vstr	s15, [r3, #8]
	error_sum_back_right += error_sum_back_right;
  402398:	edd3 7a03 	vldr	s15, [r3, #12]
  40239c:	ee77 7aa7 	vadd.f32	s15, s15, s15
  4023a0:	edc3 7a03 	vstr	s15, [r3, #12]
	if(abs(error_front_right) <= 0.05 && abs(error_front_left) <= 0.05 && abs(error_back_left) <= 0.05 && abs(error_back_right) <= 0.05){
  4023a4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  4023a8:	ee17 0a90 	vmov	r0, s15
  4023ac:	2800      	cmp	r0, #0
  4023ae:	bfb8      	it	lt
  4023b0:	4240      	neglt	r0, r0
  4023b2:	4b66      	ldr	r3, [pc, #408]	; (40254c <wheelMotorPID+0x224>)
  4023b4:	4798      	blx	r3
  4023b6:	a35c      	add	r3, pc, #368	; (adr r3, 402528 <wheelMotorPID+0x200>)
  4023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023bc:	4c64      	ldr	r4, [pc, #400]	; (402550 <wheelMotorPID+0x228>)
  4023be:	47a0      	blx	r4
  4023c0:	b358      	cbz	r0, 40241a <wheelMotorPID+0xf2>
  4023c2:	eefd 7ae8 	vcvt.s32.f32	s15, s17
  4023c6:	ee17 0a90 	vmov	r0, s15
  4023ca:	2800      	cmp	r0, #0
  4023cc:	bfb8      	it	lt
  4023ce:	4240      	neglt	r0, r0
  4023d0:	4b5e      	ldr	r3, [pc, #376]	; (40254c <wheelMotorPID+0x224>)
  4023d2:	4798      	blx	r3
  4023d4:	a354      	add	r3, pc, #336	; (adr r3, 402528 <wheelMotorPID+0x200>)
  4023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023da:	47a0      	blx	r4
  4023dc:	b1e8      	cbz	r0, 40241a <wheelMotorPID+0xf2>
  4023de:	eefd 7ac9 	vcvt.s32.f32	s15, s18
  4023e2:	ee17 0a90 	vmov	r0, s15
  4023e6:	2800      	cmp	r0, #0
  4023e8:	bfb8      	it	lt
  4023ea:	4240      	neglt	r0, r0
  4023ec:	4b57      	ldr	r3, [pc, #348]	; (40254c <wheelMotorPID+0x224>)
  4023ee:	4798      	blx	r3
  4023f0:	a34d      	add	r3, pc, #308	; (adr r3, 402528 <wheelMotorPID+0x200>)
  4023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023f6:	47a0      	blx	r4
  4023f8:	b178      	cbz	r0, 40241a <wheelMotorPID+0xf2>
  4023fa:	eefd 7ae9 	vcvt.s32.f32	s15, s19
  4023fe:	ee17 0a90 	vmov	r0, s15
  402402:	2800      	cmp	r0, #0
  402404:	bfb8      	it	lt
  402406:	4240      	neglt	r0, r0
  402408:	4b50      	ldr	r3, [pc, #320]	; (40254c <wheelMotorPID+0x224>)
  40240a:	4798      	blx	r3
  40240c:	a346      	add	r3, pc, #280	; (adr r3, 402528 <wheelMotorPID+0x200>)
  40240e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402412:	47a0      	blx	r4
  402414:	2800      	cmp	r0, #0
  402416:	f040 8085 	bne.w	402524 <wheelMotorPID+0x1fc>
	error_back_left = convert_linear_to_pwm(1, error_back_left);
  40241a:	ee19 1a10 	vmov	r1, s18
  40241e:	2001      	movs	r0, #1
  402420:	4b4c      	ldr	r3, [pc, #304]	; (402554 <wheelMotorPID+0x22c>)
  402422:	4798      	blx	r3
  402424:	4605      	mov	r5, r0
	if ((error_sum_front_right)> PID_I_Limit) error_sum_front_right= PID_I_Limit;
  402426:	4b48      	ldr	r3, [pc, #288]	; (402548 <wheelMotorPID+0x220>)
  402428:	ed93 7a01 	vldr	s14, [r3, #4]
  40242c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 402558 <wheelMotorPID+0x230>
  402430:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402438:	dd01      	ble.n	40243e <wheelMotorPID+0x116>
  40243a:	edc3 7a01 	vstr	s15, [r3, #4]
	if ((error_sum_front_right)< -PID_I_Limit) error_sum_front_right=-PID_I_Limit;
  40243e:	4b42      	ldr	r3, [pc, #264]	; (402548 <wheelMotorPID+0x220>)
  402440:	ed93 7a01 	vldr	s14, [r3, #4]
  402444:	eddf 7a45 	vldr	s15, [pc, #276]	; 40255c <wheelMotorPID+0x234>
  402448:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402450:	d501      	bpl.n	402456 <wheelMotorPID+0x12e>
  402452:	edc3 7a01 	vstr	s15, [r3, #4]
	if ((error_sum_front_left)> PID_I_Limit) error_sum_front_left= PID_I_Limit;
  402456:	4b3c      	ldr	r3, [pc, #240]	; (402548 <wheelMotorPID+0x220>)
  402458:	ed93 7a00 	vldr	s14, [r3]
  40245c:	eddf 7a3e 	vldr	s15, [pc, #248]	; 402558 <wheelMotorPID+0x230>
  402460:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402468:	dd01      	ble.n	40246e <wheelMotorPID+0x146>
  40246a:	edc3 7a00 	vstr	s15, [r3]
	if ((error_sum_front_left)< -PID_I_Limit) error_sum_front_left=-PID_I_Limit;
  40246e:	4b36      	ldr	r3, [pc, #216]	; (402548 <wheelMotorPID+0x220>)
  402470:	ed93 7a00 	vldr	s14, [r3]
  402474:	eddf 7a39 	vldr	s15, [pc, #228]	; 40255c <wheelMotorPID+0x234>
  402478:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402480:	d501      	bpl.n	402486 <wheelMotorPID+0x15e>
  402482:	edc3 7a00 	vstr	s15, [r3]
	if ((error_sum_back_left)> PID_I_Limit) error_sum_back_left= PID_I_Limit;
  402486:	4b30      	ldr	r3, [pc, #192]	; (402548 <wheelMotorPID+0x220>)
  402488:	ed93 7a02 	vldr	s14, [r3, #8]
  40248c:	eddf 7a32 	vldr	s15, [pc, #200]	; 402558 <wheelMotorPID+0x230>
  402490:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402498:	dd01      	ble.n	40249e <wheelMotorPID+0x176>
  40249a:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((error_sum_back_left)< -PID_I_Limit) error_sum_back_left=-PID_I_Limit;
  40249e:	4b2a      	ldr	r3, [pc, #168]	; (402548 <wheelMotorPID+0x220>)
  4024a0:	ed93 7a02 	vldr	s14, [r3, #8]
  4024a4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 40255c <wheelMotorPID+0x234>
  4024a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4024b0:	d501      	bpl.n	4024b6 <wheelMotorPID+0x18e>
  4024b2:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((error_sum_back_right)> PID_I_Limit) error_sum_back_right= PID_I_Limit;
  4024b6:	4b24      	ldr	r3, [pc, #144]	; (402548 <wheelMotorPID+0x220>)
  4024b8:	ed93 7a03 	vldr	s14, [r3, #12]
  4024bc:	eddf 7a26 	vldr	s15, [pc, #152]	; 402558 <wheelMotorPID+0x230>
  4024c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4024c8:	dd01      	ble.n	4024ce <wheelMotorPID+0x1a6>
  4024ca:	edc3 7a03 	vstr	s15, [r3, #12]
	if ((error_sum_back_right)< -PID_I_Limit) error_sum_back_right=-PID_I_Limit;
  4024ce:	4b1e      	ldr	r3, [pc, #120]	; (402548 <wheelMotorPID+0x220>)
  4024d0:	ed93 7a03 	vldr	s14, [r3, #12]
  4024d4:	eddf 7a21 	vldr	s15, [pc, #132]	; 40255c <wheelMotorPID+0x234>
  4024d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4024e0:	d501      	bpl.n	4024e6 <wheelMotorPID+0x1be>
  4024e2:	edc3 7a03 	vstr	s15, [r3, #12]
	float effort_back_left = error_back_left + KI * error_sum_back_left;
  4024e6:	4c1e      	ldr	r4, [pc, #120]	; (402560 <wheelMotorPID+0x238>)
  4024e8:	4b17      	ldr	r3, [pc, #92]	; (402548 <wheelMotorPID+0x220>)
  4024ea:	6898      	ldr	r0, [r3, #8]
  4024ec:	47a0      	blx	r4
  4024ee:	a310      	add	r3, pc, #64	; (adr r3, 402530 <wheelMotorPID+0x208>)
  4024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024f4:	4e1b      	ldr	r6, [pc, #108]	; (402564 <wheelMotorPID+0x23c>)
  4024f6:	47b0      	blx	r6
  4024f8:	4606      	mov	r6, r0
  4024fa:	460f      	mov	r7, r1
  4024fc:	4628      	mov	r0, r5
  4024fe:	47a0      	blx	r4
  402500:	4632      	mov	r2, r6
  402502:	463b      	mov	r3, r7
  402504:	4c18      	ldr	r4, [pc, #96]	; (402568 <wheelMotorPID+0x240>)
  402506:	47a0      	blx	r4
  402508:	4b18      	ldr	r3, [pc, #96]	; (40256c <wheelMotorPID+0x244>)
  40250a:	4798      	blx	r3
	setWheelMotorEffort(2455, 2455, effort_back_left, 2455);
  40250c:	4c18      	ldr	r4, [pc, #96]	; (402570 <wheelMotorPID+0x248>)
  40250e:	4623      	mov	r3, r4
  402510:	4602      	mov	r2, r0
  402512:	4621      	mov	r1, r4
  402514:	4620      	mov	r0, r4
  402516:	4c17      	ldr	r4, [pc, #92]	; (402574 <wheelMotorPID+0x24c>)
  402518:	47a0      	blx	r4
	return 0;
  40251a:	2000      	movs	r0, #0
}
  40251c:	b003      	add	sp, #12
  40251e:	ecbd 8b04 	vpop	{d8-d9}
  402522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1;
  402524:	2001      	movs	r0, #1
  402526:	e7f9      	b.n	40251c <wheelMotorPID+0x1f4>
  402528:	9999999a 	.word	0x9999999a
  40252c:	3fa99999 	.word	0x3fa99999
  402530:	47ae147b 	.word	0x47ae147b
  402534:	3f847ae1 	.word	0x3f847ae1
  402538:	004021b1 	.word	0x004021b1
  40253c:	00402121 	.word	0x00402121
  402540:	00402169 	.word	0x00402169
  402544:	004021f9 	.word	0x004021f9
  402548:	204000f0 	.word	0x204000f0
  40254c:	00402bdd 	.word	0x00402bdd
  402550:	004031a1 	.word	0x004031a1
  402554:	00402241 	.word	0x00402241
  402558:	42900000 	.word	0x42900000
  40255c:	c2900000 	.word	0xc2900000
  402560:	00402c01 	.word	0x00402c01
  402564:	00402ca9 	.word	0x00402ca9
  402568:	00402945 	.word	0x00402945
  40256c:	004031dd 	.word	0x004031dd
  402570:	45197000 	.word	0x45197000
  402574:	004022d1 	.word	0x004022d1

00402578 <NPP_init>:
  402578:	4a0a      	ldr	r2, [pc, #40]	; (4025a4 <NPP_init+0x2c>)
  40257a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  40257c:	f3c3 3300 	ubfx	r3, r3, #12, #1
  402580:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  402582:	f3c1 3140 	ubfx	r1, r1, #13, #1
uint8_t kicker; //kicker solenoid information
uint8_t chipper; //chipper solenoid information


void NPP_init(uint8_t *robot_ID){
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  402586:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  40258a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  40258c:	f3c1 3180 	ubfx	r1, r1, #14, #1
				(gpio_get_pin_level(DipSwitch1) << 1) +
  402590:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  402594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  402596:	f3c2 32c0 	ubfx	r2, r2, #15, #1
				(gpio_get_pin_level(DipSwitch2) << 2) +
				(gpio_get_pin_level(DipSwitch3) << 3);
  40259a:	00d2      	lsls	r2, r2, #3
				(gpio_get_pin_level(DipSwitch2) << 2) +
  40259c:	fa52 f383 	uxtab	r3, r2, r3
	*robot_ID = gpio_get_pin_level(DipSwitch0) + //reads dip switches 3-0 to set robot_ID
  4025a0:	7003      	strb	r3, [r0, #0]
  4025a2:	4770      	bx	lr
  4025a4:	400e1400 	.word	0x400e1400

004025a8 <nRF24_write_to_register>:
  4025a8:	b530      	push	{r4, r5, lr}
  4025aa:	b083      	sub	sp, #12
  4025ac:	f040 0020 	orr.w	r0, r0, #32
  4025b0:	f88d 0004 	strb.w	r0, [sp, #4]
  4025b4:	f88d 1005 	strb.w	r1, [sp, #5]
  4025b8:	4c05      	ldr	r4, [pc, #20]	; (4025d0 <nRF24_write_to_register+0x28>)
  4025ba:	2508      	movs	r5, #8
  4025bc:	6365      	str	r5, [r4, #52]	; 0x34
  4025be:	2202      	movs	r2, #2
  4025c0:	a901      	add	r1, sp, #4
  4025c2:	4b04      	ldr	r3, [pc, #16]	; (4025d4 <nRF24_write_to_register+0x2c>)
  4025c4:	6818      	ldr	r0, [r3, #0]
  4025c6:	4b04      	ldr	r3, [pc, #16]	; (4025d8 <nRF24_write_to_register+0x30>)
  4025c8:	4798      	blx	r3
  4025ca:	6325      	str	r5, [r4, #48]	; 0x30
  4025cc:	b003      	add	sp, #12
  4025ce:	bd30      	pop	{r4, r5, pc}
  4025d0:	400e1000 	.word	0x400e1000
  4025d4:	20400200 	.word	0x20400200
  4025d8:	00400d59 	.word	0x00400d59

004025dc <nRF24_write_to_register_multi_byte>:
  4025dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4025e0:	b083      	sub	sp, #12
  4025e2:	4688      	mov	r8, r1
  4025e4:	4691      	mov	r9, r2
  4025e6:	f040 0020 	orr.w	r0, r0, #32
  4025ea:	a902      	add	r1, sp, #8
  4025ec:	f801 0d01 	strb.w	r0, [r1, #-1]!
  4025f0:	4c08      	ldr	r4, [pc, #32]	; (402614 <nRF24_write_to_register_multi_byte+0x38>)
  4025f2:	2508      	movs	r5, #8
  4025f4:	6365      	str	r5, [r4, #52]	; 0x34
  4025f6:	4f08      	ldr	r7, [pc, #32]	; (402618 <nRF24_write_to_register_multi_byte+0x3c>)
  4025f8:	2201      	movs	r2, #1
  4025fa:	6838      	ldr	r0, [r7, #0]
  4025fc:	4e07      	ldr	r6, [pc, #28]	; (40261c <nRF24_write_to_register_multi_byte+0x40>)
  4025fe:	47b0      	blx	r6
  402600:	fa1f f289 	uxth.w	r2, r9
  402604:	4641      	mov	r1, r8
  402606:	6838      	ldr	r0, [r7, #0]
  402608:	47b0      	blx	r6
  40260a:	6325      	str	r5, [r4, #48]	; 0x30
  40260c:	b003      	add	sp, #12
  40260e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402612:	bf00      	nop
  402614:	400e1000 	.word	0x400e1000
  402618:	20400200 	.word	0x20400200
  40261c:	00400d59 	.word	0x00400d59

00402620 <nRF24_read_from_register>:
  402620:	b570      	push	{r4, r5, r6, lr}
  402622:	b082      	sub	sp, #8
  402624:	a902      	add	r1, sp, #8
  402626:	f801 0d02 	strb.w	r0, [r1, #-2]!
  40262a:	4c09      	ldr	r4, [pc, #36]	; (402650 <nRF24_read_from_register+0x30>)
  40262c:	2508      	movs	r5, #8
  40262e:	6365      	str	r5, [r4, #52]	; 0x34
  402630:	4e08      	ldr	r6, [pc, #32]	; (402654 <nRF24_read_from_register+0x34>)
  402632:	2201      	movs	r2, #1
  402634:	6830      	ldr	r0, [r6, #0]
  402636:	4b08      	ldr	r3, [pc, #32]	; (402658 <nRF24_read_from_register+0x38>)
  402638:	4798      	blx	r3
  40263a:	2201      	movs	r2, #1
  40263c:	f10d 0107 	add.w	r1, sp, #7
  402640:	6830      	ldr	r0, [r6, #0]
  402642:	4b06      	ldr	r3, [pc, #24]	; (40265c <nRF24_read_from_register+0x3c>)
  402644:	4798      	blx	r3
  402646:	6325      	str	r5, [r4, #48]	; 0x30
  402648:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40264c:	b002      	add	sp, #8
  40264e:	bd70      	pop	{r4, r5, r6, pc}
  402650:	400e1000 	.word	0x400e1000
  402654:	20400200 	.word	0x20400200
  402658:	00400d59 	.word	0x00400d59
  40265c:	00400d89 	.word	0x00400d89

00402660 <nRF24_send_SPI_command>:
  402660:	b530      	push	{r4, r5, lr}
  402662:	b083      	sub	sp, #12
  402664:	a902      	add	r1, sp, #8
  402666:	f801 0d01 	strb.w	r0, [r1, #-1]!
  40266a:	4c05      	ldr	r4, [pc, #20]	; (402680 <nRF24_send_SPI_command+0x20>)
  40266c:	2508      	movs	r5, #8
  40266e:	6365      	str	r5, [r4, #52]	; 0x34
  402670:	2201      	movs	r2, #1
  402672:	4b04      	ldr	r3, [pc, #16]	; (402684 <nRF24_send_SPI_command+0x24>)
  402674:	6818      	ldr	r0, [r3, #0]
  402676:	4b04      	ldr	r3, [pc, #16]	; (402688 <nRF24_send_SPI_command+0x28>)
  402678:	4798      	blx	r3
  40267a:	6325      	str	r5, [r4, #48]	; 0x30
  40267c:	b003      	add	sp, #12
  40267e:	bd30      	pop	{r4, r5, pc}
  402680:	400e1000 	.word	0x400e1000
  402684:	20400200 	.word	0x20400200
  402688:	00400d59 	.word	0x00400d59

0040268c <nRF24_receive_data>:
  40268c:	b570      	push	{r4, r5, r6, lr}
  40268e:	b082      	sub	sp, #8
  402690:	a902      	add	r1, sp, #8
  402692:	2361      	movs	r3, #97	; 0x61
  402694:	f801 3d01 	strb.w	r3, [r1, #-1]!
  402698:	4c13      	ldr	r4, [pc, #76]	; (4026e8 <nRF24_receive_data+0x5c>)
  40269a:	2508      	movs	r5, #8
  40269c:	6365      	str	r5, [r4, #52]	; 0x34
  40269e:	4e13      	ldr	r6, [pc, #76]	; (4026ec <nRF24_receive_data+0x60>)
  4026a0:	2201      	movs	r2, #1
  4026a2:	6830      	ldr	r0, [r6, #0]
  4026a4:	4b12      	ldr	r3, [pc, #72]	; (4026f0 <nRF24_receive_data+0x64>)
  4026a6:	4798      	blx	r3
  4026a8:	2220      	movs	r2, #32
  4026aa:	4b12      	ldr	r3, [pc, #72]	; (4026f4 <nRF24_receive_data+0x68>)
  4026ac:	6819      	ldr	r1, [r3, #0]
  4026ae:	6830      	ldr	r0, [r6, #0]
  4026b0:	4b11      	ldr	r3, [pc, #68]	; (4026f8 <nRF24_receive_data+0x6c>)
  4026b2:	4798      	blx	r3
  4026b4:	6325      	str	r5, [r4, #48]	; 0x30
  4026b6:	200b      	movs	r0, #11
  4026b8:	4b10      	ldr	r3, [pc, #64]	; (4026fc <nRF24_receive_data+0x70>)
  4026ba:	4798      	blx	r3
  4026bc:	20e2      	movs	r0, #226	; 0xe2
  4026be:	f88d 0007 	strb.w	r0, [sp, #7]
  4026c2:	4b0f      	ldr	r3, [pc, #60]	; (402700 <nRF24_receive_data+0x74>)
  4026c4:	4798      	blx	r3
  4026c6:	2007      	movs	r0, #7
  4026c8:	4b0e      	ldr	r3, [pc, #56]	; (402704 <nRF24_receive_data+0x78>)
  4026ca:	4798      	blx	r3
  4026cc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  4026d0:	b2c9      	uxtb	r1, r1
  4026d2:	2007      	movs	r0, #7
  4026d4:	4b0c      	ldr	r3, [pc, #48]	; (402708 <nRF24_receive_data+0x7c>)
  4026d6:	4798      	blx	r3
  4026d8:	2300      	movs	r3, #0
  4026da:	e000      	b.n	4026de <nRF24_receive_data+0x52>
  4026dc:	3301      	adds	r3, #1
  4026de:	2b1f      	cmp	r3, #31
  4026e0:	ddfc      	ble.n	4026dc <nRF24_receive_data+0x50>
  4026e2:	b002      	add	sp, #8
  4026e4:	bd70      	pop	{r4, r5, r6, pc}
  4026e6:	bf00      	nop
  4026e8:	400e1000 	.word	0x400e1000
  4026ec:	20400200 	.word	0x20400200
  4026f0:	00400d59 	.word	0x00400d59
  4026f4:	204001fc 	.word	0x204001fc
  4026f8:	00400d89 	.word	0x00400d89
  4026fc:	00400b31 	.word	0x00400b31
  402700:	00402661 	.word	0x00402661
  402704:	00402621 	.word	0x00402621
  402708:	004025a9 	.word	0x004025a9

0040270c <nRF24_init>:
  40270c:	b530      	push	{r4, r5, lr}
  40270e:	b083      	sub	sp, #12
  402710:	4605      	mov	r5, r0
  402712:	4c1f      	ldr	r4, [pc, #124]	; (402790 <nRF24_init+0x84>)
  402714:	491f      	ldr	r1, [pc, #124]	; (402794 <nRF24_init+0x88>)
  402716:	4620      	mov	r0, r4
  402718:	4b1f      	ldr	r3, [pc, #124]	; (402798 <nRF24_init+0x8c>)
  40271a:	4798      	blx	r3
  40271c:	4620      	mov	r0, r4
  40271e:	4b1f      	ldr	r3, [pc, #124]	; (40279c <nRF24_init+0x90>)
  402720:	4798      	blx	r3
  402722:	4b1f      	ldr	r3, [pc, #124]	; (4027a0 <nRF24_init+0x94>)
  402724:	601d      	str	r5, [r3, #0]
  402726:	2504      	movs	r5, #4
  402728:	4b1e      	ldr	r3, [pc, #120]	; (4027a4 <nRF24_init+0x98>)
  40272a:	635d      	str	r5, [r3, #52]	; 0x34
  40272c:	2100      	movs	r1, #0
  40272e:	4608      	mov	r0, r1
  402730:	4c1d      	ldr	r4, [pc, #116]	; (4027a8 <nRF24_init+0x9c>)
  402732:	47a0      	blx	r4
  402734:	2007      	movs	r0, #7
  402736:	4b1d      	ldr	r3, [pc, #116]	; (4027ac <nRF24_init+0xa0>)
  402738:	4798      	blx	r3
  40273a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  40273e:	b2c9      	uxtb	r1, r1
  402740:	2007      	movs	r0, #7
  402742:	47a0      	blx	r4
  402744:	2100      	movs	r1, #0
  402746:	2001      	movs	r0, #1
  402748:	47a0      	blx	r4
  40274a:	2100      	movs	r1, #0
  40274c:	2002      	movs	r0, #2
  40274e:	47a0      	blx	r4
  402750:	2103      	movs	r1, #3
  402752:	4608      	mov	r0, r1
  402754:	47a0      	blx	r4
  402756:	2100      	movs	r1, #0
  402758:	4628      	mov	r0, r5
  40275a:	47a0      	blx	r4
  40275c:	2178      	movs	r1, #120	; 0x78
  40275e:	2005      	movs	r0, #5
  402760:	47a0      	blx	r4
  402762:	2106      	movs	r1, #6
  402764:	4608      	mov	r0, r1
  402766:	47a0      	blx	r4
  402768:	4b11      	ldr	r3, [pc, #68]	; (4027b0 <nRF24_init+0xa4>)
  40276a:	e893 0003 	ldmia.w	r3, {r0, r1}
  40276e:	9000      	str	r0, [sp, #0]
  402770:	f88d 1004 	strb.w	r1, [sp, #4]
  402774:	2205      	movs	r2, #5
  402776:	4669      	mov	r1, sp
  402778:	2010      	movs	r0, #16
  40277a:	4b0e      	ldr	r3, [pc, #56]	; (4027b4 <nRF24_init+0xa8>)
  40277c:	4798      	blx	r3
  40277e:	2102      	movs	r1, #2
  402780:	2000      	movs	r0, #0
  402782:	47a0      	blx	r4
  402784:	490c      	ldr	r1, [pc, #48]	; (4027b8 <nRF24_init+0xac>)
  402786:	2021      	movs	r0, #33	; 0x21
  402788:	4b0c      	ldr	r3, [pc, #48]	; (4027bc <nRF24_init+0xb0>)
  40278a:	4798      	blx	r3
  40278c:	b003      	add	sp, #12
  40278e:	bd30      	pop	{r4, r5, pc}
  402790:	20400164 	.word	0x20400164
  402794:	20400200 	.word	0x20400200
  402798:	00400f9d 	.word	0x00400f9d
  40279c:	00400ebd 	.word	0x00400ebd
  4027a0:	204001fc 	.word	0x204001fc
  4027a4:	400e1400 	.word	0x400e1400
  4027a8:	004025a9 	.word	0x004025a9
  4027ac:	00402621 	.word	0x00402621
  4027b0:	004035e8 	.word	0x004035e8
  4027b4:	004025dd 	.word	0x004025dd
  4027b8:	0040268d 	.word	0x0040268d
  4027bc:	00400be9 	.word	0x00400be9

004027c0 <nRF_24_is_data_available>:
  4027c0:	b508      	push	{r3, lr}
  4027c2:	2007      	movs	r0, #7
  4027c4:	4b06      	ldr	r3, [pc, #24]	; (4027e0 <nRF_24_is_data_available+0x20>)
  4027c6:	4798      	blx	r3
  4027c8:	f000 0042 	and.w	r0, r0, #66	; 0x42
  4027cc:	2842      	cmp	r0, #66	; 0x42
  4027ce:	d001      	beq.n	4027d4 <nRF_24_is_data_available+0x14>
  4027d0:	2000      	movs	r0, #0
  4027d2:	bd08      	pop	{r3, pc}
  4027d4:	2140      	movs	r1, #64	; 0x40
  4027d6:	2007      	movs	r0, #7
  4027d8:	4b02      	ldr	r3, [pc, #8]	; (4027e4 <nRF_24_is_data_available+0x24>)
  4027da:	4798      	blx	r3
  4027dc:	2001      	movs	r0, #1
  4027de:	bd08      	pop	{r3, pc}
  4027e0:	00402621 	.word	0x00402621
  4027e4:	004025a9 	.word	0x004025a9

004027e8 <nRF24_enter_receive>:
  4027e8:	b510      	push	{r4, lr}
  4027ea:	b082      	sub	sp, #8
  4027ec:	2000      	movs	r0, #0
  4027ee:	4b0f      	ldr	r3, [pc, #60]	; (40282c <nRF24_enter_receive+0x44>)
  4027f0:	4798      	blx	r3
  4027f2:	f040 0101 	orr.w	r1, r0, #1
  4027f6:	b2c9      	uxtb	r1, r1
  4027f8:	2000      	movs	r0, #0
  4027fa:	4c0d      	ldr	r4, [pc, #52]	; (402830 <nRF24_enter_receive+0x48>)
  4027fc:	47a0      	blx	r4
  4027fe:	2102      	movs	r1, #2
  402800:	4608      	mov	r0, r1
  402802:	47a0      	blx	r4
  402804:	4b0b      	ldr	r3, [pc, #44]	; (402834 <nRF24_enter_receive+0x4c>)
  402806:	e893 0003 	ldmia.w	r3, {r0, r1}
  40280a:	9000      	str	r0, [sp, #0]
  40280c:	f88d 1004 	strb.w	r1, [sp, #4]
  402810:	2205      	movs	r2, #5
  402812:	4669      	mov	r1, sp
  402814:	200b      	movs	r0, #11
  402816:	4b08      	ldr	r3, [pc, #32]	; (402838 <nRF24_enter_receive+0x50>)
  402818:	4798      	blx	r3
  40281a:	2120      	movs	r1, #32
  40281c:	2012      	movs	r0, #18
  40281e:	47a0      	blx	r4
  402820:	2204      	movs	r2, #4
  402822:	4b06      	ldr	r3, [pc, #24]	; (40283c <nRF24_enter_receive+0x54>)
  402824:	631a      	str	r2, [r3, #48]	; 0x30
  402826:	b002      	add	sp, #8
  402828:	bd10      	pop	{r4, pc}
  40282a:	bf00      	nop
  40282c:	00402621 	.word	0x00402621
  402830:	004025a9 	.word	0x004025a9
  402834:	004035e8 	.word	0x004035e8
  402838:	004025dd 	.word	0x004025dd
  40283c:	400e1400 	.word	0x400e1400

00402840 <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  402840:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CDTYUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cdtyupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  402842:	0149      	lsls	r1, r1, #5
  402844:	440b      	add	r3, r1
  402846:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  40284a:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CPRDUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cprdupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  40284c:	4419      	add	r1, r3
  40284e:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  402852:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  402856:	4770      	bx	lr

00402858 <set_pwm_drive_motor>:
}

void set_pwm_drive_motor(uint8_t target, uint32_t duty_cycle){
  402858:	b508      	push	{r3, lr}
	switch(target){
  40285a:	2803      	cmp	r0, #3
  40285c:	d81a      	bhi.n	402894 <set_pwm_drive_motor+0x3c>
  40285e:	e8df f000 	tbb	[pc, r0]
  402862:	0802      	.short	0x0802
  402864:	140e      	.short	0x140e
		case 0: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_0, duty_cycle); //motor 0, PA13
  402866:	460a      	mov	r2, r1
  402868:	2102      	movs	r1, #2
  40286a:	480b      	ldr	r0, [pc, #44]	; (402898 <set_pwm_drive_motor+0x40>)
  40286c:	4b0b      	ldr	r3, [pc, #44]	; (40289c <set_pwm_drive_motor+0x44>)
  40286e:	4798      	blx	r3
			break;
  402870:	bd08      	pop	{r3, pc}
		case 1: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_1, duty_cycle); //motor 1, PA17
  402872:	460a      	mov	r2, r1
  402874:	2103      	movs	r1, #3
  402876:	4808      	ldr	r0, [pc, #32]	; (402898 <set_pwm_drive_motor+0x40>)
  402878:	4b08      	ldr	r3, [pc, #32]	; (40289c <set_pwm_drive_motor+0x44>)
  40287a:	4798      	blx	r3
			break;
  40287c:	bd08      	pop	{r3, pc}
		case 2: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_2, duty_cycle); //motor 2, PA2
  40287e:	460a      	mov	r2, r1
  402880:	2101      	movs	r1, #1
  402882:	4805      	ldr	r0, [pc, #20]	; (402898 <set_pwm_drive_motor+0x40>)
  402884:	4b05      	ldr	r3, [pc, #20]	; (40289c <set_pwm_drive_motor+0x44>)
  402886:	4798      	blx	r3
			break;
  402888:	bd08      	pop	{r3, pc}
		case 3: set_pwm_channel(&(PWM_0.device), PWM_0_CHANNEL_3, duty_cycle); //motor 3, PD11
  40288a:	460a      	mov	r2, r1
  40288c:	2100      	movs	r1, #0
  40288e:	4802      	ldr	r0, [pc, #8]	; (402898 <set_pwm_drive_motor+0x40>)
  402890:	4b02      	ldr	r3, [pc, #8]	; (40289c <set_pwm_drive_motor+0x44>)
  402892:	4798      	blx	r3
  402894:	bd08      	pop	{r3, pc}
  402896:	bf00      	nop
  402898:	20400124 	.word	0x20400124
  40289c:	00402841 	.word	0x00402841

004028a0 <set_pwm_dribbler_motor>:
			break;
	}
}

//motor dribbler PA12
void set_pwm_dribbler_motor(uint32_t duty_cycle){
  4028a0:	b508      	push	{r3, lr}
	set_pwm_channel(&(PWM_1.device), PWM_1_CHANNEL_0, duty_cycle);
  4028a2:	4602      	mov	r2, r0
  4028a4:	2100      	movs	r1, #0
  4028a6:	4802      	ldr	r0, [pc, #8]	; (4028b0 <set_pwm_dribbler_motor+0x10>)
  4028a8:	4b02      	ldr	r3, [pc, #8]	; (4028b4 <set_pwm_dribbler_motor+0x14>)
  4028aa:	4798      	blx	r3
  4028ac:	bd08      	pop	{r3, pc}
  4028ae:	bf00      	nop
  4028b0:	2040017c 	.word	0x2040017c
  4028b4:	00402841 	.word	0x00402841

004028b8 <timer_task_PID_cb>:
  4028b8:	2201      	movs	r2, #1
  4028ba:	4b01      	ldr	r3, [pc, #4]	; (4028c0 <timer_task_PID_cb+0x8>)
  4028bc:	701a      	strb	r2, [r3, #0]
  4028be:	4770      	bx	lr
  4028c0:	20400120 	.word	0x20400120

004028c4 <timer_task_ADC_cb>:
  4028c4:	2201      	movs	r2, #1
  4028c6:	4b01      	ldr	r3, [pc, #4]	; (4028cc <timer_task_ADC_cb+0x8>)
  4028c8:	705a      	strb	r2, [r3, #1]
  4028ca:	4770      	bx	lr
  4028cc:	20400120 	.word	0x20400120

004028d0 <initialize_task_PID>:
  4028d0:	b510      	push	{r4, lr}
  4028d2:	4907      	ldr	r1, [pc, #28]	; (4028f0 <initialize_task_PID+0x20>)
  4028d4:	230a      	movs	r3, #10
  4028d6:	608b      	str	r3, [r1, #8]
  4028d8:	4b06      	ldr	r3, [pc, #24]	; (4028f4 <initialize_task_PID+0x24>)
  4028da:	60cb      	str	r3, [r1, #12]
  4028dc:	2301      	movs	r3, #1
  4028de:	740b      	strb	r3, [r1, #16]
  4028e0:	4c05      	ldr	r4, [pc, #20]	; (4028f8 <initialize_task_PID+0x28>)
  4028e2:	4620      	mov	r0, r4
  4028e4:	4b05      	ldr	r3, [pc, #20]	; (4028fc <initialize_task_PID+0x2c>)
  4028e6:	4798      	blx	r3
  4028e8:	4620      	mov	r0, r4
  4028ea:	4b05      	ldr	r3, [pc, #20]	; (402900 <initialize_task_PID+0x30>)
  4028ec:	4798      	blx	r3
  4028ee:	bd10      	pop	{r4, pc}
  4028f0:	204001d4 	.word	0x204001d4
  4028f4:	004028b9 	.word	0x004028b9
  4028f8:	204001b8 	.word	0x204001b8
  4028fc:	004010f9 	.word	0x004010f9
  402900:	004010bd 	.word	0x004010bd

00402904 <initialize_task_ADC>:
  402904:	b510      	push	{r4, lr}
  402906:	4907      	ldr	r1, [pc, #28]	; (402924 <initialize_task_ADC+0x20>)
  402908:	2332      	movs	r3, #50	; 0x32
  40290a:	608b      	str	r3, [r1, #8]
  40290c:	4b06      	ldr	r3, [pc, #24]	; (402928 <initialize_task_ADC+0x24>)
  40290e:	60cb      	str	r3, [r1, #12]
  402910:	2301      	movs	r3, #1
  402912:	740b      	strb	r3, [r1, #16]
  402914:	4c05      	ldr	r4, [pc, #20]	; (40292c <initialize_task_ADC+0x28>)
  402916:	4620      	mov	r0, r4
  402918:	4b05      	ldr	r3, [pc, #20]	; (402930 <initialize_task_ADC+0x2c>)
  40291a:	4798      	blx	r3
  40291c:	4620      	mov	r0, r4
  40291e:	4b05      	ldr	r3, [pc, #20]	; (402934 <initialize_task_ADC+0x30>)
  402920:	4798      	blx	r3
  402922:	bd10      	pop	{r4, pc}
  402924:	204001e8 	.word	0x204001e8
  402928:	004028c5 	.word	0x004028c5
  40292c:	20400148 	.word	0x20400148
  402930:	004010f9 	.word	0x004010f9
  402934:	004010bd 	.word	0x004010bd

00402938 <__aeabi_drsub>:
  402938:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40293c:	e002      	b.n	402944 <__adddf3>
  40293e:	bf00      	nop

00402940 <__aeabi_dsub>:
  402940:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402944 <__adddf3>:
  402944:	b530      	push	{r4, r5, lr}
  402946:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40294a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40294e:	ea94 0f05 	teq	r4, r5
  402952:	bf08      	it	eq
  402954:	ea90 0f02 	teqeq	r0, r2
  402958:	bf1f      	itttt	ne
  40295a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40295e:	ea55 0c02 	orrsne.w	ip, r5, r2
  402962:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402966:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40296a:	f000 80e2 	beq.w	402b32 <__adddf3+0x1ee>
  40296e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402972:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402976:	bfb8      	it	lt
  402978:	426d      	neglt	r5, r5
  40297a:	dd0c      	ble.n	402996 <__adddf3+0x52>
  40297c:	442c      	add	r4, r5
  40297e:	ea80 0202 	eor.w	r2, r0, r2
  402982:	ea81 0303 	eor.w	r3, r1, r3
  402986:	ea82 0000 	eor.w	r0, r2, r0
  40298a:	ea83 0101 	eor.w	r1, r3, r1
  40298e:	ea80 0202 	eor.w	r2, r0, r2
  402992:	ea81 0303 	eor.w	r3, r1, r3
  402996:	2d36      	cmp	r5, #54	; 0x36
  402998:	bf88      	it	hi
  40299a:	bd30      	pophi	{r4, r5, pc}
  40299c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4029a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4029a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4029a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4029ac:	d002      	beq.n	4029b4 <__adddf3+0x70>
  4029ae:	4240      	negs	r0, r0
  4029b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4029b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4029b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4029bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4029c0:	d002      	beq.n	4029c8 <__adddf3+0x84>
  4029c2:	4252      	negs	r2, r2
  4029c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4029c8:	ea94 0f05 	teq	r4, r5
  4029cc:	f000 80a7 	beq.w	402b1e <__adddf3+0x1da>
  4029d0:	f1a4 0401 	sub.w	r4, r4, #1
  4029d4:	f1d5 0e20 	rsbs	lr, r5, #32
  4029d8:	db0d      	blt.n	4029f6 <__adddf3+0xb2>
  4029da:	fa02 fc0e 	lsl.w	ip, r2, lr
  4029de:	fa22 f205 	lsr.w	r2, r2, r5
  4029e2:	1880      	adds	r0, r0, r2
  4029e4:	f141 0100 	adc.w	r1, r1, #0
  4029e8:	fa03 f20e 	lsl.w	r2, r3, lr
  4029ec:	1880      	adds	r0, r0, r2
  4029ee:	fa43 f305 	asr.w	r3, r3, r5
  4029f2:	4159      	adcs	r1, r3
  4029f4:	e00e      	b.n	402a14 <__adddf3+0xd0>
  4029f6:	f1a5 0520 	sub.w	r5, r5, #32
  4029fa:	f10e 0e20 	add.w	lr, lr, #32
  4029fe:	2a01      	cmp	r2, #1
  402a00:	fa03 fc0e 	lsl.w	ip, r3, lr
  402a04:	bf28      	it	cs
  402a06:	f04c 0c02 	orrcs.w	ip, ip, #2
  402a0a:	fa43 f305 	asr.w	r3, r3, r5
  402a0e:	18c0      	adds	r0, r0, r3
  402a10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402a14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402a18:	d507      	bpl.n	402a2a <__adddf3+0xe6>
  402a1a:	f04f 0e00 	mov.w	lr, #0
  402a1e:	f1dc 0c00 	rsbs	ip, ip, #0
  402a22:	eb7e 0000 	sbcs.w	r0, lr, r0
  402a26:	eb6e 0101 	sbc.w	r1, lr, r1
  402a2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402a2e:	d31b      	bcc.n	402a68 <__adddf3+0x124>
  402a30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402a34:	d30c      	bcc.n	402a50 <__adddf3+0x10c>
  402a36:	0849      	lsrs	r1, r1, #1
  402a38:	ea5f 0030 	movs.w	r0, r0, rrx
  402a3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402a40:	f104 0401 	add.w	r4, r4, #1
  402a44:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402a48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402a4c:	f080 809a 	bcs.w	402b84 <__adddf3+0x240>
  402a50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402a54:	bf08      	it	eq
  402a56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402a5a:	f150 0000 	adcs.w	r0, r0, #0
  402a5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402a62:	ea41 0105 	orr.w	r1, r1, r5
  402a66:	bd30      	pop	{r4, r5, pc}
  402a68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402a6c:	4140      	adcs	r0, r0
  402a6e:	eb41 0101 	adc.w	r1, r1, r1
  402a72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402a76:	f1a4 0401 	sub.w	r4, r4, #1
  402a7a:	d1e9      	bne.n	402a50 <__adddf3+0x10c>
  402a7c:	f091 0f00 	teq	r1, #0
  402a80:	bf04      	itt	eq
  402a82:	4601      	moveq	r1, r0
  402a84:	2000      	moveq	r0, #0
  402a86:	fab1 f381 	clz	r3, r1
  402a8a:	bf08      	it	eq
  402a8c:	3320      	addeq	r3, #32
  402a8e:	f1a3 030b 	sub.w	r3, r3, #11
  402a92:	f1b3 0220 	subs.w	r2, r3, #32
  402a96:	da0c      	bge.n	402ab2 <__adddf3+0x16e>
  402a98:	320c      	adds	r2, #12
  402a9a:	dd08      	ble.n	402aae <__adddf3+0x16a>
  402a9c:	f102 0c14 	add.w	ip, r2, #20
  402aa0:	f1c2 020c 	rsb	r2, r2, #12
  402aa4:	fa01 f00c 	lsl.w	r0, r1, ip
  402aa8:	fa21 f102 	lsr.w	r1, r1, r2
  402aac:	e00c      	b.n	402ac8 <__adddf3+0x184>
  402aae:	f102 0214 	add.w	r2, r2, #20
  402ab2:	bfd8      	it	le
  402ab4:	f1c2 0c20 	rsble	ip, r2, #32
  402ab8:	fa01 f102 	lsl.w	r1, r1, r2
  402abc:	fa20 fc0c 	lsr.w	ip, r0, ip
  402ac0:	bfdc      	itt	le
  402ac2:	ea41 010c 	orrle.w	r1, r1, ip
  402ac6:	4090      	lslle	r0, r2
  402ac8:	1ae4      	subs	r4, r4, r3
  402aca:	bfa2      	ittt	ge
  402acc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402ad0:	4329      	orrge	r1, r5
  402ad2:	bd30      	popge	{r4, r5, pc}
  402ad4:	ea6f 0404 	mvn.w	r4, r4
  402ad8:	3c1f      	subs	r4, #31
  402ada:	da1c      	bge.n	402b16 <__adddf3+0x1d2>
  402adc:	340c      	adds	r4, #12
  402ade:	dc0e      	bgt.n	402afe <__adddf3+0x1ba>
  402ae0:	f104 0414 	add.w	r4, r4, #20
  402ae4:	f1c4 0220 	rsb	r2, r4, #32
  402ae8:	fa20 f004 	lsr.w	r0, r0, r4
  402aec:	fa01 f302 	lsl.w	r3, r1, r2
  402af0:	ea40 0003 	orr.w	r0, r0, r3
  402af4:	fa21 f304 	lsr.w	r3, r1, r4
  402af8:	ea45 0103 	orr.w	r1, r5, r3
  402afc:	bd30      	pop	{r4, r5, pc}
  402afe:	f1c4 040c 	rsb	r4, r4, #12
  402b02:	f1c4 0220 	rsb	r2, r4, #32
  402b06:	fa20 f002 	lsr.w	r0, r0, r2
  402b0a:	fa01 f304 	lsl.w	r3, r1, r4
  402b0e:	ea40 0003 	orr.w	r0, r0, r3
  402b12:	4629      	mov	r1, r5
  402b14:	bd30      	pop	{r4, r5, pc}
  402b16:	fa21 f004 	lsr.w	r0, r1, r4
  402b1a:	4629      	mov	r1, r5
  402b1c:	bd30      	pop	{r4, r5, pc}
  402b1e:	f094 0f00 	teq	r4, #0
  402b22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402b26:	bf06      	itte	eq
  402b28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402b2c:	3401      	addeq	r4, #1
  402b2e:	3d01      	subne	r5, #1
  402b30:	e74e      	b.n	4029d0 <__adddf3+0x8c>
  402b32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402b36:	bf18      	it	ne
  402b38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402b3c:	d029      	beq.n	402b92 <__adddf3+0x24e>
  402b3e:	ea94 0f05 	teq	r4, r5
  402b42:	bf08      	it	eq
  402b44:	ea90 0f02 	teqeq	r0, r2
  402b48:	d005      	beq.n	402b56 <__adddf3+0x212>
  402b4a:	ea54 0c00 	orrs.w	ip, r4, r0
  402b4e:	bf04      	itt	eq
  402b50:	4619      	moveq	r1, r3
  402b52:	4610      	moveq	r0, r2
  402b54:	bd30      	pop	{r4, r5, pc}
  402b56:	ea91 0f03 	teq	r1, r3
  402b5a:	bf1e      	ittt	ne
  402b5c:	2100      	movne	r1, #0
  402b5e:	2000      	movne	r0, #0
  402b60:	bd30      	popne	{r4, r5, pc}
  402b62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402b66:	d105      	bne.n	402b74 <__adddf3+0x230>
  402b68:	0040      	lsls	r0, r0, #1
  402b6a:	4149      	adcs	r1, r1
  402b6c:	bf28      	it	cs
  402b6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402b72:	bd30      	pop	{r4, r5, pc}
  402b74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402b78:	bf3c      	itt	cc
  402b7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402b7e:	bd30      	popcc	{r4, r5, pc}
  402b80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402b84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402b88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402b8c:	f04f 0000 	mov.w	r0, #0
  402b90:	bd30      	pop	{r4, r5, pc}
  402b92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402b96:	bf1a      	itte	ne
  402b98:	4619      	movne	r1, r3
  402b9a:	4610      	movne	r0, r2
  402b9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402ba0:	bf1c      	itt	ne
  402ba2:	460b      	movne	r3, r1
  402ba4:	4602      	movne	r2, r0
  402ba6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402baa:	bf06      	itte	eq
  402bac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402bb0:	ea91 0f03 	teqeq	r1, r3
  402bb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402bb8:	bd30      	pop	{r4, r5, pc}
  402bba:	bf00      	nop

00402bbc <__aeabi_ui2d>:
  402bbc:	f090 0f00 	teq	r0, #0
  402bc0:	bf04      	itt	eq
  402bc2:	2100      	moveq	r1, #0
  402bc4:	4770      	bxeq	lr
  402bc6:	b530      	push	{r4, r5, lr}
  402bc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402bcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402bd0:	f04f 0500 	mov.w	r5, #0
  402bd4:	f04f 0100 	mov.w	r1, #0
  402bd8:	e750      	b.n	402a7c <__adddf3+0x138>
  402bda:	bf00      	nop

00402bdc <__aeabi_i2d>:
  402bdc:	f090 0f00 	teq	r0, #0
  402be0:	bf04      	itt	eq
  402be2:	2100      	moveq	r1, #0
  402be4:	4770      	bxeq	lr
  402be6:	b530      	push	{r4, r5, lr}
  402be8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402bec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402bf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402bf4:	bf48      	it	mi
  402bf6:	4240      	negmi	r0, r0
  402bf8:	f04f 0100 	mov.w	r1, #0
  402bfc:	e73e      	b.n	402a7c <__adddf3+0x138>
  402bfe:	bf00      	nop

00402c00 <__aeabi_f2d>:
  402c00:	0042      	lsls	r2, r0, #1
  402c02:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402c06:	ea4f 0131 	mov.w	r1, r1, rrx
  402c0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402c0e:	bf1f      	itttt	ne
  402c10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402c14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402c18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402c1c:	4770      	bxne	lr
  402c1e:	f092 0f00 	teq	r2, #0
  402c22:	bf14      	ite	ne
  402c24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402c28:	4770      	bxeq	lr
  402c2a:	b530      	push	{r4, r5, lr}
  402c2c:	f44f 7460 	mov.w	r4, #896	; 0x380
  402c30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402c38:	e720      	b.n	402a7c <__adddf3+0x138>
  402c3a:	bf00      	nop

00402c3c <__aeabi_ul2d>:
  402c3c:	ea50 0201 	orrs.w	r2, r0, r1
  402c40:	bf08      	it	eq
  402c42:	4770      	bxeq	lr
  402c44:	b530      	push	{r4, r5, lr}
  402c46:	f04f 0500 	mov.w	r5, #0
  402c4a:	e00a      	b.n	402c62 <__aeabi_l2d+0x16>

00402c4c <__aeabi_l2d>:
  402c4c:	ea50 0201 	orrs.w	r2, r0, r1
  402c50:	bf08      	it	eq
  402c52:	4770      	bxeq	lr
  402c54:	b530      	push	{r4, r5, lr}
  402c56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402c5a:	d502      	bpl.n	402c62 <__aeabi_l2d+0x16>
  402c5c:	4240      	negs	r0, r0
  402c5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402c62:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402c66:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402c6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402c6e:	f43f aedc 	beq.w	402a2a <__adddf3+0xe6>
  402c72:	f04f 0203 	mov.w	r2, #3
  402c76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402c7a:	bf18      	it	ne
  402c7c:	3203      	addne	r2, #3
  402c7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402c82:	bf18      	it	ne
  402c84:	3203      	addne	r2, #3
  402c86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402c8a:	f1c2 0320 	rsb	r3, r2, #32
  402c8e:	fa00 fc03 	lsl.w	ip, r0, r3
  402c92:	fa20 f002 	lsr.w	r0, r0, r2
  402c96:	fa01 fe03 	lsl.w	lr, r1, r3
  402c9a:	ea40 000e 	orr.w	r0, r0, lr
  402c9e:	fa21 f102 	lsr.w	r1, r1, r2
  402ca2:	4414      	add	r4, r2
  402ca4:	e6c1      	b.n	402a2a <__adddf3+0xe6>
  402ca6:	bf00      	nop

00402ca8 <__aeabi_dmul>:
  402ca8:	b570      	push	{r4, r5, r6, lr}
  402caa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402cae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402cb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402cb6:	bf1d      	ittte	ne
  402cb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402cbc:	ea94 0f0c 	teqne	r4, ip
  402cc0:	ea95 0f0c 	teqne	r5, ip
  402cc4:	f000 f8de 	bleq	402e84 <__aeabi_dmul+0x1dc>
  402cc8:	442c      	add	r4, r5
  402cca:	ea81 0603 	eor.w	r6, r1, r3
  402cce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402cd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402cd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402cda:	bf18      	it	ne
  402cdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402ce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402ce8:	d038      	beq.n	402d5c <__aeabi_dmul+0xb4>
  402cea:	fba0 ce02 	umull	ip, lr, r0, r2
  402cee:	f04f 0500 	mov.w	r5, #0
  402cf2:	fbe1 e502 	umlal	lr, r5, r1, r2
  402cf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402cfa:	fbe0 e503 	umlal	lr, r5, r0, r3
  402cfe:	f04f 0600 	mov.w	r6, #0
  402d02:	fbe1 5603 	umlal	r5, r6, r1, r3
  402d06:	f09c 0f00 	teq	ip, #0
  402d0a:	bf18      	it	ne
  402d0c:	f04e 0e01 	orrne.w	lr, lr, #1
  402d10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402d14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402d18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402d1c:	d204      	bcs.n	402d28 <__aeabi_dmul+0x80>
  402d1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402d22:	416d      	adcs	r5, r5
  402d24:	eb46 0606 	adc.w	r6, r6, r6
  402d28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402d2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402d30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402d34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402d38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402d3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402d40:	bf88      	it	hi
  402d42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402d46:	d81e      	bhi.n	402d86 <__aeabi_dmul+0xde>
  402d48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402d4c:	bf08      	it	eq
  402d4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402d52:	f150 0000 	adcs.w	r0, r0, #0
  402d56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402d5a:	bd70      	pop	{r4, r5, r6, pc}
  402d5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402d60:	ea46 0101 	orr.w	r1, r6, r1
  402d64:	ea40 0002 	orr.w	r0, r0, r2
  402d68:	ea81 0103 	eor.w	r1, r1, r3
  402d6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402d70:	bfc2      	ittt	gt
  402d72:	ebd4 050c 	rsbsgt	r5, r4, ip
  402d76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402d7a:	bd70      	popgt	{r4, r5, r6, pc}
  402d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402d80:	f04f 0e00 	mov.w	lr, #0
  402d84:	3c01      	subs	r4, #1
  402d86:	f300 80ab 	bgt.w	402ee0 <__aeabi_dmul+0x238>
  402d8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402d8e:	bfde      	ittt	le
  402d90:	2000      	movle	r0, #0
  402d92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402d96:	bd70      	pople	{r4, r5, r6, pc}
  402d98:	f1c4 0400 	rsb	r4, r4, #0
  402d9c:	3c20      	subs	r4, #32
  402d9e:	da35      	bge.n	402e0c <__aeabi_dmul+0x164>
  402da0:	340c      	adds	r4, #12
  402da2:	dc1b      	bgt.n	402ddc <__aeabi_dmul+0x134>
  402da4:	f104 0414 	add.w	r4, r4, #20
  402da8:	f1c4 0520 	rsb	r5, r4, #32
  402dac:	fa00 f305 	lsl.w	r3, r0, r5
  402db0:	fa20 f004 	lsr.w	r0, r0, r4
  402db4:	fa01 f205 	lsl.w	r2, r1, r5
  402db8:	ea40 0002 	orr.w	r0, r0, r2
  402dbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402dc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402dc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402dc8:	fa21 f604 	lsr.w	r6, r1, r4
  402dcc:	eb42 0106 	adc.w	r1, r2, r6
  402dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402dd4:	bf08      	it	eq
  402dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402dda:	bd70      	pop	{r4, r5, r6, pc}
  402ddc:	f1c4 040c 	rsb	r4, r4, #12
  402de0:	f1c4 0520 	rsb	r5, r4, #32
  402de4:	fa00 f304 	lsl.w	r3, r0, r4
  402de8:	fa20 f005 	lsr.w	r0, r0, r5
  402dec:	fa01 f204 	lsl.w	r2, r1, r4
  402df0:	ea40 0002 	orr.w	r0, r0, r2
  402df4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402df8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402dfc:	f141 0100 	adc.w	r1, r1, #0
  402e00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e04:	bf08      	it	eq
  402e06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402e0a:	bd70      	pop	{r4, r5, r6, pc}
  402e0c:	f1c4 0520 	rsb	r5, r4, #32
  402e10:	fa00 f205 	lsl.w	r2, r0, r5
  402e14:	ea4e 0e02 	orr.w	lr, lr, r2
  402e18:	fa20 f304 	lsr.w	r3, r0, r4
  402e1c:	fa01 f205 	lsl.w	r2, r1, r5
  402e20:	ea43 0302 	orr.w	r3, r3, r2
  402e24:	fa21 f004 	lsr.w	r0, r1, r4
  402e28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402e2c:	fa21 f204 	lsr.w	r2, r1, r4
  402e30:	ea20 0002 	bic.w	r0, r0, r2
  402e34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402e38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e3c:	bf08      	it	eq
  402e3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402e42:	bd70      	pop	{r4, r5, r6, pc}
  402e44:	f094 0f00 	teq	r4, #0
  402e48:	d10f      	bne.n	402e6a <__aeabi_dmul+0x1c2>
  402e4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402e4e:	0040      	lsls	r0, r0, #1
  402e50:	eb41 0101 	adc.w	r1, r1, r1
  402e54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402e58:	bf08      	it	eq
  402e5a:	3c01      	subeq	r4, #1
  402e5c:	d0f7      	beq.n	402e4e <__aeabi_dmul+0x1a6>
  402e5e:	ea41 0106 	orr.w	r1, r1, r6
  402e62:	f095 0f00 	teq	r5, #0
  402e66:	bf18      	it	ne
  402e68:	4770      	bxne	lr
  402e6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402e6e:	0052      	lsls	r2, r2, #1
  402e70:	eb43 0303 	adc.w	r3, r3, r3
  402e74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402e78:	bf08      	it	eq
  402e7a:	3d01      	subeq	r5, #1
  402e7c:	d0f7      	beq.n	402e6e <__aeabi_dmul+0x1c6>
  402e7e:	ea43 0306 	orr.w	r3, r3, r6
  402e82:	4770      	bx	lr
  402e84:	ea94 0f0c 	teq	r4, ip
  402e88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402e8c:	bf18      	it	ne
  402e8e:	ea95 0f0c 	teqne	r5, ip
  402e92:	d00c      	beq.n	402eae <__aeabi_dmul+0x206>
  402e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402e98:	bf18      	it	ne
  402e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402e9e:	d1d1      	bne.n	402e44 <__aeabi_dmul+0x19c>
  402ea0:	ea81 0103 	eor.w	r1, r1, r3
  402ea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ea8:	f04f 0000 	mov.w	r0, #0
  402eac:	bd70      	pop	{r4, r5, r6, pc}
  402eae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402eb2:	bf06      	itte	eq
  402eb4:	4610      	moveq	r0, r2
  402eb6:	4619      	moveq	r1, r3
  402eb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402ebc:	d019      	beq.n	402ef2 <__aeabi_dmul+0x24a>
  402ebe:	ea94 0f0c 	teq	r4, ip
  402ec2:	d102      	bne.n	402eca <__aeabi_dmul+0x222>
  402ec4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402ec8:	d113      	bne.n	402ef2 <__aeabi_dmul+0x24a>
  402eca:	ea95 0f0c 	teq	r5, ip
  402ece:	d105      	bne.n	402edc <__aeabi_dmul+0x234>
  402ed0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402ed4:	bf1c      	itt	ne
  402ed6:	4610      	movne	r0, r2
  402ed8:	4619      	movne	r1, r3
  402eda:	d10a      	bne.n	402ef2 <__aeabi_dmul+0x24a>
  402edc:	ea81 0103 	eor.w	r1, r1, r3
  402ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ee4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402ee8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402eec:	f04f 0000 	mov.w	r0, #0
  402ef0:	bd70      	pop	{r4, r5, r6, pc}
  402ef2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402ef6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402efa:	bd70      	pop	{r4, r5, r6, pc}

00402efc <__aeabi_ddiv>:
  402efc:	b570      	push	{r4, r5, r6, lr}
  402efe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402f02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402f0a:	bf1d      	ittte	ne
  402f0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402f10:	ea94 0f0c 	teqne	r4, ip
  402f14:	ea95 0f0c 	teqne	r5, ip
  402f18:	f000 f8a7 	bleq	40306a <__aeabi_ddiv+0x16e>
  402f1c:	eba4 0405 	sub.w	r4, r4, r5
  402f20:	ea81 0e03 	eor.w	lr, r1, r3
  402f24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402f28:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402f2c:	f000 8088 	beq.w	403040 <__aeabi_ddiv+0x144>
  402f30:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402f34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402f38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402f3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402f40:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402f44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402f48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402f4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402f50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402f54:	429d      	cmp	r5, r3
  402f56:	bf08      	it	eq
  402f58:	4296      	cmpeq	r6, r2
  402f5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402f5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402f62:	d202      	bcs.n	402f6a <__aeabi_ddiv+0x6e>
  402f64:	085b      	lsrs	r3, r3, #1
  402f66:	ea4f 0232 	mov.w	r2, r2, rrx
  402f6a:	1ab6      	subs	r6, r6, r2
  402f6c:	eb65 0503 	sbc.w	r5, r5, r3
  402f70:	085b      	lsrs	r3, r3, #1
  402f72:	ea4f 0232 	mov.w	r2, r2, rrx
  402f76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402f7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402f7e:	ebb6 0e02 	subs.w	lr, r6, r2
  402f82:	eb75 0e03 	sbcs.w	lr, r5, r3
  402f86:	bf22      	ittt	cs
  402f88:	1ab6      	subcs	r6, r6, r2
  402f8a:	4675      	movcs	r5, lr
  402f8c:	ea40 000c 	orrcs.w	r0, r0, ip
  402f90:	085b      	lsrs	r3, r3, #1
  402f92:	ea4f 0232 	mov.w	r2, r2, rrx
  402f96:	ebb6 0e02 	subs.w	lr, r6, r2
  402f9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402f9e:	bf22      	ittt	cs
  402fa0:	1ab6      	subcs	r6, r6, r2
  402fa2:	4675      	movcs	r5, lr
  402fa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402fa8:	085b      	lsrs	r3, r3, #1
  402faa:	ea4f 0232 	mov.w	r2, r2, rrx
  402fae:	ebb6 0e02 	subs.w	lr, r6, r2
  402fb2:	eb75 0e03 	sbcs.w	lr, r5, r3
  402fb6:	bf22      	ittt	cs
  402fb8:	1ab6      	subcs	r6, r6, r2
  402fba:	4675      	movcs	r5, lr
  402fbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402fc0:	085b      	lsrs	r3, r3, #1
  402fc2:	ea4f 0232 	mov.w	r2, r2, rrx
  402fc6:	ebb6 0e02 	subs.w	lr, r6, r2
  402fca:	eb75 0e03 	sbcs.w	lr, r5, r3
  402fce:	bf22      	ittt	cs
  402fd0:	1ab6      	subcs	r6, r6, r2
  402fd2:	4675      	movcs	r5, lr
  402fd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402fd8:	ea55 0e06 	orrs.w	lr, r5, r6
  402fdc:	d018      	beq.n	403010 <__aeabi_ddiv+0x114>
  402fde:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402fe2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402fe6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402fea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402fee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402ff2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402ff6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402ffa:	d1c0      	bne.n	402f7e <__aeabi_ddiv+0x82>
  402ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403000:	d10b      	bne.n	40301a <__aeabi_ddiv+0x11e>
  403002:	ea41 0100 	orr.w	r1, r1, r0
  403006:	f04f 0000 	mov.w	r0, #0
  40300a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40300e:	e7b6      	b.n	402f7e <__aeabi_ddiv+0x82>
  403010:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403014:	bf04      	itt	eq
  403016:	4301      	orreq	r1, r0
  403018:	2000      	moveq	r0, #0
  40301a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40301e:	bf88      	it	hi
  403020:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403024:	f63f aeaf 	bhi.w	402d86 <__aeabi_dmul+0xde>
  403028:	ebb5 0c03 	subs.w	ip, r5, r3
  40302c:	bf04      	itt	eq
  40302e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403032:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403036:	f150 0000 	adcs.w	r0, r0, #0
  40303a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40303e:	bd70      	pop	{r4, r5, r6, pc}
  403040:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403044:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403048:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40304c:	bfc2      	ittt	gt
  40304e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403052:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403056:	bd70      	popgt	{r4, r5, r6, pc}
  403058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40305c:	f04f 0e00 	mov.w	lr, #0
  403060:	3c01      	subs	r4, #1
  403062:	e690      	b.n	402d86 <__aeabi_dmul+0xde>
  403064:	ea45 0e06 	orr.w	lr, r5, r6
  403068:	e68d      	b.n	402d86 <__aeabi_dmul+0xde>
  40306a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40306e:	ea94 0f0c 	teq	r4, ip
  403072:	bf08      	it	eq
  403074:	ea95 0f0c 	teqeq	r5, ip
  403078:	f43f af3b 	beq.w	402ef2 <__aeabi_dmul+0x24a>
  40307c:	ea94 0f0c 	teq	r4, ip
  403080:	d10a      	bne.n	403098 <__aeabi_ddiv+0x19c>
  403082:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403086:	f47f af34 	bne.w	402ef2 <__aeabi_dmul+0x24a>
  40308a:	ea95 0f0c 	teq	r5, ip
  40308e:	f47f af25 	bne.w	402edc <__aeabi_dmul+0x234>
  403092:	4610      	mov	r0, r2
  403094:	4619      	mov	r1, r3
  403096:	e72c      	b.n	402ef2 <__aeabi_dmul+0x24a>
  403098:	ea95 0f0c 	teq	r5, ip
  40309c:	d106      	bne.n	4030ac <__aeabi_ddiv+0x1b0>
  40309e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4030a2:	f43f aefd 	beq.w	402ea0 <__aeabi_dmul+0x1f8>
  4030a6:	4610      	mov	r0, r2
  4030a8:	4619      	mov	r1, r3
  4030aa:	e722      	b.n	402ef2 <__aeabi_dmul+0x24a>
  4030ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030b0:	bf18      	it	ne
  4030b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030b6:	f47f aec5 	bne.w	402e44 <__aeabi_dmul+0x19c>
  4030ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4030be:	f47f af0d 	bne.w	402edc <__aeabi_dmul+0x234>
  4030c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4030c6:	f47f aeeb 	bne.w	402ea0 <__aeabi_dmul+0x1f8>
  4030ca:	e712      	b.n	402ef2 <__aeabi_dmul+0x24a>

004030cc <__gedf2>:
  4030cc:	f04f 3cff 	mov.w	ip, #4294967295
  4030d0:	e006      	b.n	4030e0 <__cmpdf2+0x4>
  4030d2:	bf00      	nop

004030d4 <__ledf2>:
  4030d4:	f04f 0c01 	mov.w	ip, #1
  4030d8:	e002      	b.n	4030e0 <__cmpdf2+0x4>
  4030da:	bf00      	nop

004030dc <__cmpdf2>:
  4030dc:	f04f 0c01 	mov.w	ip, #1
  4030e0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4030e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4030e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4030ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4030f0:	bf18      	it	ne
  4030f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4030f6:	d01b      	beq.n	403130 <__cmpdf2+0x54>
  4030f8:	b001      	add	sp, #4
  4030fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4030fe:	bf0c      	ite	eq
  403100:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403104:	ea91 0f03 	teqne	r1, r3
  403108:	bf02      	ittt	eq
  40310a:	ea90 0f02 	teqeq	r0, r2
  40310e:	2000      	moveq	r0, #0
  403110:	4770      	bxeq	lr
  403112:	f110 0f00 	cmn.w	r0, #0
  403116:	ea91 0f03 	teq	r1, r3
  40311a:	bf58      	it	pl
  40311c:	4299      	cmppl	r1, r3
  40311e:	bf08      	it	eq
  403120:	4290      	cmpeq	r0, r2
  403122:	bf2c      	ite	cs
  403124:	17d8      	asrcs	r0, r3, #31
  403126:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40312a:	f040 0001 	orr.w	r0, r0, #1
  40312e:	4770      	bx	lr
  403130:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403138:	d102      	bne.n	403140 <__cmpdf2+0x64>
  40313a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40313e:	d107      	bne.n	403150 <__cmpdf2+0x74>
  403140:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403144:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403148:	d1d6      	bne.n	4030f8 <__cmpdf2+0x1c>
  40314a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40314e:	d0d3      	beq.n	4030f8 <__cmpdf2+0x1c>
  403150:	f85d 0b04 	ldr.w	r0, [sp], #4
  403154:	4770      	bx	lr
  403156:	bf00      	nop

00403158 <__aeabi_cdrcmple>:
  403158:	4684      	mov	ip, r0
  40315a:	4610      	mov	r0, r2
  40315c:	4662      	mov	r2, ip
  40315e:	468c      	mov	ip, r1
  403160:	4619      	mov	r1, r3
  403162:	4663      	mov	r3, ip
  403164:	e000      	b.n	403168 <__aeabi_cdcmpeq>
  403166:	bf00      	nop

00403168 <__aeabi_cdcmpeq>:
  403168:	b501      	push	{r0, lr}
  40316a:	f7ff ffb7 	bl	4030dc <__cmpdf2>
  40316e:	2800      	cmp	r0, #0
  403170:	bf48      	it	mi
  403172:	f110 0f00 	cmnmi.w	r0, #0
  403176:	bd01      	pop	{r0, pc}

00403178 <__aeabi_dcmpeq>:
  403178:	f84d ed08 	str.w	lr, [sp, #-8]!
  40317c:	f7ff fff4 	bl	403168 <__aeabi_cdcmpeq>
  403180:	bf0c      	ite	eq
  403182:	2001      	moveq	r0, #1
  403184:	2000      	movne	r0, #0
  403186:	f85d fb08 	ldr.w	pc, [sp], #8
  40318a:	bf00      	nop

0040318c <__aeabi_dcmplt>:
  40318c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403190:	f7ff ffea 	bl	403168 <__aeabi_cdcmpeq>
  403194:	bf34      	ite	cc
  403196:	2001      	movcc	r0, #1
  403198:	2000      	movcs	r0, #0
  40319a:	f85d fb08 	ldr.w	pc, [sp], #8
  40319e:	bf00      	nop

004031a0 <__aeabi_dcmple>:
  4031a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4031a4:	f7ff ffe0 	bl	403168 <__aeabi_cdcmpeq>
  4031a8:	bf94      	ite	ls
  4031aa:	2001      	movls	r0, #1
  4031ac:	2000      	movhi	r0, #0
  4031ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4031b2:	bf00      	nop

004031b4 <__aeabi_dcmpge>:
  4031b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4031b8:	f7ff ffce 	bl	403158 <__aeabi_cdrcmple>
  4031bc:	bf94      	ite	ls
  4031be:	2001      	movls	r0, #1
  4031c0:	2000      	movhi	r0, #0
  4031c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4031c6:	bf00      	nop

004031c8 <__aeabi_dcmpgt>:
  4031c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4031cc:	f7ff ffc4 	bl	403158 <__aeabi_cdrcmple>
  4031d0:	bf34      	ite	cc
  4031d2:	2001      	movcc	r0, #1
  4031d4:	2000      	movcs	r0, #0
  4031d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4031da:	bf00      	nop

004031dc <__aeabi_d2f>:
  4031dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4031e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4031e4:	bf24      	itt	cs
  4031e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4031ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4031ee:	d90d      	bls.n	40320c <__aeabi_d2f+0x30>
  4031f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4031f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4031f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4031fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403200:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403204:	bf08      	it	eq
  403206:	f020 0001 	biceq.w	r0, r0, #1
  40320a:	4770      	bx	lr
  40320c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403210:	d121      	bne.n	403256 <__aeabi_d2f+0x7a>
  403212:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403216:	bfbc      	itt	lt
  403218:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40321c:	4770      	bxlt	lr
  40321e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403222:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403226:	f1c2 0218 	rsb	r2, r2, #24
  40322a:	f1c2 0c20 	rsb	ip, r2, #32
  40322e:	fa10 f30c 	lsls.w	r3, r0, ip
  403232:	fa20 f002 	lsr.w	r0, r0, r2
  403236:	bf18      	it	ne
  403238:	f040 0001 	orrne.w	r0, r0, #1
  40323c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403240:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403244:	fa03 fc0c 	lsl.w	ip, r3, ip
  403248:	ea40 000c 	orr.w	r0, r0, ip
  40324c:	fa23 f302 	lsr.w	r3, r3, r2
  403250:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403254:	e7cc      	b.n	4031f0 <__aeabi_d2f+0x14>
  403256:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40325a:	d107      	bne.n	40326c <__aeabi_d2f+0x90>
  40325c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403260:	bf1e      	ittt	ne
  403262:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403266:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40326a:	4770      	bxne	lr
  40326c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403270:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403278:	4770      	bx	lr
  40327a:	bf00      	nop

0040327c <__libc_init_array>:
  40327c:	b570      	push	{r4, r5, r6, lr}
  40327e:	4e0d      	ldr	r6, [pc, #52]	; (4032b4 <__libc_init_array+0x38>)
  403280:	4c0d      	ldr	r4, [pc, #52]	; (4032b8 <__libc_init_array+0x3c>)
  403282:	1ba4      	subs	r4, r4, r6
  403284:	10a4      	asrs	r4, r4, #2
  403286:	2500      	movs	r5, #0
  403288:	42a5      	cmp	r5, r4
  40328a:	d109      	bne.n	4032a0 <__libc_init_array+0x24>
  40328c:	4e0b      	ldr	r6, [pc, #44]	; (4032bc <__libc_init_array+0x40>)
  40328e:	4c0c      	ldr	r4, [pc, #48]	; (4032c0 <__libc_init_array+0x44>)
  403290:	f000 f9ae 	bl	4035f0 <_init>
  403294:	1ba4      	subs	r4, r4, r6
  403296:	10a4      	asrs	r4, r4, #2
  403298:	2500      	movs	r5, #0
  40329a:	42a5      	cmp	r5, r4
  40329c:	d105      	bne.n	4032aa <__libc_init_array+0x2e>
  40329e:	bd70      	pop	{r4, r5, r6, pc}
  4032a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032a4:	4798      	blx	r3
  4032a6:	3501      	adds	r5, #1
  4032a8:	e7ee      	b.n	403288 <__libc_init_array+0xc>
  4032aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032ae:	4798      	blx	r3
  4032b0:	3501      	adds	r5, #1
  4032b2:	e7f2      	b.n	40329a <__libc_init_array+0x1e>
  4032b4:	004035fc 	.word	0x004035fc
  4032b8:	004035fc 	.word	0x004035fc
  4032bc:	004035fc 	.word	0x004035fc
  4032c0:	00403600 	.word	0x00403600

004032c4 <memset>:
  4032c4:	4402      	add	r2, r0
  4032c6:	4603      	mov	r3, r0
  4032c8:	4293      	cmp	r3, r2
  4032ca:	d100      	bne.n	4032ce <memset+0xa>
  4032cc:	4770      	bx	lr
  4032ce:	f803 1b01 	strb.w	r1, [r3], #1
  4032d2:	e7f9      	b.n	4032c8 <memset+0x4>
  4032d4:	682f2e2e 	.word	0x682f2e2e
  4032d8:	692f6c61 	.word	0x692f6c61
  4032dc:	756c636e 	.word	0x756c636e
  4032e0:	682f6564 	.word	0x682f6564
  4032e4:	775f6c61 	.word	0x775f6c61
  4032e8:	682e7464 	.word	0x682e7464
  4032ec:	00000000 	.word	0x00000000
  4032f0:	682f2e2e 	.word	0x682f2e2e
  4032f4:	732f6c61 	.word	0x732f6c61
  4032f8:	682f6372 	.word	0x682f6372
  4032fc:	615f6c61 	.word	0x615f6c61
  403300:	735f6364 	.word	0x735f6364
  403304:	2e636e79 	.word	0x2e636e79
  403308:	00000063 	.word	0x00000063
  40330c:	682f2e2e 	.word	0x682f2e2e
  403310:	732f6c61 	.word	0x732f6c61
  403314:	682f6372 	.word	0x682f6372
  403318:	695f6c61 	.word	0x695f6c61
  40331c:	6d5f6332 	.word	0x6d5f6332
  403320:	6e79735f 	.word	0x6e79735f
  403324:	00632e63 	.word	0x00632e63
  403328:	682f2e2e 	.word	0x682f2e2e
  40332c:	732f6c61 	.word	0x732f6c61
  403330:	682f6372 	.word	0x682f6372
  403334:	695f6c61 	.word	0x695f6c61
  403338:	00632e6f 	.word	0x00632e6f
  40333c:	682f2e2e 	.word	0x682f2e2e
  403340:	732f6c61 	.word	0x732f6c61
  403344:	682f6372 	.word	0x682f6372
  403348:	705f6c61 	.word	0x705f6c61
  40334c:	632e6d77 	.word	0x632e6d77
  403350:	00000000 	.word	0x00000000
  403354:	682f2e2e 	.word	0x682f2e2e
  403358:	732f6c61 	.word	0x732f6c61
  40335c:	682f6372 	.word	0x682f6372
  403360:	735f6c61 	.word	0x735f6c61
  403364:	6d5f6970 	.word	0x6d5f6970
  403368:	6e79735f 	.word	0x6e79735f
  40336c:	00632e63 	.word	0x00632e63
  403370:	682f2e2e 	.word	0x682f2e2e
  403374:	732f6c61 	.word	0x732f6c61
  403378:	682f6372 	.word	0x682f6372
  40337c:	745f6c61 	.word	0x745f6c61
  403380:	72656d69 	.word	0x72656d69
  403384:	0000632e 	.word	0x0000632e
  403388:	682f2e2e 	.word	0x682f2e2e
  40338c:	752f6c61 	.word	0x752f6c61
  403390:	736c6974 	.word	0x736c6974
  403394:	6372732f 	.word	0x6372732f
  403398:	6974752f 	.word	0x6974752f
  40339c:	6c5f736c 	.word	0x6c5f736c
  4033a0:	2e747369 	.word	0x2e747369
  4033a4:	00000063 	.word	0x00000063

004033a8 <_afecs>:
  4033a8:	00000000 2f843100 03000000 ffffffff     .....1./........
  4033b8:	0000ffff 00000000 00000000 00000000     ................
  4033c8:	0000010c 00000000 00000000 00000000     ................
  4033d8:	00000000 00000200 00000200 00000200     ................
  4033e8:	00000200 00000200 00000200 00000200     ................
  4033f8:	00000200 00000200 00000200 00000200     ................
  403408:	00000200 682f2e2e 612f6c70 2f636566     ....../hpl/afec/
  403418:	5f6c7068 63656661 0000632e              hpl_afec.c..

00403424 <_ext_irq>:
  403424:	00000000 03c08000 03c08020 03c08020     ........ ... ...
  403434:	00000000 03c00000 00008020 00000001     ........ .......
  403444:	00000002 000000f2 000000f2 00000000     ................
  403454:	000000f0 00000002                       ........

0040345c <_pio_irq_n>:
  40345c:	00100b0a 682f2e2e 702f6c70 682f6f69     ....../hpl/pio/h
  40346c:	705f6c70 655f6f69 632e7478 00000000     pl_pio_ext.c....

0040347c <_pwms>:
  40347c:	40020000 0000001f 00010001 00000001     ...@............
  40348c:	00000001 000000ff 00000000 00000004     ................
	...
  4034a8:	00000004 00403504 00000000 204000dc     .....5@.......@ 
  4034b8:	4005c000 0000003c 00010001 00000001     ...@<...........
  4034c8:	00000001 000000ff 00000000 00000004     ................
	...
  4034e4:	00000001 004034f4 00000000 204000d0     .....4@.......@ 

004034f4 <_ch_cfg1>:
  4034f4:	00000000 00000208 00000400 00000200     ................

00403504 <_ch_cfg0>:
  403504:	00000000 00000208 00000400 00000200     ................
  403514:	00000001 00000208 00000400 00000200     ................
  403524:	00000002 00000208 00000400 00000200     ................
  403534:	00000003 00000208 00000400 00000200     ................
  403544:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  403554:	632e6d77 00000000                       wm.c....

0040355c <spi_regs>:
  40355c:	00000000 80000000 00000001 0496fa02     ................
  40356c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  40357c:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  40358c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

0040359c <_i2cm_sync_cfgs>:
  40359c:	40018000 00000020 00000000 00000000     ...@ ...........
  4035ac:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  4035bc:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  4035cc:	00000000 682f2e2e 772f6c70 682f7464     ....../hpl/wdt/h
  4035dc:	775f6c70 632e7464 00000000 bbccddee     pl_wdt.c........
  4035ec:	000000aa                                ....

004035f0 <_init>:
  4035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035f2:	bf00      	nop
  4035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4035f6:	bc08      	pop	{r3}
  4035f8:	469e      	mov	lr, r3
  4035fa:	4770      	bx	lr

004035fc <__init_array_start>:
  4035fc:	0040017d 	.word	0x0040017d

00403600 <_fini>:
  403600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403602:	bf00      	nop
  403604:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403606:	bc08      	pop	{r3}
  403608:	469e      	mov	lr, r3
  40360a:	4770      	bx	lr

0040360c <__fini_array_start>:
  40360c:	00400159 	.word	0x00400159
